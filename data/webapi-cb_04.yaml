- en: Chapter 4\. Network Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 网络请求
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: You’d have a tough time finding a web application today that doesn’t send any
    network requests. Since the dawn of Web 2.0 and the novel approach known as Ajax
    (Asynchronous JavaScript and XML), web apps have been sending asynchronous requests
    to get new data without reloading the entire page. The XMLHttpRequest API started
    a new era of interactive JavaScript apps. Despite the name, XMLHttpRequest (or
    XHR, as it is sometimes known) can also work with JSON and form data payloads.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，几乎找不到不发送任何网络请求的Web应用程序。自Web 2.0以来，通过Ajax（异步JavaScript和XML）的新方法，Web应用程序一直在发送异步请求以获取新数据，而无需重新加载整个页面。XMLHttpRequest
    API开启了交互式JavaScript应用程序的新时代。尽管名称如此，XMLHttpRequest（有时称为XHR）也可以处理JSON和表单数据负载。
- en: XMLHttpRequest was a game changer, but the API can be painful to work with.
    Eventually, third-party libraries such as Axios and jQuery added more streamlined
    APIs that wrapped the core XHR API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: XMLHttpRequest改变了游戏规则，但其API使用起来可能很痛苦。最终，第三方库如Axios和jQuery添加了更简化的API来包装核心XHR
    API。
- en: In 2015, a newer `Promise`-based API called Fetch became a new standard, and
    browsers gradually started adding support for it. Today, Fetch is the standard
    way to make asynchronous requests from your web apps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，基于`Promise`的新API Fetch成为新标准，并逐渐获得浏览器支持。今天，Fetch是从Web应用程序发起异步请求的标准方式。
- en: 'This chapter explores XHR and Fetch as well as some other APIs for network
    communication:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了XHR和Fetch以及一些其他用于网络通信的API：
- en: Beacons
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Beacons
- en: A simple one-way POST request ideal for sending analytics data
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的单向POST请求，非常适合发送分析数据。
- en: Server-sent events
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器发送事件
- en: A one-way persistent connection with a server to receive real-time events
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用于接收实时事件的单向持久连接服务器
- en: WebSockets
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets
- en: A two-way persistent connection for bidirectional communication
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用于双向持久连接的服务器通信
- en: Sending a Request with XMLHttpRequest
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XMLHttpRequest发送请求
- en: Problem
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to send a GET request to a public API, and you want to support older
    browsers that don’t implement the Fetch API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您想向公共API发送GET请求，并支持不实现Fetch API的旧版浏览器。
- en: Solution
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the XMLHttpRequest API. XMLHttpRequest is an asynchronous, event-based
    API for making network requests. The general usage of XMLHttpRequest is this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XMLHttpRequest API。XMLHttpRequest是用于发起网络请求的异步、事件驱动API。XMLHttpRequest的一般用法是这样的：
- en: Create a new `XMLHttpRequest` object.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`XMLHttpRequest`对象。
- en: Add a listener for the `load` event, which receives the response data.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`load`事件添加监听器，接收响应数据。
- en: Call `open` on the request, passing the HTTP method and URL.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求上调用`open`，传递HTTP方法和URL。
- en: Finally, call `send` on the request. This triggers the HTTP request to be sent.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在请求上调用`send`。这会触发发送HTTP请求。
- en: '[Example 4-1](#code_xhr) shows a simple example of how to work with JSON data
    using an XHR.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-1](#code_xhr) 展示了如何使用XHR处理JSON数据的简单示例。'
- en: Example 4-1\. Making a GET request with XMLHttpRequest
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-1\. 使用XMLHttpRequest进行GET请求
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The XMLHttpRequest API is an event-based API. When the response is received,
    a `load` event is triggered. In [Example 4-1](#code_xhr), the `load` event handler
    passes the raw response text to `JSON.parse`. It expects the response body to
    be JSON and uses `JSON.parse` to turn the JSON string into an object.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: XMLHttpRequest API是一个事件驱动的API。当接收到响应时，会触发`load`事件。在[示例 4-1](#code_xhr) 中，`load`事件处理程序将原始响应文本传递给`JSON.parse`。它期望响应体是JSON，并使用`JSON.parse`将JSON字符串转换为对象。
- en: If an error occurs while loading the data, the `error` event is triggered. This
    handles connection or network errors, but an HTTP status code that’s considered
    an “error,” like 404 or 500, does *not* trigger this event. Instead, it also triggers
    the `load` event.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在加载数据时发生错误，将触发`error`事件。这处理连接或网络错误，但被视为“错误”的HTTP状态码（如404或500）不会触发此事件。而是也触发`load`事件。
- en: To protect against such errors, you need to examine the response’s `status`
    property to determine if such an error situation exists. This can be accessed
    by referencing `event.target.status`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止此类错误，您需要检查响应的`status`属性，以确定是否存在此类错误情况。可以通过引用`event.target.status`来访问它。
- en: Fetch has been supported for a long time now, so unless you have to support
    really old browsers you most likely won’t need to use XMLHttpRequest. Most—if
    not all—of the time, you’ll be using the Fetch API.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch已经得到长时间的支持，所以除非必须支持非常老旧的浏览器，否则大多数时候您将使用Fetch API。
- en: Sending a GET Request with the Fetch API
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Fetch API 发送 GET 请求
- en: Problem
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to send a GET request to a public API using a modern browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要使用现代浏览器向公共 API 发送 GET 请求。
- en: Solution
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the Fetch API. Fetch is a newer request API that uses `Promise`s. It’s very
    flexible and can send all kinds of data, but [Example 4-2](#fetchPromise) sends
    a basic GET request to an API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Fetch API。Fetch 是一个使用 `Promise` 的较新请求 API。它非常灵活，可以发送各种数据，但是 [Example 4-2](#fetchPromise)
    发送一个基本的 GET 请求到 API。
- en: Example 4-2\. Sending a GET request with the Fetch API
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-2\. 使用 Fetch API 发送 GET 请求
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The Fetch API is more concise. It returns a `Promise` that resolves to an object
    representing the HTTP response. The `response` object contains data such as the
    status code, headers, and body.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API 更加简洁。它返回一个`Promise`，解析为表示 HTTP 响应的对象。`response` 对象包含诸如状态码、头部和正文等数据。
- en: To get the JSON response body, you need to call the response’s `json` method.
    This method reads the body from the stream and returns a `Promise` that resolves
    to the JSON body parsed as an object. If the response body is not valid JSON,
    the `Promise` is rejected.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 JSON 响应正文，你需要调用响应的 `json` 方法。该方法从流中读取正文，并返回解析为对象的 JSON 正文的 `Promise`。如果响应正文不是有效的
    JSON，则 `Promise` 将被拒绝。
- en: The response also has methods to read the body in other formats such as `FormData`
    or a plain text string.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 响应还有其他方法以其他格式读取正文，例如 `FormData` 或纯文本字符串。
- en: Because Fetch works with `Promise`s, you can also use `await`, as shown in [Example 4-3](#fetchAsync).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Fetch 使用 `Promise`，你也可以使用 `await`，如 [Example 4-3](#fetchAsync) 所示。
- en: Example 4-3\. Using Fetch with `async`/`await`
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-3\. 使用 Fetch 和 `async`/`await`
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that before using `await` in a function, that function must have the
    `async` keyword.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在函数中使用 `await` 之前，该函数必须带有 `async` 关键字。
- en: Sending a POST Request with the Fetch API
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Fetch API 发送 POST 请求
- en: Problem
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to send a POST request to an API that expects a JSON request body.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要向期望 JSON 请求正文的 API 发送 POST 请求。
- en: Solution
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the Fetch API, specifying the method (POST), and the JSON body and content
    type (see [Example 4-4](#fetchJson)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Fetch API，指定方法（POST）、JSON 正文和内容类型（参见 [Example 4-4](#fetchJson)）。
- en: Example 4-4\. Sending JSON payload via POST with the Fetch API
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-4\. 使用 Fetch API 发送 JSON 负载的 POST 请求
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '[Example 4-4](#fetchJson) sends some JSON data in a `POST` request. Calling
    `JSON.stringify` on the user object turns it into a JSON *string*, which is required
    to send it as the body with `fetch`. You also need to set the `Content-Type` header
    so the server knows how to interpret the body.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 4-4](#fetchJson) 发送一些 JSON 数据的 `POST` 请求。调用 `JSON.stringify` 将用户对象转换为
    JSON *字符串*，这是将其作为正文与 `fetch` 一起发送所需的。你还需要设置 `Content-Type` 头部，以便服务器知道如何解释正文。'
- en: Fetch also allows you to send other content types as the body. [Example 4-5](#example4-5)
    shows how you would send a `POST` request with some form data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch 还允许你发送其他内容类型作为正文。[Example 4-5](#example4-5) 展示了如何使用表单数据发送 `POST` 请求。
- en: Example 4-5\. Sending form data in a POST request
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-5\. 发送表单数据的 POST 请求
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Uploading a File with the Fetch API
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Fetch API 上传文件
- en: Problem
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to upload file data with a POST request, using the Fetch API.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要使用 Fetch API 发送文件数据的 POST 请求。
- en: Solution
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use an `<input type="file">` element, and send the file content as the request
    body (see [Example 4-6](#example4-6)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<input type="file">` 元素，并将文件内容作为请求正文发送（参见 [Example 4-6](#example4-6)）。
- en: Example 4-6\. Sending file data with the Fetch API
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-6\. 使用 Fetch API 发送文件数据
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: There aren’t many steps involved to upload a file using modern browser APIs.
    The `<input type="file">` provides the file data through the FormData API and
    is included in the body of the POST request. The browser takes care of the rest.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用现代浏览器 API 上传文件并不复杂。`<input type="file">` 通过 FormData API 提供文件数据，并包含在 POST
    请求的正文中。浏览器会处理剩余部分。
- en: Sending a Beacon
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送信标
- en: Problem
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to send a quick request without waiting for a response, for example,
    to send analytics data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要发送一个快速请求，而不必等待响应，例如发送分析数据。
- en: Solution
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the Beacon API to send data in a POST request. A regular POST request with
    the Fetch API may not complete in time before the page unloads. Using a beacon
    is more likely to succeed (see [Example 4-7](#example4-7)). The browser doesn’t
    wait for a response, and the request is more likely to succeed when sent as the
    user is leaving your site.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Beacon API以POST请求发送数据。使用Fetch API的常规POST请求可能在页面卸载之前无法完成。使用beacon更有可能成功（参见[示例 4-7](#example4-7)）。浏览器不等待响应，并且在用户离开您的站点时发送请求更有可能成功。
- en: Example 4-7\. Sending a beacon
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-7\. 发送beacon
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: With an `XMLHttpRequest` or `fetch` call, the browser waits for the response
    and returns it (with an event or `Promise`). In general, you don’t need to wait
    for the response for one-way requests, such as sending analytics data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XMLHttpRequest或fetch调用时，浏览器等待响应并将其返回（带有事件或Promise）。通常，您不需要等待响应来处理单向请求，例如发送分析数据。
- en: Instead of a `Promise`, `navigator.sendBeacon` returns a boolean value that
    indicates if the send operation was scheduled. There are no further events or
    notifications.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是`Promise`，`navigator.sendBeacon`返回一个布尔值，指示是否已安排发送操作。没有进一步的事件或通知。
- en: '`navigator.sendBeacon` always sends a `POST` request. If you want to send multiple
    sets of analytics data, such as a collection of UI interactions, you can collect
    them in an array as the user interacts with your page, then send the array as
    the `POST` body with the beacon.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigator.sendBeacon`总是发送一个`POST`请求。如果您想发送多组分析数据，例如用户与页面交互的集合，请在用户与页面交互时将它们收集到数组中，然后将数组作为`POST`主体与beacon一起发送。'
- en: Listening for Remote Events with Server-Sent Events
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Server-Sent Events监听远程事件
- en: Problem
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to receive notifications from your backend server without repeated
    polling.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从后端服务器接收通知，而无需重复轮询。
- en: Solution
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the EventSource API to receive server-sent events (SSE).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EventSource API接收服务器推送的事件（SSE）。
- en: To start listening for SSE, create a new instance of `EventSource`, passing
    the URL as the first argument (see [Example 4-8](#example4-8)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始监听SSE，请创建`EventSource`的新实例，并将URL作为第一个参数传递（参见[示例 4-8](#example4-8)）。
- en: Example 4-8\. Opening an SSE connection
  id: totrans-83
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-8\. 打开SSE连接
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: An `EventSource` must connect to a special HTTP endpoint that leaves the connection
    open with a `Content-Type` header of `text/event-stream`. Whenever an event occurs,
    the server can send a new message across the open connection.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventSource`必须连接到一个特殊的HTTP端点，该端点使用`text/event-stream`的`Content-Type`头保持连接开放。每当事件发生时，服务器可以通过打开的连接发送新消息。'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As pointed out by [MDN](https://oreil.ly/MliFN), It’s highly recommended to
    use HTTP/2 with SSE. Otherwise, browsers impose a strict limit on the number of
    `EventSource` connections per domain. In this case, there can only be up to six
    connections.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[MDN](https://oreil.ly/MliFN)的指出，强烈建议使用HTTP/2与SSE。否则，浏览器对每个域名的`EventSource`连接数量施加严格限制。在这种情况下，最多只能有六个连接。
- en: This limit is not per tab; it is imposed across all tabs in the browser on a
    given domain.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此限制不是每个标签页的限制；它是在给定域中所有标签页上强加的。
- en: 'When `EventSource` receives an event over a persistent connection, it is plain
    text. You can access the event text from the received event object’s `data` property.
    Here’s an example of an event of type `notice`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当`EventSource`通过持久连接接收事件时，它是纯文本。您可以从接收到的事件对象的`data`属性访问事件文本。以下是`notice`类型事件的示例：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To listen for this event, call `addEventListener('notice')` on the `EventSource`
    object. The event object has a `data` property, whose value is whatever string
    value is prefixed with `data:` in the event.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要监听此事件，请在`EventSource`对象上调用`addEventListener('notice')`。事件对象有一个`data`属性，其值是事件中以`data:`前缀开头的任意字符串值。
- en: If an event does not have an event type, you can listen for the generic `message`
    event to receive it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件没有事件类型，您可以监听通用的`message`事件来接收它。
- en: Exchanging Data in Real Time with WebSockets
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WebSocket实时交换数据
- en: Problem
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to send and receive data in real time without having to repeatedly
    poll the server with Fetch requests.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望实时发送和接收数据，而无需反复使用Fetch请求轮询服务器。
- en: Solution
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the WebSocket API to open a persistent connection to your backend server
    (see [Example 4-9](#example4-9)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WebSocket API打开与后端服务器的持久连接（参见[示例 4-9](#example4-9)）。
- en: Example 4-9\. Creating a WebSocket connection
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-9\. 创建WebSocket连接
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To use WebSockets, your server must have a WebSocket-enabled endpoint you can
    connect to. MDN has a nice [deep dive on creating a WebSocket server](https://oreil.ly/fzX67).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 WebSocket，您的服务器必须具有可以连接的 WebSocket 启用的端点。MDN有一个关于创建 WebSocket 服务器的[深入分析](https://oreil.ly/fzX67)。
- en: Once the socket fires the `open` event, you can begin sending messages, as shown
    in [Example 4-10](#example4-10).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦套接字触发 `open` 事件，您可以开始发送消息，如[示例 4-10](#example4-10)所示。
- en: Example 4-10\. Sending WebSocket messages
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-10\. 发送 WebSocket 消息
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A WebSocket connection is a bidirectional connection. Received data from the
    server fires a `message` event. You can handle these as needed or even send a
    response (see [Example 4-11](#example4-11)).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket 连接是双向连接。从服务器接收的数据触发 `message` 事件。您可以根据需要处理这些数据，甚至发送响应（参见[示例 4-11](#example4-11)）。
- en: Example 4-11\. Responding to a WebSocket message
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-11\. 响应 WebSocket 消息
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, to clean up when you’re done, you can close the connection by calling
    `close` on the WebSocket object.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，完成时，您可以通过在 WebSocket 对象上调用 `close` 来关闭连接。
- en: Discussion
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: WebSockets are well suited for apps requiring real-time capabilities such as
    a chat system or event monitoring. WebSocket endpoints have a `ws://` or `wss://`
    scheme. These are analogous to `http://` and `https://`—one is insecure and one
    uses encryption.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket 很适合需要实时能力的应用程序，例如聊天系统或事件监控。WebSocket 端点具有 `ws://` 或 `wss://` 方案。这与
    `http://` 和 `https://` 类似 —— 一个不安全，一个使用加密。
- en: 'To initiate a WebSocket connection, the browser first sends a `GET` request
    to the WebSocket endpoint. The request payload for the URL `wss://example.com/websocket`
    looks like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 WebSocket 连接，浏览器首先向 WebSocket 端点发送 `GET` 请求。URL `wss://example.com/websocket`
    的请求有效负载如下所示：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This initiates a WebSocket handshake. If it’s successful, the server responds
    with a status code of 101 (Switching Protocols):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这启动了 WebSocket 握手。如果成功，服务器将以状态码 101（协议切换）响应：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The WebSocket protocol specifies an algorithm to generate a `Sec-Websocket-Accept`
    header based on the request’s `Sec-WebSocket-Key`. The client verifies this value,
    and at that point the two-way WebSocket connection is active and the socket fires
    the `open` event.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket 协议指定了一种算法，根据请求的 `Sec-WebSocket-Key` 生成 `Sec-Websocket-Accept` 头。客户端验证此值后，双向
    WebSocket 连接激活，套接字触发 `open` 事件。
- en: Once the connection is open, you can listen for messages with the `message`
    event and send messages by calling `send` on the socket object. Later, you can
    terminate the WebSocket session by calling `close` on the socket object.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 连接打开后，您可以通过在套接字对象上调用 `send` 来监听消息并发送消息。稍后，您可以通过在套接字对象上调用 `close` 来终止 WebSocket
    会话。
