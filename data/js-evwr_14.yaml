- en: Chapter 13\. Styling an Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章\. 应用程序的样式化
- en: In his 1978 track “Lip Service,” Elvis Costello sneers the line “don’t act like
    you’re above me, just look at your shoes.” This kiss-off implies that the narrator
    can detect an attempt at elevated social status simply by seeing someone’s shoes,
    no matter how finely pressed their suit or how elegant their dress. For better
    or worse, style is a major part of human culture, and we’re all accustomed to
    picking up on these types of social cues. Archaeologists have even found that
    humans in the Upper Paleolithic era created necklaces and bracelets from bones,
    teeth, berries, and stone. Our clothes not only serve the functional purpose of
    protecting our bodies from the elements, but may also communicate to others information
    about our culture, social status, interests, and so much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在他1978年的歌曲《Lip Service》中，埃尔维斯·科斯特罗嘲笑地唱道：“不要表现得你高人一等，看看你的鞋子。” 这句告别语暗示着叙述者可以通过看到某人的鞋子来察觉到他们试图提升社会地位的尝试，无论他们的西装多么整洁，他们的礼服多么优雅。不管是好是坏，风格是人类文化的重要组成部分，我们都习惯于捕捉这些社交线索。考古学家甚至发现，上旧石器时代的人类用骨头、牙齿、浆果和石头制作了项链和手镯。我们的衣服不仅仅是保护我们免受自然元素侵害的功能目的，还可能向他人传达有关我们文化、社会地位、兴趣等信息。
- en: A web application is functional without anything beyond the default styles of
    the web, but by applying CSS we are able to more clearly communicate with our
    users. In this chapter, we’ll explore how we can use the CSS-in-JS Styled Components
    library to introduce layout and style to our application. This will allow us to
    make a more usable and aesthetically pleasing application within a maintainable,
    component-based, code structure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Web应用程序在没有任何超出Web默认样式之外的东西时是可以工作的，但是通过应用CSS，我们能够更清晰地与用户进行沟通。在本章中，我们将探讨如何使用CSS-in-JS
    Styled Components库为我们的应用程序引入布局和样式。这将使我们能够在可维护的基于组件的代码结构中创建一个更易用和美观的应用程序。
- en: Creating a Layout Component
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个布局组件
- en: Many, or in our case all, pages of an application will share a common layout.
    For example, all the pages of our application will have a header, a sidebar, and
    a content area ([Figure 13-1](#web_layout)). Rather than import the shared layout
    elements within each page component, we can instead create a component specifically
    for our layout and wrap each of our page components within it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多或者在我们的情况下是所有应用程序的页面将共享一个通用的布局。例如，我们应用程序的所有页面都将有一个标题、一个侧边栏和一个内容区域（参见[图13-1](#web_layout)）。我们可以不在每个页面组件中导入共享布局元素，而是专门为我们的布局创建一个组件，并将每个页面组件包装在其中。
- en: '![A wireframe depicting a header, sidebar navigation, and main content area](assets/jsev_1301.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![一个展示标题、侧边导航和主内容区域的线框图](assets/jsev_1301.png)'
- en: Figure 13-1\. A wireframe of our page layout
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13-1\. 我们页面布局的线框图
- en: To create our component, we’ll begin by creating a new file at *src/components/Layout.js*.
    Within this file we’ll import our shared components and lay out our content. Our
    React component function will receive a property of `children`, which will allow
    us to specify where child content will appear in the layout. We’ll also make use
    of the empty `<React.Fragment>` JSX element to help avoid extraneous markup.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的组件，我们将从在*src/components/Layout.js*中创建一个新文件开始。在这个文件中，我们将导入我们的共享组件并布置我们的内容。我们的React组件函数将接收一个`children`属性，这将允许我们指定子内容在布局中的位置。我们还将利用空的`<React.Fragment>`
    JSX元素来帮助避免多余的标记。
- en: 'Let’s create our component in *src/components/Layout.js*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在*src/components/Layout.js*中创建我们的组件：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now within our *src/pages/index.js* file, we can wrap our page components within
    the newly created `Layout` component to apply the shared layout to each page:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们的*src/pages/index.js*文件中，我们可以将我们的页面组件包装在新创建的`Layout`组件中，以应用共享布局到每个页面：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The final step is to remove any instances of `<Header>` or `<Navigation>` within
    our page components. For example, our *src/pages/Home.js* file will now have the
    following reduced code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是从我们的页面组件中删除任何`<Header>`或`<Navigation>`的实例。例如，我们的*src/pages/Home.js*文件现在将有以下简化的代码：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this complete, you can view your application in your browser. As you navigate
    between the routes you’ll see our header and navigation links appear on each page.
    For now, they are not styled and our page does not have a visual layout. Let’s
    explore adding styles in the next section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，您可以在浏览器中查看您的应用程序。当您在路由之间导航时，您会看到我们的标题和导航链接出现在每个页面上。目前它们没有样式，我们的页面也没有视觉布局。让我们在下一节中探讨如何添加样式。
- en: CSS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS
- en: 'Cascading Style Sheets are precisely named: they are a set of rules that allow
    us to write styles for the web. The styles “cascade,” meaning that the last or
    most specifically defined style will be rendered. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 层叠样式表的命名很精确：它们是一组规则，允许我们为 Web 编写样式。“层叠”意味着最后定义或最具体的样式将被渲染。例如：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This CSS will render all paragraphs red, making the `color: green` rule obsolete.
    This is such a simple idea, but it has resulted in dozens of patterns and techniques
    to aid in avoiding its pitfalls. CSS structural techniques such as BEM (block
    element modifier), OOCSS (object-oriented CSS), and Atomic CSS use prescriptive
    class naming to help scope styles. Preprocessors such as SASS (syntatically awesome
    stylesheets) and Less (leaner stylesheets) provide tooling that simplifies the
    CSS syntax and enables modular files. Though these each have their merits, CSS-in-JavaScript
    provides a compelling use case for developing React or other JavaScript-driven
    applications.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '这段 CSS 将使所有段落呈现为红色，使 `color: green` 规则变得多余。这是一个非常简单的想法，但它产生了许多模式和技术，以帮助避免其缺点。CSS
    结构技术，例如 BEM（块元素修饰符）、OOCSS（面向对象的 CSS）和 Atomic CSS 使用规范的类命名来帮助作用域化样式。预处理器如 SASS（Syntactically
    Awesome Stylesheets）和 Less（Leaner Stylesheets）提供了简化 CSS 语法和支持模块化文件的工具。尽管它们各有其优点，但在开发
    React 或其他 JavaScript 驱动的应用程序时，CSS-in-JavaScript 提供了一个引人注目的用例。'
- en: What About CSS Frameworks?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 框架有何特点？
- en: CSS and UI frameworks are a popular option for developing an application, with
    good reason. They present a solid style baseline and reduce the amount of code
    that a developer needs to write by providing styles and functionality for common
    application patterns. The tradeoffs are that applications using these frameworks
    may become visually similar and can increase the file bundle size. That tradeoff
    may be worthwhile to you, however. Some of my personal favorite UI frameworks
    for working with React are [Ant Design](https://ant.design), [Bootstrap](https://oreil.ly/XJm-B),
    [Grommet](https://v2.grommet.io), and [Rebass](https://rebassjs.org).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 和 UI 框架是开发应用程序的一种流行选择，理由充足。它们提供了坚实的样式基线，并通过为常见的应用程序模式提供样式和功能来减少开发人员编写的代码量。然而，使用这些框架的应用程序可能会变得视觉上相似，并且可能会增加文件捆绑大小。然而，对你来说，这种权衡可能是值得的。我个人在使用
    React 时喜欢的一些 UI 框架包括 [Ant Design](https://ant.design)，[Bootstrap](https://oreil.ly/XJm-B)，[Grommet](https://v2.grommet.io)，和
    [Rebass](https://rebassjs.org)。
- en: CSS-in-JS
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS-in-JS
- en: When I first encountered CSS-in-JS, my initial reaction was one of horror. I
    spent the formative years of my web development career in the web standards era.
    I continue to advocate for accessibility and sensible progressive enhancement
    for web development. “Separation of concerns” has been a core tenant of my web
    practices for over a decade. So, if you’re like me and simply reading “CSS-in-JS”
    makes you feel dirty, you’re not alone. However, I was quickly won over once I
    gave it a proper (and judgment-free) try. CSS-in-JS makes it easy to think of
    our user interfaces as a series of components, something that I had been trying
    to do with a combination of structure techniques and CSS preprocessors for years.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次接触 CSS-in-JS 时，我的第一反应是恐惧。我在网页标准时代度过了我网页开发职业生涯的关键时期。我继续倡导访问可及性和合理的渐进增强，以支持
    Web 开发。“关注点分离”已经成为我网页实践的核心准则超过十年。所以，如果你像我一样，仅仅是看到“CSS-in-JS”就让你感到不舒服，你并不孤单。然而，一旦我真正（并没有带有偏见地）尝试过，我很快就被说服了。CSS-in-JS
    让我们能够轻松地将用户界面看作一系列组件，这是多年来我一直试图用结构技术和 CSS 预处理器做到的事情。
- en: In this book we’ll be using [Styled Components](https://www.styled-components.com)
    as our CSS-in-JS library. It is fast, flexible, under active development, and
    the most popular CSS-in-JS library. It’s also used by companies such as Airbnb,
    Reddit, Patreon, Lego, BBC News, Atlassian, and many more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 [Styled Components](https://www.styled-components.com) 作为我们的 CSS-in-JS
    库。它快速、灵活，在积极开发中，并且是最流行的 CSS-in-JS 库。它还被 Airbnb、Reddit、Patreon、Lego、BBC News、Atlassian
    等公司使用。
- en: 'The Styled Components library works by allowing us to define the styles of
    an element using JavaScript’s template literal syntax. We create a JavaScript
    variable that will refer to an HTML element and its associated styles. Since that
    sounds fairly abstract, let’s take a look at a simple example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Styled Components 库通过允许我们使用 JavaScript 模板字面量语法来定义元素的样式工作。我们创建一个 JavaScript 变量，该变量将引用一个
    HTML 元素及其相关样式。因为这听起来相当抽象，让我们看一个简单的例子：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we can easily scope styles. Additionally, we are scoping our
    style to that specific component. This helps us to avoid class name collisions
    across different parts of our application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们可以轻松地将样式限定在特定组件中。此外，我们将样式限定到特定组件有助于避免在应用程序不同部分之间的类名冲突。
- en: Creating a Button Component
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建按钮组件
- en: 'Now that we have a basic understanding of styled components, let’s integrate
    them into our application. To begin with, we’ll write some styles for a `<button>`
    element, which will allow us to reuse the component throughout our application.
    In the previous example, we integrated our styles alongside our React/JSX code,
    but we can also write standalone styled components. To begin, create a new file
    at *src/components/Button.js*, import the `styled` library from `styled-components`,
    and set up the exportable component as a template literal like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对样式化组件有了基本的了解，让我们将它们集成到我们的应用程序中。首先，我们将为 `<button>` 元素编写一些样式，这样我们就可以在整个应用程序中重用该组件。在之前的示例中，我们将样式与
    React/JSX 代码一起集成，但我们也可以编写独立的样式组件。首先，在 *src/components/Button.js* 创建一个新文件，从 `styled-components`
    中导入 `styled` 库，并设置可导出的组件为模板文字，如下所示：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the component in place, we can fill it in with some styles. Add some baseline
    button styles as well as hover and active state styles as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个组件，我们可以填写一些基线按钮样式，以及鼠标悬停和激活状态样式，如下所示：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we can use our button throughout our application. For example, to use it
    on the application’s home page, we could import the component and use the `<Button>`
    element anywhere we would typically use `<button>`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在整个应用程序中使用我们的按钮。例如，在应用程序的主页上使用它，我们可以导入该组件并在通常使用 `<button>` 的任何地方使用 `<Button>`
    元素。
- en: 'In *src/pages/home.js*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/pages/home.js* 中：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this, we’ve written a styled component that we can use anywhere in our
    application. This is great for maintainability, as we can easily find our styles
    and change them across our codebase. Additionally, we can couple styled components
    with markup, allowing us to create small, reusable, and maintainable components.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经编写了一个样式组件，可以在应用程序的任何地方使用。这对于可维护性非常有利，因为我们可以轻松地找到并跨整个代码库更改我们的样式。此外，我们可以将样式组件与标记耦合，从而创建小型、可重用和可维护的组件。
- en: Adding Global Styles
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加全局样式
- en: Though many of our styles will be contained within individual components, every
    site or application also has a set of global styles (things like CSS resets, fonts,
    and baseline colors). We can create a *GlobalStyle.js* component to house these
    styles.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的许多样式将包含在各个组件中，但每个站点或应用程序还有一组全局样式（如 CSS 重置、字体和基线颜色）。我们可以创建一个 *GlobalStyle.js*
    组件来管理这些样式。
- en: This will look a bit different from our previous example, as we’ll be creating
    a stylesheet rather than styles attached to a specific HTML element. To accomplish
    this, we’ll import the `createGlobalStyle` module from `styled-components`. We’ll
    also import the [`normalize.css` library](https://oreil.ly/i4lyd) to ensure consistent
    rendering of HTML elements across browsers. Finally, we’ll add some global rules
    for the HTML `body` of our application and default link styles.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前的示例有些不同，因为我们将创建一个样式表而不是附加到特定 HTML 元素的样式。为了实现这一点，我们将从`styled-components`中导入`createGlobalStyle`模块。我们还将导入[`normalize.css`库](https://oreil.ly/i4lyd)以确保在各种浏览器中对
    HTML 元素进行一致的渲染。最后，我们将为应用程序的 HTML `body` 添加一些全局规则和默认链接样式。
- en: 'In *src/components/GlobalStyle.js*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/components/GlobalStyle.js* 中：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To apply these styles, we’ll import them into our *App.js* file and add a `<GlobalStyle
    />` element to our application:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用这些样式，我们将它们导入到我们的 *App.js* 文件中，并将 `<GlobalStyle />` 元素添加到我们的应用程序中：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this, our global styles will be applied to the application. When you preview
    the app in the browser, you’ll see that the typeface has changed, the links have
    a new style, and the margins have been removed ([Figure 13-2](#global_style)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的全局样式将应用到应用程序中。当您在浏览器中预览应用程序时，您将看到字体类型已更改，链接具有新的样式，并且已删除了边距（[图 13-2](#global_style)）。
- en: '![A screenshot of our application running in the browser with global styles
    applied](assets/jsev_1302.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![我们应用程序在浏览器中运行的截图，已应用全局样式](assets/jsev_1302.png)'
- en: Figure 13-2\. Our application now has global styles applied
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. 我们的应用程序现在应用了全局样式
- en: Component Styles
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件样式
- en: Now that we’ve applied some global styles to our application, we can begin styling
    the individual components. In doing this we’ll also introduce the overall layout
    of our application. For each component we style, we’ll first import the `styled`
    library from `styled-components`. We’ll then define some element styles as variables.
    Lastly, we’ll use those elements within the JSX of our React component.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为应用程序应用了一些全局样式，我们可以开始为单个组件添加样式。在这个过程中，我们还会介绍应用程序的整体布局。对于每个我们要样式化的组件，我们首先从
    `styled-components` 中导入 `styled` 库。然后，我们将一些元素样式定义为变量。最后，我们将在 React 组件的 JSX 中使用这些元素。
- en: Styled Component Naming
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化组件命名
- en: To avoid collisions with HTML elements, it’s mandatory to capitalize the names
    of our styled components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与 HTML 元素冲突，我们必须将样式化组件的名称大写化。
- en: We can begin in *src/components/Layout.js*, where we’ll add style to the structural
    `<div>` and `<main>` tags for the application’s layout.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 *src/components/Layout.js* 开始，在这里为应用程序的布局结构 `<div>` 和 `<main>` 标签添加样式。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With our *Layout.js* component complete, we can add some styles to our *Header.js*
    and *Navigation.js* files:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了 *Layout.js* 组件后，我们可以为 *Header.js* 和 *Navigation.js* 文件添加一些样式：
- en: 'In *src/components/Header.js*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/components/Header.js* 文件中：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, in *src/components/Navigation.js*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 *src/components/Navigation.js* 文件中：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With these styles applied, we now have a fully styled application ([Figure 13-3](#web_styled)).
    Going forward, we can apply styles as we create individual components.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这些样式的应用，我们现在拥有了一个完全样式化的应用程序（[图 13-3](#web_styled)）。在未来，我们可以在创建各个组件时应用样式。
- en: '![A screenshot of our application with our styled components styles applied](assets/jsev_1303.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![我们的应用程序截图，已应用了我们的样式组件样式](assets/jsev_1303.png)'
- en: Figure 13-3\. Our application with styles applied
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-3\. 我们应用了样式的应用程序
- en: Conclusion
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we introduced layout and style to our application. Using the
    CSS-in-JS library Styled Components allows us to write concise and properly scoped
    CSS styles. These styles can then be applied to individual components or globally
    across our application. In the next chapter, we’ll work toward a fully featured
    application by implementing our GraphQL client and making calls to our API.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为应用程序引入了布局和样式。使用 CSS-in-JS 库 Styled Components 允许我们编写简洁且作用域正确的 CSS 样式。这些样式可以应用于单个组件或全局应用中。在下一章中，我们将通过实现
    GraphQL 客户端并调用 API 来朝着一个功能完备的应用程序迈进。
