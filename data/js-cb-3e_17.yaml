- en: Chapter 15\. Working with Media
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章。处理媒体
- en: Pretty pictures. Animations. Cool videos. Sound!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 漂亮的图片。动画。酷炫的视频。声音！
- en: The web is a richer place through the availability of many media types. Our
    old friends SVG and Canvas can be used for complex animations, charts, and graphs.
    Added to them are the video and audio elements included in HTML5, and the near-future
    potential of 3D graphics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过多种媒体类型，Web 变得更加丰富。我们的老朋友 SVG 和 Canvas 可用于复杂的动画、图表和图形。除此之外，HTML5 还包括视频和音频元素，以及近期将要出现的
    3D 图形潜力。
- en: Best of all, none of these require any kind of proprietary plug-in—they’re all
    integrated with all your browser clients, including those on your smartphones,
    tablets, and computers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，这些都不需要任何专有插件，它们都集成在您的浏览器客户端中，包括智能手机、平板电脑和计算机。
- en: Adding JavaScript to SVG
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 SVG 添加 JavaScript
- en: Problem
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to add JavaScript to an SVG file or element.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要向 SVG 文件或元素添加 JavaScript。
- en: Solution
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: JavaScript in SVG is included in `script` elements, just as with HTML, except
    with the addition of CDATA markup surrounding the script ([Example 15-1](#demonstration_of_javascript_within_an_sv)).
    DOM methods are also available for working with the SVG elements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 中的 JavaScript 包含在 `script` 元素中，与 HTML 类似，只是需要在脚本周围添加 CDATA 标记（[示例 15-1](#demonstration_of_javascript_within_an_sv)）。DOM
    方法也适用于处理 SVG 元素。
- en: Example 15-1\. Demonstration of JavaScript within an SVG file
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-1。演示 SVG 文件中的 JavaScript
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: As the solution demonstrates, SVG is XML, and the rules for embedding script
    into XML must be adhered to. This means providing the script `type` within the
    `script` tag, as well as wrapping the script contents in a CDATA block. If you
    don’t have the CDATA section, and your script uses characters such as `<` or `&`,
    your page will have errors, because the XML parser treats them as XML characters,
    not script.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如本解决方案所示，SVG 是 XML 格式，必须遵循向 XML 嵌入脚本的规则。这意味着在 `script` 标签中提供脚本 `type`，并将脚本内容包裹在
    CDATA 块中。如果没有 CDATA 部分，并且您的脚本使用了 `<` 或 `&` 等字符，您的页面将会出现错误，因为 XML 解析器会将它们视为 XML
    字符，而不是脚本。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There is some drive to treat SVG as HTML, especially when the SVG is inline
    in HTML documents. That’s what Chrome does. Still, it’s better to be safe than
    sorry, and follow XML requirements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些倾向于将 SVG 视为 HTML，特别是当 SVG 内联在 HTML 文档中时。这是 Chrome 的做法。不过，还是遵循 XML 的要求更为保险。
- en: The DOM methods, such as `document.getElementById()`, aren’t HTML specific;
    they’re usable with any XML document, including SVG. What’s new is the SVG-specific
    `fill` attribute, an attribute unique to SVG elements, such as `rect`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 方法，如 `document.getElementById()`，并非仅限于 HTML；它们也适用于任何 XML 文档，包括 SVG。新功能是
    SVG 特有的 `fill` 属性，这是 SVG 元素（如 `rect`）中独特的属性。
- en: Caution
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If namespaces were used with any of the elements in the file, then the namespace
    version of the DOM methods would have to be used.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件中的任何元素使用了命名空间，则必须使用命名空间版本的 DOM 方法。
- en: The code in the solution is a standalone SVG file, with a *.svg* extension.
    If we were to embed the SVG within an HTML file, as shown in [Example 15-2](#svg_element_from_example_15-1comma_embed),
    the color-changing animation would work the same. The CDATA section is removed
    because all modern browsers understand the SVG is now in an HTML context. If the
    file is XHTML, though, add them back.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案中的代码是一个独立的 SVG 文件，扩展名为 *.svg*。如果我们要将 SVG 嵌入到 HTML 文件中，就像在 [示例 15-2](#svg_element_from_example_15-1comma_embed)
    中展示的那样，颜色变化动画将会同样起作用。CDATA 部分被移除，因为所有现代浏览器都理解 SVG 现在处于 HTML 上下文中。但如果文件是 XHTML，则需要将它们添加回去。
- en: Example 15-2\. SVG element from [Example 15-1](#demonstration_of_javascript_within_an_sv),
    embedded into an HTML page
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-2。来自 [示例 15-1](#demonstration_of_javascript_within_an_sv) 的 SVG 元素，嵌入到
    HTML 页面中
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The above example embeds the SVG directly into the HTML page. You can also
    embed a JavaScript-containing SVG file on the page by using the `<object>` tag
    with a fallback `<img>` tag:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例直接将 SVG 嵌入到 HTML 页面中。您还可以使用 `<object>` 标签和回退的 `<img>` 标签在页面上嵌入包含 JavaScript
    的 SVG 文件：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All modern browsers support SVG, including SVG in HTML. IE supports SVG after
    version 9.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都支持 SVG，包括将 SVG 嵌入到 HTML 中。IE 在 9 版本之后支持 SVG。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about SVG, I recommend [*SVG Animations*](https://www.oreilly.com/library/view/svg-animations/9781491939697/)
    by Sarah Drasner (O’Reilly).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 SVG 的内容，我推荐阅读 [*SVG Animations*](https://www.oreilly.com/library/view/svg-animations/9781491939697/)，作者是
    Sarah Drasner（O’Reilly）。
- en: 'Extra: Using SVG Libraries'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外内容：使用 SVG 库
- en: 'There aren’t quite as many libraries for working with SVG as there are for
    working with Canvas, but the ones that exist are very handy. One of the most popular
    is the D3 library, covered in [“Creating an SVG Bar Chart with D3”](#creating_svg_bar_chart_d3).
    A few other popular libraries include [Raphaël](http://raphaeljs.com), [GreenSock](https://greensock.com),
    [Snap.svg](http://snapsvg.io), and [SVG.js](https://svgjs.dev/docs/3.0). All of
    these can simplify SVG creation and animation. The following code snippet shows
    an example of using Raphaël:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 Canvas 工作的库相比，用于处理 SVG 的库没有那么多，但现有的库非常方便。其中最流行的之一是 D3 库，详见[“使用 D3 创建 SVG
    条形图”](#creating_svg_bar_chart_d3)。另外几个流行的库包括[Raphaël](http://raphaeljs.com)、[GreenSock](https://greensock.com)、[Snap.svg](http://snapsvg.io)和[SVG.js](https://svgjs.dev/docs/3.0)。所有这些库都可以简化
    SVG 的创建和动画。以下代码片段展示了使用 Raphaël 的示例：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Accessing SVG from a Web Page Script
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网页脚本访问 SVG
- en: Problem
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to modify the contents of an SVG element from script within the web
    page.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望通过网页内的脚本修改 SVG 元素的内容。
- en: Solution
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'If the SVG is embedded directly in the web page, access the element and its
    attributes using the same functionality you would use with any other web page
    element:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SVG 直接嵌入到网页中，可以使用与访问任何其他网页元素相同的功能来访问元素及其属性：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, if the SVG is in an external SVG file embedded into the page via an
    `object` element, you have to get the document for the external SVG file in order
    to access the elements. The technique requires object detection because the process
    differs by browser:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果 SVG 是通过`object`元素嵌入到页面中的外部 SVG 文件，您必须获取外部 SVG 文件的文档才能访问元素。该技术需要进行对象检测，因为不同浏览器的处理过程有所不同：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The first option listed in the solution accesses SVG embedded in an HTML file.
    You can access SVG elements using the same methods you’ve used to access HTML
    elements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案中列出的第一个选项访问嵌入在 HTML 文件中的 SVG。您可以使用与访问 HTML 元素相同的方法访问 SVG 元素。
- en: The second option is a little more involved, and depends on retrieving the document
    object for the SVG document. The first approach tries to access the `contentDocument`
    property on the object. If this fails, the application then tries to access the
    SVG document using `getSVGDocument()`. Once you have access to the SVG document
    object, you can use the same DOM methods you would use with elements native to
    the web page.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项有点复杂，它依赖于检索 SVG 文档的文档对象。第一种方法尝试在对象上访问`contentDocument`属性。如果失败，应用程序然后尝试使用`getSVGDocument()`来访问
    SVG 文档。一旦您访问了 SVG 文档对象，您可以使用与网页本地元素相同的 DOM 方法。
- en: '[Example 15-3](#accessing_svg_in_an_object_element_from) shows the second way
    to add SVG to a web page, and how to access the SVG element(s) from script in
    HTML.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-3](#accessing_svg_in_an_object_element_from)展示了将 SVG 添加到网页的第二种方式，以及如何在
    HTML 中从脚本访问 SVG 元素。'
- en: Example 15-3\. Accessing SVG in an object element from script
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-3\. 从脚本中访问对象元素中的 SVG
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the example code, the object is accessed after it has loaded; the `object.onload`
    event handler is then accessed to get the SVG document and assign the function
    to the `onclick` event handler.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例代码中，对象在加载后被访问；然后访问`object.onload`事件处理程序以获取 SVG 文档，并将函数分配给`onclick`事件处理程序。
- en: Creating an SVG Bar Chart with D3
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 D3 创建 SVG 条形图
- en: Problem
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a scalable bar chart, but you’re hoping to avoid having to
    create every last bit of the graphics.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望创建一个可伸缩的条形图，但希望避免必须创建所有图形的最后一点。
- en: Solution
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use D3 and SVG to create a chart bound to a set of data that your application
    provides. [Example 15-4](#bar_chart_svg_d3) shows a vertical bar chart created
    using D3 with a given set of data representing the height of each bar.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 D3 和 SVG 创建一个图表，该图表绑定到您的应用程序提供的一组数据。[示例 15-4](#bar_chart_svg_d3)展示了使用 D3
    创建的垂直条形图，显示了每个条形的高度。
- en: Example 15-4\. SVG bar chart created using D3
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-4\. 使用 D3 创建的 SVG 条形图
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: D3 isn’t a standard graphics tool that creates the shape based on the dimensions
    you provide. With D3, you give it a set of data, the objects used to visualize
    the data, and then stand back and let it do its thing. It sounds simple, but to
    get this data visualization goodness, you do have to properly set it up, and that
    can be challenging when you first start using the library.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: D3 不是一个标准的图形工具，它根据您提供的尺寸创建形状。使用 D3，您提供一组数据，用于可视化数据的对象，然后静静地让它运行。听起来很简单，但要获得这种数据可视化的好处，您必须正确设置它，当您开始使用库时可能会有挑战。
- en: First of all, be aware that D3 makes use of *method chaining* to a maximum degree.
    Yes, you can invoke methods separately, but it’s clearer, cleaner, and more efficient
    to use the library’s chaining support.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意，D3 *方法链* 的应用达到了最大化。是的，你可以分别调用方法，但使用库的链式支持更清晰、更干净、更高效。
- en: In the solution, the first line is the creation of a data set as an array. D3
    expects data points to be in an array, though each element can be an object, as
    well as a simple value, as shown in the solution. Next, the maximum height of
    the bar chart is defined, as is the width of each bar. Next, we get into the first
    use of D3.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案中，第一行是将数据集创建为数组。D3期望数据点在数组中，尽管每个元素可以是一个对象，也可以是一个简单的值，如解决方案所示。接下来，定义了柱状图的最大高度以及每个柱子的宽度。接下来，我们开始使用D3。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '[D3](http://d3js.org), created by Mike Bostock, is a powerful data visualization
    tool that isn’t necessarily something you can pick up and master in a lazy afternoon.
    However, it is a tool well worth learning, so consider the example in this recipe
    more of a teaser to get you interested, rather than a definitive introduction.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[D3](http://d3js.org)，由Mike Bostock创建，是一个强大的数据可视化工具，并不是你可以在一个懒散的下午就能掌握的东西。然而，它是一个非常值得学习的工具，所以请将这个示例看作是激发你兴趣的引子，而不是一个权威的介绍。'
- en: For a more in-depth primer, I recommend [*D3 for the Impatient*](http://shop.oreilly.com/product/0636920224341.do)
    by Philipp Janert (O’Reilly).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解，我推荐 [*D3 快速入门*](http://shop.oreilly.com/product/0636920224341.do)，作者是
    Philipp Janert（O’Reilly）。
- en: I could have added a static SVG element to the web page, but I wanted to demonstrate
    how D3 creates an element. By creating the SVG element, we’re also getting a reference
    to it for future work, though we could have used D3 to get a reference to an existing
    element. In the code, a reference to the `body` element is obtained using D3’s
    `select()` method. Once this happens, a new SVG element is appended to the `body`
    element via `append()`, and attributes are given to it via the `attr()` function.
    The height of the element is already predefined, but the width is equal to multiplying
    the number of data elements by the bar width (+1, to provide necessary spacing).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我本可以在网页上添加一个静态SVG元素，但我想演示D3如何创建一个元素。通过创建SVG元素，我们还可以获取到它的引用以便今后的工作，尽管我们也可以使用D3来获取现有元素的引用。在代码中，使用D3的
    `select()` 方法获取了对 `body` 元素的引用。一旦这样做，就通过 `append()` 方法向 `body` 元素附加了一个新的SVG元素，并通过
    `attr()` 函数给它赋予属性。元素的高度已经预定义，但宽度等于数据元素的数量乘以柱子宽度（+1，以提供必要的间距）。
- en: 'Once the SVG element is created, the code uses D3’s *scale* functionality to
    determine the necessary ratio between the element’s height and each bar’s height,
    in such a way that the bar chart fills the SVG element, but each bar’s height
    is proportional. It does this by using `scale.linear()` to create a linear scale.
    According to the D3 documentation, “The mapping is linear in that the output range
    value *y* can be expressed as a linear function of the input domain value *x*:
    *y* = *mx* + *b*.”'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了SVG元素，代码使用D3的 *scale* 功能来确定元素高度和每个柱子高度之间必要的比例，以使柱状图填充SVG元素，但每个柱子的高度是成比例的。它通过使用
    `scale.linear()` 来创建线性比例。根据D3文档，“映射是线性的，即输出范围值 *y* 可以表达为输入域值 *x* 的线性函数：*y* = *mx*
    + *b*。”
- en: The `domain()` function sets the input domain for the scale, while the `range()`
    sets the output range. In the solution, the value given for the domain is zero
    to the maximum value in the data set, determined via a call to `max()`. The value
    given for the range is zero to the height of the SVG element. A function is then
    returned to a variable that will normalize any data passed to it when called.
    If the function is given a value equal to the height of the largest data value,
    the returned value is equal to the height of the element (in this case, the largest
    data value of 100 returns a scaled value of 400).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`domain()` 函数设置比例尺的输入域，而 `range()` 设置输出范围。在解决方案中，给定域的值是从数据集中的零到最大值，通过调用 `max()`
    确定。给定的范围值是从零到SVG元素的高度。然后将一个函数返回给一个变量，当调用时会将传递给它的任何数据归一化。如果函数给定一个等于最大数据值高度的值，返回值将等于元素的高度（在这种情况下，最大数据值100返回的缩放值为400）。'
- en: The last portion of the code is the part that creates the bars. We need something
    to work with, so the code calls `selectAll()` with `rect`. There aren’t any `rect`
    elements in the SVG block yet, but we’ll be adding them. The data is passed to
    D3 via the `data()` method, and then the `enter()` function is called. What `enter()`
    does is process the data and return placeholders for all the missing elements.
    In the solution, placeholders for all 15 `rect` elements, one for each bar, are
    created.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后部分是创建条形图的部分。我们需要一些东西来处理，所以代码调用`selectAll()`选择`rect`。SVG块中还没有`rect`元素，但我们将添加它们。数据通过`data()`方法传递给D3，然后调用`enter()`函数。`enter()`函数的作用是处理数据并为所有缺失的元素返回占位符。在解决方案中，为所有15个`rect`元素（每个柱形条的一个）创建了占位符。
- en: A `rect` element is then appended to the SVG element with `append()`, and the
    attributes for each are set with `attr()`. In the solution, the `fill` and `stroke`
    are given, though these could have been defined in the page’s stylesheet. Following,
    the position for the `x` attribute, or the lower-left attribute for the bar, is
    provided as a function, where `d` is the current datum (data value) and `i` is
    the current index. For the `x` attribute, the index is multiplied by the `barWidth`,
    plus one (1), to account for spacing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在SVG元素中附加了一个`rect`元素，并使用`attr()`设置了每个元素的属性。在解决方案中，提供了`fill`和`stroke`，尽管这些可以在页面的样式表中定义。接下来，为`x`属性的位置或条形图的左下角属性提供了一个函数，其中`d`是当前数据（数据值），`i`是当前索引。对于`x`属性，索引乘以`barWidth`，再加上一（1），以考虑间距。
- en: For the `y` attribute, we have to get a little tricky. SVG’s point of origin
    is the top-left corner, which means increasing values of `y` go down the chart,
    not up. To reverse this, we need to subtract the value of `y` from the height.
    However, we can’t just do this directly. If the code used the datum passed to
    it directly, then we’d have a proportional chart with very small, scrunched-down
    bars. Instead we need to use the newly created scale function, `x`, passing the
    datum to it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`y`属性，我们需要有些技巧。SVG的原点是左上角，这意味着增加`y`的值会使图表向下移动，而不是向上。为了反转这一点，我们需要从高度减去`y`的值。然而，我们不能直接这样做。如果代码直接使用传递给它的数据，那么我们将得到一个比例相当小、压缩的柱状图。相反，我们需要使用新创建的比例尺函数`x`，将数据传递给它。
- en: The width of each bar is a constant value given in `barWidth`, and the height
    is just the scale function variable, which is equivalent to calling the scale
    function and passing in the datum. All of this creates the chart shown in [Figure 15-1](#example_with_normalization).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个条形图的宽度是常量`barWidth`给定的值，高度只是比例尺函数的变量，相当于调用比例尺函数并传递数据。所有这些都创建了图表，显示在[图 15-1](#example_with_normalization)中。
- en: '![jsc3 1501](assets/jsc3_1501.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![jsc3 1501](assets/jsc3_1501.png)'
- en: Figure 15-1\. Example of a bar chart with each bar’s height normalized to fill
    the given space
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-1\. 柱状图示例，每个条形的高度标准化以填充给定空间
- en: Integrating SVG and the Canvas Element in HTML
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将SVG和Canvas元素集成到HTML中
- en: Problem
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use the `canvas` element and SVG together within a web page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在网页中同时使用`canvas`元素和SVG。
- en: Solution
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'One option is to embed both the SVG and the `canvas` element directly into
    the HTML page, and then access the `canvas` element from script within SVG:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是直接将SVG和`canvas`元素嵌入到HTML页面中，然后从SVG中的脚本访问`canvas`元素：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Or you can embed the `canvas` element as a foreign object directly in the SVG:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以直接将`canvas`元素嵌入SVG中作为外来对象：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Discussion
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When the SVG element is embedded into the current web page, you can access HTML
    elements from within the SVG. However, you can also embed elements directly in
    SVG, using the SVG `foreignObject` element. This element allows us to embed XHTML,
    MathML, RDF, or any other XML-based syntax.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当SVG元素嵌入到当前网页中时，您可以从SVG内部访问HTML元素。但是，您也可以直接在SVG中嵌入元素，使用SVG的`foreignObject`元素。此元素允许我们嵌入XHTML、MathML、RDF或任何其他基于XML的语法。
- en: In both solutions, I was able to use `getElementById()`. However, if I want
    to manipulate the elements using other methods, such as `getElementsByTagName()`,
    I have to be careful about which version of the method I use. For instance, I
    can use `getElementsByTagName()` for the outer `canvas` element, but I would need
    to use the namespace version of the method, `getElementsByTagNameNS`, if the contained
    object is XML, such as RDF/XML. Because the embedded object in the solution is
    HTML5, a namespace wasn’t necessary.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个解决方案中，我都能使用`getElementById()`。但是，如果我想使用其他方法来操作元素，例如`getElementsByTagName()`，我必须注意使用哪个版本的方法。例如，我可以使用`getElementsByTagName()`获取外部的`canvas`元素，但如果包含的对象是XML（例如RDF/XML），则需要使用命名空间版本的方法`getElementsByTagNameNS`。由于解决方案中嵌入的对象是HTML5，因此不需要命名空间。
- en: 'Once you have the canvas context, use the element like you would from script
    within HTML: add rectangles, draw paths, create arcs, and so on.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得Canvas上下文，就像在HTML中从脚本中使用元素一样：添加矩形，绘制路径，创建弧线等。
- en: 'Extra: Canvas? Or SVG?'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外：Canvas？还是SVG？
- en: Why would you use Canvas over SVG, or SVG over Canvas? The `canvas` element
    is faster in frame-type animations. With each animation, the browser only needs
    to redraw the changed pixels, not recreate the entire scene. However, the advantage
    you get with the `canvas` element animation lessens when you have to support a
    variety of screen sizes, from smartphone to large monitor. SVG scales beautifully.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用Canvas而不是SVG，或者SVG而不是Canvas？ `canvas`元素在帧动画中更快。每次动画时，浏览器只需重新绘制更改的像素，而不是重新创建整个场景。但是，当您需要支持从智能手机到大型显示器的各种屏幕尺寸时，`canvas`元素动画的优势减弱。SVG具有出色的缩放性。
- en: Another advantage to SVG is that it figures in rich data visualizations with
    the assistance of powerful libraries. But then, Canvas is used with 3D systems,
    such as WebGL.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的另一个优势是，在强大的库的帮助下，它在丰富的数据可视化中占据一席之地。但是，Canvas与WebGL等3D系统一起使用。
- en: 'One use of SVG and Canvas together is to provide a fallback for the canvas
    element: the SVG writes to the DOM and persists even if JavaScript is turned off,
    while the `canvas` element does not.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将SVG和Canvas结合使用的一个用途是为Canvas元素提供后备：SVG写入DOM并在JavaScript关闭时持续存在，而`canvas`元素则不会。
- en: Running a Routine When an Audio File Begins Playing
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当音频文件开始播放时运行例行程序
- en: Problem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to provide an audio file and then share additional information when
    the audio file begins or ends playing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您想在音频文件开始或结束播放时提供音频文件并分享额外信息。
- en: Solution
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the HTML5 `audio` element:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML5 `audio`元素：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and capture either its `play` event (playback has begun) or `ended` event (playback
    has finished):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 并捕获其`play`事件（播放已开始）或`ended`事件（播放已完成）：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'then display the information:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后显示信息：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'HTML5 added two media elements: `audio` and `video`. These simple-to-use controls
    provide a way to play audio and video files.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5添加了两个媒体元素：`audio`和`video`。这些简单易用的控件提供了播放音频和视频文件的方法。
- en: In the solution, the `audio` element’s `controls` Boolean attribute is set,
    so the controls are displayed. The element has a `src` of a WAV audio file for
    in-browser playback. Additionally, a link to the WAV file is provided as a fallback,
    which means people using browsers that don’t support `audio` can still access
    the sound file. I could have also provided an `object` element, or other fallback
    content.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案中，`audio`元素的`controls`布尔属性已设置，因此显示了控件。该元素的`src`是用于浏览器内播放的WAV音频文件。此外，提供了WAV文件的链接作为后备，这意味着使用不支持`audio`的浏览器的用户仍然可以访问声音文件。我还可以提供`object`元素或其他后备内容。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: WAV is a widely supported audio format, but different browsers support various
    formats and filetypes. The Mozilla Developer Network has a comprehensive [table](http://mzl.la/1DS3rPL)
    with audio and video codec support for the various browsers, and Wikipedia maintains
    a [simple browser support table](https://oreil.ly/55EwV) for audio coding formats.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: WAV是广泛支持的音频格式，但不同浏览器支持各种格式和文件类型。Mozilla开发者网络有一个详细的[表格](http://mzl.la/1DS3rPL)，列出了各种浏览器支持的音频和视频编解码器，而维基百科维护了一个[简单的浏览器支持表格](https://oreil.ly/55EwV)，用于音频编码格式。
- en: 'The media elements come with a set of methods to control the playback, as well
    as events that can be triggered when the event occurs. In the solution, the `ended`
    event is captured and assigned the event handler `aboutAudio()`, which displays
    a message about the file after the playback is finished. Notice that though the
    code is using a DOM Level 0 event handler with the window load event, it’s using
    DOM Level 2 event handling with the `audio` element. Browser support is erratic
    with this event handler, so I strongly recommend you use `addEventListener()`.
    However, `onended` does seem to work without problems when used directly in the
    element:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体元素提供一组方法来控制播放，以及在事件发生时可以触发的事件。在解决方案中，捕获了 `ended` 事件，并将事件处理程序分配给 `aboutAudio()`，在播放结束后显示有关文件的消息。请注意，尽管代码在使用窗口加载事件时使用了DOM
    Level 0事件处理程序，但在 `audio` 元素中使用了DOM Level 2事件处理。此事件处理程序在不同浏览器中的支持情况不稳定，因此强烈建议您使用
    `addEventListener()`。但是，`onended` 在直接在元素中使用时似乎没有问题：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It’s interesting to see the appearance of the elements in all of the browsers
    that currently support them. There is no standard look, so each browser provides
    its own interpretation. You can control the appearance by providing your own playback
    controls and using your own elements/CSS/SVG/Canvas to supply the decoration.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 看到当前支持这些元素的所有浏览器中元素的外观是很有趣的。没有标准的外观，所以每个浏览器都提供了自己的解释。您可以通过提供自己的播放控件并使用自己的元素/CSS/SVG/Canvas来提供装饰来控制外观。
- en: Controlling Video from JavaScript with the video Element
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用视频元素从JavaScript控制视频
- en: Problem
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to embed video in your web page along with a consistent look for the
    video controls, regardless of browser and operating system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在网页中嵌入视频，并希望无论浏览器和操作系统如何，视频控件的外观保持一致。
- en: Solution
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the HTML5 `video` element:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML5 `video` 元素：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can provide controls for it via JavaScript, as shown in [Example 15-5](#providing_a_custom_control_for_the_html5).
    Buttons are used to provide the video control, and text in a `div` element is
    used to provide feedback on time during the playback.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过JavaScript为其提供控件，如[示例 15-5](#providing_a_custom_control_for_the_html5)所示。按钮用于提供视频控件，并在
    `div` 元素中使用文本来提供播放期间时间的反馈。
- en: Example 15-5\. Providing a custom control for the HTML5 video element
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 15-5\. 为HTML5视频元素提供自定义控件
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And in `video.js`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 而且在 `video.js` 中：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Discussion
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The HTML5 `video` element, as with the HTML5 `audio` element, can be controlled
    with its own built-in controls, or you can provide your own. The media elements
    support the following methods:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 `video` 元素和HTML5 `audio` 元素一样，可以使用其内置控件进行控制，或者您可以提供自定义控件。媒体元素支持以下方法：
- en: '`play`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`play`'
- en: Starts playing the video
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 开始播放视频
- en: '`pause`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`pause`'
- en: Pauses the video
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停视频
- en: '`load`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`load`'
- en: Preloads the video without starting play
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 预加载视频但不开始播放
- en: '`canPlayType`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`canPlayType`'
- en: Tests if the user agent supports the video type
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用户代理是否支持视频类型
- en: The media elements don’t support a stop method, so the code emulates one by
    pausing video play and then setting the video’s `currentTime` attribute to 0,
    which basically resets the play start time. I also used `currentTime` to print
    out the video time, using `Math.round` to round the time to the nearest second.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体元素不支持停止方法，因此该代码通过暂停视频播放然后设置视频的 `currentTime` 属性为0来模拟停止。我还使用 `currentTime`
    打印视频时间，使用 `Math.round` 将时间四舍五入到最接近的秒。
- en: 'The video control is providing two different video codecs: H.264 (*.mp4*) and
    VP8 (*.webm*). Nearly all modern browsers support the WebM file format, but including
    the MP4 provides a fallback for older browsers that support the `video` element.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 视频控件提供两种不同的视频编解码器：H.264（*.mp4*）和VP8（*.webm*）。几乎所有现代浏览器都支持WebM文件格式，但包含MP4文件可以为支持`video`元素的旧浏览器提供备用。
- en: The video and audio controls are inherently keyboard accessible. If you replace
    the controls, you’ll want to provide accessibility information with your replacements.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 视频和音频控件本身支持键盘访问。如果替换控件，您需要为您的替代品提供可访问性信息。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The video playback functionality demonstrated in the solution works, as is,
    with video that isn’t encrypted. If the video (or audio) file is encrypted, considerably
    more effort is necessary so that the video plays, making use of the HTML 5.1 W3C
    Encrypted Media Extensions (EME).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案中演示的视频播放功能可以直接使用未加密的视频（或音频）文件。如果视频（或音频）文件已加密，则需要更多的工作来使视频播放，可以使用HTML 5.1
    W3C Encrypted Media Extensions (EME)。
- en: The [W3C EME working draft](https://oreil.ly/mMu7q) has been implemented in
    [Internet Explorer 11](http://bit.ly/1DS5umQ), Chrome, Firefox, Microsoft Edge,
    and Safari.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[W3C EME 工作草案](https://oreil.ly/mMu7q) 已经在 [Internet Explorer 11](http://bit.ly/1DS5umQ)、Chrome、Firefox、Microsoft
    Edge 和 Safari 中实现。'
