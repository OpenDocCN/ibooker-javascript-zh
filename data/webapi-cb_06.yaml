- en: Chapter 6\. Observing DOM Elements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章\. 观察 DOM 元素
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: 'This chapter looks at three types of *observers* that the browser gives you
    for watching DOM elements: `MutationObserver`, `IntersectionObserver`, and `ResizeObserver`.
    These observer objects can watch DOM elements and notify you of certain changes
    or events.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了浏览器提供的三种用于监视 DOM 元素的*观察者*类型：`MutationObserver`、`IntersectionObserver` 和
    `ResizeObserver`。这些观察者对象可以监视 DOM 元素并通知您某些变化或事件。
- en: Observers are created with a callback function. This function is called whenever
    relevant events occur in the page. It’s called with one or more entries that contain
    information about what occurred. This just creates the observer. To actually start
    watching an element, you need to call `observe` on the observer, passing the element
    you want to observe and an optional set of options.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者是通过回调函数创建的。这个函数在页面中发生相关事件时被调用。它被调用时传入一个或多个条目，这些条目包含发生的事件信息。这只是创建观察者。要实际开始监视一个元素，你需要在观察者上调用`observe`，传入你想要观察的元素以及一个可选的选项集。
- en: MutationObserver
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MutationObserver
- en: '`MutationObserver` watches for changes in the DOM for an element. You can watch
    for changes to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`MutationObserver` 监视元素在 DOM 中的变化。你可以观察以下变化：'
- en: Child elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子元素
- en: Attributes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: Text content
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本内容
- en: What the browser observes is defined in an options object passed to the `observe`
    function. You can also give an optional `subtree` option when observing an element.
    This extends the monitoring of child elements, attributes, and/or text content
    to all descendant nodes (instead of just the element and its direct children).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器观察的内容在传递给`observe`函数的选项对象中定义。当观察一个元素时，您还可以给定一个可选的`subtree`选项。这将扩展到所有后代节点（而不仅仅是元素及其直接子元素）的监控，包括子元素、属性和/或文本内容。
- en: When a mutation occurs that you are interested in, your callback gets executed
    with an array of `MutationEntry` objects that describe the mutation that just
    occurred.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生你感兴趣的变化时，你的回调函数会执行，并传递一个描述刚发生的变化的`MutationEntry`对象数组。
- en: ResizeObserver
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ResizeObserver
- en: As its name suggests, `ResizeObserver` notifies you when an element’s size changes.
    When the size changes, your callback is called with information about what was
    resized. The entries contain information about the element’s new size.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`ResizeObserver` 在元素大小更改时通知你。大小变化时，会调用你的回调函数，并提供有关已调整大小的信息。条目包含有关元素新大小的信息。
- en: IntersectionObserver
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IntersectionObserver
- en: '`IntersectionObserver` watches for changes in an element’s position relative
    to a viewport. The viewport can be a scrollable element or the browser window
    itself. If any portion of the child element is visible within the scrollable area,
    it is said to be *intersecting* the ancestor element. [Figure 6-1](#figure6-1)
    shows elements on a scrollable page.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntersectionObserver` 监视元素相对于视口的位置变化。视口可以是一个可滚动的元素或浏览器窗口本身。如果子元素的任何部分在可滚动区域内可见，则称为*相交*祖先元素。[图 6-1](#figure6-1)
    展示了可滚动页面上的元素。'
- en: '![Elements on a scrollable page. Element 1 is not intersecting, element 2 is
    partially intersecting, and element 3 is fully intersecting.](assets/wacb_0601.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![可滚动页面上的元素。元素 1 未相交，元素 2 部分相交，元素 3 完全相交。](assets/wacb_0601.png)'
- en: Figure 6-1\. Element 1 is not intersecting, element 2 is partially intersecting,
    and element 3 is fully intersecting
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1\. 元素 1 未相交，元素 2 部分相交，元素 3 完全相交
- en: '`IntersectionObserver` uses the concept of an *intersection ratio*—what portion
    of the element is actually intersecting the root. If the element is fully visible,
    it has a ratio of 1\. If it is completely off-screen, it has a ratio of 0\. If
    it is exactly half visible and half invisible, it has a ratio of 0.5\. The entries
    passed to the callback function have an `intersectionRatio` property specifying
    the current intersection ratio.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntersectionObserver` 使用*相交比率*的概念——元素实际相交于根元素的比例。如果元素完全可见，则比率为 1\. 如果完全不在屏幕上，则比率为
    0\. 如果正好一半可见一半不可见，则比率为 0.5\. 传递给回调函数的条目具有指定当前相交比率的`intersectionRatio`属性。'
- en: When you create an `IntersectionObserver`, you can also specify a *threshold*.
    This defines when the observer fires. By default, the threshold is 0\. This means
    the observer fires as soon as the element becomes partially visible, even if it’s
    just a single pixel. A threshold of 1 only fires when the element becomes completely
    visible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建`IntersectionObserver`时，还可以指定一个*threshold*。这定义了观察者何时触发。默认情况下，阈值为0。这意味着只要元素部分可见，观察者就会触发，即使只有一个像素。阈值为1时，仅当元素完全可见时触发。
- en: Lazy Loading an Image When Scrolled into View
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒加载图像当滚动到视图中
- en: Problem
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to defer loading of an image until its position is scrolled into view.
    This is sometimes called *lazy loading*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要推迟加载图像，直到其位置滚动到视图中。有时这被称为*懒加载*。
- en: Solution
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `IntersectionObserver` on the `<img>` element and wait until it intersects
    with the viewport. Once it enters the viewport, set the `src` attribute to start
    loading the image (see [Example 6-1](#code_lazyLoadImage)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<img>`元素上使用`IntersectionObserver`，并等待直到它与视口交集。一旦进入视口，设置`src`属性开始加载图像（参见[示例 6-1](#code_lazyLoadImage)）。
- en: Example 6-1\. Lazily loading an image with `IntersectionObserver`
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1\. 使用`IntersectionObserver`进行图像的懒加载
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When you create an `IntersectionObserver`, you give it a callback function.
    Every time an element enters or exits, the observer calls this function with information
    about the element’s intersection status.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个`IntersectionObserver`时，需要给它提供一个回调函数。每当一个元素进入或退出视口时，观察者就会调用这个函数，并提供有关元素交集状态的信息。
- en: The observer may be observing multiple elements whose intersection could change
    at the same time, so the callback is passed an array of elements. In [Example 6-1](#code_lazyLoadImage),
    the observer is only observing a single image element, so the array only has one
    element.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者可能会观察多个元素，它们的交集状态可能同时发生变化，因此回调函数会传递一个元素数组。在[示例 6-1](#code_lazyLoadImage)中，观察者只观察单个图像元素，所以数组只有一个元素。
- en: If multiple elements enter (or leave) the viewport at the same time, there is
    one entry for each element.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果多个元素同时进入（或离开）视口，每个元素都会有一个条目。
- en: You want to check the `isIntersecting` property to determine if it’s time to
    load the image. This becomes `true` when the element becomes even partially visible.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要检查`isIntersecting`属性来确定是否该加载图像。当元素变得部分可见时，该属性变为`true`。
- en: Finally, you have to tell the observer what element to watch by calling `observe`
    on the observer object. This starts watching the element.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过在观察者对象上调用`observe`来告诉观察者要观察哪个元素。这开始监视该元素。
- en: Once you scroll down enough so that the element enters the viewport area, the
    observer calls the callback. The callback sets the URL of the image, then stops
    listening by calling `disconnect`. The callback stops listening because once the
    image is loaded, there is no need to continue observing the element.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你滚动到足够的位置，使元素进入视口区域，观察者就会调用回调函数。回调函数设置图像的URL，然后通过调用`disconnect`停止监听。回调函数停止监听是因为一旦图像加载完成，就不需要继续观察元素。
- en: Before `IntersectionObserver`, there weren’t many options to do this. One option
    would be to listen for the parent’s `scroll` event, and then calculate if the
    element is in the viewport by comparing the parent’s and child’s bounding rectangles.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`IntersectionObserver`出现之前，要做这件事情的选项并不多。一种选项是监听父元素的`scroll`事件，然后通过比较父元素和子元素的边界矩形来判断元素是否在视口中。
- en: This, of course, is not very performant. It’s also generally considered bad
    practice. You’d have to throttle or debounce this check to prevent it from running
    on every scroll operation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这样做性能不佳。这也通常被认为是不良实践。你需要节流或防抖这个检查，以防止它在每次滚动操作时都运行。
- en: Wrapping IntersectionObserver with a Promise
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将IntersectionObserver与Promise包装起来
- en: Problem
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a `Promise` that resolves once an element enters the viewport.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你想创建一个`Promise`，一旦一个元素进入视口，就会解析该`Promise`。
- en: Solution
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Wrap an `IntersectionObserver` in a `Promise`. Once the element intersects its
    parent, resolve the `Promise` (see [Example 6-2](#example6-2)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将`IntersectionObserver`包装在`Promise`中。一旦元素与其父元素交集，就解析`Promise`（参见[示例 6-2](#example6-2)）。
- en: Example 6-2\. Wrapping an `IntersectionObserver` with a `Promise`
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-2\. 将`IntersectionObserver`与`Promise`包装起来
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When the observer executes your callback with an entry that indicates the element
    is intersecting, you can resolve the `Promise`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当观察者使用指示元素交集的条目执行你的回调时，你可以解析`Promise`。
- en: As shown in [Example 6-3](#example6-3), you could use this approach to lazily
    load an image, similar to [“Lazy Loading an Image When Scrolled into View”](#recipe_lazyImage).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [示例 6-3](#example6-3) 所示，您可以使用此方法来延迟加载图像，类似于 [“滚动到视图中时延迟加载图像”](#recipe_lazyImage)。
- en: Example 6-3\. Using the `waitForElement` helper to lazily load an image
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-3\. 使用 `waitForElement` 辅助程序来延迟加载图像
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once you have resolved the `Promise`, the calling code can be sure the element
    is in the viewport. At that point the `lazyLoad` function sets the `src` attribute
    on the image.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦解析了 `Promise`，调用代码可以确保元素位于视窗内。此时，`lazyLoad` 函数会在图像上设置 `src` 属性。
- en: Automatically Pause and Play a Video
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动暂停和播放视频
- en: Problem
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a `<video>` element in a scrollable container. When the video is playing,
    you want to automatically pause it if it scrolls out of view.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您在可滚动容器中有一个 `<video>` 元素。当视频正在播放时，如果它滚出视窗，您希望自动暂停它。
- en: Solution
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `IntersectionObserver` to watch the video element. Once it no longer intersects
    the viewport, pause it. Later, if it reenters the viewport, resume it (see [Example 6-4](#code_autoPlay)).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `IntersectionObserver` 监控视频元素。一旦它不再与视窗相交，就将其暂停。稍后，如果重新进入视窗，就恢复播放（见 [示例 6-4](#code_autoPlay)）。
- en: Example 6-4\. Automatically pausing and resuming a video
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-4\. 自动暂停和恢复视频
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This observer watches the `video` element. As soon as it scrolls out of view,
    it is paused. Later, if you scroll it back into view, it is resumed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此观察器监视 `video` 元素。一旦它滚出视窗，就会暂停播放。稍后，如果将其滚回视窗中，它将恢复播放。
- en: Animating Changes in Height
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画化高度变化
- en: Problem
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an element whose contents may change. If the content changes, you want
    a smooth transition in the height.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个内容可能会更改的元素。如果内容更改，您希望高度可以平滑过渡。
- en: Solution
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a `MutationObserver` to watch the element’s children. If the element adds,
    removes, or changes any child elements, use a CSS transition to smoothly animate
    the height change. Because you can’t animate an element with an `auto` height,
    this requires some extra work to calculate explicit heights between which to animate
    (see [Example 6-5](#example6-5)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `MutationObserver` 监控元素的子元素。如果元素添加、删除或更改任何子元素，则使用 CSS 过渡来平滑地动画化高度变化。由于无法对具有
    `auto` 高度的元素进行动画处理，因此需要一些额外的工作来计算显式高度，以便在其中进行动画化（见 [示例 6-5](#example6-5)）。
- en: Example 6-5\. Animating an element’s height due to child element changes
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-5\. 因子元素更改而动画化元素高度
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: As with other observers, you need to pass a callback function when you create
    a `MutationObserver`. The observer calls this function whenever an observed element
    changes (which changes trigger the callback, specifically, depends on the options
    passed to `observer.observe`). When your app causes any changes to the element’s
    child list (adding, removing, or modifying elements), the callback recalculates
    the height to accommodate the new content.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他观察器一样，创建 `MutationObserver` 时需要传递一个回调函数。当观察到的元素发生变化时（具体取决于传递给 `observer.observe`
    的选项），观察器会调用此函数。当您的应用程序导致元素的子列表发生任何更改（添加、删除或修改元素）时，回调函数重新计算高度以适应新内容。
- en: There’s a lot going on here, mostly because the browser won’t let you animate
    an element with a `height` of `auto`. To make the animation work, you have to
    use explicit values for the start and end heights.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多事情要做，主要是因为浏览器不允许使用 `height` 为 `auto` 的元素进行动画处理。为了使动画正常工作，您必须使用显式值来设置起始和结束的高度。
- en: 'When first observing the element, you calculate its height by reading the `offset​Height`
    property. The function then explicitly sets this height on the element. This takes
    care of the `height: auto` for now.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '在首次观察元素时，通过读取 `offsetHeight` 属性来计算其高度。然后，函数显式地在元素上设置此高度。这暂时处理了 `height: auto`
    的问题。'
- en: When the element’s children change, the parent won’t resize automatically because
    it now has an explicit height set. The observer callback calculates the new height.
    With an explicit height set, the `offsetHeight` property has the same value.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素的子元素更改时，父元素不会自动调整大小，因为它现在具有显式设置的高度。观察器回调计算新高度。使用显式设置的高度后，`offsetHeight` 属性具有相同的值。
- en: 'To measure the *new* height, you must first set the height *back* to `auto`.
    Once you do this, `offsetHeight` gives the new height value. However, recall that
    you can’t animate from `height: auto`. Before updating the height, it has to be
    set from `auto` back to what it was *previously* set to.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '要测量*新*高度，必须首先将高度设置为*自动*。一旦完成这一步骤，`offsetHeight`就会给出新的高度值。但请记住，不能从`height: auto`进行动画。在更新高度之前，必须将其从*自动*设置回先前设置的状态。'
- en: At this point you have the new height. The actual height update goes in a call
    to `requestAnimationFrame`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经获得了新的高度。实际的高度更新放在`requestAnimationFrame`的调用中。
- en: This method of calculating the heights adds a lot of extra code. [Chapter 8](ch08.html#ch_webAnimationsApi)
    covers the Web Animations API, which makes these types of animations less painful.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种计算高度的方法增加了很多额外的代码。[第8章](ch08.html#ch_webAnimationsApi)介绍了Web动画API，使得这些类型的动画变得不那么痛苦。
- en: Change an Element’s Content Based on Size
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据大小更改元素的内容
- en: Problem
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to show different content within an element depending on its size.
    For example, you may want to handle the case when the element is very wide.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望根据元素的大小在元素内显示不同的内容。例如，您可能希望处理元素非常宽的情况。
- en: Solution
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a `ResizeObserver` on the element and update the content if the size goes
    above or below your defined threshold (see [Example 6-6](#example6-6)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对元素使用`ResizeObserver`，并在大小超过或低于您定义的阈值时更新内容（参见[示例 6-6](#example6-6)）。
- en: Example 6-6\. Updating an element’s content when it is resized
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-6\. 更新元素大小变化时的内容
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `ResizeObserver` calls the callback that you pass every time the element’s
    size changes. The observer also calls it initially when the element is first observed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResizeObserver`在元素的大小变化时调用您传递的回调函数。观察者在首次观察到元素时也会立即调用它。'
- en: The callback is called with an array of `ResizeObserverEntry` objects—here,
    where you’re only observing one element, it’s typically going to just be one entry.
    The `entry` object has a few properties, including `contentRect`, which defines
    the bounding rectangle of the element. From there you can get the width.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数调用时会传递一个`ResizeObserverEntry`对象数组——在这里，因为只观察一个元素，通常只会有一个条目。`entry`对象有几个属性，包括`contentRect`，定义了元素的边界矩形。从那里您可以获取宽度。
- en: As a result, when the element is resized, the observer callback changes its
    text to indicate the current width.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当元素调整大小时，观察者回调将更改其文本以指示当前宽度。
- en: Warning
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Use care when working with `ResizeObserver` to ensure the code in your callback
    doesn’t trigger the observer again. Such a callback can cause an infinite loop
    of `ResizeObserver` callbacks. This can happen if you make changes to the element
    within the callback that cause its size to change again.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ResizeObserver`时要小心，确保回调中的代码不会再次触发观察者。如果在回调中更改元素并导致其大小再次改变，这样的回调可能会导致`ResizeObserver`回调的无限循环。
- en: Applying a Transition When an Element Scrolls into View
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在元素滚动到视图中时应用过渡
- en: Problem
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have content that is not initially shown. When the content enters the viewport,
    you want to show it with an animated transition. For example, when an image scrolls
    into view, you want to make it fade in by transitioning its opacity.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一些不会初始显示的内容。当内容进入视口时，您希望通过动画过渡显示它。例如，当图像滚动到视图中时，您希望通过淡入使其不透明度过渡。
- en: Solution
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use an `IntersectionObserver` to watch for when the element scrolls into view.
    When it does, apply the animated transition (see [Example 6-7](#example6-7)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`IntersectionObserver`监视元素何时滚动到视图中。当元素滚动到视图中时，应用动画过渡（参见[示例 6-7](#example6-7)）。
- en: Example 6-7\. Fading in all images on the page when they scroll into view
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-7\. 当页面上的所有图像淡入视图时
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This recipe uses the `IntersectionObserver`’s `threshold` option. By default,
    an observer fires as soon as the element becomes visible (a `threshold` of `0`).
    This isn’t ideal here because you want enough of the image to be visible so that
    the user notices the transition. By setting a `threshold` of `0.25`, the observer
    won’t execute the callback until the image becomes at least 25% visible.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用`IntersectionObserver`的`threshold`选项。默认情况下，观察者在元素首次变为可见时触发（`threshold`为`0`）。但在这种情况下并不理想，因为您希望至少有足够的图像可见，以便用户注意到过渡效果。通过将`threshold`设置为`0.25`，观察者在图像至少25%可见时才执行回调。
- en: The callback also checks to see if the image is actually intersecting; that
    is, if it has become visible. This is necessary because when the observer first
    starts observing an element, it fires immediately. In this case, the images that
    are offscreen are not yet intersecting, so this check prevents them from becoming
    visible too early.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数还会检查图像是否实际相交，即是否已变为可见。这是必要的，因为当观察者首次开始观察一个元素时，它会立即触发。在这种情况下，屏幕外的图像尚未相交，因此此检查防止它们过早变为可见。
- en: If the entry is intersecting, you can set new styles that trigger an animation
    or transition. In this case, the callback is setting the image’s opacity to 1\.
    To make this effect work, you need to have previously set the opacity to 0 and
    defined a `transition` property of `opacity` (see [Example 6-8](#example6-8)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条目相交，则可以设置新的样式以触发动画或过渡效果。在这种情况下，回调函数将图像的不透明度设置为1。为使此效果生效，您需要先将不透明度设置为0，并定义`opacity`属性的`transition`（参见[示例 6-8](#example6-8)）。
- en: Example 6-8\. Styling images to fade in
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-8\. 图像淡入效果的样式
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this style, the images are invisible. When the observer callback sets the
    opacity to 1, the transition takes effect and you’ll see the image fade in.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种样式，图像是不可见的。当观察者回调将不透明度设置为1时，过渡生效，您将看到图像淡入。
- en: You only want to perform this animation once, so once the image is visible you
    don’t need to observe it anymore. You can clean up by calling `observer.unobserve`
    and passing the element to stop observing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您只希望执行此动画一次，因此一旦图像可见，就不再需要观察它。您可以通过调用`observer.unobserve`并传递元素来清理以停止观察。
- en: Using Infinite Scrolling
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无限滚动
- en: Problem
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to automatically load more data when the user scrolls to the bottom
    of a list without the user having to click a Load More button.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在用户滚动到列表底部时自动加载更多数据，而无需用户点击“加载更多”按钮。
- en: Solution
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Place an element at the end of the scrollable list and observe it with an `Intersection​Observer`.
    When the element starts intersecting, load more data (see [Example 6-9](#example6-9)).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将元素放置在可滚动列表的末尾，并使用`IntersectionObserver`观察它。当元素开始相交时，加载更多数据（参见[示例 6-9](#example6-9)）。
- en: Example 6-9\. Using `IntersectionObserver` for infinite scrolling
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-9\. 使用`IntersectionObserver`实现无限滚动
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The placeholder element could say Load More, or it can be visually hidden. The
    `IntersectionObserver` watches the placeholder element. Once it enters the viewport,
    the callback starts loading more data. Using this technique, a user can keep scrolling
    and scrolling until they reach the end of the data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符元素可以显示“加载更多”，也可以视觉上隐藏。`IntersectionObserver`监视占位符元素。一旦进入视口，回调函数开始加载更多数据。使用此技术，用户可以不断滚动直至达到数据末尾。
- en: You could make this placeholder a loading spinner. When the user scrolls to
    the bottom of the list, triggering a new request, they’ll see the spinner while
    the new data is loading. This is accurate because with the default threshold of
    0.0, the observer fires just before the user scrolls far enough to see the spinner.
    By this time, the data is already loading, so it’s not an artificial spinner.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此占位符设置为加载旋转器。当用户滚动到列表底部并触发新请求时，他们将在加载新数据时看到旋转器。这是准确的，因为使用默认阈值0.0时，观察者会在用户滚动到足够看到旋转器之前触发。此时，数据已经在加载，因此这不是一个人为的旋转器。
- en: When the observer first starts observing, the callback fires immediately. If
    the list is empty, the placeholder is visible, which triggers the code to load
    the first page of data.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当观察者首次开始观察时，回调立即触发。如果列表为空，则占位符可见，触发代码加载第一页数据。
