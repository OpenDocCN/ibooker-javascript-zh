- en: Chapter 20\. Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章 调试
- en: “Debugging” is perhaps an unfortunate term, what with its association with defects.
    The fact is, what we refer to as “debugging” is an activity you will find yourself
    doing all the time, whether you’re implementing a new feature, learning how something
    works, or actually fixing a bug. A better term might be “exploring,” but we’ll
    stick with “debugging,” since the activity it refers to is unambiguous, regardless
    of the motivation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “调试”可能是一个不幸的术语，因为它与缺陷有关。事实上，我们所说的“调试”是一种活动，你会发现自己一直在做，无论是实现新功能、学习某些东西的工作原理，还是实际修复一个
    bug。一个更好的术语可能是“探索”，但我们还是坚持使用“调试”，因为它所指的活动是明确的，无论动机如何。
- en: 'Debugging is an oft-neglected skill: it seems that most programmers are expected
    to be born knowing how to do it. Perhaps computer science professors and book
    authors see debugging as such an obvious skill that they overlook it.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是一个经常被忽视的技能：似乎大多数程序员被期望天生就知道如何做。也许计算机科学教授和书籍作者认为调试是如此明显的一项技能，以至于他们忽视了它。
- en: The fact is, debugging is a skill that can be taught, and it is an important
    way by which programmers come to understand not just the framework they are working
    in, but also their own code and that of their team. In this chapter, we’ll discuss
    some of the tools and techniques you can use for debugging Node and Express applications
    effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，调试是一种可以教授的技能，它是程序员了解他们所工作的框架以及他们自己和团队代码的重要方式。在本章中，我们将讨论一些可以有效调试Node和Express应用程序的工具和技术。
- en: The First Principle of Debugging
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试的第一原则
- en: As the name implies, “debugging” often refers to the process of finding and
    eliminating defects. Before we talk about tools, let’s consider some general debugging
    principles.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，“调试”通常指找出和消除缺陷的过程。在谈论工具之前，让我们考虑一些通用的调试原则。
- en: How often have I said to you that when you have eliminated the impossible, whatever
    remains, however improbable, must be the truth?
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我多少次告诉过你，当你排除了不可能的事情之后，无论多么不可思议，剩下的一定是真相？
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sir Arthur Conan Doyle
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阿瑟·柯南·道尔
- en: The first and most important principle of debugging is the process of *elimination*.
    Modern computer systems are incredibly complicated, and if you had to hold the
    *whole system* in your head, and pluck the source of a single problem out of that
    vast space, you probably wouldn’t even know where to start. Whenever you’re confronted
    with a problem that isn’t immediately obvious, your *very first thought* should
    be, “What can I *eliminate* as the source of the problem?” The more you can eliminate,
    the fewer places you have to look.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的第一个和最重要的原则是*排除*的过程。现代计算机系统非常复杂，如果你必须在脑海中掌握整个系统，并从中挑出单个问题的源头，你可能甚至都不知道从哪里开始。每当你面对一个不明显的问题时，你的*第一个想法*应该是：“我可以*排除*作为问题来源的哪些因素？”你能排除得越多，你就需要查找的地方就越少。
- en: 'Elimination can take many forms. Here are some common examples:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 排除可以采取多种形式。以下是一些常见的例子：
- en: Systematically commenting out or disabling blocks of code.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统地注释或禁用代码块。
- en: Writing code that can be covered by unit tests; the unit tests themselves provide
    a framework for elimination.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写可以通过单元测试覆盖的代码；单元测试本身提供了一个排除错误的框架。
- en: Analyzing network traffic to determine if the problem is on the client or server
    side.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析网络流量以确定问题是客户端还是服务器端。
- en: Testing a different part of the system that has similarities to the first.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试与第一个相似的系统的不同部分。
- en: Using input that has worked before, and changing that input one piece at a time
    until the problem exhibits.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用之前成功的输入，并逐步更改输入直到问题显现。
- en: Using version control to go back and forth in time until the problem disappears,
    and you can isolate it to a particular change (see [`git bisect`](http://bit.ly/34TOufp)
    for more information about this).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本控制在时间上前后移动，直到问题消失，并且你可以将其隔离到特定的更改（有关此信息，请参见[`git bisect`](http://bit.ly/34TOufp)）。
- en: “Mocking” functionality to eliminate complex subsystems.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “模拟”功能以消除复杂的子系统。
- en: 'Elimination is not a silver bullet, though. Often, problems are due to complex
    interactions between two or more components: eliminate (or mock) any one of the
    components, and the problem could go away, but the problem can’t be isolated to
    any single component. Even in this situation, though, elimination can help narrow
    down the problem, even if it doesn’t light up a neon sign over the exact location.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然消除不是万能药，但它也不是银弹。通常，问题是由两个或更多组件之间复杂的交互引起的：消除（或模拟）任何一个组件，问题可能会消失，但问题不能被隔离到任何单一组件。即使在这种情况下，消除也可以帮助缩小问题的范围，即使它没有在确切位置上点亮霓虹灯。
- en: 'Elimination is most successful when it’s careful and methodical. It’s very
    easy to miss things when you just wantonly eliminate components without considering
    how those components affect the whole. Play a game with yourself: when you consider
    a component to eliminate, walk through how the removal of that component will
    affect the system. This will inform you about what to expect and whether or not
    removing the component tells you anything useful.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 消除最成功的时候要谨慎和有条理。当你只是肆意消除组件而不考虑这些组件对整体的影响时，很容易忽略事物。和自己玩一个游戏：当你考虑消除一个组件时，走一遍消除那个组件将如何影响系统的步骤。这将告诉你要期待什么，以及消除组件是否会告诉你有用的信息。
- en: Take Advantage of REPL and the Console
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用REPL和控制台
- en: Both Node and your browser offer you a *read-eval-print loop* (REPL); this is
    basically just a way to write JavaScript interactively. You type in some JavaScript,
    press Enter, and immediately see the output. It’s a great way to play around,
    and is often the quickest and most intuitive way to locate an error in small bits
    of code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是Node还是你的浏览器都提供了一个*读取-评估-打印循环*（REPL）；这基本上只是一种交互式编写JavaScript的方式。你输入一些JavaScript代码，按Enter，立即看到输出。这是一个很好的玩耍方式，通常也是在小段代码中找到错误最快最直观的方式。
- en: 'In a browser, all you have to do is pull up your JavaScript console, and you
    have a REPL. In Node, all you have to do is type `node` without any arguments,
    and you enter REPL mode; you can require packages, create variables and functions,
    or do anything else you could normally do in your code (except create packages:
    there’s no meaningful way to do that in the REPL).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，你只需打开JavaScript控制台，你就有了一个REPL。在Node中，你只需不带任何参数输入`node`，你就进入了REPL模式；你可以要求包、创建变量和函数，或者做你在代码中通常能做的任何其他事情（除了创建包：在REPL中没有有意义的方式来做这件事）。
- en: Console logging is also your friend. It’s a crude debugging technique, perhaps,
    but an easy one (both easy to understand and easy to implement). Calling `console.log`
    in Node will output the contents of an object in an easy-to-read format, so you
    can easily spot problems. Keep in mind that some objects are so large that logging
    them to the console will produce so much output that you’ll have a hard time finding
    any useful information. For example, try `console.log(req)` in one of your path
    handlers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台日志也是你的好朋友。这是一种粗糙的调试技术，也许是一种简单的技术（易于理解和实现）。在Node中调用`console.log`将以易于阅读的格式输出对象的内容，因此你可以轻松地发现问题。请记住，某些对象可能很大，将它们记录到控制台中将产生大量输出，这样你可能很难找到任何有用的信息。例如，尝试在你的路径处理程序中使用`console.log(req)`。
- en: Using Node’s Built-in Debugger
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node的内置调试器
- en: 'Node has a built-in debugger that allows you to step through your application,
    as if you were going on a ride-along with the JavaScript interpreter. All you
    have to do to start debugging your app is use the `inspect` argument:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Node有一个内置的调试器，允许你像陪同JavaScript解释器一样逐步调试你的应用程序。要开始调试你的应用程序，你只需使用`inspect`参数：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you do, you’ll immediately notice a couple of things. First, on your console
    you will see a URL; this is because the Node debugger works by creating its own
    web server, which allows you to control the execution of the application being
    debugged. This may not be impressive right now, but the usefulness of this approach
    will be clear when we discuss inspector clients.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你这样做时，你会立即注意到几件事情。首先，在你的控制台上你会看到一个URL；这是因为Node调试器通过创建自己的Web服务器来工作，这允许你控制被调试应用程序的执行。现在可能并不令人印象深刻，但当我们讨论检查器客户端时，这种方法的有用性将是显而易见的。
- en: 'When you’re in the console debugger, you can type `help` to get a list of commands.
    The commands you will use most often are `n` (next), `s` (step in), and `o` (step
    out). `n` will step “over” the current line: it will execute it, but if that instruction
    calls other functions, they will be executed before control is returned to you.
    `s`, in contrast, will step *into* the current line: if that line invokes other
    functions, you will be able to step through them. `o` allows you to step out of
    the currently executing function. (Note that “stepping in” and “stepping out”
    refer only to *functions*; they do not step into or out of `if` or `for` blocks
    or other flow-control statements.)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处于控制台调试器时，你可以输入 `help` 来获取命令列表。你最常使用的命令是 `n`（下一步）、`s`（步进）和 `o`（步出）。`n` 将“跳过”当前行：它会执行它，但如果该指令调用其他函数，则这些函数将在控制返回给你之前执行。相比之下，`s`
    将*进入*当前行：如果该行调用其他函数，你将能够逐步执行它们。`o` 允许你从当前执行的函数中跳出。（请注意，“步入”和“步出”仅适用于*函数*；它们不会进入或退出`if`或`for`块或其他流程控制语句。）
- en: The command-line debugger has more functionality, but chances are, you won’t
    want to use it that often. The command line is great for many things, but debugging
    isn’t one of them. It’s good that it’s available in a pinch (for example, if all
    you have is SSH access to the server, or if your server doesn’t even have a GUI
    installed). More often, you’ll want to use a graphical inspector client.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行调试器具有更多功能，但你可能不经常使用它。命令行非常适合许多事情，但调试不是它的长项。当需要时可以快速使用（例如，如果你只能通过SSH访问服务器，或者你的服务器甚至没有安装GUI）。更常见的情况是，你会想要使用图形检视器客户端。
- en: Node Inspector Clients
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点检视器客户端
- en: While you probably won’t want to use the command-line debugger except in a pinch,
    the fact that Node exposes its debugging controls through a web service gives
    you other options.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可能不想在一般情况下使用命令行调试器，但Node通过Web服务公开其调试控件，给你提供了其他选项。
- en: 'The most straightforward debugger is to use Chrome, which uses the same debugging
    interface as it does for debugging frontend code. So if you’ve ever used that
    interface, you should feel right at home. Getting started is easy. Start your
    application with the `--inspect` option (which is distinct from the `inspect`
    argument mentioned previously):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最直接的调试器是使用Chrome，它使用与调试前端代码相同的调试接口。因此，如果你以前使用过该接口，你应该会很快上手。入门很容易。使用`--inspect`选项启动你的应用程序（这与前面提到的`inspect`参数是不同的）：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now the fun begins: in your browser’s URL bar, enter `*chrome://inspect*`.
    You’ll see a DevTools page, and in the Devices section, click “Open dedicated
    DevTools for Node.” This will open a new window, which is your debugger:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始有趣的部分：在你的浏览器的URL栏中输入 `*chrome://inspect*`。你会看到一个开发者工具页面，在设备部分点击“为Node打开专用的DevTools”。这将打开一个新窗口，即你的调试器：
- en: '![Staring Chrome Debugger](Images/bwne_2001.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![启动Chrome调试器](Images/bwne_2001.png)'
- en: 'Click the Sources tab, and then, in the leftmost pane, click Node.js to expand
    it, and then click “file://”. You’ll see the folder that your application is in;
    expand that, and you’ll see all of your JavaScript source (you’ll only see JavaScript
    and sometimes JSON files if you’ve required them somewhere). From here, you can
    click any file to see its source, and set breakpoints:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Sources”选项卡，然后在最左边的窗格中点击Node.js以展开它，接着点击“file://”。你会看到你的应用所在的文件夹；展开它，你将看到所有的JavaScript源代码（如果你在其他地方引入了，你只会看到JavaScript和有时JSON文件）。从这里，你可以点击任何文件以查看其源代码，并设置断点：
- en: '![Using Chrome Debugger](Images/bwne_2002.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用Chrome调试器](Images/bwne_2002.png)'
- en: 'Unlike our previous experience with the command-line debugger, your application
    is already running: all of the middleware has been linked in, and the app is listening.
    So how do we step through our code? The easiest way (and the method you’ll probably
    use the most often) is to set a *breakpoint*. This just tells the debugger to
    stop execution on a specific line so you can step through the code.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前在命令行调试器的经验不同，你的应用程序已经在运行：所有中间件都已链接，并且应用程序正在监听。那么我们如何逐步执行我们的代码？最简单的方法（也是你可能经常使用的方法）是设置一个*断点*。这只是告诉调试器在特定行上停止执行，以便你可以逐步执行代码。
- en: All you have to do to set a breakpoint is to open a source file from the “file://”
    browser in the debugger, and click the line number (in the left column); a little
    blue arrow will appear, indicating there’s a breakpoint on that line (click again
    to turn it off). Go ahead and set a breakpoint inside one of your route handlers.
    Then, in another browser window, visit that route. If you’re using Chrome, the
    browser will automatically switch to the debugger window, while the original browser
    just spins (because the server has been paused and isn’t responding to the request).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 设置断点的方法很简单，只需在调试器中打开“file://”浏览器中的源文件，然后点击左侧列中的行号；一个小蓝色箭头将出现，表示该行上设置了断点（再次点击可取消）。尝试在其中一个路由处理程序内设置一个断点。然后，在另一个浏览器窗口中，访问该路由。如果您使用的是Chrome，浏览器将自动切换到调试器窗口，而原始浏览器则会停滞不前（因为服务器已暂停且未响应请求）。
- en: 'In the debugger window, you can step through the program in a much more visual
    manner than we did with the command-line debugger. You’ll see that the line you
    set a breakpoint on is highlighted in blue. That means that’s the current execution
    line (which is actually the next line that will execute). From here, you have
    access to the same commands as we did in the command-line debugger. Similar to
    the command-line debugger, we have the following actions available to us:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试器窗口中，您可以以比命令行调试器更加直观的方式逐步执行程序。您会看到设置断点的那一行会被标记为蓝色。这表示当前执行的行（实际上是将要执行的下一行）。从这里，您可以像在命令行调试器中一样使用相同的命令。类似于命令行调试器，我们可以执行以下操作：
- en: Resume script execution (F8)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复脚本执行（F8）
- en: This will simply “let it fly”; you will no longer be stepping through the code,
    unless you stop on another breakpoint. You usually use this when you’ve seen what
    you need to see, or you want to skip ahead to another breakpoint.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将简单地“让它飞翔”；除非在另一个断点停止，否则不会再逐步执行代码。通常在您已经看到所需内容或想要跳转到另一个断点时使用此操作。
- en: Step over next function call (F10)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过下一个函数调用（F10）
- en: If the current line invokes a function, the debugger will not descend into that
    function. That is, the function will be executed, and the debugger will advance
    to the next line after the function invocation. You’ll use this when you’re on
    a function call that you’re not interested in the details of.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前行调用了一个函数，调试器将不会深入到该函数中。也就是说，函数会被执行，调试器会在函数调用后继续执行下一行。当您对一个函数调用不感兴趣的详细信息时使用此操作。
- en: Step into next function call (F11)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 进入下一个函数调用（F11）
- en: This will descend into the function call, hiding nothing from you. If this is
    the only action you ever used, you would eventually see everything that gets executed—which
    sounds fun at first, but after you’ve been at it for an hour, you’ll have a newfound
    respect for what Node and Express are doing for you!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将深入到函数调用中，毫不隐藏地展示所有内容给您。如果这是您唯一使用的操作，最终您将看到所有执行的内容——起初听起来很有趣，但一个小时后，您会对Node和Express为您做了什么有了新的尊重！
- en: Step out of current function (Shift-F11)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 退出当前函数（Shift-F11）
- en: Will execute the rest of the function you’re currently in and resume debugging
    on the next line of the *caller* of this function. Most commonly, you’ll use this
    when you either accidentally step into a function or have seen as much as you
    need of the function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行您当前所在的函数的其余部分，并在调用此函数的*调用方*的下一行恢复调试。通常情况下，当您意外地进入一个函数或者已经看到函数的所需内容时，您会使用此操作。
- en: 'In addition to all of the control actions, you have access to a console: that
    console is executing in the *current context of your application*. So you can
    inspect variables and even change them, or invoke functions. This can be incredibly
    handy for trying out really simple things, but it can quickly get confusing, so
    I don’t encourage you to dynamically modify your running application too much
    in this manner; it’s too easy to get lost.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了所有的控制操作，您还可以访问一个控制台：该控制台在*您应用程序的当前上下文*中执行。因此，您可以检查变量甚至更改它们，或调用函数。这对于尝试一些非常简单的事情非常方便，但很容易混淆，所以我不建议您过多地以这种方式动态修改正在运行的应用程序；这样很容易迷失方向。
- en: On the right, you have some useful data. Starting at the top are *watch expressions*;
    these are JavaScript expressions you can define that will be updated in real time
    as you step through the application. For example, if there was a specific variable
    you wanted to keep track of, you could enter it here.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧是一些有用的数据。从顶部开始是*监视表达式*；这些是你可以定义的 JavaScript 表达式，在你逐步执行应用程序时会实时更新。例如，如果有特定的变量你想要跟踪，你可以在这里输入它。
- en: 'Below watch expressions is the *call stack*; this shows you how you got where
    you are. That is, the function you’re in was called by some function, and that
    function was called by some function; the call stack lists all of those functions.
    In the highly asynchronous world of Node, the call stack can be very difficult
    to unravel and understand, especially when anonymous functions are involved. The
    topmost entry in that list is where you are now. The one right below it is the
    function that called the function that you’re in now, and so on. If you click
    any entry in this list, you will be magically transported to that context: all
    of your watches and your console context will now be in that context.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在监视表达式下方是*调用堆栈*；它展示了你是如何到达当前位置的。也就是说，你所在的函数是被某个函数调用的，而那个函数是被某个函数调用的；调用堆栈列出了所有这些函数。在
    Node.js 高度异步的世界中，调用堆栈可能非常难以解开和理解，特别是当涉及匿名函数时。列表中最顶部的条目就是你现在所在的地方。其下的条目是调用当前函数的函数，依此类推。如果你点击列表中的任何条目，你将神奇地跳转到那个上下文中：所有你的监视和控制台上下文现在都在那个上下文中。
- en: Below the call stack are the scope variables. As the name implies, these are
    the variables that are currently in scope (which includes variables in the parent
    scope that are visible to us). This section can often provide you a lot of information
    about the key variables you’re interested in at a glance. If you have a lot of
    variables, this list will become unwieldy, and you might be better off defining
    just the variables you’re interested in as watch expressions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用堆栈下方是作用域变量。顾名思义，这些变量是当前作用域内的（包括父作用域中对我们可见的变量）。这一部分通常能够一览你感兴趣的关键变量的大量信息。如果你有很多变量，这个列表会变得难以管理，你可能最好只定义你感兴趣的变量作为监视表达式。
- en: 'Next, there is a list of all breakpoints, which is really just bookkeeping:
    it’s handy to have if you’re debugging a hairy problem and you have a lot of breakpoints
    set. Clicking one will take you directly there (but it won’t change the context,
    like clicking something in the call stack; this makes sense because not every
    breakpoint will represent an active context, whereas everything in the call stack
    does).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是所有断点的列表，这实际上只是一种簿记：如果你正在调试一个棘手的问题并且设置了很多断点，这很方便。点击其中一个将直接带你到那里（但它不会像点击调用堆栈中的条目那样改变上下文；这是有道理的，因为并不是每个断点都代表一个活动上下文，而调用堆栈中的每一项都是）。
- en: 'Sometimes, what you need to debug is your application setup (when you’re linking
    middleware into Express, for example). Running the debugger as we have been, that
    will all happen in the blink of an eye before we can even set a breakpoint. Fortunately,
    there’s a way around that. All we have to do is specify `--inspect-brk` instead
    of simply `--inspect`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要调试的是你的应用程序设置（例如将中间件链接到 Express）。按照我们一直使用的调试器，这一切将在我们设置断点之前一眨眼间发生。幸运的是，这里有一个解决办法。我们只需指定`--inspect-brk`，而不是简单的`--inspect`：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The debugger will break on the very first line of your application, and then
    you can step through or set breakpoints as you see fit.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器会在你的应用程序的第一行断开，然后你可以根据需要逐步执行或设置断点。
- en: Chrome isn’t your only option for an inspect client. In particular, if you use
    Visual Studio Code, its built-in debugger works very well. Instead of starting
    your application with the `--inspect` or `--inspect-brk` options, click the Debug
    icon in the Visual Studio Code side menu (a bug with a line through it). At the
    top of the sidebar, you’ll see a little gear icon; click that, and that will open
    some debugging configuration settings. The only setting you need to worry about
    is “program”; make sure it’s pointing to your entry point (*meadowlark.js*, for
    example).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 不是你唯一的检查客户端选择。特别是，如果你使用 Visual Studio Code，它内置的调试器效果非常好。不要使用`--inspect`或`--inspect-brk`选项启动你的应用程序，而是点击
    Visual Studio Code 侧边栏中的调试图标（一个有横线穿过的虫子）。在侧边栏顶部，你会看到一个小齿轮图标；点击它，会打开一些调试配置设置。你唯一需要关注的设置是“程序”；确保它指向你的入口点（例如*meadowlark.js*）。
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You may have to also set the current working directory, or `"cwd"`. For example,
    if you’ve opened Visual Studio Code in a parent directory of where *meadowlark.js*
    lives, you may need to set `"cwd"` (which is the same as having to `cd` into the
    right directory before running `node meadowlark.js`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要设置当前工作目录，或者`"cwd"`。例如，如果你在*meadowlark.js*所在的父目录中打开了 Visual Studio Code，你可能需要设置`"cwd"`（这与在运行`node
    meadowlark.js`之前必须`cd`到正确目录是一样的）。
- en: Once you’re all set up, just click the green Play arrow in the debug bar, and
    your debugger is running. The interface is slightly different from Chrome’s, but
    if you’re using Visual Studio Code, you will probably feel right at home. For
    more information, see [Debugging in Visual Studio Code](http://bit.ly/2pb7JBV).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好，只需点击调试工具栏中的绿色播放箭头，你的调试器就开始运行了。界面与 Chrome 略有不同，但如果你使用的是 Visual Studio Code，你可能会觉得非常熟悉。更多信息，请参阅[在
    Visual Studio Code 中进行调试](http://bit.ly/2pb7JBV)。
- en: Debugging Asynchronous Functions
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试异步函数
- en: 'One of the most common frustrations people have when being exposed to asynchronous
    programming for the first time is in debugging. Consider the following code, for
    example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次接触异步编程时，人们最常遇到的挫折之一是调试。例如，考虑以下代码：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you’re new to asynchronous programming, you might expect to see the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对异步编程还不熟悉，你可能期望看到以下内容：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But you won’t; instead you’ll see this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不会这样做；相反，你会看到这个：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you’re confused about this, debugging probably won’t help. You’ll start on
    line 1, then step over it, which puts you on line 2\. You then step in, expecting
    to enter the function, ending up on line 3, but you actually end up on line 5!
    That’s because `fs.readFile` executes the function only *when it’s done reading
    the file*, which won’t happen until your application is idle. So you step over
    line 5, and you land on line 6…you then keep trying to step, but never get to
    line 3 (you eventually will, but it could take a while).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此感到困惑，调试可能不会有帮助。你从第1行开始，然后跳过它，到达第2行。接着你步入函数，期望进入第3行，但实际上你却到了第5行！这是因为`fs.readFile`只有在*读取文件完成后*才执行函数，这将发生在你的应用程序处于空闲状态时。因此你跳过第5行，然后落到第6行……然后你继续尝试步进，但永远无法到达第3行（最终你会到达，但可能需要一段时间）。
- en: If you want to debug lines 3 or 4, all you have to do is set a breakpoint on
    line 3, and then let the debugger run. When the file is read and the function
    is invoked, you’ll break on that line, and hopefully all will be clear.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想调试第3或第4行，你只需在第3行设置断点，然后让调试器运行。当文件被读取并调用函数时，你将在那一行断点处停下，希望一切都会清楚。
- en: Debugging Express
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Express
- en: If, like me, you’ve seen a lot of overengineered frameworks in your career,
    the idea of stepping through the framework source code might sound like madness
    (or torture) to you. And exploring the Express source code is not child’s play,
    but it *is* well within the grasp of anyone with a good understanding of JavaScript
    and Node. And sometimes, when you are having problems with your code, debugging
    those problems can best be solved by stepping through the Express source code
    itself (or third-party middleware).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像我一样，在职业生涯中见过很多过度工程化的框架，那么穿越框架源代码可能听起来像疯狂（或折磨）。探索 Express 源代码并非儿戏，但对于理解 JavaScript
    和 Node 的人来说并不困难。有时，当你在代码中遇到问题时，通过穿越 Express 源代码本身（或第三方中间件）来调试这些问题可能是最好的解决方法。
- en: 'This section will be a brief tour of the Express source code so that you can
    be more effective in debugging your Express applications. For each part of the
    tour, I will give you the filename with respect to the Express root (which you
    can find in your *node_modules/express* directory), and the name of the function.
    I’m not using line numbers, because of course they may differ depending on what
    exact version of Express you’re using:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将简要介绍 Express 源代码，以便您在调试 Express 应用程序时更加高效。对于这次的介绍，我将会给出文件名（相对于 Express 根目录，在你的
    *node_modules/express* 目录中找得到）和函数名。我不使用行号，因为具体的 Express 版本不同，行号可能会有所不同：
- en: Express app creation (*lib/express.js*, `function createApplication`)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Express 应用程序创建（*lib/express.js*，`function createApplication`）
- en: This is where your Express app begins its life. This is the function that’s
    being invoked when you call `const app = express()` in your code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的 Express 应用程序的起始点。这个函数在你的代码中调用`const app = express()`时被调用。
- en: Express app initialization (*lib/application.js*, `app.defaultConfiguration`)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Express 应用程序初始化（*lib/application.js*，`app.defaultConfiguration`）
- en: 'This is where Express gets initialized: it’s a good place to see all the defaults
    Express starts out with. It’s rarely necessary to set a breakpoint here, but it
    is useful to step through it at least once to get a feel for the default Express
    settings.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Express 初始化的地方：这是查看 Express 默认设置的好地方。很少需要在这里设置断点，但至少需要逐步进行一次以了解默认的 Express
    设置。
- en: Add middleware (*lib/application.js*, `app.use`)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 添加中间件（*lib/application.js*，`app.use`）
- en: 'Every time Express links middleware in (whether you do it explicitly, or it’s
    explicitly done by Express or any third parties), this function gets called. It’s
    deceptively simple, but really understanding it takes some effort. It’s sometimes
    useful to put a breakpoint in here (you’ll want to use `--debug-brk` when you
    run your app; otherwise, all the middleware will be added before you can set a
    breakpoint), but it can be overwhelming: you’ll be surprised at how much middleware
    is linked in in a typical application.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每次 Express 将中间件链接进来（无论您是否显式执行此操作，或者是由 Express 或任何第三方显式执行），都会调用此函数。这看起来非常简单，但要真正理解它需要一些努力。有时在这里设置断点是有用的（在运行应用程序时您需要使用
    `--debug-brk`，否则所有中间件都会在您设置断点之前添加），但这可能会让人不知所措：您会惊讶地发现典型应用程序中链接的中间件有多少。
- en: Render view (*lib/application.js*, `app.render`)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染视图（*lib/application.js*，`app.render`）
- en: This is another pretty meaty function, but a useful one if you need to debug
    tricky view-related issues. If you step through this function, you’ll see how
    the view engine is selected and invoked.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个非常重要的函数，但如果您需要调试与视图相关的复杂问题，则非常有用。如果您逐步执行此函数，您将看到如何选择和调用视图引擎。
- en: Request extensions (*lib/request.js*)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请求扩展（*lib/request.js*）
- en: You will probably be surprised at how sparse and easy to understand this file
    is. Most of the methods Express adds to the request objects are very simple convenience
    functions. It’s rarely necessary to step through this code or set breakpoints
    because of the simplicity of the code. It is, however, often helpful to look at
    this code to understand how some of the Express convenience methods work.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对这个文件如此简洁和易于理解感到惊讶。Express 添加到请求对象的大多数方法都是非常简单的便捷函数。很少需要逐行查看此代码或设置断点，因为代码的简单性使其很少需要。但是，查看此代码以理解某些
    Express 便捷方法的工作原理通常是有帮助的。
- en: Send response (*lib/response.js*, `res.send`)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 发送响应（*lib/response.js*，`res.send`）
- en: It almost doesn’t matter how you construct a response—`.send`, `.render`, `.json`,
    or `.jsonp`—it will eventually get to this function (the exception is `.sendFile`).
    So this is a handy place to set a breakpoint, because it should be called for
    every response. You can then use the call stack to see how you got there, which
    can be helpful in figuring out where there might be a problem.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，无论您如何构造响应—`.send`、`.render`、`.json`或`.jsonp`—最终都会到达此函数（例外是`.sendFile`）。因此，设置断点的地方应该是每个响应的调用点。然后您可以使用调用堆栈来查看如何到达此处，这有助于找出可能存在问题的地方。
- en: Response extensions (*lib/response.js*)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 响应扩展（*lib/response.js*）
- en: While there is some meat in `res.send`, most of the other methods in the response
    object are pretty straightforward. It’s occasionally useful to put breakpoints
    in these functions to see exactly how your app is responding to the request.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `res.send` 函数中有一些核心内容，但响应对象中的大多数其他方法都非常直观。偶尔在这些函数中设置断点可以准确查看应用程序对请求的响应方式。
- en: Static middleware (*node_modules/serve-static/index.js*, `function staticMiddleware`)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 静态中间件（*node_modules/serve-static/index.js*，`function staticMiddleware`）
- en: 'Generally, if static files aren’t being served as you expect, the problem is
    with your routing, not with the static middleware: routing takes precedence over
    the static middleware. So if you have a file *public/test.jpg*, and a route */test.jpg*,
    the static middleware will never even get called in deference to the route. However,
    if you need specifics about how headers are set differently for static files,
    it can be useful to step through the static middleware.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果静态文件未按您的预期提供服务，则问题可能出在路由设置上，而不是静态中间件上：路由优先于静态中间件。因此，如果您有一个文件 *public/test.jpg*，和一个路由
    */test.jpg*，静态中间件甚至不会被调用，以遵循路由。但是，如果您需要了解静态文件的头部如何设置不同，逐步执行静态中间件可能会有所帮助。
- en: If you’re scratching your head wondering where all the middleware is, that’s
    because there is very little middleware in Express (the static middleware and
    the router being the notable exceptions).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在思考中间件的位置，那是因为 Express 中的中间件非常少（静态中间件和路由器是明显的例外）。
- en: 'Just as it’s helpful to dive into the Express source code when you’re trying
    to unravel a difficult problem, you may have to look into the source code of your
    middleware. There’s really too much to go through, but there are three I want
    to mention as being pretty fundamental to understanding what’s going on in an
    Express application:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你试图解开一个困难问题时，深入了解Express源代码是很有帮助的，你可能需要查看你的中间件源代码。确实有太多内容需要处理，但有三个我想提一下，因为它们在理解Express应用程序中发生的事情方面非常基础：
- en: Session middleware (*node_modules/express-session/index.js*, `function session`)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 会话中间件（*node_modules/express-session/index.js*，`function session`）
- en: A lot goes into making sessions work, but the code is pretty straightforward.
    You may want to set a breakpoint in this function if you’re having issues that
    are related to sessions. Keep in mind that it is up to you to provide the storage
    engine for the session middleware.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 很多工作需要让会话正常运行，但代码相当简单。如果与会话相关的问题困扰着你，可能需要在这个函数中设置断点。请记住，你需要自己提供会话中间件的存储引擎。
- en: Logger middleware (*node_modules/morgan/index.js*, `function logger`)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记录器中间件（*node_modules/morgan/index.js*，`function logger`）
- en: The logger middleware is really there for you as a debugging aid, not to be
    debugged itself. However, there’s some subtlety to the way logging works that
    you’ll get only by stepping through the logger middleware once or twice. The first
    time I did it, I had a lot of “aha” moments, and found myself using logging more
    effectively in my applications, so I recommend taking a tour of this middleware
    at least once.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 记录器中间件真的很适合作为调试辅助工具，而不是用来进行调试的。然而，日志记录工作的某些微妙之处，你只有在调试记录器中间件一两次后才能领会到。我第一次这样做时，有了很多“啊哈”时刻，并发现自己在应用程序中更有效地使用日志记录，因此我建议至少进行一次这个中间件的探索之旅。
- en: URL-encoded body parsing (*node_modules/body-parser/lib/types/urlencoded.js*,
    `function` `urlencoded`)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: URL编码的请求体解析（*node_modules/body-parser/lib/types/urlencoded.js*，`function` `urlencoded`）
- en: The manner in which request bodies are parsed is often a mystery to people.
    It’s not really that complicated, and stepping through this middleware will help
    you understand the way HTTP requests work. Aside from a learning experience, you
    won’t find that you need to step into this middleware for debugging very often.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请求体解析的方式通常让人感到神秘。它并不是真的很复杂，通过调试这个中间件将帮助你理解HTTP请求的工作方式。除了作为学习经验之外，你不会经常需要进入这个中间件进行调试。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'We’ve discussed a *lot* of middleware in this book. I can’t reasonably list
    every landmark you might want to look at on your tour of Express internals, but
    hopefully these highlights take away some of the mystery of Express, and embolden
    you to explore the framework source code whenever needed. Middleware varies greatly
    not just in quality but in accessibility: some middleware is wickedly difficult
    to understand, while some is as clear as a pool of water. Whatever the case, don’t
    be afraid to look: if it’s too complicated, you can move on (unless you really
    need to understand it, of course), and if not, you might learn something.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中我们讨论了*大量*的中间件。我无法合理地列出你在探索Express内部时可能想查看的每一个重要点，但希望这些亮点能消除Express的一些神秘感，并鼓励你在需要时探索框架源代码。中间件不仅在质量上有很大差异，而且在可访问性上也有很大差异：有些中间件非常难以理解，而有些则像清澈的水池一样明了。无论如何，不要害怕去看：如果太复杂，你可以继续前进（除非你确实需要理解它），如果不是，你可能会学到一些东西。
