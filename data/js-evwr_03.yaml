- en: Chapter 2\. API Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 API 介绍
- en: Picture yourself seated in a booth at a small, local restaurant where you’ve
    decided to order a sandwich. The server writes your order on a slip of paper and
    passes that paper to the cook. The cook reads the order, takes individual ingredients
    to build the sandwich, and passes the sandwich to the server. The server then
    brings the sandwich to you to eat. If you would then like some dessert, the process
    repeats.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下自己坐在一家小而地道的餐馆的包厢里，你决定点一份三明治。服务员在一张纸条上写下你的订单并递给厨师。厨师读取订单，逐个取材料来制作三明治，然后将三明治交给服务员。服务员再把三明治端到你面前。如果你想要甜点，过程会重复。
- en: An application programming interface (API) is a set of specifications that allows
    one computer program to interact with another. A web API works in much the same
    way as ordering a sandwich. A client requests some data, that data travels to
    a web server application over the HyperText Transfer Protocol (HTTP), the web
    server application takes the requests and processes the data, and the data is
    then sent to the client over HTTP.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）是一组规范，允许一个计算机程序与另一个进行交互。Web API 的工作方式类似于订购三明治。客户端请求一些数据，该数据通过超文本传输协议（HTTP）传输到
    Web 服务器应用程序，Web 服务器应用程序接收请求并处理数据，然后通过 HTTP 将数据发送给客户端。
- en: In this chapter we’ll explore the broad topic of web APIs and get started with
    our development by cloning the starter API project to our local machine. Before
    we do that, however, let’s explore the requirements of the application that we’ll
    be building.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Web API 的广泛主题，并通过克隆初始 API 项目到我们的本地机器来开始开发。然而，在此之前，让我们先探索一下我们将要构建的应用程序的要求。
- en: What We’re Building
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: Throughout the book we’ll be building a social note application called Notedly.
    Users will be able to create an account, write notes in plain text or Markdown,
    edit their notes, view a feed of other users’ notes, and “favorite” the notes
    of other users. In this portion of the book, we’ll be developing the API to support
    this application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将构建一个名为 Notedly 的社交笔记应用程序。用户可以创建账户，在普通文本或 Markdown 中编写笔记，编辑他们的笔记，查看其他用户笔记的动态，以及“收藏”其他用户的笔记。在本书的这一部分中，我们将开发支持该应用程序的
    API。
- en: 'In our API:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 API 中：
- en: Users will be able to create notes, as well as read, update, and delete the
    notes they’ve created.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以创建笔记，以及阅读、更新和删除他们创建的笔记。
- en: Users will be able to view a feed of notes created by other users, and read
    individual notes created by others, though they will not be able to update or
    delete them.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以查看其他用户创建的笔记动态，并阅读其他人创建的单个笔记，但不能更新或删除它们。
- en: Users will be able to create an account, log in, and log out.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以创建账户，登录和登出。
- en: Users will be able to retrieve their profile information as well as the public
    profile information of other users.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以检索他们的个人资料信息，以及其他用户的公开个人资料信息。
- en: Users will be able to favorite the notes of other users as well as retrieve
    a list of their favorites.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以收藏其他用户的笔记，并检索他们收藏的列表。
- en: Markdown
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Markdown
- en: Markdown is a popular text markup language that is common in the programming
    community as well as in text applications such as iA Writer, Ulysses, Byword,
    and many more. To learn more about Markdown, take a look at the [Markdown Guide
    website](https://www.markdownguide.org).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 是一种流行的文本标记语言，广泛应用于编程社区以及诸如 iA Writer、Ulysses、Byword 等文本应用程序中。要了解更多关于
    Markdown 的信息，请访问[Markdown Guide 网站](https://www.markdownguide.org)。
- en: Though this sounds like a lot, I’ll be breaking it down into small chunks throughout
    this portion of the book. Once you’ve learned to perform these types of interactions,
    you’ll be able to apply them to building all sorts of APIs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管听起来有点复杂，但我将在本书的这一部分中逐步解释。一旦你学会执行这些类型的交互，你就能够应用它们来构建各种类型的 API。
- en: How We’re Going to Build This
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何构建这个应用程序
- en: To build our API we’ll be using the [GraphQL API query language](https://graphql.org).
    GraphQL is an open source specification, first developed at Facebook in 2012\.
    The advantage of GraphQL is that it allows the client to request precisely the
    data it needs, dramatically simplifying and limiting the number of requests. This
    also provides a distinct performance advantage when we’re sending data to mobile
    clients, as we only need to send the data that the client needs. We’ll be exploring
    how to write, develop, and consume GraphQL APIs throughout much of the book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们的 API，我们将使用 [GraphQL API 查询语言](https://graphql.org)。GraphQL 是一个开源规范，最初于2012年在
    Facebook 开发。GraphQL 的优势在于允许客户端精确请求需要的数据，显著简化和限制请求的数量。当我们向移动客户端发送数据时，这也提供了明显的性能优势，因为我们只需发送客户端需要的数据。在本书的大部分内容中，我们将探讨如何编写、开发和消费
    GraphQL API。
- en: What about REST?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST 是怎样的呢？
- en: If you’re familiar with Web API terminology, you’ve likely heard of REST (Representational
    State Transfer) APIs. The REST architecture has been (and continues to be) the
    dominant format for APIs. These APIs differ from GraphQL by relying upon the URL
    structure and query parameters to make requests to a server. While REST remains
    relevant, the simplicity of GraphQL, the robustness of tooling around GraphQL,
    and the potential performance gains of sending limited data over the wire make
    GraphQL my preference for modern platforms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Web API 的术语，你可能听说过 REST（表述性状态转移）API。REST 架构一直（并将继续）是 API 的主流格式。这些 API
    通过依赖 URL 结构和查询参数向服务器发送请求。尽管 REST 仍然重要，但 GraphQL 的简单性、围绕 GraphQL 的强大工具以及通过网络发送有限数据的潜在性能优势使得
    GraphQL 成为我在现代平台上的首选。
- en: Getting Started
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'Before we can start development, we need to make a copy of the project starter
    files to our machine. The project’s [source code](https://oreil.ly/mYKmE) contains
    all of the scripts and references to third-party libraries that we will need to
    develop our application. To clone the code to your local machine, open the terminal,
    navigate to the directory where you keep your projects, **`git clone`** the project
    repository, and install the dependencies with **`npm install`**. It may also be
    helpful to create a *notedly* directory to keep all of the book’s code organized:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发之前，我们需要将项目的起始文件复制到我们的机器上。项目的 [源代码](https://oreil.ly/mYKmE) 包含了我们开发应用程序所需的所有脚本和第三方库的引用。要将代码克隆到本地机器上，请打开终端，导航到你项目保存的目录，**`git
    clone`** 项目仓库，并使用 **`npm install`** 安装依赖项。创建一个 *notedly* 目录以保持书籍所有代码的组织也可能很有帮助：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing Third-Party Dependencies
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装第三方依赖
- en: By making a copy of the book’s starter code and running `npm install` in the
    directory, you avoid having to run `npm install` again for any of the individual
    third-party dependencies.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过复制书中的起始代码，并在目录中运行 `npm install`，你避免了需要为每个独立的第三方依赖再次运行 `npm install`。
- en: 'The code is structured as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 代码结构如下：
- en: /src
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: /src
- en: This is the directory where you should perform your development as you follow
    along with the book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在跟随书籍开发时应该进行开发的目录。
- en: /solutions
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: /解决方案
- en: This directory contains the solutions for each chapter. If you get stuck, these
    are available for you to consult.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录包含每个章节的解决方案。如果遇到困难，你可以查阅这些内容。
- en: /final
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: /最终版
- en: This directory contains the final working project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录包含最终的工作项目。
- en: 'Now that you have the code on your local machine, you’ll need to make a copy
    of the project’s *.env* file. This file is a place to keep environment-specific
    information or project secrets, such as the database URL, client IDs, and passwords.
    Because of this you never want to check it into source control. You’ll need your
    own copy of the *.env* file. To do this, type the following into your terminal,
    from the *api* directory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将代码下载到本地机器上，你需要复制项目的 *.env* 文件。这个文件用于保存环境相关信息或项目机密，比如数据库 URL、客户端 ID 和密码。因此，你绝对不应该将其提交到源代码控制中。你需要自己复制一份
    *.env* 文件。在 *api* 目录下，输入以下命令到终端：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should now see an *.env* file in the directory. You don’t yet need to do
    anything with this file, but we’ll be adding information to it as we progress
    through the development of our API backend. The *.gitignore* file included with
    the project will ensure that you do not inadvertently commit your *.env* file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在目录中看到一个 *.env* 文件。目前你不需要对此文件做任何操作，但随着我们在开发 API 后端的过程中，我们将逐步向其添加信息。项目附带的
    *.gitignore* 文件将确保你不会意外提交 *.env* 文件。
- en: Help, I Don’t See the .env File!
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助，我找不到 .env 文件！
- en: By default, operating systems hide files that start with a period, as these
    are typically used by the system, not end users. If you don’t see the *.env* file,
    try opening the directory in your text editor. The file should be visible in the
    file explorer of your editor. Alternately, typing `ls -a` into your terminal window
    will list the files in the current working directory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，操作系统会隐藏以点开头的文件，因为这些文件通常由系统而非用户使用。如果您看不到 *.env* 文件，请尝试在文本编辑器中打开该目录。该文件应该会在编辑器的文件浏览器中可见。或者，您可以在终端窗口中输入
    `ls -a` 来列出当前工作目录中的文件。
- en: Conclusion
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: APIs provide an interface for data to flow from a database to applications.
    In doing so, they are the backbone of modern applications. By using GraphQL we
    can quickly develop modern, scalable API-based applications. In the next chapter
    we’ll begin our API development by building a web server, using Node.js and Express.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: API提供了一个从数据库流向应用程序的接口。通过这种方式，它们是现代应用程序的支柱。使用GraphQL，我们可以快速开发现代化、可扩展的基于API的应用程序。在下一章中，我们将通过使用Node.js和Express构建一个Web服务器来开始我们的API开发。
