- en: Chapter 22\. Mobile Application Shell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章 移动应用程序外壳
- en: My wife is a photographer, which means that much of her life is based around
    composing images within a rectangular frame. In photography there are many variables—subject,
    light, angle—but the proportions of the image remain consistent. With that limitation,
    incredible things happen, shaping the way that we see and remember the world around
    us. Mobile application development presents a similar opportunity. Within the
    constraints of a small rectangular screen, we can build incredibly powerful applications
    with immersive user experiences.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我的妻子是一名摄影师，这意味着她的生活大部分时间都是围绕在一个矩形框架内构图。在摄影中，有许多变量——主题、光线、角度——但图像的比例保持一致。在这种限制下，不可思议的事情发生了，塑造了我们看待和记住周围世界的方式。移动应用程序开发提供了类似的机会。在一个小矩形屏幕的限制内，我们可以构建具有沉浸式用户体验的极其强大的应用程序。
- en: In this chapter, we’ll begin to build out a shell for our application. To do
    this, we’ll first take a closer look at some of the key building blocks of React
    Native components. From there we’ll look at how to apply styles to our application,
    both with React Native’s built-in style support as well as with our CSS-in-JS
    library of choice, Styled Components. Once we’ve covered how to apply styles,
    we’ll take a look at how to integrate routing into our application. Finally, we’ll
    explore how to easily enhance our app interfaces with icons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将开始为我们的应用程序建立一个外壳。为了做到这一点，我们首先将更详细地查看React Native组件的一些关键构建模块。从那里，我们将看看如何应用样式到我们的应用程序中，既可以使用React
    Native内置的样式支持，也可以选择我们的CSS-in-JS库Styled Components。一旦我们讨论了如何应用样式，我们将看看如何将路由集成到我们的应用程序中。最后，我们将探讨如何通过图标轻松增强我们的应用界面。
- en: React Native Building Blocks
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Native 构建模块
- en: 'Let’s begin by taking a look at the basic building blocks of a React Native
    application. You may have already guessed that a React Native application consists
    of React components written in JSX. But without an HTML page’s DOM (document object
    model), what exactly goes within those components? We can start by looking at
    the “Hello World” component at *src/Main.js*. For now, I’ve removed the styles:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看React Native应用程序的基本构建模块开始。您可能已经猜到，React Native应用程序由JSX编写的React组件组成。但是在没有HTML页面的DOM（文档对象模型）的情况下，究竟是什么放在这些组件内？我们可以从查看“Hello
    World”组件开始，它位于*src/Main.js*。暂时，我已经删除了样式：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this markup there are two notable JSX tags: `<View>` and `<Text>`. If you’re
    coming from a web background, a `<View>` tag serves much of the same purpose as
    a `<div>` tag. It is a container for the content of our applications. On their
    own they don’t do much, but they contain all of our app’s content, can be nested
    within one another, and are used to apply styles. Each of our components will
    be contained within a `<View>`. In React Native, you can use a `<View>` anywhere
    that you might use a `<div>` or `<span>` tag on the web. The `<Text>` tag, unsurprisingly,
    is used to contain any text in our app. Unlike on the web, however, this single
    tag is used for all text.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个标记中，有两个显著的JSX标签：<View>和<Text>。如果您来自Web背景，<View>标签的作用与<div>标签大致相同。它是我们应用程序内容的容器。单独使用时它们不做什么，但它们包含了我们应用的所有内容，可以相互嵌套，并用于应用样式。每个组件都将包含在<View>内。在React
    Native中，您可以在Web上可能使用<div>或<span>标签的任何地方使用<View>。不过，<Text>标签不出所料，用于包含我们应用中的任何文本。然而，与Web不同的是，这个单一标签用于所有文本。
- en: 'As you can imagine, we can also add images to our applications, by using the
    `<Image>` JSX element. Let’s update our *src/Main.js* file to include an image.
    To do so, we import the `Image` component from React Native and use an `<Image>`
    tag with a `src` attribute (see [Figure 22-1](#rn_image)):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所想象的那样，我们也可以通过使用`<Image>` JSX元素向我们的应用程序添加图像。让我们更新我们的*src/Main.js*文件以包含一个图像。为此，我们从React
    Native导入`Image`组件，并使用带有`src`属性的`<Image>`标签（参见[图22-1](#rn_image)）：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code renders some text and image within a view. You may notice
    that our `<View>` and `<Image>` JSX tags are passed properties that allow us to
    control specific behavior (in this case the style of the view and the source of
    the image). Passing properties to an element allows us to extend the element with
    all sorts of additional features. React Native’s [API documentation](https://oreil.ly/3fACI)
    catalogs the properties that are made available to each element.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在一个视图中呈现了一些文本和图像。您可能注意到我们的`<View>`和`<Image>` JSX标签传递了一些属性，这些属性允许我们控制特定的行为（在本例中是视图的样式和图像的来源）。向元素传递属性允许我们使用各种附加功能扩展元素。React
    Native的[API文档](https://oreil.ly/3fACI)列出了每个元素可用的属性。
- en: '![A screenshot of an iPhone simulator demonstrating our app with an image](assets/jsev_2201.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![一张展示我们应用程序与图像的 iPhone 模拟器的截图](assets/jsev_2201.png)'
- en: Figure 22-1\. Using the <Image> tag we can add images to our application (photo
    by [Windell Oskay](https://oreil.ly/lkW3F))
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-1\. 使用 `<Image>` 标签，我们可以向我们的应用程序添加图像（照片由 [Windell Oskay](https://oreil.ly/lkW3F)
    拍摄）
- en: Our app doesn’t do much yet, but in the next section we’ll explore how we can
    improve the look and feel using React Native’s built-in style support and Styled
    Components.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序目前还没有太多功能，但在下一节中，我们将探讨如何利用 React Native 内置的样式支持和 Styled Components 来改善外观和用户体验。
- en: Style and Styled Components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式和 Styled Components
- en: As app developers and designers, we want to be able to style our applications
    to have a precise look, feel, and user experience. There are a number of UI component
    libraries, such as [NativeBase](https://nativebase.io) or [React Native Elements](https://oreil.ly/-M8EE),
    which offer a wide range of predefined and often customizable components. These
    are well worth a look, but for our purposes let’s explore how we might compose
    our own styles and application layouts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发者和设计师，我们希望能够为我们的应用程序设计出精确的外观、感觉和用户体验。有许多 UI 组件库，例如 [NativeBase](https://nativebase.io)
    或 [React Native Elements](https://oreil.ly/-M8EE)，它们提供了广泛的预定义和通常可定制的组件。这些都值得一试，但为了我们的目的，让我们探讨一下如何组合我们自己的样式和应用程序布局。
- en: 'As we’ve already seen, React Native provides a `style` property that allows
    us to apply custom styles to any JSX element in our application. The style names
    and values match those of CSS, except that the names are written in camelCase,
    such as `lineHeight` and `backgroundColor`. Let’s update our */src/Main.js* file
    to include some styles for the `<Text>` element (see [Figure 22-2](#rn_styles)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，React Native 提供了 `style` 属性，允许我们将自定义样式应用于应用程序中的任何 JSX 元素。样式名称和值与 CSS
    中的相同，只是名称采用驼峰命名，如 `lineHeight` 和 `backgroundColor`。让我们更新我们的 */src/Main.js* 文件，为
    `<Text>` 元素添加一些样式（见 [图 22-2](#rn_styles)）：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![A screenshot of the hello world app with styled text](assets/jsev_2202.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![一个带有样式文本的 Hello World 应用程序的截图](assets/jsev_2202.png)'
- en: Figure 22-2\. Using styles we can adjust the look of our <Text> element
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-2\. 使用样式我们可以调整 `<Text>` 元素的外观
- en: You may be thinking, rightfully, that applying styles at the element level would
    quickly become an unmaintainable mess. We can use React Native’s `StyleSheet`
    library to help organize and reuse our styles.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，正确地认为，在元素级别应用样式很快会变得难以维护。我们可以使用 React Native 的 `StyleSheet` 库来帮助组织和重用我们的样式。
- en: 'First, we need to add `StyleSheet` to our list of imports ([Figure 22-3](#rn_stylesheets)):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在导入列表中添加 `StyleSheet`（见 [图 22-3](#rn_stylesheets)）：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we can abstract our styles:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以抽象化我们的样式：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Flexbox
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flexbox
- en: React Native uses the CSS flexbox algorithm to define layout styles. We won’t
    be covering flexbox in depth, but React Native [offers documentation](https://oreil.ly/owhZK)
    that clearly explains flexbox and its use cases for arranging elements on the
    screen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: React Native 使用 CSS flexbox 算法来定义布局样式。我们不会深入讲解 flexbox，但 React Native [提供了文档](https://oreil.ly/owhZK)，清晰地解释了
    flexbox 及其在屏幕上排列元素时的用途。
- en: '![A screenshot of our application with additional styles applied](assets/jsev_2203.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序应用了额外样式的截图](assets/jsev_2203.png)'
- en: Figure 22-3\. By using stylesheets we can scale the styles of our application
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-3\. 通过使用样式表，我们可以扩展应用程序的样式
- en: Styled Components
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Styled Components
- en: While React Native’s built-in `style` properties and `StyleSheets` may offer
    everything that we need out of the box, they are far from our only options for
    styling our applications. We can also make use of popular web CSS-in-JS solutions,
    such as [Styled Components](https://www.styled-components.com) and [Emotion](https://emotion.sh).
    These offer, in my opinion, a cleaner syntax, are more closely aligned to CSS,
    and limit the amount of context switching needed between the web and mobile application
    codebases. Using these web-enabled CSS-in-JS libraries also creates the opportunity
    to share styles or components across platforms.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 React Native 内置的 `style` 属性和 `StyleSheet` 可能已经提供了我们所需的一切，但它们远非我们在为应用程序添加样式时的唯一选择。我们还可以利用流行的
    web CSS-in-JS 解决方案，例如 [Styled Components](https://www.styled-components.com) 和
    [Emotion](https://emotion.sh)。我认为，这些解决方案具有更清晰的语法，更接近 CSS，并且减少了在 web 和移动应用程序代码库之间切换上下文所需的次数。使用这些支持
    web 的 CSS-in-JS 库还可以创建在不同平台间共享样式或组件的机会。
- en: 'For our purposes, let’s look at how we can adapt the previous example to use
    the Styled Components library. First, in *src/Main.js* we will import the `native`
    version of the library:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们的目的而言，让我们看看如何将先前的示例适应使用 Styled Components 库。首先，在 *src/Main.js* 中，我们将导入该库的
    `native` 版本：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From here we can migrate our styles to the Styled Components syntax. If you
    followed along in [Chapter 13](ch13.html#web-styles), this syntax should look
    very familiar. The final code of our *src/Main.js* file becomes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以将我们的样式迁移到 Styled Components 语法。如果您在 [第 13 章](ch13.html#web-styles) 中跟随了进度，这种语法应该看起来非常熟悉。我们的
    *src/Main.js* 文件的最终代码如下：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Styled Components Capitalization
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Styled Components 大小写
- en: In the Styled Components library, the element names must always be capitalized.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Styled Components 库中，元素名称必须始终大写。
- en: With this we’re now able to apply custom styling to our applications, with the
    option of using React Native’s built-in style system or Styled Components library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够为我们的应用程序应用自定义样式，可以选择使用 React Native 的内置样式系统或 Styled Components 库。
- en: Routing
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: 'On the web we can use HTML anchor links to link from one HTML document to any
    other, including those on our own site. For JavaScript-driven applications we
    use routing to link together JavaScript-rendered templates. What about native
    mobile applications? For these, we will route our users between screens. In this
    section we’ll explore two common routing types: tab-based navigation and stack
    navigation.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 上，我们可以使用 HTML 锚链接来链接到任何其他 HTML 文档，包括我们自己站点上的文档。对于 JavaScript 驱动的应用程序，我们使用路由来链接
    JavaScript 渲染的模板。那么对于原生移动应用程序呢？对于这些应用程序，我们将用户路由到不同的屏幕。在本节中，我们将探讨两种常见的路由类型：基于选项卡的导航和堆栈导航。
- en: Tabbed Routing with React Navigation
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 React Navigation 进行选项卡式导航
- en: To perform our routing we’ll make use of the [React Navigation library](https://reactnavigation.org),
    which is the routing solution recommended by both the React Native and Expo teams.
    Most importantly, it makes it very straightforward to implement common routing
    patterns with a platform-specific look and feel.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行我们的路由，我们将使用 [React Navigation 库](https://reactnavigation.org)，这是 React Native
    和 Expo 团队推荐的路由解决方案。最重要的是，它非常简单地实现了常见的路由模式，具有特定于平台的外观和感觉。
- en: To get started, let’s first create a new directory within our *src* directory
    named *screens*. Within the *screens* directory, let’s create three new files,
    each containing a very basic React component.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请首先在我们的 *src* 目录中创建一个名为 *screens* 的新目录。在 *screens* 目录中，让我们创建三个包含非常基本的 React
    组件的新文件。
- en: 'Add the following in *src/screens/favorites.js*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/screens/favorites.js* 中添加以下内容：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add this in *src/screens/feed.js*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/screens/feed.js* 中添加这个：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, add this in *src/screens/mynotes.js*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 *src/screens/mynotes.js* 中添加这个：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then create a new file at *src/screens/index.js* to be used as the root
    of our application’s routing. We’ll begin by importing our initial `react` and
    `react-navigation` dependencies:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个新文件 *src/screens/index.js* 用作我们应用程序路由的根。我们将从导入我们的初始 `react` 和 `react-navigation`
    依赖项开始：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With these dependencies imported, we can create a tab navigator between these
    three screens using React Navigation’s `createBottomTabNavigator` to define which
    React component screens should appear in our navigation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 导入这些依赖项后，我们可以使用 React Navigation 的 `createBottomTabNavigator` 来在这三个屏幕之间创建一个选项卡导航器，以定义应该在我们的导航中显示哪些
    React 组件屏幕：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, let’s update our *src/Main.js* file to do nothing but import our router.
    It should now be simplified to read as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新我们的 *src/Main.js* 文件，只需导入我们的路由器。现在，它应该简化为以下内容：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Be sure that your application is running by entering the **`npm start`** command
    in your terminal. You should now see tab navigation at the bottom of the screen,
    where tapping a tab will route you to the appropriate screen ([Figure 22-4](#tabbed_navigation)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的应用程序正在运行，输入 **`npm start`** 命令在您的终端中。现在，您应该在屏幕底部看到选项卡导航，点击选项卡将会将您路由到相应的屏幕（[图
    22-4](#tabbed_navigation)）。
- en: '![A screenshot of our application with tab based navigation](assets/jsev_2204.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![我们的应用程序带有基于选项卡的导航的屏幕截图](assets/jsev_2204.png)'
- en: Figure 22-4\. We can now navigate between screens with tabbed navigation
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-4\. 现在我们可以通过选项卡导航在屏幕之间进行导航
- en: Stack Navigation
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈导航
- en: A second kind of routing type is stack navigation, in which screens are conceptually
    “stacked” on top of one another, allowing users to navigate deeper into and backward
    through the stack. Consider a news application where a user views a feed of articles.
    The user can tap a news article title and navigate deeper in the stack to the
    article contents. They can then click a back button, navigating back to the article
    feed, or perhaps a different article title, navigating deeper into the stack.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种路由类型是堆栈导航，其中屏幕在概念上被“堆叠”在一起，允许用户向堆栈中更深入和向后导航。考虑一个新闻应用程序，用户查看文章列表。用户可以点击新闻文章标题，深入堆栈到文章内容。然后他们可以点击返回按钮，导航回文章列表，或者可能是不同的文章标题，继续向堆栈深入。
- en: In our application we want users to be able to navigate from a feed of notes
    to the notes themselves and back. Let’s look at how we might implement a stack
    navigation for each of our screens.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们希望用户能够从笔记的列表导航到笔记本身，然后再返回。让我们看看如何为每个屏幕实现堆栈导航。
- en: 'First, let’s create a new `NoteScreen` component, which will contain the second
    screen in our stack. Create a new file at *src/screens/note.js* with a minimal
    React Native component:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的`NoteScreen`组件，该组件将包含我们堆栈中的第二个屏幕。在*src/screens/note.js*路径下创建一个新的文件，包含一个最简单的React
    Native组件：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we will make the changes to our router to enable stacked navigation for
    the `NoteScreen` component. To do so, we’ll import `createStackNavigator` from
    `react-navigation-stack` as well as our new *note.js* component. In *src/screens/index.js*
    update the imports to look as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对我们的路由进行更改，以使`NoteScreen`组件能够实现堆栈导航。为此，我们将从`react-navigation-stack`中导入`createStackNavigator`以及我们的新的*note.js*组件。在*src/screens/index.js*中更新导入如下：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With our libraries and files imported, we can implement the stack navigation
    capability. In our router file we must tell React Navigation which screens are
    “stackable.” For each of our tabbed routes, we’ll want a user to be able to navigate
    to a `Note` screen. Go ahead and define those stacks as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们导入的库和文件，我们可以实现堆栈导航的功能。在我们的路由文件中，我们必须告诉React Navigation哪些屏幕是“可堆叠的”。对于我们的每个选项卡路由，我们希望用户能够导航到一个`Note`屏幕。继续定义这些堆栈如下：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we can update our `TabNavigator` to reference the stack, rather than an
    individual screen. To do this, update the `screen` property in each `TabNavigator`
    object:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更新我们的`TabNavigator`以引用堆栈，而不是单个屏幕。为此，请在每个`TabNavigator`对象的`screen`属性中进行更新：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'All together, our *src/screens/index.js* file should appear as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们的*src/screens/index.js*文件应如下所示：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we open our application in a simulator or the Expo app on our device, we
    should see no discernible difference. This is because we have yet to add a link
    to our stacked navigation. Let’s update our *src/screens/feed.js* component to
    include a stacked navigation link.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在模拟器或设备上的Expo应用中打开我们的应用程序，我们应该看不到明显的区别。这是因为我们尚未添加到我们堆栈导航的链接。让我们更新我们的*src/screens/feed.js*组件以包含堆栈导航链接。
- en: 'To do so, first include the `Button` dependency from React Native:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，首先从React Native中包含`Button`依赖项：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we can include a button that, on press, will navigate to the content of
    our *note.js* component. We will pass the component `props`, which will contain
    the navigation information, and add a `<Button>` that will include the `title`
    and `onPress` props:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以包含一个按钮，当按下时，将导航到我们的*note.js*组件的内容。我们将传递组件的`props`，其中包含导航信息，并添加一个`<Button>`，包括`title`和`onPress`属性：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With this, we should be able to navigate between our screens. Click the button
    from the Feed screen to navigate to the Note screen, and click the arrow to return
    ([Figure 22-5](#stack_navigation)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们应该能够在我们的屏幕之间导航。从Feed屏幕点击按钮导航到Note屏幕，并点击箭头返回（[图22-5](#stack_navigation)）。
- en: '![A screenshot of the Feed and Note screen](assets/jsev_2205.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Feed和Note屏幕的截图](assets/jsev_2205.png)'
- en: Figure 22-5\. Clicking the button link will navigate to the new screen, while
    clicking the arrow will return the user to the previous screen
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-5。点击按钮链接将导航到新的屏幕，而点击箭头将返回用户到前一个屏幕
- en: Adding Screen Titles
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加屏幕标题
- en: 'Adding the stack navigator automatically adds a title bar to the top of our
    app. We can style or even remove that top bar. For now let’s add a title to each
    screen at the top of our stack. To do this, we will set the component `navigationOptions`
    outside of the component itself. In *src/screens/feed.js*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 添加堆栈导航器会自动在应用程序顶部添加一个标题栏。我们可以为该顶部栏设置样式，甚至删除它。现在让我们为堆栈顶部的每个屏幕添加一个标题。为此，我们将在组件本身之外设置组件
    `navigationOptions`。在 *src/screens/feed.js* 中：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We can repeat this process for our other screen components.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重复这个过程来处理我们的其他屏幕组件。
- en: 'In *src/screens/favorites.js*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/screens/favorites.js* 中：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In *src/screens/mynotes.js*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *src/screens/mynotes.js* 中：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now each of our screens will include a title in the top navigation bar ([Figure 22-6](#mobile_nav_title)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的每个屏幕将在顶部导航栏中包含一个标题（[图22-6](#mobile_nav_title)）。
- en: '![A screenshot of our app with a top navigation title](assets/jsev_2206.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![我们的应用程序截图，带有顶部导航标题](assets/jsev_2206.png)'
- en: Figure 22-6\. Setting the title in navigationOptions will add it to the top
    nav bar
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-6\. 在navigationOptions中设置标题将其添加到顶部导航栏
- en: Icons
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图标
- en: Right now our navigation is functionally complete, but lacks a visual component
    to make it easier for users. Thankfully, Expo makes it incredibly easy to include
    icons in our application. We can search all of the icons that Expo makes available
    by visiting [*expo.github.io/vector-icons*](https://expo.github.io/vector-icons).
    A number of icon sets are included, such as Ant Design, Ionicons, Font Awesome,
    Entypo, Foundation, Material Icons, and Material Community Icons. This provides
    us with a tremendous amount of variety out of the box.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的导航在功能上已经完整，但缺少一个视觉组件，以便用户更容易使用。幸运的是，Expo使我们能够非常轻松地在我们的应用程序中包含图标。我们可以通过访问
    [*expo.github.io/vector-icons*](https://expo.github.io/vector-icons) 来搜索Expo提供的所有图标。包括多个图标集，如Ant
    Design、Ionicons、Font Awesome、Entypo、Foundation、Material Icons和Material Community
    Icons。这为我们提供了大量的多样性选择。
- en: 'Let’s add some icons to our tabbed navigation. First, we must import the icon
    sets that we’d like to use. In our case, we’ll make use of the Material Community
    Icons by adding the following in *src/screens/index.js*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的选项卡导航中添加一些图标。首先，我们必须导入我们想要使用的图标集。在我们的情况下，我们将使用 Material Community Icons，通过在
    *src/screens/index.js* 中添加以下内容：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now anywhere we want to use an icon in a component, we can include it as JSX,
    including setting properties such as `size` and `color`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，无论我们在组件中的任何位置都想使用图标，我们都可以将其作为 JSX 包含，包括设置诸如 `size` 和 `color` 的属性：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We’ll be adding our icons to our tab navigation. React Navigation includes
    a property called the `tabBarIcon` property, which allows us to set the icon.
    We can pass this as a function, which enables us to set the `tintColor`, so that
    active tab icons have a different color than those that are inactive:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把图标添加到我们的选项卡导航中。React Navigation包含一个称为 `tabBarIcon` 属性，允许我们设置图标。我们可以将其作为一个函数传递，这使我们能够设置
    `tintColor`，以便活动标签图标与非活动标签图标具有不同的颜色：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With this, our tabbed navigation will display icons ([Figure 22-7](#mobile_nav_icon)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的选项卡导航将显示图标（[图22-7](#mobile_nav_icon)）。
- en: '![A screenshot of the application including navigation icons](assets/jsev_2207.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![包含导航图标的应用程序截图](assets/jsev_2207.png)'
- en: Figure 22-7\. Our application’s navigation now includes icons
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-7\. 我们应用程序的导航现在包含图标
- en: Conclusion
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we covered how to build the basic components of a React Native
    application. You’re now able to create components, add styles to them, and navigate
    between them. Hopefully with this basic setup, you can see the incredible potential
    of React Native. With minimal new technologies, you are already able to build
    the beginnings of an impressive and professional mobile application. In the next
    chapter, we’ll use GraphQL to include data from our API within the application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何构建React Native应用程序的基本组件。现在，您可以创建组件，为其添加样式，并在它们之间导航。希望通过这个基本设置，您能看到React
    Native的无限潜力。凭借最少的新技术，您已经能够构建一个令人印象深刻和专业的移动应用程序的雏形。在下一章中，我们将使用GraphQL在应用程序中包含来自API的数据。
