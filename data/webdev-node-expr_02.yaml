- en: Chapter 2\. Getting Started with Node
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章\. 使用 Node 入门
- en: If you don’t have any experience with Node, this chapter is for you. Understanding
    Express and its usefulness requires a basic understanding of Node. If you already
    have experience building web apps with Node, feel free to skip this chapter. In
    this chapter, we will be building a very minimal web server with Node; in the
    next chapter, we will see how to do the same thing with Express.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Node 没有任何经验，本章适合你。理解 Express 及其用途需要对 Node 有基本的了解。如果你已经有使用 Node 构建 web 应用程序的经验，可以跳过本章。在本章中，我们将使用
    Node 构建一个非常简单的 web 服务器；在下一章中，我们将看到如何使用 Express 完成同样的事情。
- en: Getting Node
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取 Node
- en: Getting Node installed on your system couldn’t be easier. The Node team has
    gone to great lengths to make sure the installation process is simple and straightforward
    on all major platforms.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上安装 Node 无比简单。Node 团队确保安装过程在所有主要平台上都简单明了。
- en: Go to the [Node home page](http://nodejs.org). Click the big green button that
    has a version number followed by “LTS (Recommended for Most Users).” LTS stands
    for *Long-Term Support*, and is somewhat more stable than the version labeled
    Current, which contains more recent features and performance improvements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[Node 主页](http://nodejs.org)。点击大绿色按钮，上面有一个版本号，后面跟着“LTS（推荐大多数用户使用）”。LTS 代表*长期支持*，比当前版本更加稳定，包含了更多的功能和性能改进。
- en: For Windows and macOS, an installer will be downloaded that walks you through
    the process. For Linux, you will probably be up and running more quickly if you
    [use a package manager](http://bit.ly/36UYMxI).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 和 macOS，将下载一个安装程序来引导你完成安装过程。对于 Linux 用户，如果你[使用软件包管理器](http://bit.ly/36UYMxI)，可能会更快上手。
- en: Caution
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re a Linux user and you do want to use a package manager, make sure you
    follow the instructions in the aforementioned web page. Many Linux distributions
    will install an extremely old version of Node if you don’t add the appropriate
    package repository.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Linux 用户，并且想使用软件包管理器，请确保按照前述网页上的说明操作。如果你不添加适当的软件包存储库，许多 Linux 发行版会安装一个非常旧的
    Node 版本。
- en: You can also download [a standalone installer](https://nodejs.org/en/download),
    which can be helpful if you are distributing Node to your organization.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以下载[一个独立安装程序](https://nodejs.org/en/download)，如果你需要将 Node 分发给你的组织，这将非常有帮助。
- en: Using the Terminal
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用终端
- en: I’m an unrepentant fan of the power and productivity of using a terminal (also
    called a *console* or *command prompt*). Throughout this book, all examples will
    assume you’re using a terminal. If you’re not friends with your terminal, I highly
    recommend you spend some time familiarizing yourself with your terminal of choice.
    Many of the utilities in this book have corresponding GUI interfaces, so if you’re
    dead set against using a terminal, you have options, but you will have to find
    your own way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个无悔的终端（也称为*控制台*或*命令提示符*）的力量和生产力的粉丝。本书中的所有示例都假定你正在使用终端。如果你不熟悉终端，我强烈建议你花一些时间熟悉你选择的终端。本书中的许多实用程序都有对应的图形界面，所以如果你坚决不使用终端，你也有选择，但你将不得不找到适合自己的方法。
- en: If you’re on macOS or Linux, you have a wealth of venerable shells (the terminal
    command interpreter) to choose from. The most popular by far is bash, though zsh
    has its adherents. The main reason I gravitate toward bash (other than long familiarity)
    is ubiquity. Sit down in front of any Unix-based computer, and 99% of the time,
    the default shell will be bash.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 macOS 或 Linux，你有多种老牌 shell（终端命令解释器）可供选择。目前最流行的是 bash，不过 zsh 也有它的支持者。我偏向使用
    bash 的主要原因（除了长期熟悉）是它的普及性。无论坐在哪台基于 Unix 的计算机前，99% 的情况下，默认 shell 都会是 bash。
- en: 'If you’re a Windows user, things aren’t quite so rosy. Microsoft has never
    been particularly interested in providing a pleasant terminal experience, so you’ll
    have to do a little more work. Git helpfully includes a “Git bash” shell, which
    provides a Unix-like terminal experience (it has only a small subset of the normally
    available Unix command-line utilities, but it’s a useful subset). While Git bash
    provides you with a minimal bash shell, it’s still using the built-in Windows
    console application, which leads to an exercise in frustration (even simple functionality
    like resizing a console window, selecting text, cutting, and pasting is unintuitive
    and awkward). For this reason, I recommend installing a more sophisticated terminal
    such as [ConsoleZ](https://github.com/cbucher/console) or [ConEmu](https://conemu.github.io).
    For Windows power users—especially for .NET developers or for hardcore Windows
    systems or network administrators—there is another option: Microsoft’s own PowerShell.
    PowerShell lives up to its name: people do remarkable things with it, and a skilled
    PowerShell user could give a Unix command-line guru a run for their money. However,
    if you move between macOS/Linux and Windows, I still recommend sticking with Git
    bash for the consistency it provides.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Windows用户，情况就不那么美好了。微软从来都不太关心提供愉快的终端体验，所以你需要做更多的工作。Git贴心地包含了一个“Git bash”
    shell，提供类Unix的终端体验（虽然只有一小部分通常可用的Unix命令行工具，但已经足够实用）。虽然Git bash提供了一个简化的bash shell，但它仍然使用内置的Windows控制台应用程序，这会让人感到沮丧（即使是简单的功能如调整控制台窗口大小、选择文本、剪切和粘贴也是不直观且笨拙的）。因此，我建议安装更复杂的终端，比如[ConsoleZ](https://github.com/cbucher/console)或[ConEmu](https://conemu.github.io)。对于Windows高级用户，尤其是.NET开发者或者专业的Windows系统或网络管理员，还有另一种选择：微软自家的PowerShell。PowerShell名副其实：有人用它做出了惊人的事情，一个熟练的PowerShell用户可以媲美Unix命令行专家。然而，如果你在macOS/Linux和Windows之间切换，我仍建议坚持使用Git
    bash以保持一致性。
- en: If you’re using Windows 10 or later, you can now install Ubuntu Linux directly
    on Windows! This is not dual-boot or virtualization but some great work on behalf
    of Microsoft’s open source team to bring the Linux experience to Windows. You
    can install Ubuntu on Windows through the [Microsoft App Store](http://bit.ly/2KcSfEI).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows 10或更新版本，现在可以直接在Windows上安装Ubuntu Linux了！这不是双系统或虚拟化，而是微软开源团队的杰出工作，将Linux体验带到了Windows。你可以通过[Microsoft应用商店](http://bit.ly/2KcSfEI)安装Ubuntu在Windows上。
- en: A final option for Windows users is virtualization. With the power and architecture
    of modern computers, the performance of virtual machines (VMs) is practically
    indistinguishable from actual machines. I’ve had great luck with Oracle’s free
    [VirtualBox](https://www.virtualbox.org/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户的最后一个选择是虚拟化。在现代计算机的强大架构下，虚拟机（VM）的性能几乎与实际机器无异。我使用Oracle免费的[VirtualBox](https://www.virtualbox.org/)效果非常好。
- en: Finally, no matter what system you’re on, there are excellent cloud-based development
    environments, such as [Cloud9](https://aws.amazon.com/cloud9/) (now an AWS product).
    Cloud9 will spin up a new Node development environment that makes it extremely
    easy to get started quickly with Node.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，无论你使用什么系统，都有出色的基于云的开发环境，比如[Cloud9](https://aws.amazon.com/cloud9/)（现在是AWS的产品）。Cloud9会快速搭建一个新的Node开发环境，让你可以快速开始Node的开发。
- en: Once you’ve settled on a shell that makes you happy, I recommend you spend some
    time getting to know the basics. There are many wonderful tutorials on the internet
    ([The Bash Guide](https://guide.bash.academy) is a great place to start), and
    you’ll save yourself a lot of headaches later by learning a little now. At minimum,
    you should know how to navigate directories; copy, move, and delete files; and
    break out of a command-line program (usually Ctrl-C). If you want to become a
    terminal ninja, I encourage you to learn how to search for text in files, search
    for files and directories, chain commands together (the old “Unix philosophy”),
    and redirect output.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了一个让你满意的shell，我建议你花一些时间了解基础知识。互联网上有许多优秀的教程（[Bash指南](https://guide.bash.academy)是一个很好的起点），通过现在学习一点点，你可以避免以后的很多麻烦。至少，你应该知道如何浏览目录；复制、移动和删除文件；以及如何退出命令行程序（通常是Ctrl-C）。如果你想成为一个终端忍者，我鼓励你学习如何在文件中搜索文本，搜索文件和目录，将命令链接在一起（传统的“Unix哲学”），以及重定向输出。
- en: Caution
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'On many Unix-like systems, Ctrl-S has a special meaning: it will “freeze” the
    terminal (this was once used to pause output quickly scrolling past). Since this
    is such a common shortcut for Save, it’s easy to unthinkingly press, which leads
    to a confusing situation for most people (this happens to me more often than I
    care to admit). To unfreeze the terminal, simply hit Ctrl-Q. So if you’re ever
    confounded by a terminal that seems to have suddenly frozen, try pressing Ctrl-Q
    and see if that releases it.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多类 Unix 系统上，Ctrl-S 有着特殊的含义：它会“冻结”终端（曾经用于快速暂停输出）。由于这是“保存”的常见快捷键，人们很容易在不经意间按下它，这会导致大多数人陷入困惑的情况（这种情况对我来说比我愿意承认的更频繁发生）。要解除终端的冻结状态，只需按下
    Ctrl-Q。因此，如果你曾经对终端突然冻结感到困惑，请尝试按下 Ctrl-Q 看看是否解决了问题。
- en: Editors
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器
- en: 'Few topics inspire such heated debate among programmers as the choice of editors,
    and for good reason: the editor is your primary tool. My editor of choice is vi
    (or an editor that has a vi mode).^([1](ch02.xhtml#idm45053605785656)) vi isn’t
    for everyone (my coworkers constantly roll their eyes at me when I tell them how
    easy it would be to do what they’re doing in vi), but finding a powerful editor
    and learning to use it will significantly increase your productivity and, dare
    I say it, enjoyment. One of the reasons I particularly like vi (though hardly
    the most important reason) is that, like bash, it is ubiquitous. If you have access
    to a Unix system, vi is there for you. Most popular editors have a “vi mode” that
    allows you to use vi keyboard commands. Once you get used to it, it’s hard to
    imagine using anything else. vi is a hard road at first, but the payoff is worth
    it.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序员而言，很少有什么话题像选择编辑器那样引发激烈的辩论，而且理由充分：编辑器是你的主要工具。我选择的编辑器是 vi（或具有 vi 模式的编辑器）。^([1](ch02.xhtml#idm45053605785656))
    vi 并不适合所有人（当我告诉同事他们可以像我一样轻松做他们正在做的事情时，他们经常瞪大眼睛），但是找到一个强大的编辑器并学会使用它将显著提高你的生产力，也可以说，增加你的愉悦感。我特别喜欢
    vi 的一个原因（虽然并非最重要的原因之一）是，像 bash 一样，它是无处不在的。如果你有 Unix 系统的访问权限，vi 就在那里等着你。大多数流行的编辑器都有“vi
    模式”，允许你使用 vi 的键盘命令。一旦你习惯了它，很难想象使用其他任何编辑器。vi 起初是一条艰难的道路，但回报是值得的。
- en: If, like me, you see the value in being familiar with an editor that’s available
    anywhere, your other option is Emacs. Emacs and I have never quite gotten on (and
    usually you’re either an Emacs person or a vi person), but I absolutely respect
    the power and flexibility that Emacs provides. If vi’s modal editing approach
    isn’t for you, I would encourage you to look into Emacs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像我一样，你认为熟悉任何地方都可以用的编辑器很有价值，你的另一个选择是 Emacs。我和 Emacs 从来没有完全融洽过（通常你要么是 Emacs
    用户，要么是 vi 用户），但我绝对尊重 Emacs 提供的强大和灵活性。如果 vi 的模态编辑方法不适合你，我建议你尝试一下 Emacs。
- en: While knowing a console editor (like vi or Emacs) can come in incredibly handy,
    you may still want a more modern editor. A popular choice is [Visual Studio Code](https://code.visualstudio.com/)
    (not to be confused with Visual Studio without the “Code”). I can heartily endorse
    Visual Studio Code; it is a well-designed, fast, efficient editor that is perfectly
    suited for Node and JavaScript development. Another popular choice is [Atom](https://atom.io),
    which is also popular in the JavaScript community. Both of these editors are available
    for free on Windows, macOS, and Linux (and both have vi modes!).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管掌握控制台编辑器（如 vi 或 Emacs）可能非常方便，你可能仍然希望使用一个更现代的编辑器。一个流行的选择是 [Visual Studio Code](https://code.visualstudio.com/)（不要与不带“Code”的
    Visual Studio 混淆）。我可以全心推荐 Visual Studio Code；它是一个设计精良、快速高效的编辑器，非常适合 Node 和 JavaScript
    的开发。另一个流行的选择是 [Atom](https://atom.io)，它在 JavaScript 社区中也很受欢迎。这两款编辑器都可以在 Windows、macOS
    和 Linux 上免费使用（两者都有 vi 模式！）。
- en: Now that we have a good tool to edit code, let’s turn our attention to npm,
    which will help us get packages that other people have written so we can take
    advantage of the large and active JavaScript community.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个编辑代码的好工具，让我们把注意力转向 npm，它将帮助我们获取其他人编写的包，以便利用庞大而活跃的 JavaScript 社区。
- en: npm
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm
- en: npm is the ubiquitous package manager for Node packages (and is how we’ll get
    and install Express). In the wry tradition of PHP, GNU, WINE, and others, *npm*
    is not an acronym (which is why it isn’t capitalized); rather, it is a recursive
    abbreviation for “npm is not an acronym.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: npm 是 Node 包的普遍包管理器（也是我们将获取并安装 Express 的方式）。在 PHP、GNU、WINE 等的讽刺传统中，*npm* 不是一个首字母缩略词（这也是为什么它没有大写字母）；相反，它是“npm
    is not an acronym”的递归缩写。
- en: Broadly speaking, a package manager’s two primary responsibilities are installing
    packages and managing dependencies. npm is a fast, capable, and painless package
    manager, which I feel is in large part responsible for the rapid growth and diversity
    of the Node ecosystem.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上说，包管理器的两个主要责任是安装包和管理依赖关系。npm是一个快速、能力强大且无痛的包管理器，我认为它在很大程度上促进了Node生态系统的快速增长和多样性。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There is a popular competing package manager called Yarn that uses the same
    package database that npm does; we’ll be using Yarn in [Chapter 16](ch16.xhtml#ch_single_page_applications).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为Yarn的流行竞争包管理器，它使用与npm相同的包数据库；我们将在[第16章](ch16.xhtml#ch_single_page_applications)中使用Yarn。
- en: npm is installed when you install Node, so if you followed the steps listed
    earlier, you’ve already got it. So let’s get to work!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装Node时，npm也会随之安装，因此如果您按照前面列出的步骤操作，您已经拥有它了。那么让我们开始工作吧！
- en: 'The primary command you’ll be using with npm (unsurprisingly) is `install`.
    For example, to install nodemon (a popular utility to automatically restart a
    Node program when you make changes to the source code), you would issue the following
    command (on the console):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在npm中主要使用的命令（不足为奇地）是`install`。例如，要安装nodemon（一种流行的实用程序，在您更改源代码时自动重新启动Node程序），您需要发出以下命令（在控制台上）：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `-g` flag tells npm to install the package *globally*, meaning it’s available
    globally on the system. This distinction will become clearer when we cover the
    *package.json* files. For now, the rule of thumb is that JavaScript utilities
    (like nodemon) will generally be installed globally, whereas packages that are
    specific to your web app or project will not.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`-g`标志告诉npm在系统上全局安装包，这意味着它在全局范围内可用。当我们讨论*package.json*文件时，这种区别会变得更加清晰。目前的经验法则是，JavaScript实用程序（如nodemon）通常会全局安装，而专用于您的Web应用程序或项目的包则不会。'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike languages like Python—which underwent a major language change from 2.0
    to 3.0, necessitating a way to easily switch between different environments—the
    Node platform is new enough that it is likely that you should always be running
    the latest version of Node. However, if you do find yourself needing to support
    multiple versions of Node, check out [nvm](https://github.com/creationix/nvm)
    or [n](https://github.com/tj/n), which allow you to switch environments. You can
    find out what version of Node is installed on your computer by typing `node --version`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与像Python这样的语言不同，它在从2.0到3.0进行了重大语言更改，需要一种能够轻松切换不同环境的方式——Node平台还很新，因此您可能总是应该运行最新版本的Node。但是，如果您确实需要支持多个Node版本，请查看[nvm](https://github.com/creationix/nvm)或[n](https://github.com/tj/n)，这些工具允许您切换环境。您可以通过输入`node
    --version`来查看计算机上安装的Node版本。
- en: A Simple Web Server with Node
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node创建一个简单的Web服务器
- en: 'If you’ve ever built a static HTML website before or are coming from a PHP
    or ASP background, you’re probably used to the idea of the web server (Apache
    or IIS, for example) serving your static files so that a browser can view them
    over the network. For example, if you create the file *about.html* and put it
    in the proper directory, you can then navigate to *http://localhost/about.html*.
    Depending on your web server configuration, you might even be able to omit the
    *.html*, but the relationship between URL and filename is clear: the web server
    simply knows where the file is on the computer and serves it to the browser.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前构建过静态HTML网站或者有PHP或ASP背景，您可能已经习惯于Web服务器（例如Apache或IIS）提供您的静态文件，以便浏览器可以通过网络查看它们。例如，如果您创建了文件*about.html*并将其放在正确的目录中，然后您可以导航至*http://localhost/about.html*。根据您的Web服务器配置，甚至可以省略*.html*，但URL和文件名之间的关系是明确的：Web服务器只需知道文件在计算机上的位置并将其提供给浏览器。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*localhost*, as the name implies, refers to the computer you’re on. This is
    a common alias for the IPv4 loopback address 127.0.0.1 or the IPv6 loopback address
    ::1\. You will often see 127.0.0.1 used instead, but I will be using *localhost*
    in this book. If you’re using a remote computer (using SSH, for example), keep
    in mind that browsing to *localhost* will not connect to that computer.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*localhost*，顾名思义，指的是您所在的计算机。这是IPv4回环地址127.0.0.1或IPv6回环地址::1的常见别名。您经常会看到使用127.0.0.1，但本书中我将使用*localhost*。如果您正在使用远程计算机（例如使用SSH），请记住，浏览到*localhost*不会连接到该计算机。'
- en: 'Node offers a different paradigm than that of a traditional web server: the
    app that you write *is* the web server. Node simply provides the framework for
    you to build a web server.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Node 提供了一个与传统 Web 服务器不同的范式：你编写的应用程序*就是*Web 服务器。Node 只是为你构建 Web 服务器提供了框架。
- en: '“But I don’t want to write a web server,” you might be saying! It’s a natural
    response: you want to be writing an app, not a web server. However, Node makes
    the business of writing this web server a simple affair (just a few lines, even),
    and the control you gain over your application in return is more than worth it.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “但我不想写一个 Web 服务器”，你可能会说！这是一种自然的反应：你想写一个应用程序，而不是一个 Web 服务器。然而，Node 使编写这个 Web
    服务器的业务变得非常简单（甚至只需几行代码），而你在应用程序中获得的控制力远远超过了这一点。
- en: So let’s get to it. You’ve installed Node, you’ve made friends with the terminal,
    and now you’re ready to go.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们开始吧。你已经安装了 Node，与终端交朋友，现在你已经准备好了。
- en: Hello World
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hello World
- en: I’ve always found it unfortunate that the canonical introductory programming
    example is the uninspired message “Hello world.” However, it seems almost sacrilegious
    at this point to fly in the face of such ponderous tradition, so we’ll start there
    and then move on to something more interesting.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直觉得很不幸的是，经典的入门编程示例是毫无灵感的消息“Hello world”。然而，到了这一点，违背这样一个沉重的传统似乎是不可取的，所以我们将从这里开始，然后转向更有趣的东西。
- en: 'In your favorite editor, create a file called *helloworld.js* (*ch02/00-helloworld.js*
    in the companion repo):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在你喜爱的编辑器中创建一个名为*helloworld.js*（在伴随存储库中为*ch02/00-helloworld.js*）的文件：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on when and where you learned JavaScript, you may be disconcerted
    by the lack of semicolons in this example. I used to be a die-hard semicolon promoter,
    and I grudgingly stopped using them as I did more React development, where it
    is conventional to omit them. After a while, the fog lifted from my eyes, and
    I wondered why I was ever so excited about semicolons! I’m now firmly on team
    “no-semicolon,” and the examples in this book will reflect that. It’s a personal
    choice, and you are welcome to use semicolons if you wish.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你学习 JavaScript 的时间和地点，这个例子中缺少分号可能会让你感到困惑。我曾是一个坚定的分号支持者，随着我进行更多 React 开发，我不情愿地停止了使用它们。过了一段时间，我的眼前的迷雾消散了，我不禁想知道我曾经为什么对分号如此着迷！现在我坚定地支持“不加分号”团队，本书中的示例也将反映这一点。这是个人选择，如果你愿意，可以继续使用分号。
- en: 'Make sure you are in the same directory as *helloworld.js*, and type `node
    helloworld.js`. Then open a browser and navigate to *http://localhost:3000*, and
    *voilà*! Your first web server. This particular one doesn’t serve HTML; rather,
    it just displays the message “Hello world!” in plain text to your browser. If
    you want, you can experiment with sending HTML instead: just change `text/plain`
    to `text/html` and change `''Hello world!''` to a string containing valid HTML.
    I didn’t demonstrate that, because I try to avoid writing HTML inside JavaScript
    for reasons that will be discussed in more detail in [Chapter 7](ch07.xhtml#ch_templating).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在与*helloworld.js*相同的目录中，并输入`node helloworld.js`。然后打开浏览器，导航到*http://localhost:3000*，*voilà*！你的第一个
    Web 服务器就完成了。这个特定的服务器不提供 HTML，而是仅向你的浏览器显示纯文本消息“Hello world!”。如果你愿意，你可以尝试发送 HTML：只需将`text/plain`更改为`text/html`，并将`'Hello
    world!'`更改为包含有效 HTML 的字符串。我没有演示这一点，因为我尽量避免在 JavaScript 中编写 HTML，原因将在[第 7 章](ch07.xhtml#ch_templating)中详细讨论。
- en: Event-Driven Programming
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件驱动编程
- en: 'The core philosophy behind Node is that of *event-driven programming*. What
    that means for you, the programmer, is that you have to understand what events
    are available to you and how to respond to them. Many people are introduced to
    event-driven programming by implementing a user interface: the user clicks something,
    and you handle the *click event*. It’s a good metaphor, because it’s understood
    that the programmer has no control over when, or if, the user is going to click
    something, so event-driven programming is really quite intuitive. It can be a
    little harder to make the conceptual leap to responding to events on the server,
    but the principle is the same.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Node 的核心理念是*事件驱动编程*。对于你作为程序员来说，这意味着你必须了解可用的事件以及如何对其做出响应。许多人通过实现用户界面来介绍事件驱动编程：用户点击某些东西，你处理*点击事件*。这是一个很好的隐喻，因为人们理解程序员无法控制用户何时或是否会点击某些东西，所以事件驱动编程实际上非常直观。在服务器上做出事件响应的概念跨越可能会更难一些，但原则是相同的。
- en: 'In the previous code example, the event is implicit: the event that’s being
    handled is an HTTP request. The `http.createServer` method takes a function as
    an argument; that function will be invoked every time an HTTP request is made.
    Our simple program just sets the content type to plain text and sends the string
    “Hello world!”'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，事件是隐含的：正在处理的事件是HTTP请求。`http.createServer`方法接受一个函数作为参数；每次发出HTTP请求时都会调用该函数。我们的简单程序只是将内容类型设置为纯文本，并发送字符串“Hello
    world!”
- en: Once you start thinking in terms of event-driven programming, you start seeing
    events everywhere. One such event is when a user navigates from one page or area
    of your application to another. How your application responds to that navigation
    event is referred to as *routing*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始以事件驱动的编程方式思考，您就会在各处看到事件。其中一个事件是当用户从应用程序的一个页面或区域导航到另一个页面时。您的应用程序如何响应该导航事件被称为*路由*。
- en: Routing
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由
- en: Routing refers to the mechanism for serving the client the content it has asked
    for. For web-based client/server applications, the client specifies the desired
    content in the URL; specifically, the path and querystring (the parts of a URL
    will be discussed in more detail in [Chapter 6](ch06.xhtml#ch_the_request_and_response_objects)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是指为客户端提供其请求的内容的机制。对于基于Web的客户端/服务器应用程序，客户端在URL中指定所需的内容；具体来说，路径和查询字符串（URL的各个部分将在[第6章](ch06.xhtml#ch_the_request_and_response_objects)中进行更详细的讨论）。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Server routing traditionally hinges on the path and the querystring, but there
    is other information available: headers, the domain, the IP address, and more.
    This allows servers to take into consideration, for example, the approximate physical
    location of the user or the preferred language of the user.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器路由传统上依赖于路径和查询字符串，但还有其他可用的信息：头部、域名、IP地址等。这使得服务器可以考虑用户的大致物理位置或用户的首选语言等因素。
- en: 'Let’s expand our “Hello world!” example to do something more interesting. Let’s
    serve a really minimal website consisting of a home page, an About page, and a
    Not Found page. For now, we’ll stick with our previous example and just serve
    plaintext instead of HTML (*ch02/01-helloworld.js* in the companion repo):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们扩展我们的“Hello world!”示例，做一些更有趣的事情。让我们提供一个非常简单的网站，包括一个主页、一个关于页面和一个未找到页面。目前，我们将继续使用我们之前的示例，只是提供纯文本而不是HTML（在配套仓库中的*ch02/01-helloworld.js*）：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run this, you’ll find you can now browse to the home page (*http://localhost:3000*)
    and the About page (*http://localhost:3000/about*). Any querystrings will be ignored
    (so *http://localhost:3000/?foo=bar* will serve the home page), and any other
    URL (*http://localhost:3000/foo*) will serve the Not Found page.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行这个示例，您会发现现在可以浏览到主页（*http://localhost:3000*）和关于页面（*http://localhost:3000/about*）。任何查询字符串都将被忽略（因此*http://localhost:3000/?foo=bar*将提供主页），任何其他URL（*http://localhost:3000/foo*）将提供未找到页面。
- en: Serving Static Resources
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供静态资源
- en: 'Now that we’ve got some simple routing working, let’s serve some real HTML
    and a logo image. These are called *static* resources because they generally don’t
    change (as opposed to, for example, a stock ticker: every time you reload the
    page, the stock prices may change).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了一些简单的路由功能，让我们来提供一些真实的HTML和一个logo图像。这些被称为*静态*资源，因为它们通常不会改变（例如，与股票行情相反：每次重新加载页面时，股票价格可能会发生变化）。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Serving static resources with Node is suitable for development and small projects,
    but for larger projects, you will probably want to use a proxy server such as
    NGINX or a CDN to serve static resources. See [Chapter 17](ch17.xhtml#ch_static_content)
    for more information.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Node提供静态资源适合开发和小型项目，但对于较大的项目，您可能希望使用代理服务器如NGINX或CDN来提供静态资源。有关更多信息，请参见[第17章](ch17.xhtml#ch_static_content)。
- en: 'If you’ve worked with Apache or IIS, you’re probably used to just creating
    an HTML file, navigating to it, and having it delivered to the browser automatically.
    Node doesn’t work like that: we’re going to have to do the work of opening the
    file, reading it, and then sending its contents along to the browser. So let’s
    create a directory in our project called *public* (why we don’t call it *static*
    will become evident in the next chapter). In that directory, we’ll create *home.html*,
    *about.html*, *404.html*, a subdirectory called *img*, and an image called *img/logo.png*.
    I’ll leave that up to you; if you’re reading this book, you probably know how
    to write an HTML file and find an image. In your HTML files, reference the logo
    thusly: `<img src="/img/logo.png" alt="logo">`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用过 Apache 或者 IIS，你可能习惯于只需创建一个 HTML 文件，导航到它，并自动将其传递给浏览器。Node 不是这样工作的：我们需要打开文件、读取文件，然后将其内容发送给浏览器。因此，让我们在项目中创建一个名为
    *public* 的目录（为什么不叫 *static*，在下一章将会显而易见）。在该目录中，我们将创建 *home.html*、*about.html*、*404.html*，一个名为
    *img* 的子目录，并且一个名为 *img/logo.png* 的图片。我会留给你来完成；如果你在阅读本书，你可能知道如何编写 HTML 文件和查找图片。在你的
    HTML 文件中，像这样引用 logo：`<img src="/img/logo.png" alt="logo">`。
- en: 'Now modify *helloworld.js* (*ch02/02-helloworld.js* in the companion repo):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在修改 *helloworld.js*（伴随的代码库中是 *ch02/02-helloworld.js*）：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In this example, we’re being pretty unimaginative with our routing. If you navigate
    to *http://localhost:3000/about*, the *public/about.html* file is served. You
    could change the route to be anything you want, and change the file to be anything
    you want. For example, if you had a different About page for each day of the week,
    you could have files *public/about_mon.html*, *public/about_tue.html*, and so
    on, and provide logic in your routing to serve the appropriate page when the user
    navigates to *http://localhost:3000/about*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们对路由的设定并不是很有创意。如果你访问 *http://localhost:3000/about*，将会服务于 *public/about.html*
    文件。你可以将路由更改为任何你想要的内容，并且更改文件为任何你想要的内容。例如，如果你每周有一个不同的关于页面，你可以有 *public/about_mon.html*、*public/about_tue.html*
    等文件，并在你的路由中提供逻辑来在用户访问 *http://localhost:3000/about* 时服务于适当的页面。
- en: Note we’ve created a helper function, `serveStaticFile`, that’s doing the bulk
    of the work. `fs.readFile` is an asynchronous method for reading files. There
    is a synchronous version of that function, `fs.readFileSync`, but the sooner you
    start thinking asynchronously, the better. The `fs.readFile` function uses a pattern
    called *callbacks*. You provide a function called a *callback function*, and when
    the work has been done, that callback function is invoked (“called back,” so to
    speak). In this case, `fs.readFile` reads the contents of the specified file and
    executes the callback function when the file has been read; if the file didn’t
    exist or there were permissions issues reading the file, the `err` variable is
    set, and the function returns an HTTP status code of 500 indicating a server error.
    If the file is read successfully, the file is sent to the client with the specified
    response code and content type. Response codes will be discussed in more detail
    in [Chapter 6](ch06.xhtml#ch_the_request_and_response_objects).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们创建了一个辅助函数，`serveStaticFile`，这个函数承担了大部分工作。`fs.readFile` 是一个用于读取文件的异步方法。有一个同步版本的函数，`fs.readFileSync`，但越早开始思考异步操作，效果越好。`fs.readFile`
    函数使用了一种叫做 *回调* 的模式。你需要提供一个称为 *回调函数* 的函数，当工作完成时，该回调函数就会被调用（可以说是“回调”）。在这个案例中，`fs.readFile`
    读取了指定文件的内容，并在文件读取完毕时执行回调函数；如果文件不存在或者在读取文件时存在权限问题，`err` 变量就会被设置，函数返回 HTTP 状态码 500，表示服务器错误。如果文件成功读取，文件会以指定的响应代码和内容类型发送到客户端。响应代码将在
    [第6章](ch06.xhtml#ch_the_request_and_response_objects) 中详细讨论。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: '`__dirname` will resolve to the directory the executing script resides in.
    So if your script resides in */home/sites/app.js*, `__dirname` will resolve to
    */home/sites*. It’s a good idea to use this handy global whenever possible. Failing
    to do so can cause hard-to-diagnose errors if you run your app from a different
    directory.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`__dirname` 将会解析为当前执行脚本所在的目录。所以如果你的脚本位于 */home/sites/app.js*，`__dirname` 将会解析为
    */home/sites*。尽可能使用这个方便的全局变量是个好主意。如果不这样做，当你从不同的目录运行应用时，可能会导致难以诊断的错误。'
- en: Onward to Express
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入 Express
- en: So far, Node probably doesn’t seem that impressive to you. We’ve basically replicated
    what Apache or IIS do for you automatically, but now you have some insight into
    how Node does things and how much control you have. We haven’t done anything particularly
    impressive, but you can see how we could use this as a jumping-off point to do
    more sophisticated things. If we continued down this road, writing more and more
    sophisticated Node applications, you might very well end up with something that
    resembles Express….
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Node可能对你来说并不那么令人印象深刻。我们基本上复制了Apache或IIS为您自动完成的工作，但现在你已经了解了Node如何做事情以及你有多少控制权。我们并没有做出什么特别引人注目的事情，但你可以看到我们可以将其作为一个起点，做更复杂的事情。如果我们继续这条路，编写越来越复杂的Node应用程序，最终可能会得到类似Express的东西……
- en: 'Fortunately, we don’t have to: Express already exists, and it saves you from
    implementing a lot of time-consuming infrastructure. So now that we’ve gotten
    a little Node experience under our belt, we’re ready to jump into learning Express.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不必从头开始：Express已经存在，它可以帮助你避免实现许多耗时的基础设施。现在我们已经积累了一些Node经验，我们准备好开始学习Express了。
- en: ^([1](ch02.xhtml#idm45053605785656-marker)) These days, vi is essentially synonymous
    with vim (vi improved). On most systems, vi is aliased to vim, but I usually type
    `vim` to make sure I’m using vim.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#idm45053605785656-marker)) 当今，`vi`基本上等同于`vim`（vi改进版）。在大多数系统上，`vi`被别名为`vim`，但我通常会输入`vim`来确保我在使用`vim`。
