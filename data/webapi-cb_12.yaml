- en: Chapter 12\. Web Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章\. Web 组件
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Web components are a way to build new HTML elements with their own behavior.
    This behavior is encapsulated in a *custom element*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Web 组件是一种构建具有自身行为的新 HTML 元素的方法。这种行为被封装在一个*自定义元素*中。
- en: Creating a Component
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个组件
- en: You can create a web component by defining a class that extends `HTMLElement`,
    as shown in [Example 12-1](#example12-1).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过定义一个扩展了`HTMLElement`的类来创建一个 Web 组件，如[示例 12-1](#example12-1)所示。
- en: Example 12-1\. A barebones web component
  id: totrans-5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-1\. 一个简单的 Web 组件
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you add the custom element to the DOM, the browser calls the `connectedCallback`
    method. This is typically where most of your component’s logic resides. This is
    one of the *lifecycle callbacks*. Some other lifecycle callbacks include:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将自定义元素添加到 DOM 中时，浏览器会调用`connectedCallback`方法。这通常是大多数组件逻辑的所在地。这是其中一个*生命周期回调*。其他一些生命周期回调包括：
- en: '`disconnectedCallback`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`disconnectedCallback`'
- en: Called when you remove the custom element from the DOM. This is a good place
    to do cleanup, such as removing event listeners.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在从 DOM 中移除自定义元素时调用。这是一个执行清理工作（如移除事件监听器）的好地方。
- en: '`attributeChangedCallback`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`attributeChangedCallback`'
- en: Called when you change one of the element’s watched attributes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你改变元素的一个监视属性时调用。
- en: Registering a Custom Element
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册一个自定义元素
- en: Once you’ve created your custom element class, you must register it with the
    browser before using it in an HTML document. You can register your custom element
    by calling `define` on the global `customElements` object, as shown in [Example 12-2](#example12-2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完自定义元素类之后，必须在 HTML 文档中使用它之前向浏览器注册它。你可以通过在全局的`customElements`对象上调用`define`来注册你的自定义元素，如[示例 12-2](#example12-2)所示。
- en: Example 12-2\. Registering a custom element with the browser
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-2\. 在浏览器中注册自定义元素
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you try to define a custom element that has already been defined, the browser
    throws an error. If this is a possibility for you, you can call `customElements.get('my-component')`
    in order to check if it’s already defined. If this returns `undefined`, it’s safe
    to call `customElements.define`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试定义一个已经定义过的自定义元素，浏览器会抛出一个错误。如果这对你可能是一个可能性，你可以调用`customElements.get('my-component')`来检查它是否已经定义。如果返回`undefined`，则可以安全地调用`customElements.define`。
- en: Once you register the element, you can use it like any other HTML element, as
    shown in [Example 12-3](#example12-3).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注册了元素后，你可以像使用任何其他 HTML 元素一样使用它，如[示例 12-3](#example12-3)所示。
- en: Example 12-3\. Using the custom element
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-3\. 使用自定义元素
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Custom elements must always have a hyphenated name. This is required by the
    specification. They also must always have a closing tag, even if there is no child
    content.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义元素的名称必须始终使用连字符命名。这是规范要求的。它们也必须始终有一个闭合标记，即使没有子内容。
- en: Templates
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: There are several ways to get HTML markup into a web component. For example,
    in the `connectedCallback`, you can manually create elements by calling `document.createElement`
    and manually appending them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种将 HTML 标记引入 Web 组件中的方法。例如，在`connectedCallback`中，你可以通过调用`document.createElement`手动创建元素并手动附加它们。
- en: You can also specify a component’s markup with a `<template>` element. This
    contains some HTML that you’ll use during the `connectedCallback` to give your
    component its content. These templates are very simple—they don’t support data
    binding, variable interpolation, or any kind of logic. They only serve as a starting
    point of the HTML content. Within the `connectedCallback`, you can select elements,
    set dynamic values, and add event listeners as needed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`<template>`元素指定组件的标记。它包含一些 HTML，在`connectedCallback`期间用来为你的组件提供内容。这些模板非常简单，它们不支持数据绑定、变量插值或任何类型的逻辑。它们只作为
    HTML 内容的起点。在`connectedCallback`中，你可以选择元素，设置动态值，并根据需要添加事件监听器。
- en: Slots
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插槽
- en: A `<slot>` is a special element you can use in a template. A slot is a placeholder
    for some child content that is passed in. A component can have a default slot
    as well as one or more *named* slots. You can use named slots to place multiple
    pieces of content inside your component.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`<slot>` 是一个特殊的元素，你可以在模板中使用它。插槽是一种用于传递某些子内容的占位符。组件可以有一个默认插槽以及一个或多个*命名*插槽。你可以使用命名插槽在组件内放置多个内容片段。'
- en: '[Example 12-4](#example12-4) shows a simple template that has a named and default
    slot.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-4](#example12-4)展示了一个具有命名和默认插槽的简单模板。'
- en: Example 12-4\. A template with slots
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-4\. 带有插槽的模板
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Suppose this template is used in an `<author-bio>` component, as shown in [Example 12-5](#example12-5).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这个模板用于 `<author-bio>` 组件中，如 [示例12-5](#example12-5) 所示。
- en: Example 12-5\. Specifying content for slots
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-5\. 为插槽指定内容
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the component’s child content, you can specify a `slot` attribute that corresponds
    to a named slot in the component template. The `span` element containing the text
    “John Doe” will be placed in the component’s `name` slot, inside the `h2` element.
    Any other child content, without a `slot` element, is placed in the default slot
    (the one with no name).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的子内容中，你可以指定一个 `slot` 属性，对应组件模板中的一个具名插槽。包含文本“John Doe”的 `span` 元素将被放置在组件的
    `name` 插槽中，即 `h2` 元素内。任何其他没有 `slot` 元素的子内容都会被放置在默认插槽中（没有名称的插槽）。
- en: Shadow DOM
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影子 DOM
- en: A shadow DOM is a collection of elements that are isolated from the rest of
    the main DOM. Web components use shadow DOM extensively. One main advantage of
    using shadow DOM is for scoped CSS styles. Any styles you define in a shadow DOM
    *only* apply to elements inside that shadow DOM. Other elements in the document,
    even if they’d normally match the selector of a CSS rule, do not have the CSS
    applied.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 影子 DOM 是一组与主 DOM 隔离的元素集合。Web 组件广泛使用影子 DOM。使用影子 DOM 的一个主要优势是可以进行作用域 CSS 样式。你在影子
    DOM 中定义的任何样式 *仅* 应用于该影子 DOM 内部的元素。文档中的其他元素，即使通常会匹配 CSS 规则的选择器，也不会应用这些 CSS 样式。
- en: This style scoping goes both ways. If you have global styles on your page, they
    will not apply to any of the elements in a shadow DOM.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种样式作用范围是双向的。如果你在页面上有全局样式，它们将不会应用于影子 DOM 中的任何元素。
- en: A shadow DOM, created by attaching a *shadow root* to a web component, can be
    open or closed. When a shadow DOM is open, you can access and modify its elements
    with JavaScript. When it is closed, a web component’s `shadowRoot` property is
    `null` so you can’t access the content within.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 *shadow root* 附加到 Web 组件来创建影子 DOM，这个影子 DOM 可以是开放的或者关闭的。当影子 DOM 是开放的时候，你可以使用
    JavaScript 访问和修改它的元素。当它是关闭的时候，Web 组件的 `shadowRoot` 属性为 `null`，因此无法访问其内容。
- en: Light DOM
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Light DOM
- en: Using shadow DOM is completely optional, however. The *Light DOM* refers to
    the regular, non-encapsulated DOM inside the web component. Because Light DOM
    is not encapsulated from the rest of the page, global styles will be applied to
    its child elements.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用影子 DOM 是完全可选的。*Light DOM* 指的是 Web 组件内部的常规、非封装的 DOM。由于 Light DOM 不会从页面其余部分封装起来，全局样式将应用于其子元素。
- en: Creating a Component to Show Today’s Date
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个显示今天日期的组件
- en: Problem
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want a web component that formats and shows today’s date in the browser’s
    locale.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望一个 Web 组件能够在浏览器的本地化环境中格式化并展示今天的日期。
- en: Solution
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `Intl.DateTimeFormat` inside the web component to format the current date
    (see [Example 12-6](#example12-6)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 组件内部使用 `Intl.DateTimeFormat` 来格式化当前日期（参见 [示例12-6](#example12-6)）。
- en: Example 12-6\. A custom element that formats the current date
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-6\. 格式化当前日期的自定义元素
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now you can show today’s date by using this web component without any attributes
    or child content, as shown in [Example 12-7](#example12-7).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用这个 Web 组件来展示今天的日期，不需要任何属性或子内容，如 [示例12-7](#example12-7) 所示。
- en: Example 12-7\. Showing the current date
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-7\. 展示当前日期
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Discussion
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When a `<todays-date>` element enters the DOM, the browser calls the `connectedCallback`
    method. In the `connectedCallback`, the `TodaysDate` class formats the current
    date with an `Intl.DateTimeFormat` object, which you may remember from [Chapter 11](ch11.html#ch_i18n).
    The `connectedCallback` sets this formatted date string as the element’s `textContent`,
    which is inherited from `Node` (an ancestor of `HTMLElement`).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 `<todays-date>` 元素进入 DOM 时，浏览器调用 `connectedCallback` 方法。在 `connectedCallback`
    中，`TodaysDate` 类使用 `Intl.DateTimeFormat` 对象格式化当前日期，你可能还记得这个对象来自 [第11章](ch11.html#ch_i18n)。`connectedCallback`
    将这个格式化的日期字符串设置为元素的 `textContent`，这个属性是从 `Node`（`HTMLElement` 的祖先）继承而来。
- en: Creating a Component to Format a Custom Date
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个格式化自定义日期的组件
- en: Problem
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want a web component that formats an arbitrary date value.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望一个 Web 组件能够格式化任意日期值。
- en: Solution
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Give the web component a `date` attribute, and use this to generate the formatted
    date (see [Example 12-8](#example12-8)). You can watch this attribute for changes
    and reformat the date if the date attribute changes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Web 组件添加一个 `date` 属性，并使用它来生成格式化的日期（参见 [示例12-8](#example12-8)）。你可以监听这个属性的变化，并在日期属性变化时重新格式化日期。
- en: Example 12-8\. A custom date component
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-8\. 自定义日期组件
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can now pass a date to the `date` attribute to get it formatted in the user’s
    locale (see [Example 12-9](#example12-9)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将日期传递给`date`属性，以便以用户的区域设置格式化它（参见[示例 12-9](#example12-9)）。
- en: Example 12-9\. Using the `date-formatter` element
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-9\. 使用`date-formatter`元素
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Discussion
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This recipe expands on [“Creating a Component to Show Today’s Date”](#recipe_todaysDate)
    by adding the ability to specify your own date via an attribute.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在[“创建一个显示今天日期的组件”](#recipe_todaysDate)基础上增加了通过属性指定自定义日期的功能。
- en: By default, if you change the value of an attribute passed to a custom element,
    nothing happens. The logic in `connectedCallback` only runs when you first add
    the component to the DOM. To make the component react to attribute changes, you
    can implement the `attributeChangedCallback` method. In the `date-formatter` component,
    this method takes the updated `date` attribute and create a new formatted date.
    When an attribute changes, the browser calls this method with the attribute name,
    the old value, and the new value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果更改传递给自定义元素的属性值，什么也不会发生。`connectedCallback`中的逻辑仅在首次将组件添加到DOM时运行。要使组件对属性更改做出响应，可以实现`attributeChangedCallback`方法。在`date-formatter`组件中，此方法接收更新后的`date`属性并创建新的格式化日期。当属性发生更改时，浏览器会调用此方法，并传递属性名称、旧值和新值。
- en: However, this alone won’t solve the problem. If you just implement `attribute​Change⁠dCallback`,
    you still won’t be notified of attribute changes. This is because the browser
    only calls `attributeChangedCallback` for *observed* attributes. This lets you
    define a subset of attributes so the browser only calls `attributeChangedCallback`
    for those attributes you’re interested in. To define these attributes, add a static
    `observedAttributes` property to your component class. This should be an array
    of attribute names.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅此还不足以解决问题。如果仅实现`attributeChangedCallback`，则仍无法收到属性更改的通知。这是因为浏览器仅为*观察到*的属性调用`attributeChangedCallback`。这允许您定义属性的子集，以便浏览器仅为您感兴趣的那些属性调用`attributeChangedCallback`。要定义这些属性，请将静态的`observedAttributes`属性添加到您的组件类中。这应该是一个属性名称数组。
- en: In the `date-formatter` component, you’re only watching one attribute (the `date`
    attribute). Because of this, in `attributeChangedCallback` you don’t need to check
    the `name` argument since you already know it’s the `date` attribute that changed.
    In a component with multiple watched attributes, you can check the `name` to find
    out which attribute has changed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`date-formatter`组件中，您仅监视一个属性（`date`属性）。因此，在`attributeChangedCallback`中，您无需检查`name`参数，因为您已经知道更改的是`date`属性。对于具有多个监视属性的组件，您可以检查`name`以查找已更改的属性。
- en: If you change the value of the `date` attribute with JavaScript, the `attributeChangedCallback`
    will run and update the formatted date.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用JavaScript更改`date`属性的值，则`attributeChangedCallback`将运行并更新格式化日期。
- en: Creating a Feedback Component
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建反馈组件
- en: Problem
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a reusable component where a user can provide feedback about
    whether or not the page is helpful.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望创建一个可重用的组件，用户可以在其中提供关于页面是否有帮助的反馈。
- en: Solution
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create a web component to present the feedback buttons and dispatch a custom
    event when the user clicks on one.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个网络组件来呈现反馈按钮，并在用户单击其中一个按钮时分发自定义事件。
- en: First, you need to create a template element to contain the markup that this
    component uses, as shown in [Example 12-10](#example12-10).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个模板元素，其中包含此组件使用的标记，如[示例 12-10](#example12-10)所示。
- en: Example 12-10\. Creating the template
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-10\. 创建模板
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This component uses a shadow DOM that contains the template markup (see [Example 12-11](#example12-11)).
    The CSS style rules are scoped to this component only.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使用包含模板标记的影子DOM（参见[示例 12-11](#example12-11)）。CSS样式规则仅限于此组件。
- en: Example 12-11\. The component implementation
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-11\. 组件实现
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now you can add this feedback component to your app (see [Example 12-12](#example12-12)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将此反馈组件添加到您的应用程序中（参见[示例 12-12](#example12-12)）。
- en: Example 12-12\. Using the feedback-rating component
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-12\. 使用反馈评分组件
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can listen for the custom `feedback` event to be notified when the user
    selects a feedback option (see [Example 12-13](#example12-13)). It’s up to you
    what to do with this information; maybe you want to send the data to an analytics
    endpoint with the Fetch API.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以监听自定义`feedback`事件，以便在用户选择反馈选项时收到通知（参见[示例 12-13](#example12-13)）。如何处理这些信息由您决定；也许您想要使用Fetch
    API将数据发送到分析端点。
- en: Example 12-13\. Listening for the feedback event
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-13\. 监听反馈事件
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `feedback-rating` component presents a prompt and two buttons. The user
    clicks one of the two buttons depending on whether they think the website content
    is helpful or not.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`feedback-rating`组件显示提示和两个按钮。用户根据他们认为网站内容是否有帮助来点击两个按钮中的一个。'
- en: The `click` event listener uses event delegation. Instead of adding a listener
    to each button, it adds a single listen that responds to a click anywhere inside
    the feedback prompt. If the clicked element does not have a `data-helpful` attribute,
    then the user must not have clicked on a feedback button, so do nothing. Otherwise,
    it converts the string value to a boolean and sets it as a property on the custom
    element that can be retrieved later. It also dispatches an event that you can
    listen for elsewhere.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`click`事件侦听器使用事件委托。它不是给每个按钮添加监听器，而是添加一个响应反馈提示任何位置的单个监听器。如果点击的元素没有`data-helpful`属性，则用户可能没有点击反馈按钮，因此不执行任何操作。否则，它将字符串值转换为布尔值，并将其设置为可以稍后检索的自定义元素属性。它还分发了一个事件，您可以在其他地方监听到。'
- en: 'In order for this event to cross the shadow DOM into the regular DOM, you must
    set the `composed: true` option. Otherwise, any event listener that you added
    to the custom element won’t be triggered.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '要使此事件跨越影子 DOM 进入常规 DOM，必须设置`composed: true`选项。否则，添加到自定义元素的任何事件侦听器都不会被触发。'
- en: Once that event is triggered, you can check the feedback element itself (available
    as the `event.target` property) for the `helpful` property to determine which
    feedback button the user clicked.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 触发事件后，可以检查反馈元素本身（作为`event.target`属性可用）的`helpful`属性，以确定用户点击了哪个反馈按钮。
- en: Because the styles and markup are contained in a shadow DOM, the CSS rules do
    not affect any elements outside of the shadow DOM. This is important to note,
    as otherwise an element selector like `button` would style every button on the
    page. Because the styles are scoped, they are only applied to buttons inside the
    custom element.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于样式和标记包含在影子 DOM 中，因此 CSS 规则不会影响影子 DOM 外的任何元素。这一点很重要，否则像`button`这样的元素选择器会样式化页面上的每个按钮。由于样式是作用域的，它们仅应用于自定义元素内的按钮。
- en: However, the content passed to the component’s slots *can* be styled by global
    CSS rules. The slotted content does not move into the shadow DOM, but rather remains
    in the standard, or light, DOM.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，传递到组件插槽的内容*可以*由全局 CSS 规则进行样式化。插槽内容不会移动到影子 DOM 中，而是保留在标准或轻 DOM 中。
- en: Creating a Profile Card Component
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建个人资料卡组件
- en: Problem
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a reusable card component to show a user profile.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要创建一个可重用的卡片组件来显示用户资料。
- en: Solution
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use slots in your web component to pass content to certain regions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Web 组件中使用插槽将内容传递到特定区域。
- en: First, define the template with some styles and markup, as shown in [Example 12-14](#example12-14).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照[示例 12-14](#example12-14)中显示的样式和标记定义模板。
- en: Example 12-14\. The profile card template
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-14\. 个人资料卡模板
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This template has three named slots (photo, name, and title) and one default
    slot for the biography. The component implementation itself is rather minimal;
    it just creates and attaches a shadow root with the template (see [Example 12-15](#example12-15)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板具有三个命名插槽（photo、name 和 title）和一个用于传记的默认插槽。组件实现本身相当简单；它只是创建并附加了一个包含模板的影子根（参见[示例 12-15](#example12-15)）。
- en: Example 12-15\. The component implementation
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-15\. 组件实现
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To use the component, you can specify the `slot` attribute on child elements
    to specify which slot the content should go into (see [Example 12-16](#example12-16)).
    The biography element, which does not have a `slot` attribute, is placed in the
    default slot.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用该组件，可以在子元素上指定`slot`属性，以指定内容应放入哪个插槽（参见[示例 12-16](#example12-16)）。没有`slot`属性的传记元素放置在默认插槽中。
- en: Example 12-16\. Using the profile card
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-16\. 使用个人资料卡
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Figure 12-1](#img_profileCard) shows the rendered result of the profile card
    component.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-1](#img_profileCard)显示了个人资料卡组件的渲染结果。'
- en: '![The rendered profile card](assets/wacb_1201.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![渲染的个人资料卡](assets/wacb_1201.png)'
- en: Figure 12-1\. The rendered profile card
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 渲染的个人资料卡
- en: Discussion
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In the CSS styles, you might have noticed the `:host` selector, which represents
    styles that are applied to the custom element’s *shadow host*. This is the element
    that the shadow DOM is attached to.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 样式中，您可能已经注意到`:host`选择器，它表示应用于自定义元素*影子宿主*的样式。这是影子 DOM 附加到的元素。
- en: With this example, you can see how web components let you create reusable content
    and layouts. Slots are a powerful tool that enables you to insert content exactly
    where it’s needed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此示例，您可以看到Web组件如何让您创建可重复使用的内容和布局。插槽是一个强大的工具，使您能够在需要的地方精确插入内容。
- en: Creating a Lazy Loading Image Component
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个懒加载图像组件
- en: Problem
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want a reusable component that contains an image that isn’t loaded until
    it scrolls into the viewport.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个可重用的组件，其中包含一个图像，直到滚动到视口中才加载。
- en: Solution
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use an `IntersectionObserver` to wait for the element to scroll into view, then
    set the `src` element on the contained image.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`IntersectionObserver`等待元素滚动到视图中，然后在包含的图像上设置`src`元素。
- en: This recipe adapts [“Lazy Loading an Image When Scrolled into View”](ch06.html#recipe_lazyImage)
    from [Chapter 6](ch06.html#ch_observers), presenting its solution inside a web
    component (see Examples [12-17](#example12-17) and [12-18](#example12-18)).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方调整了[“滚动到视图时懒加载图像”](ch06.html#recipe_lazyImage)（见示例[12-17](#example12-17)和[12-18](#example12-18)）在Web组件中的解决方案。
- en: Example 12-17\. The `LazyImage` component
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-17\. `LazyImage`组件
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Example 12-18\. Using the `LazyImage` component
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-18\. 使用`LazyImage`组件
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Discussion
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Once the element scrolls into view, the `IntersectionObserver` callback gets
    the `src` attribute and sets it as the image’s `src` attribute, which triggers
    the image to load.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦元素滚动到视图中，`IntersectionObserver`回调获取`src`属性，并将其设置为图像的`src`属性，从而触发图像加载。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This example illustrates how to create a custom element that extends a built-in
    element, but for lazy loading images you may not need it. Newer browsers support
    the `loading="lazy"` attribute on `img` tags, which has the same effect—the image
    is not loaded until it scrolls into view.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例说明如何创建扩展内置元素的自定义元素，但对于懒加载图像，您可能不需要它。较新的浏览器支持`img`标签上的`loading="lazy"`属性，具有相同的效果——直到滚动到视图中，图像才会加载。
- en: Creating a Disclosure Component
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个披露组件
- en: Problem
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to show or hide some content by clicking a button. For example, you
    may have an “Advanced” section of a form that is collapsed by default, but can
    be expanded by clicking a button.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望通过单击按钮显示或隐藏一些内容。例如，您可能有一个默认折叠的表单的“高级”部分，但可以通过单击按钮展开。
- en: Solution
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Build a disclosure web component. The component has two parts: the button that
    toggles the content, and the content itself. Each of these two parts will have
    a slot. The default slot will be for the content, and there will be a named slot
    for the button. This component can also be expanded or collapsed programmatically
    by changing the value of its `open` attribute.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个披露网络组件。该组件分为两部分：切换内容的按钮和内容本身。这两部分将各自有一个插槽。默认插槽用于内容，按钮则有一个命名插槽。此组件还可以通过改变其`open`属性的值来以编程方式展开或折叠。
- en: First, define the template for the disclosure component, as shown in [Example 12-19](#example12-19).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义披露组件的模板，如[示例 12-19](#example12-19)所示。
- en: Example 12-19\. The disclosure component template
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-19\. 披露组件模板
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The component implementation is shown in [Example 12-20](#example12-20).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的实现在[示例 12-20](#example12-20)中显示。
- en: Example 12-20\. The disclosure component implementation
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-20\. 披露组件的实现
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: One last thing—you need to add a small bit of CSS to the page. Otherwise, the
    child content will flicker on the page for a moment, then disappear. This is because
    before the custom element is registered, it has no behavior, and the browser isn’t
    aware of its slots. This means that any child content will be rendered in the
    page.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件事——您需要在页面上添加一小段CSS。否则，子内容将在页面上闪烁片刻，然后消失。这是因为在自定义元素注册之前，它没有行为，浏览器不知道其插槽。这意味着任何子内容将在页面中呈现。
- en: Then, once the custom element is defined, the child content moves into the slot
    and disappears.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一旦自定义元素被定义，子内容移动到插槽中并消失。
- en: To fix this, you can use CSS to hide the element’s content until it is registered
    by using the `:defined` pseudo-class.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，您可以使用CSS来隐藏元素的内容，直到通过使用`:defined`伪类注册它。
- en: Example 12-21\. Fixing the flicker issue
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-21\. 修复闪烁问题
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will initially hide the content. Once the custom element becomes defined,
    the element is shown. You won’t see the flicker because the content has already
    been moved to the slot.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将最初隐藏内容。一旦自定义元素定义，元素将显示出来。您不会看到闪烁，因为内容已经移动到插槽中。
- en: Finally, you can use the disclosure element, as shown in [Example 12-22](#example12-22).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用披露元素，如[示例 12-22](#example12-22)所示。
- en: Example 12-22\. Using the disclosure element
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-22\. 使用披露元素
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The toggle button will have the text “Details,” since that is placed in the
    `title` slot. The remaining content is placed in the default slot.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 切换按钮将显示文本“Details”，因为它放置在`title`插槽中。其余内容放置在默认插槽中。
- en: Discussion
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The disclosure component uses its `open` attribute to determine whether or not
    to show the child content. When the toggle button is clicked, it adds or removes
    the attribute depending on the current state, then conditionally applies the `hidden`
    attribute to the child content.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 披露组件使用其`open`属性来确定是否显示子内容。当点击切换按钮时，根据当前状态添加或删除属性，然后有条件地应用`hidden`属性到子内容。
- en: You can also programmatically toggle the child content by adding or removing
    the `open` attribute. This works because the component is observing the `open`
    attribute. If you change it with JavaScript, or even in the browser developer
    tools, the browser calls the component’s `attributeChangedCallback` method with
    the new value.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过添加或移除`open`属性来程序化地切换子内容的可见性。这是因为组件正在观察`open`属性。如果您使用JavaScript更改它，甚至在浏览器开发工具中更改它，浏览器会调用组件的`attributeChangedCallback`方法，并传递新的值。
- en: The `open` attribute does not have a value. If you want the content to be open
    by default, simply add the `open` attribute with no value, as shown in [Example 12-23](#code_showContentDefault).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`open`属性没有值。如果要默认打开内容，请简单地添加没有值的`open`属性，如[示例 12-23](#code_showContentDefault)所示。'
- en: Example 12-23\. Showing the content by default
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-23\. 默认显示内容
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you remove the attribute, the `newValue` argument to `attributeChangedCallback`
    will be `null`. In that case, it will hide the child content by applying the `hidden`
    attribute. If you add the attribute with no value, as shown in [Example 12-23](#code_showContentDefault),
    the `newValue` argument will be an empty string. If that’s the case, it will remove
    the `hidden` attribute.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果移除该属性，则`attributeChangedCallback`中的`newValue`参数将为`null`。在这种情况下，它将通过应用`hidden`属性来隐藏子内容。如果添加了没有值的属性，如[示例 12-23](#code_showContentDefault)，则`newValue`参数将为空字符串。在这种情况下，它将移除`hidden`属性。
- en: Creating a Styled Button Component
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个样式化按钮组件
- en: Problem
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a reusable button component with different style options.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望创建一个具有不同样式选项的可重用按钮组件。
- en: Solution
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'There will be three variants of the button:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮将有三个变体：
- en: the default variant, with a gray background
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认变体，带有灰色背景
- en: the “primary” variant, with a blue background
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “primary”变体，带有蓝色背景
- en: the “danger” variant, with a red background
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “danger”变体，带有红色背景
- en: First, create the template with the custom button styling, along with CSS classes
    for the “primary” and “danger” variants, as shown in [Example 12-24](#example12-24).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建带有自定义按钮样式的模板，以及“primary”和“danger”变体的CSS类，如[示例 12-24](#example12-24)所示。
- en: Example 12-24\. The button template
  id: totrans-164
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-24\. 按钮模板
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Most of this template is the CSS. The actual markup for the component itself
    is quite simple: just a button element with a default slot.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分模板都是CSS。组件本身的实际标记非常简单：只是一个带有默认插槽的按钮元素。
- en: 'The component itself will support two attributes:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 组件本身将支持两个属性：
- en: '`variant`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`variant`'
- en: The name of the button variant (`primary` or `danger`)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮变体的名称（`primary`或`danger`）
- en: '`type`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`'
- en: The `type` attribute that is passed into the underlying `button` element. Set
    this to `button` to prevent submitting a form (see [Example 12-25](#example12-25)).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 传递到底层`button`元素的`type`属性。将其设置为`button`以防止提交表单（参见[示例 12-25](#example12-25)）。
- en: Example 12-25\. The button component
  id: totrans-172
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-25\. 按钮组件
- en: '[PRE24]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To add a click listener, you actually don’t have to do any further work. You
    can add a click listener to the `styled-button` element and it will be triggered
    when you click the underlying button, thanks to event delegation. With event delegation,
    you can add an event listener to a parent element, and events on its children
    will also trigger the parent’s event listener.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加点击侦听器，实际上您不必再做任何额外的工作。您可以向`styled-button`元素添加点击侦听器，当您单击底层按钮时将触发它，这要归功于事件委托。通过事件委托，您可以向父元素添加事件侦听器，其子元素的事件也会触发父元素的事件侦听器。
- en: Finally, here is how you use the `styled-button` component (see [Example 12-26](#example12-26)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是如何使用`styled-button`组件（参见[示例 12-26](#example12-26)）。
- en: Example 12-26\. Using the `styled-button` component
  id: totrans-176
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-26\. 使用`styled-button`组件
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Discussion
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The styling is applied by setting a class name on the button element equal to
    the variant name. This will cause the corresponding CSS rule to apply the desired
    background color.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在按钮元素上设置与变体名称相等的类名来应用样式。这将导致相应的CSS规则应用所需的背景颜色。
- en: You don’t need to have any code in the `connectedCallback` to apply the class,
    because the browser will call the `attributeChangedCallback` with the initial
    values as well as any subsequently updated values.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要在`connectedCallback`中添加任何代码来应用类，因为浏览器会调用`attributeChangedCallback`，包括初始值和后续更新的值。
- en: You can add a click event listener to the `styled-button` in the same way as
    you would a normal button (see [Example 12-27](#example12-27)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像处理普通按钮一样向`styled-button`添加点击事件监听器（参见[示例 12-27](#example12-27)）。
- en: Example 12-27\. Adding a click listener
  id: totrans-182
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-27\. 添加点击监听器
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
