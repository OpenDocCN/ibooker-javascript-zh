- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: The only way you can read this sentence is by opening this book, either physically
    or digitally. This tells me you are interested in TypeScript, one of the most
    popular programming languages in recent years. According to the [2022 State of
    JavaScript survey](https://2022.stateofjs.com), almost 70% of all participants
    actively use TypeScript. The [2022 StackOverflow survey](https://survey.stackoverflow.co/2022)
    lists TypeScript as one of the top five most popular languages and the fourth
    highest in user satisfaction. At the beginning of 2023, TypeScript counts [more
    than 40 million weekly downloads on NPM](https://oreil.ly/ZHWn8).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你能读到这句话的唯一方法是打开这本书，无论是实体书还是电子书。这告诉我你对TypeScript很感兴趣，这是近年来最流行的编程语言之一。根据[2022年JavaScript状况调查](https://2022.stateofjs.com)，几乎70%的参与者在积极使用TypeScript。[2022年StackOverflow调查](https://survey.stackoverflow.co/2022)将TypeScript列为五大最受欢迎语言之一，用户满意度排名第四。到2023年初，TypeScript每周在NPM上的下载量超过了4000万次。
- en: 'Without a doubt: TypeScript is a phenomenon!'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问：TypeScript是一种现象！
- en: Despite its popularity, TypeScript still gives a lot of developers a hard time.
    *Fighting the type-checker* is one phrase you hear often; another one is *throwing
    a couple of `any`’s in there so it shuts up*. Some people feel slowed down, writing
    just to please the compiler when they know their code *has* to work. However,
    TypeScript’s sole purpose is to make JavaScript developers more productive and
    efficient. Does the tool ultimately fail to meet its goals, or do we as developers
    expect something different from the tool than it is designed to deliver?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TypeScript很受欢迎，但仍然让很多开发者感到困扰。*与类型检查器抗争*是一个经常听到的说法；另一个是*随便加几个`any`来让它闭嘴*。有些人感到自己写代码只是为了取悦编译器，即使他们知道他们的代码*必须*工作。然而，TypeScript的唯一目的是让JavaScript开发者更加高效和有效率。这个工具最终是未能实现其目标，还是我们作为开发者对这个工具的期望与其设计目标不同？
- en: 'The answer is somewhere in the middle, and this is where *TypeScript Cookbook*
    comes in. In this book, you will find more than one hundred recipes that deal
    with everything from complex project setups to advanced typing techniques. You
    will learn about the intricacies and inner workings of the type system, as well
    as the trade-offs and exceptions it has to make to not interfere with its foundation:
    JavaScript. You also will learn methodologies, design patterns, and development
    techniques to create better and more robust TypeScript code. In the end, you will
    understand not only *how* to do something but also *why*.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 答案就在中间，这就是*TypeScript食谱*的用武之地。在这本书中，你将找到100多个配方，涵盖从复杂项目设置到高级类型技术的所有内容。你将了解类型系统的复杂性和内部运作方式，以及它不得不做出的权衡和异常，以不干扰其基础：JavaScript。你还将学习方法论、设计模式和开发技术，以创建更好、更健壮的TypeScript代码。最终，你将不仅明白*如何*做某事，还将明白*为什么*。
- en: My goal is to give you a guide that takes you from novice to expert, as well
    as a quick reference you can use well after you’ve read the book. With TypeScript’s
    four releases per year, it’s impossible to list all the most up-to-date features
    in a single book. This is why we focus on long-lasting aspects of the programming
    language, to prepare you for all the changes to come. Welcome to the TypeScript
    cookbook.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我的目标是为你提供一本指南，从初学者到专家，以及在你阅读完本书后可以长期使用的快速参考。由于TypeScript每年有四次发布，不可能在一本书中列出所有最新的功能。这就是为什么我们专注于编程语言的持久方面，为你准备所有即将到来的变化。欢迎来到TypeScript食谱。
- en: Who This Book Is For
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁？
- en: 'This book is for developers, engineers, and architects who know enough JavaScript
    to be dangerous and have gotten their feet wet in TypeScript. You understand the
    fundamental concepts of types and how to apply them, and you understand the immediate
    benefits of static types. You are at a point where things get interesting: you
    need a deeper knowledge of the type system, and you need to actively work with
    TypeScript not only to ensure a robust and scaleable application but also to guarantee
    collaboration between you and your colleagues.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合那些已经掌握足够JavaScript知识，并初步涉足TypeScript的开发者、工程师和架构师。你理解类型的基本概念及其应用方式，也知道静态类型的即时优势。你现在正处于一个有趣的阶段：你需要更深入地了解类型系统，并且需要积极地与TypeScript合作，不仅确保应用程序稳健且可扩展，还要确保与同事之间的协作。
- en: You want to learn about how something behaves in TypeScript, as well as understand
    the reasoning behind its behavior. This is what you get in *TypeScript Cookbook*.
    You will learn project setup, quirks, and behavior of the type system; complex
    types and their use cases; and working with frameworks and applying type development
    methodology. This book is designed to take you from novice to apprentice, and
    eventually to expert. If you need a guide to actively learn more of TypeScript’s
    sophisticated features, but also a reference you can rely on throughout your career,
    this book will do right by you.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望了解在 TypeScript 中某些内容的行为方式，并理解其背后的原因。这正是你在 *TypeScript Cookbook* 中可以得到的。你将学习项目设置、怪癖及类型系统的行为，复杂类型及其用例，以及与框架的协作和应用类型开发方法论。本书旨在将你从初学者引导至专家。如果你需要一个指南来积极学习
    TypeScript 的高级特性，并且希望这本书能成为你职业生涯中的可靠参考，那么这本书将不会让你失望。
- en: What’s in This Book?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书内容包括：
- en: A predominant goal of writing *TypeScript Cookbook* was to focus on solutions
    for everyday problems. TypeScript is a remarkable programming language, and the
    features of the type system are so powerful that we reach a point where people
    challenge themselves with advanced [TypeScript puzzles](https://tsch.js.org).
    While these brain teasers are entertaining, they often lack real-world context
    and thus are not part of this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 《TypeScript Cookbook》撰写的一个主要目标是解决日常问题的解决方案。TypeScript 是一门卓越的编程语言，其类型系统的特性非常强大，以至于我们达到了一个人们挑战自己使用高级
    [TypeScript puzzles](https://tsch.js.org) 的阶段。尽管这些脑筋急转弯很有趣，但它们通常缺乏真实世界的背景，因此不属于本书的内容。
- en: I want to make sure that the content presented is something you will encounter
    in your day-to-day life as a TypeScript developer, with problems that stem from
    real-world situations and solutions that are holistic. I will teach you techniques
    and methodologies you can use in multiple scenarios, not just in a single recipe.
    Throughout the book you will find references to earlier recipes, showing you how
    a specific techique can be applied in a new context.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望确保所呈现的内容是作为 TypeScript 开发人员在日常工作中会遇到的问题，这些问题源自真实世界的情况，并提供了整体性的解决方案。我将教会你在多种场景下可以使用的技术和方法论，而不仅仅是单一的配方。在整本书中，你会发现对先前配方的引用，展示了特定技术如何在新的上下文中应用。
- en: The examples are either ripped directly from the source code of real projects
    or stripped down to essentials to illustrate a concept without requiring too much
    domain knowledge. While some examples are very specific, you will also see a lot
    of `Person` objects that have the name “Stefan” (and you will be able to see me
    age throughout the book).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例要么直接摘自真实项目源代码，要么被简化到只展示概念本质而不需要太多领域知识。尽管有些示例非常具体，你也会看到很多 `Person` 对象，这些对象的名称是“Stefan”（你将能够看到我在整本书中的年龄变化）。
- en: The book will focus almost exclusively on the features TypeScript adds on top
    of JavaScript; thus, to understand the example fully, you need to understand a
    reasonable amount of JavaScript. I don’t expect you to be a JavaScript guru but
    being able to read basic JavaScript code is a must. Since JavaScript and TypeScript
    have this strong relationship, some chapters in the book discuss JavaScript features
    and their behavior, but always through the lens of TypeScript.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书几乎专注于 TypeScript 在 JavaScript 基础上增加的特性；因此，要完全理解示例，你需要掌握相当数量的 JavaScript。我不指望你成为
    JavaScript 大师，但至少要能阅读基本的 JavaScript 代码。由于 JavaScript 和 TypeScript 之间存在密切关系，本书的一些章节讨论
    JavaScript 的特性及其行为，但始终从 TypeScript 的视角出发。
- en: 'A cookbook is designed to give you a quick solution to a problem: a recipe.
    In this book, every recipe ends with a *discussion*, giving you broader context
    and meaning for the solution. Depending on the style of the author, the focus
    of O’Reilly’s cookbooks lies either on the solution or on the discussion. *TypeScript
    Cookbook* is unmistakably a *discussion* book. In my almost 20-year career as
    a person who writes software, I’ve never encountered situations in which one solution
    fits all problems. That’s why I want to show you in detail how we came to our
    conclusions, their meaning, and the trade-offs. Ultimately, this book should be
    a guide for discussions like that. Why make an educated guess when you have proper
    arguments for your decisions?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Cookbook 的设计旨在为您的问题提供快速解决方案：一种配方。在本书中，每个配方都以 *discussion* 结尾，为您提供更广泛的上下文和解决方案的含义。根据作者的风格，O'Reilly
    的 Cookbook 聚焦于解决方案或讨论。*TypeScript Cookbook* 显然是一本 *discussion* 书籍。在我近 20 年的软件编写生涯中，我从未遇到一种解决方案适用于所有问题的情况。这就是为什么我想详细展示我们是如何得出结论、它们的含义以及权衡的原因。最终，这本书应该是像这样的讨论指南。当你需要作出明智的决策时，为什么要凭空猜测呢？
- en: Organization of This Book
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的组织方式
- en: '*TypeScript Cookbook* takes you through the language from start to finish.
    We start with project setup, talk about basic types and the inner workings of
    the type system, and ultimately go into advanced territory like conditional types
    and helper types. We continue with chapters that explore very specific features,
    like the duality of classes and support for React, and end with learnings on how
    to best approach type development.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*TypeScript Cookbook* 从头到尾带你了解这门语言。我们从项目设置开始，讨论基本类型和类型系统的内部工作原理，最终进入条件类型和辅助类型等高级领域。我们继续探讨探索非常特定功能的章节，例如类的二元性和对
    React 的支持，并最终学习如何最好地处理类型开发。'
- en: While there is a thread and buildup, each chapter and each recipe can be consumed
    on its own. Each lesson has been designed to point out the connection to previous
    (or next!) recipes in the book, but each chapter is ultimately self-contained.
    Feel free to consume it from start to finish, or use the “choose your own adventure”
    approach with its many references. Here is a brief overview of the content.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有一个主线和逐步发展，但每一章和每个配方都可以单独消化。每一课都设计为指出与书中前后（或下一！）配方的关联，但每一章最终都是独立的。可以从头到尾阅读，也可以根据“选择你自己的冒险”方法及其众多参考进行使用。以下是内容的简要概述。
- en: TypeScript wants to work with all flavors of JavaScript, and there are a lot
    of different flavors. In [Chapter 1, “Project Setup”](ch01.html#ch01) you will
    learn about configuration possibilities for different language runtimes, module
    systems, and target platforms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 希望能够与所有类型的 JavaScript 兼容，而这些类型多种多样。在 [第 1 章，“项目设置”](ch01.html#ch01)
    中，你将学习不同语言运行时、模块系统和目标平台的配置选项。
- en: '[Chapter 2, “Basic Types”](ch02.html#ch02) guides you through the type hierarchy,
    tells you the difference between `any` and `unknown`, teaches you which code contributes
    to which namespace, and answers the age-old question of whether to choose a type
    alias or an interface to describe your object types.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 2 章，“基本类型”](ch02.html#ch02) 将引导你了解类型层次结构，告诉你 `any` 和 `unknown` 的区别，教你哪些代码属于哪个命名空间，并回答关于选择类型别名还是接口描述对象类型的古老问题。'
- en: One of the longer chapters in the book is [Chapter 3, “The Type System”](ch03.html#ch03).
    Here you will learn everything about union and intersection types, how to define
    discriminated union types, how to use the *assert never* and *optional never*
    techniques, and how to narrow and widen types based on your use case. After this
    chapter, you will understand why TypeScript has type assertions and no type casts,
    why enums are generally frowned upon, and how you find the nominal bits in a structural
    type system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中较长的一章是 [第 3 章，“类型系统”](ch03.html#ch03)。在这里，你将学习关于联合类型和交集类型的一切，如何定义辨识联合类型，如何使用
    *assert never* 和 *optional never* 技术，以及根据用例如何缩小和扩大类型。在这章之后，你将理解为什么 TypeScript
    使用类型断言而不是类型转换，为什么枚举通常不被看好，以及如何在结构类型系统中找到名义位。
- en: TypeScript has a generic type system, which we will see in detail in [Chapter 4,
    “Generics”](ch04.html#ch04). Generics not only make your code more reusable but
    are also the entrance to the more advanced features of TypeScript. This chapter
    marks the point where you ascend from TypeScript basics to the more sophisticated
    areas of the type system, a fitting end to the first part.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript拥有一个通用类型系统，我们将在[第4章，“泛型”](ch04.html#ch04)中详细介绍它。泛型不仅使你的代码更具重用性，还是进入TypeScript更高级特性的入口。这一章标志着你从TypeScript基础进入到类型系统更复杂领域的时刻，是第一部分的合适结尾。
- en: '[Chapter 5, “Conditional Types”](ch05.html#ch05) explains why the TypeScript
    type system is also its own metaprogramming language. With the possibility of
    choosing types based on certain conditions, people invented the most outstanding
    things, like a full-fledged SQL parser or a dictionary in the type system. We
    use conditional types as a tool to make a static type system more flexible for
    dynamic situations.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章，“条件类型”](ch05.html#ch05)解释了为什么TypeScript类型系统也是其自身的元编程语言。通过基于特定条件选择类型的可能性，人们发明了一些杰出的东西，比如一个完整的SQL解析器或者类型系统中的字典。我们使用条件类型作为工具，使静态类型系统在动态情况下更加灵活。'
- en: 'In [Chapter 6, “String Template Literal Types”](ch06.html#ch06) you see how
    TypeScript integrates a string parser in the type system. Extracting names from
    format strings, defining a dynamic event system based on string input, and creating
    identifiers dynamically: nothing seems impossible!'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章，“字符串模板字面类型”](ch06.html#ch06)中，你将看到TypeScript如何在类型系统中集成字符串解析器。从格式字符串中提取名称，基于字符串输入定义动态事件系统，并动态创建标识符：似乎没有什么是不可能的！
- en: You get a little taste of *functional programming* in [Chapter 7, “Variadic
    Tuple Types”](ch07.html#ch07). The *tuple* has a special meaning in TypeScript
    and helps describe function parameters and object-like arrays, and it creates
    flexible helper functions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在[第7章，“可变元组类型”](ch07.html#ch07)中略尝*函数式编程*的味道。在TypeScript中，*元组*具有特殊含义，帮助描述函数参数和类似数组的对象，并创建灵活的辅助函数。
- en: Even more metaprogramming happens in [Chapter 8, “Helper Types”](ch08.html#ch08).
    TypeScript has a few built-in helper types that make it easier for you to derive
    types from other types. In this chapter, you learn not only how to use them but
    also how to create your own. This chapter also marks the next breakpoint in *TypeScript
    Cookbook* because at this point you have learned all the basic ingredients of
    the language and type system, which you then can apply in the next part.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更多元编程发生在[第8章，“辅助类型”](ch08.html#ch08)中。TypeScript有几个内置辅助类型，使你更容易从其他类型推导出类型。在这一章中，你不仅学习如何使用它们，还学习如何创建自己的辅助类型。这一章也标志着*TypeScript
    Cookbook*的下一个断点，因为此时你已经学会了语言和类型系统的所有基本要素，可以在接下来的部分中应用它们。
- en: After spending eight chapters understanding all the nitty-gritty of the type
    system, it’s time to integrate your knowledge with type definitions done by others
    in [Chapter 9, “The Standard Library and External Type Definitions”](ch09.html#ch09).
    In this chapter you will see situations that work differently than expected, and
    see how you can bend the built-in type definitions to your will.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了类型系统所有细枝末节的八章之后，现在是时候在[第9章，“标准库和外部类型定义”](ch09.html#ch09)中将你的知识与他人完成的类型定义集成起来了。在本章中，你将看到一些与预期不同的工作情况，并了解如何弯曲内置类型定义以符合你的意愿。
- en: In [Chapter 10, “TypeScript and React”](ch10.html#ch10) you will learn how one
    of the most popular JavaScript frameworks is integrated in TypeScript, features
    that make the syntax extension *JSX* possible, and how this fits into the overall
    concept of TypeScript. You will also learn how to write robust types for components
    and hooks, and how to deal with a type definition file that has been attached
    to the actual library after the fact.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章，“TypeScript与React”](ch10.html#ch10)中，你将学习如何将最流行的JavaScript框架之一集成到TypeScript中，使语法扩展*JSX*成为可能，并了解这如何融入TypeScript的整体概念。你还将学习如何为组件和钩子编写健壮的类型，并处理附加到实际库后的类型定义文件。
- en: The next chapter is about classes, a staple of object-oriented programming that
    was available in TypeScript long before their counterpart existed in JavaScript.
    This leads to an interesting duality of features discussed in detail in [Chapter 11,
    “Classes”](ch11.html#ch11).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章讨论的是类，这是面向对象编程的一个支柱，在JavaScript之前的TypeScript中就已经存在。这导致了一个特性的有趣二元性，详细讨论在[第11章，“类”](ch11.html#ch11)中。
- en: The book ends with [Chapter 12, “Type Development Strategies”](ch12.html#ch12).
    Here I focus on giving you the skills to create advanced types on your own, to
    make the right decisions on how to move your project along, and to deal with libraries
    that validate types for you. You also will learn about special workarounds and
    hidden features, and discuss how to name generics or if advanced types are a bit
    too much. This chapter is particularly fun because after a long journey from novice
    to apprentice, you will reach expert status.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 书末以 [第12章，“类型开发策略”](ch12.html#ch12) 结束。在这里，我专注于赋予你自主创建高级类型的技能，帮助你做出项目推进的正确决策，并处理那些为你验证类型的库。你还将了解特殊的解决方法和隐藏功能，并讨论如何命名泛型，或者高级类型是否有些超出预期。这一章特别有趣，因为在从新手到学徒的漫长旅程后，你将达到专家的地步。
- en: All examples are available as a TypeScript playground or CodeSandbox project
    at the [book’s website](https://typescript-cookbook.com). The playgrounds in particular
    offer an intermediate state, so you can fiddle around on your own and play with
    the behaviors. I always say that you can’t learn a programming language just by
    reading about it; you need to actively code and get your hands dirty to understand
    how everything plays together. See this as an invitation to have fun with programming
    types.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例都可以在 TypeScript Playground 或 CodeSandbox 项目中找到，访问 [书籍网站](https://typescript-cookbook.com)。Playground
    特别提供了一个中间状态，让你可以自己摸索和测试行为。我总是说，你不能仅靠阅读来学会编程语言；你需要积极编码，动手实践，才能理解所有元素是如何相互作用的。把这看作是一个邀请，去享受编程类型的乐趣。
- en: Conventions Used in This Book
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书使用的约定
- en: Programming Conventions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程约定
- en: TypeScript allows for many programming styles and formatting options. To avoid
    *bike-shedding*, I chose to autoformat all examples using [Prettier](https://prettier.io).
    If you are used to a different formatting style—maybe you prefer commas instead
    of semicolons after each property declaration of your types—you are more than
    welcome to continue with your preference.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 支持多种编程风格和格式选项。为了避免*琐碎讨论*，我选择使用 [Prettier](https://prettier.io) 自动格式化所有示例。如果你习惯于不同的格式风格——也许你更喜欢在类型的每个属性声明后使用逗号而不是分号——你完全可以继续使用你喜欢的方式。
- en: '*TypeScript Cookbook* has a lot of examples and deals with a lot of functions.
    There are many ways to write functions, and I’ve chosen to write mostly *function
    declarations* instead of *function expressions*, except where it was crucial to
    explain the differences between both notations. On all other occasions, it’s mostly
    a matter of taste rather than for technical reasons.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*TypeScript Cookbook* 涵盖了大量示例，并涉及许多函数。编写函数有很多方法，我选择主要使用*函数声明*而不是*函数表达式*，除非在需要解释两者差异时关键。在其他所有情况下，这主要是一种口味选择，而不是技术原因。'
- en: All examples have been checked against TypeScript 5.0, the most recent release
    at the time of this book’s writing. TypeScript changes constantly and so do the
    rules. This book ensures that we mostly focus on things that are long-lasting
    and can be trusted across versions. Where I expect further development or fundamental
    change, I provide respective warnings and notes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例均已根据 TypeScript 5.0 进行了检查，这是书写本书时的最新版本。TypeScript 不断变化，规则也在变化。本书确保我们主要关注那些长期可靠的内容，并可以跨版本信赖。在我预期会有进一步发展或根本性变化的地方，我会提供相应的警告和说明。
- en: Typesetting Conventions
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排版约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表示新术语、网址、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`等宽字体`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序列表，以及在段落内引用程序元素，如变量或函数名、数据库、数据类型、环境变量、语句和关键字。
- en: '*`Constant width italic`*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*`等宽斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供值或由上下文确定值替换的文本。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般说明。
- en: Warning
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://typescript-cookbook.com*](https://typescript-cookbook.com).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 补充材料（代码示例、练习等）可在[*https://typescript-cookbook.com*](https://typescript-cookbook.com)下载。
- en: If you have a technical question or a problem using the code examples, please
    send email to [*support@oreilly.com*](mailto:support@oreilly.com).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有技术问题或在使用代码示例时遇到问题，请发送电子邮件至[*support@oreilly.com*](mailto:support@oreilly.com)。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。一般情况下，如果本书提供示例代码，您可以在程序和文档中使用它。除非您复制了代码的大部分内容，否则无需征得我们的许可。例如，编写一个使用本书多个代码块的程序不需要许可。销售或分发来自O’Reilly书籍的示例代码需要许可。引用本书并引用示例代码回答问题无需许可。将本书中大量示例代码整合到产品文档中需要许可。
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*TypeScript Cookbook* by
    Stefan Baumgartner (O’Reilly). Copyright 2023 Stefan Baumgartner, 978-1-098-13665-9.”'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢但不要求署名。署名通常包括标题、作者、出版商和ISBN。例如：“*TypeScript Cookbook* by Stefan Baumgartner
    (O’Reilly). Copyright 2023 Stefan Baumgartner, 978-1-098-13665-9.”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为您对代码示例的使用超出了合理使用范围或上述许可，请随时与我们联系：[*permissions@oreilly.com*](mailto:permissions@oreilly.com)。
- en: O’Reilly Online Learning
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly在线学习
- en: Note
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more than 40 years, [*O’Reilly Media*](https://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 40多年来，[*O’Reilly Media*](https://oreilly.com)提供技术和商业培训、知识和见解，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*https://oreilly.com*](https://oreilly.com).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章和我们的在线学习平台分享他们的知识和专业知识。O’Reilly的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境，以及来自O’Reilly和200多家其他出版商的大量文本和视频。欲了解更多信息，请访问[*https://oreilly.com*](https://oreilly.com)。
- en: How to Contact Us
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送给出版商：
- en: O’Reilly Media, Inc.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加利福尼亚州，塞巴斯托波尔，95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: '[*support@oreilly.com*](mailto:support@oreilly.com)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*support@oreilly.com*](mailto:support@oreilly.com)'
- en: '[*https://www.oreilly.com/about/contact.html*](https://www.oreilly.com/about/contact.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://www.oreilly.com/about/contact.html*](https://www.oreilly.com/about/contact.html)'
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/typescript-cookbook*](https://oreil.ly/typescript-cookbook).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这本书制作了一个网页，列出勘误、示例和任何其他信息。您可以访问[*https://oreil.ly/typescript-cookbook*](https://oreil.ly/typescript-cookbook)。
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解关于我们书籍和课程的最新消息，请访问[*https://oreilly.com*](https://oreilly.com)。
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在LinkedIn上找到我们：[*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)。
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)。
- en: 'Watch us on YouTube: [*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YouTube 观看我们：[*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: Alexander Rosemann, Sebastian Gierlinger, Dominik Angerer, and Georg Kothmeier
    are the first people I go to if I have something new cooking. Our regular meetings
    and interactions not only are entertaining but also provide me with the necessary
    feedback to evaluate all my choices. They are the first people that heard about
    the book, and also the first ones that gave feedback.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Alexander Rosemann、Sebastian Gierlinger、Dominik Angerer 和 Georg Kothmeier 是我在有新计划时首先寻求意见的人。我们定期的会议和互动不仅令人愉快，而且为我提供了评估所有选择所需的必要反馈。他们是第一个听到这本书的人，也是第一个给予反馈的人。
- en: Interacting with Matt Pocock, Joe Previte, Dan Vanderkam, Nathan Shively-Sanders,
    and Josh Goldberg on social media brought plenty of new ideas to the table. Their
    approach to TypeScript might differ from mine, but they ultimately broadened my
    horizon and made sure that I didn’t end up too opinionated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在社交媒体上与 Matt Pocock、Joe Previte、Dan Vanderkam、Nathan Shively-Sanders 和 Josh
    Goldberg 的互动带来了许多新的想法。他们对 TypeScript 的方法可能与我的不同，但最终他们扩展了我的视野，并确保我不会过于固执己见。
- en: Phil Nash, Simona Cotin, and Vanessa Böhner have not only been early reviewers
    of the final manuscript but also long-time companions and friends who are always
    here to sanity-check my ideas. Addy Osmani has been an inspiration throughout
    my entire career, and I’m very proud that he agreed to open my new book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Phil Nash、Simona Cotin 和 Vanessa Böhner 不仅是最终手稿的早期审阅者，还是长期以来一直在这里审视我的想法的伙伴和朋友。Addy
    Osmani 在我整个职业生涯中一直是我的灵感来源，我为他同意为我的新书撰写开篇感到非常自豪。
- en: Lena Matscheko, Alexandra Rapeanu, and Mike Kuss did not hesitate to bombard
    me with technical challenges and questions based on their real-world experiences.
    Where I lacked a good example, they flooded me with excellent source material
    to distill.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Lena Matscheko、Alexandra Rapeanu 和 Mike Kuss 毫不犹豫地向我提出基于他们真实经验的技术挑战和问题。在我缺少良好示例的时候，他们给我提供了大量优秀的源材料来提炼。
- en: I would lose track of all of TypeScript’s developments if it wasn’t for Peter
    Kröner, who constantly knocks on my door when there’s a new TypeScript version
    coming out. Our podcast episodes together on TypeScript releases are legendary,
    and also increasingly not about TypeScript.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是 Peter Kröner，我可能会错过 TypeScript 的所有新发展。每当有新的 TypeScript 版本发布时，他总是第一个找到我。我们在
    TypeScript 发布上的一起播客已经成为传奇，尽管内容也越来越不只是关于 TypeScript。
- en: My tech editors Mark Halpin, Fabian Friedl, and Bernhard Mayr provided the best
    technical feedback I could wish for. They challenged every assumption, checked
    on every code sample, and made sure all my reasoning made sense and that I didn’t
    skip a beat. Their love of detail and their ability to discuss on such a high
    level ensured that this book is not just another collection of hot takes but a
    guide and reference that stands on a solid foundation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我的技术编辑 Mark Halpin、Fabian Friedl 和 Bernhard Mayr 给予了我最好的技术反馈。他们质疑每一个假设，检查每一个代码示例，确保我的所有推理都是有意义的，而且没有遗漏。他们对细节的热爱和他们在高水平上讨论的能力，确保了这本书不仅仅是一堆热门观点的集合，而是一个建立在坚实基础上的指南和参考书。
- en: 'This book would not exist if not for Amanda Quinn. After writing *TypeScript
    in 50 Lessons* in 2020, I thought I’d said everything I needed to say about TypeScript.
    It was Amanda who pursued me to give the idea of a cookbook a go, to see which
    ideas I would find that wouldn’t make the cut for my first book. After three hours
    I had a complete proposal and table of contents with more than one hundred entries.
    Amanda was right: I had so much more to say, and I’m eternally grateful for her
    support and her guidance.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 Amanda Quinn，这本书根本不会存在。在 2020 年编写了《TypeScript in 50 Lessons》之后，我以为我已经说尽了我对
    TypeScript 的所有看法。是 Amanda 劝我试试写一本食谱书，看看我会发现哪些想法在第一本书中无法体现。三个小时后，我有了完整的提案和超过一百个条目的目录。Amanda
    是对的：我还有很多话要说，我永远感激她的支持和指导。
- en: Where Amanda helped in the early phases, Shira Evans made sure that the project
    made good progress and didn’t derail. Her feedback was invaluable, and her pragmatic
    and hands-on approach made it a joy to work together.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Amanda 在项目早期阶段提供了帮助，Shira Evans 确保项目顺利进行，避免了任何偏离轨道的情况。她的反馈是无价的，她务实而且亲自动手的方法让合作变得非常愉快。
- en: Elizabeth Faerm and Theresa Jones took care of the production. Their eye for
    detail is outstanding, and they made sure that the production phase is exciting
    and actually a lot of fun! The final result is a beautiful experience I can’t
    get enough of.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Elizabeth Faerm和Theresa Jones负责制作。他们对细节的把握非常出色，确保制作阶段既令人兴奋，又实际上非常有趣！最终的结果是一次美好的体验，让我欲罢不能。
- en: During writing I had great assistance from Porcupine Tree, Beck, Nobuo Uematsu,
    Camel, The Beta Band, and many others.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作过程中，我得到了Porcupine Tree、Beck、植松伸夫、Camel、The Beta Band以及许多其他人的巨大帮助。
- en: The biggest contribution to this book comes from my family. Doris, Clemens,
    and Aaron are everything I’ve ever wished for, and without their endless love
    and support, I wouldn’t be able to pursue my ambitions. Thank you for everything.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书最大的贡献来自于我的家人。Doris、Clemens和Aaron是我梦寐以求的一切，没有他们无尽的爱和支持，我将无法追求我的抱负。谢谢你们的一切。
