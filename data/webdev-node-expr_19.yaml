- en: Chapter 19\. Integrating with Third-Party APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章.与第三方API集成
- en: 'Increasingly, successful websites are not completely standalone. To engage
    existing users and find new users, integration with social networking is a must.
    To provide store locators or other location-aware services, using geolocation
    and mapping services is essential. It doesn’t stop there: more and more organizations
    are realizing that providing an API helps expand their service and makes it more
    useful.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越成功的网站不再是完全独立的。与社交网络的集成对于吸引现有用户并找到新用户至关重要。为了提供门店定位器或其他位置感知服务，使用地理定位和地图服务至关重要。事情并不止于此：越来越多的组织意识到提供API有助于扩展其服务并使其更有用。
- en: 'In this chapter, we’ll be discussing the two most common integration needs:
    social media and geolocation.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论两种最常见的集成需求：社交媒体和地理定位。
- en: Social Media
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社交媒体
- en: 'Social media is a great way to promote your product or service: if that’s your
    goal, the ability for your users to easily share your content on social media
    sites is essential. As I write this, the dominant social networking services are
    Facebook, Twitter, Instagram, and YouTube. Sites like Pinterest and Flickr have
    their place, but they are usually a little more audience specific (for example,
    if your website is about DIY crafting, you would absolutely want to support Pinterest).
    Laugh if you will, but I predict that MySpace will make a comeback. Its site redesign
    is inspired, and it’s worth noting that MySpace is built on Node.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体是促销产品或服务的绝佳方式：如果这是您的目标，那么使用户能够轻松在社交媒体网站上分享您的内容至关重要。我写这篇文章时，主要的社交网络服务包括Facebook、Twitter、Instagram和YouTube。像Pinterest和Flickr这样的网站也有它们的用途，但它们通常更加针对特定受众（例如，如果您的网站是关于DIY手工艺品的，您绝对需要支持Pinterest）。笑吧，但我预测MySpace将会复兴。它的网站重新设计很有启发性，值得注意的是，MySpace是建立在Node上的。
- en: Social Media Plugins and Site Performance
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社交媒体插件与网站性能
- en: 'Most social media integration is a frontend affair. You reference the appropriate
    JavaScript files in your page, and it enables both incoming content (the top three
    stories from your Facebook page, for example) and outgoing content (the ability
    to tweet about the page you’re on, for example). While this often represents the
    easiest path to social media integration, it comes at a cost: I’ve seen page load
    times double or even triple thanks to the additional HTTP requests. If page performance
    is important to you (and it should be, especially for mobile users), you should
    carefully consider how you integrate social media.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数社交媒体集成是前端的事务。您在页面中引用适当的JavaScript文件，它会使得入站内容（例如来自您的Facebook页面的前三篇文章）和出站内容（例如在您所在页面上发布推文的能力）都变得可能。虽然这通常代表了社交媒体集成的最简单路径，但也伴随着成本：由于额外的HTTP请求，页面加载时间可能会增加一倍甚至三倍。如果页面性能对您很重要（尤其是对移动用户而言），您应该仔细考虑如何集成社交媒体。
- en: That said, the code that enables a Facebook Like button or a Tweet button leverages
    in-browser cookies to post on the user’s behalf. Moving this functionality to
    the backend would be difficult (and, in some instances, impossible). So if that
    is functionality you need, linking in the appropriate third-party library is your
    best option, even though it can affect your page performance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，启用Facebook点赞按钮或推特按钮的代码利用了浏览器中的cookie来代表用户发布内容，将这些功能移至后端将会很困难（有时甚至是不可能的）。因此，如果这是您需要的功能，链接适当的第三方库是最佳选择，尽管它可能会影响页面性能。
- en: Searching for Tweets
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索推文
- en: 'Let’s say that we want to mention the top 10 most recent tweets that contain
    the hashtags #Oregon #travel. We could use a frontend component to do this, but
    it will involve additional HTTP requests. Furthermore, if we do it on the backend,
    we have the option of caching the tweets for performance. Also, if we do the searching
    on the backend, we can “blacklist” uncharitable tweets, which would be more difficult
    on the frontend.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '假设我们想要提及包含标签#Oregon #travel的最近十条推文。我们可以使用前端组件来实现这一点，但这将涉及额外的HTTP请求。此外，如果我们在后端进行操作，我们可以选择缓存推文以提升性能。此外，如果我们在后端进行搜索，我们可以对“恶意推文”进行黑名单处理，这在前端会更为困难。'
- en: 'Twitter, like Facebook, allows you to create *apps*. It’s something of a misnomer:
    a Twitter app doesn’t *do* anything (in the traditional sense). It’s more like
    a set of credentials that you can use to create the actual app on your site. The
    easiest and most portable way to access the Twitter API is to create an app and
    use it to get access tokens.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter，类似于 Facebook，允许您创建*apps*。这有点误导：Twitter 应用程序并不*做*任何事情（传统意义上）。它更像是一组您可以在站点上使用来创建实际应用程序的凭据。访问
    Twitter API 的最简单和最可移植的方式是创建一个应用程序并使用它来获取访问令牌。
- en: 'Create a Twitter app by going to [*http://dev.twitter.com*](http://dev.twitter.com).
    Make sure you’re logged on, and click your username in the navigation bar, and
    then Apps. Click “Create an app,” and follow the instructions. Once you have an
    application, you’ll see that you now have a *consumer API key* and an *API secret
    key*. The API secret key, as the name indicates, should be kept secret: do not
    ever include this in responses sent to the client. If a third party were to get
    access to this secret, they could make requests on behalf of your application,
    which could have unfortunate consequences for you if the use is malicious.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问[*http://dev.twitter.com*](http://dev.twitter.com)来创建 Twitter 应用程序。确保已登录，然后点击导航栏中的用户名，然后选择“Apps”。点击“创建应用程序”，按照说明进行操作。创建应用程序后，您将看到现在有一个*consumer
    API key*和一个*API secret key*。API secret key应保持秘密：绝不要将其包含在发送给客户端的响应中。如果第三方获取了此秘密，他们可以代表您的应用程序进行请求，如果使用是恶意的，对您可能会产生不利后果。
- en: Now that we have a consumer API key and secret key, we can communicate with
    the Twitter REST API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个 consumer API key 和 secret key，我们可以与 Twitter REST API 进行通信。
- en: 'To keep our code tidy, we’ll put our Twitter code in a module called *lib/twitter.js*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持代码整洁，我们将我们的 Twitter 代码放在一个名为*lib/twitter.js*的模块中：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This pattern should be starting to become familiar to you. Our module exports
    a function into which the caller passes a configuration object. What’s returned
    is an object containing methods. In this way, we can add functionality to our
    module. Currently, we’re only providing a `search` method. Here’s how we will
    be using the library:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式应该开始变得熟悉了。我们的模块将一个配置对象传递给调用者导出一个函数。返回的是一个包含方法的对象。通过这种方式，我们可以为我们的模块添加功能。目前，我们只提供了一个`search`方法。以下是我们将如何使用这个库的方法：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (Don’t forget to put a `twitter` property with `consumerApiKey` and `apiSecretKey`
    in your *.credentials.development.json* file.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: （在*.credentials.development.json*文件中不要忘记添加`twitter`属性，包括`consumerApiKey`和`apiSecretKey`。）
- en: 'Before we implement the `search` method, we must provide some functionality
    to authenticate ourselves to Twitter. The process is simple: we use HTTPS to request
    an access token based on our consumer key and consumer secret. We only have to
    do this once: currently, Twitter does not expire access tokens (though you can
    invalidate them manually). Since we don’t want to request an access token every
    time, we’ll cache the access token so we can reuse it.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现`search`方法之前，我们必须提供一些功能来对我们自己进行 Twitter 认证。这个过程很简单：我们使用 HTTPS 请求基于我们的 consumer
    key 和 consumer secret 的访问令牌。我们只需做一次：目前，Twitter 不会过期访问令牌（尽管您可以手动使其失效）。因为我们不想每次都请求访问令牌，所以我们将缓存访问令牌以便重复使用。
- en: 'The way we’ve constructed our module allows us to create private functionality
    that’s not available to the caller. Specifically, the only thing that’s available
    to the caller is `module.exports`. Since we’re returning a function, only that
    function is available to the caller. Calling that function results in an object,
    and only the properties of that object are available to the caller. So we’re going
    to create a variable `accessToken`, which we’ll use to cache our access token,
    and a `getAccessToken` function that will get the access token. The first time
    it’s called, it will make a Twitter API request to get the access token. Subsequent
    calls will simply return the value of `accessToken`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建模块的方式允许我们创建对调用者不可见的私有功能。具体来说，对调用者可见的仅有`module.exports`。因为我们返回的是一个函数，所以只有该函数对调用者可见。调用该函数将返回一个对象，而只有该对象的属性对调用者可见。因此，我们将创建一个名为`accessToken`的变量，用于缓存访问令牌，以及一个名为`getAccessToken`的函数，用于获取访问令牌。首次调用时，它将发出
    Twitter API 请求以获取访问令牌。后续调用将简单地返回`accessToken`的值：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We mark `getAccessToken` as async because we may have to make an HTTP request
    to the Twitter API (if there isn’t a cached token). Now that we’ve established
    the basic structure, let’s implement `getAccessToken`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`getAccessToken`标记为异步，因为我们可能需要向Twitter API发出HTTP请求（如果没有缓存的令牌）。既然我们已经建立了基本结构，让我们实现`getAccessToken`：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The details of constructing this call are available on [Twitter’s developer
    documentation page for application-only authentication](http://bit.ly/2KcJ4EA).
    Basically, we have to construct a bearer token that’s a base64-encoded combination
    of the consumer key and consumer secret. Once we’ve constructed that token, we
    can call the `/oauth2/token` API with the `Authorization` header containing the
    bearer token to request an access token. Note that we must use HTTPS: if you attempt
    to make this call over HTTP, you are transmitting your secret key unencrypted,
    and the API will simply hang up on you.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建此调用的详细信息可在[Twitter的应用程序仅身份验证开发文档页面](http://bit.ly/2KcJ4EA)中找到。基本上，我们必须构造一个基于base64编码的消费者密钥和消费者密钥的令牌。构造了该令牌后，我们可以使用包含该令牌的`Authorization`头部调用`/oauth2/token`
    API请求访问令牌。请注意，我们必须使用HTTPS：如果尝试通过HTTP进行此调用，则会未加密地传输您的密钥，API将简单地挂断您的连接。
- en: Once we receive the full response from the API (we listen for the `end` event
    of the response stream), we can parse the JSON, make sure the token type is `bearer`,
    and be on our merry way. We cache the access token, and then invoke the callback.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们从API接收到完整的响应（我们监听响应流的`end`事件），我们可以解析JSON，确保令牌类型为`bearer`，然后继续我们的工作。我们缓存访问令牌，然后调用回调函数。
- en: 'Now that we have a mechanism for obtaining an access token, we can make API
    calls. So let’s implement our `search` method:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了获取访问令牌的机制，我们可以进行API调用了。让我们实现我们的`search`方法：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Rendering Tweets
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染推文
- en: Now we have the ability to search tweets…so how do we display them on our site?
    Largely, it’s up to you, but there are some things to consider. Twitter has an
    interest in making sure its data is used in a manner consistent with the brand.
    To that end, it does have [display requirements](http://bit.ly/32ET4N2), which
    employ functional elements you must include to display a tweet.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了搜索推文的能力……那么我们如何在网站上显示它们？在很大程度上取决于您，但是有一些需要考虑的事项。Twitter希望确保其数据的使用符合品牌的一致性。为此，它确实有[显示要求](http://bit.ly/32ET4N2)，其中包含您必须包含的功能元素来显示推文。
- en: There is some wiggle room in the requirements (for example, if you’re displaying
    on a device that doesn’t support images, you don’t have to include the avatar
    image), but for the most part, you’ll end up with something that looks very much
    like an embedded tweet. It’s a lot of work, and there is a way around it…but it
    involves linking to Twitter’s widget library, which is the very HTTP request we’re
    trying to avoid.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在需求方面有一些灵活性（例如，如果您在不支持图像的设备上显示，则无需包含头像图像），但大部分时间，您将最终得到非常类似于嵌入式推文的东西。这是一项很大的工作，但是有一种方法可以绕过它……但这涉及到链接到Twitter的小部件库，这正是我们试图避免的HTTP请求。
- en: If you need to display tweets, your best bet is to use the Twitter widget library,
    even though it incurs an extra HTTP request. For more complicated use of the API,
    you’ll still have to access the REST API from the backend, so you will probably
    end up using the REST API in concert with frontend scripts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要显示推文，最好使用Twitter小部件库，即使这会产生额外的HTTP请求。对于更复杂的API使用，您仍然需要从后端访问REST API，因此您可能最终会与前端脚本一起使用REST
    API。
- en: 'Let’s continue with our example: we want to display the top 10 tweets that
    mention the hashtags #Oregon #travel. We’ll use the REST API to search for the
    tweets and the Twitter widget library to display them. Since we don’t want to
    run up against usage limits (or slow down our server), we’ll cache the tweets
    and the HTML to display them for 15 minutes.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们继续我们的示例：我们希望显示提到标签#Oregon #travel的前10条推文。我们将使用REST API搜索推文，并使用Twitter小部件库显示它们。由于我们不希望超出使用限制（或减慢服务器速度），我们将缓存这些推文和用于显示它们的HTML
    15分钟。'
- en: 'We’ll start by modifying our Twitter library to include a method `embed`, which
    gets the HTML to display a tweet. Note we’re using an npm library `querystringify`
    to construct a querystring from an object, so don’t forget to `npm install querystringify`
    and import it (`const qs = require( ‘querystringify ’)`), and then add the following
    function to the export of *lib/twitter.js*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先修改我们的 Twitter 库，以包含一个 `embed` 方法，该方法获取用于显示推文的 HTML。请注意，我们正在使用 npm 库 `querystringify`
    来从对象构建查询字符串，因此不要忘记 `npm install querystringify` 并导入它（`const qs = require( ‘querystringify
    ’)`），然后将以下函数添加到 *lib/twitter.js* 的导出中：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we’re ready to search for, and cache, tweets. In our main application file,
    create the following function `getTopTweets`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备搜索并缓存推文了。在我们的主应用程序文件中，创建以下函数 `getTopTweets`：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The essence of the `getTopTweets` function is to not just search for tweets
    with a specified hashtag, but to cache those tweets for some reasonable period
    of time. Note that we created an immediately invoked function expression, or IIFE:
    that’s because we want the `topTweets` cache safely inside a closure so it can’t
    be messed with. The asynchronous function that’s returned from the IIFE refreshes
    the cache if necessary, and then returns the contents of the cache.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTopTweets` 函数的核心不仅仅是搜索具有指定标签的推文，而是为一段合理时间内的这些推文进行缓存。请注意，我们创建了一个立即调用的函数表达式（IIFE）：这是因为我们希望
    `topTweets` 缓存在闭包内部，以防止被篡改。从 IIFE 返回的异步函数在必要时刷新缓存，然后返回缓存内容。'
- en: 'Lastly, let’s create a view, `views/social.handlebars` as a home for our social
    media presence (which right now, includes only our selected tweets):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个视图，`views/social.handlebars`，作为我们社交媒体存在的主页（目前仅包括我们选择的推文）：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And a route to handle it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个处理它的路由：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that we reference an external script, Twitter’s `widgets.js`. This is
    the script that will format and give functionality to the embedded tweets on your
    page. By default, the `oembed` API will include a reference to this script in
    the HTML, but since we’re displaying 10 tweets, that would reference that script
    nine more times than necessary! So recall that, when we called the `oembed` API,
    we passed in the option `{ omit_script: 1 }`. Since we did that, we have to provide
    it somewhere, which we did in the view. Go ahead and try removing the script from
    the view. You’ll still see the tweets, but they won’t have any formatting or functionality.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，我们引用了外部脚本，Twitter 的 `widgets.js`。这个脚本将为页面上嵌入的推文格式化并提供功能。默认情况下，`oembed`
    API 将在 HTML 中包含对此脚本的引用，但由于我们要显示 10 条推文，这会比必要的引用该脚本多九次！因此，请回想一下，当我们调用 `oembed`
    API 时，我们传入了选项 `{ omit_script: 1 }`。由于我们这样做了，我们在视图中提供了它。尝试从视图中删除脚本。您仍然会看到推文，但它们将没有任何格式或功能。'
- en: 'Now we have a nice social media feed! Let’s turn our attention to another important
    application: displaying maps in our application.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个不错的社交媒体信息流！让我们将注意力转向另一个重要应用程序：在我们的应用程序中显示地图。
- en: Geocoding
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理编码
- en: '*Geocoding* refers to the process of taking a street address or place name
    (Bletchley Park, Sherwood Drive, Bletchley, Milton Keynes MK3 6EB, UK) and converting
    it to geographic coordinates (latitude 51.9976597, longitude –0.7406863). If your
    application is going to be doing any kind of geographic calculation—distances
    or directions—or displaying a map, then you’ll need geographic coordinates.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*地理编码* 指的是将街道地址或地名（Bletchley Park, Sherwood Drive, Bletchley, Milton Keynes
    MK3 6EB, UK）转换为地理坐标（纬度 51.9976597，经度 –0.7406863）的过程。如果您的应用程序需要进行任何形式的地理计算（距离或方向）或显示地图，则需要地理坐标。'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You may be used to seeing geographic coordinates specified in degrees, minutes,
    and seconds (DMS). Geocoding APIs and mapping services use a single floating-point
    number for latitude and longitude. If you need to display DMS coordinates, see
    [this wikipedia article](http://bit.ly/2Xc5IlM).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能习惯于看到使用度分秒（DMS）指定的地理坐标。地理编码 API 和地图服务使用单个浮点数表示纬度和经度。如果您需要显示 DMS 坐标，请参阅 [此维基百科文章](http://bit.ly/2Xc5IlM)。
- en: Geocoding with Google
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Google 进行地理编码
- en: Both Google and Bing offer excellent REST services for geocoding. We’ll be using
    Google for our example, but the Bing service is very similar.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Google 和 Bing 都提供优秀的地理编码 REST 服务。我们将在示例中使用 Google，但是 Bing 的服务非常类似。
- en: 'Without attaching a billing account to your Google account, your geocoding
    requests will be limited to one a day, which will make for a very slow testing
    cycle indeed! Whenever possible in this book, I’ve tried to avoid recommending
    services you couldn’t at least use in a development capacity for free, and I did
    try some free geocoding services, and found a significant enough gulf in usability
    that I continue to recommend Google geocoding. However, as I write this, the cost
    of development-volume geocoding with Google is free: you receive a $200 monthly
    credit with your account, and you would have to make 40,000 requests to exhaust
    that! If you want to follow along with this chapter, go to [your Google console](http://bit.ly/2KcY1X0),
    choose Billing from the main menu, and enter your billing information.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您未将计费账户附加到您的 Google 账户，则您的地理编码请求将每天限制为一次，这将导致测试周期非常缓慢！在这本书中尽可能地，我试图避免推荐您至少在开发阶段不能免费使用的服务，并且我确实尝试了一些免费地理编码服务，并发现了足够大的可用性差距，因此我继续推荐
    Google 地理编码。但是，就我所写的而言，使用 Google 进行开发量地理编码的成本是免费的：您的账户会获得每月 200 美元的信用额度，您需要做 40,000
    次请求才能用尽！如果您想跟着本章进行，请转到 [您的 Google 控制台](http://bit.ly/2KcY1X0)，从主菜单中选择计费，并输入您的计费信息。
- en: Once you’ve set up billing, you’ll need an API key for Google’s geocoding API.
    Go to [the console](http://bit.ly/2KcY1X0), select your project from the navigation
    bar, and then click on APIs. If the geocoding API isn’t in your list of enabled
    APIs, locate it in the list of additional APIs and add it. Most of the Google
    APIs share the same API credentials, so click on the navigation menu in the upper
    left, and go back to your dashboard. Click on Credentials, and create a new API
    key if you don’t have an appropriate one already. Note that API keys can be restricted
    to prevent abuse, so make sure your API key can be used from your application.
    If you need one for developing, you can restrict the key by IP address, and choose
    your IP address (if you don’t know what it is, you can just ask Google, “What’s
    my IP address?”).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了计费，您将需要 Google 地理编码 API 的 API 密钥。转到 [控制台](http://bit.ly/2KcY1X0)，从导航栏中选择您的项目，然后单击
    API。如果地理编码 API 不在您启用的 API 列表中，请在附加 API 列表中找到并添加它。大多数 Google API 共享相同的 API 凭据，因此请单击左上角的导航菜单，返回到您的仪表板。单击凭据，如果您还没有合适的
    API 密钥，则创建一个新的 API 密钥。请注意，API 密钥可以受限以防止滥用，因此请确保您的 API 密钥可以从您的应用程序中使用。如果您需要用于开发的密钥，您可以按
    IP 地址限制密钥，并选择您的 IP 地址（如果您不知道它是什么，可以询问 Google，“我的 IP 地址是多少？”）。
- en: 'Once you have an API key, add it to *.credentials.development.json*:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得 API 密钥，请将其添加到 *.credentials.development.json*：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then create a module *lib/geocode.js*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个模块 *lib/geocode.js*：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we have a function that will contact the Google API to geocode an address.
    If it can’t find an address (or fails for any other reason), an error will be
    returned. The API can return multiple addresses. For example, if you search for
    “10 Main Street” without specifying a city, state, or postal code, it will return
    dozens of results. Our implementation simply picks the first one. The API returns
    a lot of information, but all we’re currently interested in are the coordinates.
    You could easily modify this interface to return more information. See the [Google
    geocoding API documentation](http://bit.ly/2O4EE3t) for more information about
    the data the API returns.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个函数，将联系 Google API 对地址进行地理编码。如果找不到地址（或由于任何其他原因而失败），将返回错误。API 可以返回多个地址。例如，如果您搜索“10
    Main Street”而没有指定城市、州或邮政编码，它将返回数十个结果。我们的实现只是选择第一个。API 返回大量信息，但目前我们感兴趣的只是坐标。您可以轻松修改此接口以返回更多信息。请参阅
    [Google 地理编码 API 文档](http://bit.ly/2O4EE3t) 以了解 API 返回的更多信息。
- en: Usage restrictions
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用限制
- en: The Google geocoding API currently has a monthly usage limit, but you pay $0.005
    per geocoding request. So if you made a million requests in any given month, you’d
    have a $5,000 bill from Google…so there is a probably practical limit for you!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 Google 地理编码 API 每月有使用限制，但您每次地理编码请求支付 0.005 美元。因此，如果您在任何给定月份进行了百万次请求，您将从 Google
    收到 5,000 美元的账单……因此，对您来说可能存在一个实际的限制！
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you’re worried about runaway charges—which could happen if you accidentally
    leave a service running, or if a bad actor gets access to your credentials—you
    can add a budget and configure alerts to notify you as you approach them. Go to
    your Google developer console, and choose “Budgets & alerts” from the Billing
    menu.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心发生不必要的费用——如果您意外地让一个服务运行，或者如果一个不良分子获取了您的凭证，这可能会发生——您可以添加预算并配置警报，以在接近预算时通知您。转到您的Google开发者控制台，并从计费菜单中选择“预算和警报”。
- en: At the time of writing, Google limits you to 5,000 requests per 100 seconds
    to prevent abuse, which would be difficult to exceed. Google’s API also requires
    that if you use a map on your website, you use Google Maps. That is, if you’re
    using Google’s service to geocode your data, you can’t turn around and display
    that information on a Bing map without violating the terms of service. Generally,
    this is not an onerous restriction, as you probably wouldn’t be doing geocoding
    unless you intended to display locations on a map. However, if you like Bing’s
    maps better than Google’s, or vice versa, you should be mindful of the terms of
    service and use the appropriate API.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Google限制您在100秒内进行5000次请求，以防止滥用，这是很难超过的。Google的API还要求，如果您在网站上使用地图，您必须使用Google
    Maps。也就是说，如果您使用Google的服务来进行地理编码您的数据，您不能反过来在Bing地图上显示这些信息，否则将违反服务条款。一般来说，这不是一个繁琐的限制，因为您可能不会进行地理编码，除非您打算在地图上显示位置。但是，如果您更喜欢Bing的地图还是Google的地图，您应该注意服务条款，并使用适当的API。
- en: Geocoding Your Data
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码您的数据
- en: We have a nice database of vacation packages around Oregon, and we might decide
    we want to display a map with pins showing where the various vacations are, and
    this is where geocoding comes in.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有一个关于俄勒冈周围度假套餐的很好的数据库，我们可能决定要显示一个带有标注的地图，显示各种度假的位置，这就是地理编码的用武之地。
- en: We already have vacation data in the database, and each vacation has a location
    search string that will work with geocoding, but we don’t yet have coordinates.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在数据库中有度假数据，每个度假都有一个位置搜索字符串，可以用于地理编码，但我们还没有坐标。
- en: 'The question now is when and how do we do the geocoding? Broadly speaking,
    we have three options:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是何时以及如何进行地理编码？总体而言，我们有三个选择：
- en: Geocode when we add new vacations to the database. This is probably a great
    option when we add an admin interface to the system that allows vendors to dynamically
    add vacations to the database. Since we’re stopping short of this functionality,
    however, we’ll discard this option.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当向数据库添加新的假期时进行地理编码。当我们向系统添加允许供应商动态添加假期到数据库的管理员界面时，这可能是一个很好的选择。然而，由于我们没有完成这个功能，因此我们将放弃这个选项。
- en: 'Geocode as necessary when retrieving vacations from the database. This approach
    would do a check every time we get vacations from the database: if any of them
    have missing coordinates, we would geocode them. This option sounds appealing,
    and is probably the easiest of the three, but it has some big disadvantages that
    make it unsuitable. The first is performance: if you add a thousand new vacations
    to the database, the first person to look at the vacations list is going to have
    to wait for all of those geocoding requests to succeed and get written to the
    database. Furthermore, one can imagine a situation where a load testing suite
    adds a thousand vacations to the database and then performs a thousand requests.
    Since they all run concurrently, each of those thousand requests results in a
    thousand geocoding requests because the data hasn’t been written to the database
    yet…resulting in a million geocoding requests and a $5,000 bill from Google! So
    let’s cross this one off the list.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索数据库中的度假时根据需要进行地理编码。这种方法会在每次从数据库获取度假信息时进行检查：如果有任何度假信息缺少坐标，我们将对其进行地理编码。这个选项听起来很吸引人，可能是三个选项中最简单的一个，但它有一些重大的缺点，使其不适用。首先是性能问题：如果您向数据库添加了一千个新的度假信息，查看度假列表的第一个人将不得不等待所有这些地理编码请求成功并写入数据库。此外，可以想象一个负载测试套件向数据库添加了一千个度假信息，然后执行了一千个请求。由于它们都在同时运行，每一个请求都会导致一千个地理编码请求，因为数据还没有写入数据库……导致一百万个地理编码请求和来自Google的5000美元账单！因此，我们将这个选项划掉。
- en: 'Have a script to find vacations with missing coordinate date, and geocode those.
    This approach offers the best solution for our current situation. For development
    purposes, we’re populating the vacation database once, and we don’t yet have an
    admin interface for adding new vacations. Furthermore, if we do decide to add
    an admin interface later, this approach isn’t incompatible with that: as a matter
    of fact, we could just run this process after adding a new vacation, and it would
    work.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个脚本来查找缺少坐标日期的假期，并对它们进行地理编码。这种方法为我们当前的情况提供了最佳解决方案。为了开发目的，我们一次性填充假期数据库，但我们还没有为添加新假期设计管理界面。此外，如果以后决定添加管理界面，这种方法与此并不冲突：事实上，我们只需在添加新假期后运行此流程，它就会正常工作。
- en: 'First, we need to add a way to update an existing vacation in *db.js* (we’ll
    also add a method to close the database connection, which will come in handy in
    scripts):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加一种方法来更新 *db.js* 中的现有假期（我们还将添加一个关闭数据库连接的方法，在脚本中会很方便）：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we can write a script *db-geocode.js*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以编写一个脚本 *db-geocode.js*：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you run the script (`node db-geocode.js`), you should see that all of your
    vacations have been successfully geocoded! Now that we have that information,
    let’s learn how to display it on a map….
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行脚本 (`node db-geocode.js`) 时，您应该看到所有假期都已成功地进行了地理编码！现在我们有了这些信息，让我们学习如何在地图上显示它……
- en: Displaying a Map
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示地图
- en: While displaying vacations on a map really falls under “frontend” work, it would
    be very disappointing to get this far and not see the fruits of our labor. So
    we’re going to take a slight departure from the backend focus of this book, and
    see how to display our newly geocoded dealers on a map.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在地图上显示假期实际上属于“前端”工作，但到达这一步却看不到我们劳动成果将会非常令人失望。因此，我们将稍微偏离本书的后端重点，看看如何在地图上显示我们新编码的经销商。
- en: We already created a Google API key to do our geocoding, but we still need to
    enable the maps API. Go to [your Google console](http://bit.ly/2KcY1X0), click
    on APIs, and find Maps JavaScript API and enable it if it isn’t already.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个谷歌 API 密钥来进行地理编码，但我们仍然需要启用地图 API。前往 [您的谷歌控制台](http://bit.ly/2KcY1X0)，点击
    APIs，找到 Maps JavaScript API 并启用（如果尚未启用）。
- en: 'Now we can create a view to display our vacations map, *views/vacations-map.handlebars*.
    We’ll start with just displaying the map, and work on adding vacations next:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个视图来显示我们的假期地图，*views/vacations-map.handlebars*。我们将从仅显示地图开始，并继续添加假期：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now it’s time to put some pins on the map corresponding with our vacations.
    In [Chapter 15](ch15.xhtml#ch_rest_apis_and_json), we created an API endpoint
    `/api/vacations`, which will now include geocoded data. We’ll use that endpoint
    to get our vacations, and put pins on the map. Modify the `initMap` function in
    *views/vacations-map.handlebars.js*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在地图上放置一些与我们的假期相对应的标记了。在 [第 15 章](ch15.xhtml#ch_rest_apis_and_json) 中，我们创建了一个
    API 端点 `/api/vacations`，现在将包含地理编码数据。我们将使用该端点获取我们的假期，并在地图上放置标记。修改 *views/vacations-map.handlebars.js*
    中的 `initMap` 函数：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we have a map showing where all our vacations are! There are a lot of ways
    we could improve this page: probably the best place to start would be to linking
    the markers with the vacation detail page, so you could click on a marker and
    it would take you to the vacation info page. We could also implement custom markers
    or tooltips: the Google Maps API has a lot of features, and you can learn about
    them from the [official Google documentation](https://developers.google.com/maps/documentation/javascript/tutorial).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一张显示所有假期位置的地图了！我们可以通过很多方式来改进这个页面：可能最好的起点是链接标记与假期详细页面，这样您可以点击一个标记，它会带您到假期信息页面。我们还可以实现自定义标记或工具提示：谷歌地图
    API 有很多功能，您可以从 [官方谷歌文档](https://developers.google.com/maps/documentation/javascript/tutorial)
    中了解它们。
- en: Weather Data
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 天气数据
- en: 'Remember our “current weather” widget from [Chapter 7](ch07.xhtml#ch_templating)?
    Let’s get that hooked up with some live data! We’ll be using the US National Weather
    Service (NWS) API to get forecast information. As with our Twitter integration,
    and our use of geocoding, we’ll be caching the forecast to prevent passing every
    hit to our website on to NWS (which might get us blacklisted if our website gets
    popular). Create a file called *lib/weather.js*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在 [第 7 章](ch07.xhtml#ch_templating) 中的“当前天气”小部件吗？让我们连接一些实时数据！我们将使用美国国家气象局
    (NWS) API 来获取预报信息。与我们的 Twitter 集成和地理编码一样，我们将缓存预报信息，以防止每次对我们网站的访问都通过 NWS（如果我们的网站变得流行可能会使我们被列入黑名单）。创建一个名为
    *lib/weather.js* 的文件：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You’ll notice that we got tired of using Node’s built-in `https` library directly,
    and instead created a utility function `_fetch` to make our weather functionality
    a little more readable. One thing that might jump out at you is that we’re setting
    the `User-Agent` header to `Meadowlark Travel`. This is a quirk of the NWS weather
    API: it requires a string for the `User-Agent`. They state that they will eventually
    replace this with an API key, but for now we just need to provide a value here.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我们厌倦了直接使用Node内置的`https`库，而是创建了一个实用函数`_fetch`，使我们的天气功能更易读一些。可能会有一件事引起你的注意，那就是我们将`User-Agent`标头设置为`Meadowlark
    Travel`。这是NWS天气API的一个怪癖：它需要一个字符串作为`User-Agent`。他们声明最终将其替换为API密钥，但现在我们只需要在这里提供一个值。
- en: Getting weather data from the NWS API is a two-part affair here. There’s an
    API endpoint called `points` that takes a latitude and longitude (with exactly
    four decimal digits) and returns information about that location…including the
    appropriate URL from which to get a forecast. Once we have that URL for any given
    set of coordinates, we don’t need to fetch it again. All we need to do is call
    that URL to get the updated forecast.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从NWS API获取天气数据在这里是一个两步操作。有一个API端点叫做`points`，它接受一个带有精确四位小数的纬度和经度，并返回关于该位置的信息...包括获取预报的适当URL。一旦我们对任何给定的坐标有了那个URL，我们就不需要再次获取它。我们只需要调用那个URL来获取更新的预报。
- en: Note that a lot more data is returned from the forecast than we’re using; we
    could get a lot more sophisticated with this feature. In particular, the forecast
    URL returns an array of periods, with the first element being the current period
    (for example, “afternoon” or “evening”). It follows up with periods stretching
    into the next week. Feel free to look at the data in the `periods` array to see
    the kind of data that’s available to you.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，预报返回的数据比我们使用的要多得多；我们可以用这个特性做更多复杂的事情。特别是，预报的URL返回一个期间数组，第一个元素是当前期间（例如，“下午”或“晚上”），接着是延伸到下周的期间。可以随意查看`periods`数组中的数据，了解可用的数据类型。
- en: One detail worth pointing out is that we have a boolean property in our cache
    called `refreshing`. This is necessary since updating the cache takes a finite
    amount of time, and is done asynchronously. If multiple requests come in before
    the first cache refresh completes, they will all kick off the work of refreshing
    the cache. It won’t hurt anything, exactly, but you will be making more API calls
    than are strictly necessary. This boolean variable is just a flag to any additional
    requests to say, “We’re working on it.”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的缓存中有一个名为`refreshing`的布尔属性，值得注意的细节。这是必需的，因为更新缓存需要一定的时间，并且是异步完成的。如果在第一次缓存刷新完成之前有多个请求进来，它们都会触发刷新缓存的工作。这不会造成实质性损害，但会多出一些不必要的API调用。这个布尔变量只是一个标志，用来告诉任何额外的请求：“我们正在处理中。”
- en: 'We’ve designed this to be a drop-in replacement for the dummy function we created
    back in [Chapter 7](ch07.xhtml#ch_templating). All we have to do is open *lib/middleware/weather.js*
    and replace the `getWeatherData` function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计它成为我们在[第7章](ch07.xhtml#ch_templating)创建的虚拟函数的即插即用替代品。我们所要做的就是打开*lib/middleware/weather.js*，并替换`getWeatherData`函数：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now we have live weather data in our widget!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的小部件中有了实时天气数据！
- en: Conclusion
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'We’ve really only scratched the surface of what can be done with third-party
    API integration. Everywhere you look, new APIs are popping up, offering every
    kind of data imaginable (even the City of Portland is now making a lot of public
    data available through REST APIs). While it would be impossible to cover even
    a small percentage of the APIs available to you, this chapter has covered the
    fundamentals you’ll need to know to use these APIs: `http.request`, `https.request`,
    and parsing JSON.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上只是初步了解了与第三方API集成可能完成的事情的表面。无论你看哪里，新的API都在不断涌现，提供各种想得到的数据（甚至波特兰市现在也通过REST
    API提供了大量的公共数据）。虽然不可能涵盖你可以使用的API的一小部分，但本章涵盖了你需要了解的使用这些API的基础知识：`http.request`、`https.request`和解析JSON。
- en: We now have a lot of knowledge under our belt. We’ve covered a lot of ground!
    What happens when things go wrong, though? In the next chapter, we’ll be discussing
    debugging techniques to help us when things don’t work out as we expect.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们掌握了很多知识。我们走了很长一段路！但是当事情出错时会发生什么呢？在下一章中，我们将讨论调试技术，帮助我们解决事情不如预期时的情况。
