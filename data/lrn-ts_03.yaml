- en: Chapter 2\. The Type System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 类型系统
- en: JavaScript’s power
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: JavaScript的能力
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Comes from flexibility
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来自于灵活性
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Be careful with that!
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要小心！
- en: I talked briefly in [Chapter 1, “From JavaScript to TypeScript”](ch01.xhtml#from_javascript_to_typescript)
    about the existence of a “type checker” in TypeScript that looks at your code,
    understands how it’s meant to work, and lets you know where you might have messed
    up. But how does a type checker work, really?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第1章，“从JavaScript到TypeScript”](ch01.xhtml#from_javascript_to_typescript)中简要谈到了TypeScript中存在的“类型检查器”，它查看您的代码，理解它的预期工作方式，并告诉您可能出错的地方。但是类型检查器真正是如何工作的呢？
- en: What’s in a Type?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型包含什么？
- en: A “type” is a description of what a JavaScript value *shape* might be. By “shape”
    I mean which properties and methods exist on a value, and what the built-in `typeof`
    operator would describe it as.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “类型”描述了JavaScript值的*形状*可能是什么。通过“形状”，我的意思是一个值上存在哪些属性和方法，以及内置`typeof`操作符如何描述它。
- en: 'For example, when you create a variable with the initial value `"Aretha"`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当你创建一个初始值为`"Aretha"`的变量时：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: TypeScript can infer, or figure out, that the `singer` variable is of *type*
    string.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript可以推断，或者说可以找出，`singer`变量是*string*类型。
- en: 'The most basic types in TypeScript correspond to the seven basic kinds of primitives
    in JavaScript:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript中最基本的类型对应于JavaScript中七种基本类型的一种：
- en: '`null`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null`'
- en: '`undefined`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined`'
- en: '`boolean` // `true` or `false`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean` // `true`或`false`'
- en: '`string` // `""`, `"Hi!"`, `"abc123"`, …'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string` // `""`, `"Hi!"`, `"abc123"`, …'
- en: '`number` // `0`, `2.1`, `-4`, …'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number` // `0`, `2.1`, `-4`, …'
- en: '`bigint` // `0n`, `2n`, `-4n`, …'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigint` // `0n`, `2n`, `-4n`, …'
- en: '`symbol` // `Symbol()`, `Symbol("hi")`, …'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbol` // `Symbol()`, `Symbol("hi")`, …'
- en: 'For each of these values, TypeScript understands the type of the value to be
    one of the seven basic primitives:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些值中的每一个，TypeScript理解值的类型是七种基本原始类型之一：
- en: '`null; // null`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null; // null`'
- en: '`undefined; // undefined`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined; // undefined`'
- en: '`true; // boolean`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`true; // boolean`'
- en: '`"Louise"; // string`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"Louise"; // string`'
- en: '`1337; // number`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1337; // number`'
- en: '`1337n; // bigint`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1337n; // bigint`'
- en: '`Symbol("Franklin"); // symbol`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol("Franklin"); // symbol`'
- en: If you ever forget the name of a primitive, you can type a `let` variable with
    a primitive value into the [TypeScript Playground](https://typescriptlang.org/play)
    or an IDE and hover your mouse over the variable’s name. The resultant popover
    will include the name of the primitive, such as this screenshot showing hovering
    over a string variable ([Figure 2-1](#playground_primitive_hover)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了原始类型的名称，你可以在[TypeScript Playground](https://typescriptlang.org/play)或IDE中将一个具有原始值的`let`变量输入，并将鼠标悬停在变量名上。结果弹出窗将包括原始类型的名称，例如这个屏幕截图显示悬停在一个字符串变量上（见图2-1）。
- en: '![TypeScript showing a string variable''s type in its hover information.](Images/lets_0201.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![TypeScript显示字符串变量类型的悬停信息。](Images/lets_0201.png)'
- en: Figure 2-1\. TypeScript showing a string variable’s type in its hover information
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-1\. TypeScript显示字符串变量类型的悬停信息
- en: 'TypeScript is also smart enough to be able to infer the type of a variable
    whose starting value is computed. In this example, TypeScript knows that the ternary
    expression always results in a string, so the `bestSong` variable is a `string`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript也足够聪明，能够推断出起始值是计算的变量的类型。在这个例子中，TypeScript知道三元表达式总是产生一个字符串，因此`bestSong`变量是一个`string`：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Back in the [TypeScript Playground](https://typescriptlang.org/play) or your
    IDE, try hovering your cursor on that `bestSong` variable. You should see some
    info box or message telling you that TypeScript has inferred the `bestSong` variable
    to be type `string` ([Figure 2-2](#hovering_let_string_computed)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[TypeScript Playground](https://typescriptlang.org/play)或你的IDE，尝试将鼠标悬停在`bestSong`变量上。你应该看到一些信息框或消息，告诉你TypeScript已经推断出`bestSong`变量是`string`类型（见图2-2）。
- en: '![TypeScript reporting a ''let'' variable as being its string literal type
    from its ternary expression.](Images/lets_0202.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![TypeScript从其三元表达式中报告一个''let''变量作为其字符串文字类型。](Images/lets_0202.png)'
- en: Figure 2-2\. TypeScript reporting a `let` variable as being its `string` literal
    type from its ternary expression
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-2\. TypeScript从三元表达式中报告一个`let`变量作为其`string`文字类型
- en: Note
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Recall the differences between objects and primitives in JavaScript: classes
    such as `Boolean` and `Number` wrap around their primitive equivalents. TypeScript
    best practice is generally to refer to the lower-case names, such as `boolean`
    and `number`, respectively.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾JavaScript中对象和原始类型的区别：如`Boolean`和`Number`类包装它们的原始类型等效物。TypeScript的最佳实践通常是分别引用小写名称，如`boolean`和`number`。
- en: Type Systems
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型系统
- en: A *type system* is the set of rules for how a programming language understands
    what types the constructs in a program may have.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*类型系统* 是编程语言理解程序中构造可能具有的类型的一组规则。'
- en: 'At its core, TypeScript’s type system works by:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，TypeScript 的类型系统工作方式是：
- en: Reading in your code and understanding all the types and values in existence
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读代码并理解所有存在的类型和值
- en: For each value, seeing what type its initial declaration indicates it may contain
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个值，查看其初始声明指示的可能包含的类型
- en: For each value, seeing all the ways it’s used later on in code
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个值，查看后续代码中它被使用的所有方式
- en: Complaining to the user if a value’s usage doesn’t match with its type
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户抱怨如果一个值的使用方式与其类型不匹配
- en: Let’s walk through this type inference process in detail.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细地走一遍这个类型推断过程。
- en: 'Take the following snippet, in which TypeScript is emitting a type error about
    a member property being erroneously called as a function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 看下面的片段，其中 TypeScript 正在发出关于错误调用成员属性的类型错误：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'TypeScript came to that complaint by, in order:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 通过以下顺序对这个投诉进行了处理：
- en: Reading in the code and understanding there to be a variable named `firstName`
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读代码并理解那里有一个名为 `firstName` 的变量
- en: Concluding that `firstName` is of type `string` because its initial value is
    a `string`, `"Whitney"`
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 得出 `firstName` 是 `string` 类型，因为它的初始值是 `string`，即 `"Whitney"`
- en: Seeing that the code is trying to access a `.length` member of `firstName` and
    call it like a function
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看到代码正试图访问 `firstName` 的 `.length` 成员并尝试像调用函数一样调用它
- en: Complaining that the `.length` member of a string is a number, not a function
    *(it can’t be called like a function)*
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抱怨字符串的 `.length` 成员是一个数字，而不是一个函数（*它不能像函数一样调用*）
- en: Understanding TypeScript’s type system is an important skill for understanding
    TypeScript code. Code snippets in this chapter and throughout the rest of this
    book will display more and more complex types that TypeScript will be able to
    infer from code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 TypeScript 的类型系统是理解 TypeScript 代码的重要技能。本章节和本书的其余部分的代码片段将展示 TypeScript 能够从代码中推断出的越来越复杂的类型。
- en: Kinds of Errors
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误类型
- en: 'While writing TypeScript, the two kinds of “errors” you’ll come across most
    frequently are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 TypeScript 时，你最常遇到的两种“错误”是：
- en: Syntax
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 语法
- en: Blocking TypeScript from being converted to JavaScript
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 阻止 TypeScript 被转换为 JavaScript
- en: Type
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类型
- en: Something mismatched has been detected by the type checker
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器检测到的某种不匹配
- en: The differences between the two are important.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者之间的差异非常重要。
- en: Syntax errors
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法错误
- en: Syntax errors are when TypeScript detects incorrect syntax that it cannot understand
    as code. These block TypeScript from being able to properly generate output JavaScript
    from your file. Depending on the tooling and settings you’re using to convert
    your TypeScript code to JavaScript, you might still get some kind of JavaScript
    output (in default `tsc` settings, you will). But if you do, it likely won’t look
    like what you expect.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 语法错误是 TypeScript 检测到无法理解为代码的不正确语法。这些错误会阻止 TypeScript 能够从你的文件正确生成输出的 JavaScript。根据你用于将
    TypeScript 代码转换为 JavaScript 的工具和设置，你可能仍会得到某种形式的 JavaScript 输出（在默认的 `tsc` 设置中，会有）。但如果有的话，它可能不会看起来像你预期的那样。
- en: 'This input TypeScript has a syntax error for an unexpected `let`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输入 TypeScript 对于意外的 `let` 有一个语法错误：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Its compiled JavaScript output, depending on the TypeScript compiler version,
    may look something like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 其编译后的 JavaScript 输出，根据 TypeScript 编译器版本的不同，可能如下所示：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Although TypeScript will do its best to output JavaScript code regardless of
    syntax errors, the output code will likely not be what you wanted. It’s best to
    fix syntax errors before attempting to run the output JavaScript.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 TypeScript 会尽力输出 JavaScript 代码，而不管语法错误如何，但输出的代码可能不是你想要的。最好在尝试运行输出的 JavaScript
    之前修复语法错误。
- en: Type errors
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型错误
- en: Type errors occur when your syntax is valid but the TypeScript type checker
    has detected an error with the program’s types. These do not block TypeScript
    syntax from being converted to JavaScript. They do, however, often indicate something
    will crash or behave unexpectedly if your code is allowed to run.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 类型错误发生在语法正确但 TypeScript 类型检查器检测到程序类型存在错误的情况下。这些错误不会阻止 TypeScript 语法被转换为 JavaScript。然而，它们通常表明如果允许代码运行，某些内容可能会崩溃或表现出意外行为。
- en: 'You saw this in [Chapter 1, “From JavaScript to TypeScript”](ch01.xhtml#from_javascript_to_typescript)
    with the `console.blub` example, where the code was syntactically valid but TypeScript
    could detect it would likely crash when run:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第1章，“从JavaScript到TypeScript”](ch01.xhtml#from_javascript_to_typescript)中看到了`console.blub`示例，代码在语法上是有效的，但TypeScript可以检测到运行时可能会崩溃：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Even though TypeScript may output JavaScript code despite the presence of type
    errors, type errors are generally a sign that the output JavaScript likely won’t
    run the way you wanted. It’s best to read them and consider fixing any reported
    issues before running JavaScript.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TypeScript可能会输出JavaScript代码，尽管存在类型错误，但类型错误通常表明输出的JavaScript可能不会按照您期望的方式运行。最好在运行JavaScript之前阅读并考虑修复任何报告的问题。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Some projects are configured to block running code during development until
    all TypeScript type errors—not just syntax—are fixed. Many developers, myself
    included, generally find this to be annoying and unnecessary. Most projects have
    a way to not be blocked, such as with the *tsconfig.json* file and configuration
    options covered in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目配置为在开发过程中阻止运行代码，直到所有TypeScript类型错误（不仅仅是语法错误）都被修复。许多开发人员，包括我自己，通常认为这很烦人且不必要。大多数项目都有一种方式可以不被阻止，比如*tsconfig.json*文件和[第13章，“配置选项”](ch13.xhtml#configuration_options)中涵盖的配置选项。
- en: Assignability
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可分配性
- en: TypeScript reads variables’ initial values to determine what type those variables
    are allowed to be. If it later sees an assignment of a new value to that variable,
    it will check if that new value’s type is the same as the variable’s.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript读取变量的初始值以确定这些变量允许的类型。如果稍后看到对该变量的新值的赋值，它将检查该新值的类型是否与变量的类型相同。
- en: 'TypeScript is fine with later assigning a different value of the same type
    to a variable. If a variable is, say, initially a `string` value, later assigning
    it another `string` would be fine:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript允许稍后将不同类型的值分配给变量。例如，如果一个变量最初是`string`值，稍后将其分配为另一个`string`值是可以的：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If TypeScript sees an assignment of a different type, it will give us a type
    error. We couldn’t, say, initially declare a variable with a `string` value and
    then later on put in a `boolean`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果TypeScript看到不同类型的赋值，它会给出类型错误。我们不能，比如，最初声明一个带有`string`值的变量，然后稍后放入一个`boolean`值：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'TypeScript’s checking of whether a value is allowed to be provided to a function
    call or variable is called *assignability*: whether that value is *assignable*
    to the expected type it’s passed to. This will be an important term in later chapters
    as we compare more complex objects.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript检查值是否允许提供给函数调用或变量的过程称为*可分配性*：即该值是否*可分配*给其传递的预期类型。随着我们比较更复杂的对象，这将是后续章节中的一个重要术语。
- en: Understanding Assignability Errors
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解可分配性错误
- en: Errors in the format “Type…is not assignable to type…” will be some of the most
    common types of errors you’ll see when writing TypeScript code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写TypeScript代码时，格式错误“类型…不可分配给类型…”将是您经常看到的错误类型之一。
- en: The first type mentioned in that error message is the value the code is attempting
    to assign to a recipient. The second type mentioned is the recipient being assigned
    the first type. For example, when we wrote `lastName = true` in the previous snippet,
    we were trying to *assign* the value of `true`—type `boolean`—to the recipient
    variable `lastName`—type `string`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息中提到的第一个类型是代码试图分配给接收者的值。提到的第二个类型是被分配第一个类型的接收者。例如，在前面的片段中我们写`lastName = true`时，我们试图*分配*`true`值（类型为`boolean`）给接收变量`lastName`（类型为`string`）。
- en: You’ll see more and more complex assignability issues as you progress through
    this book. Remember to read them carefully to understand reported differences
    between actual and expected types. Doing so will make it much easier to work with
    TypeScript when it’s giving you grief over syntax errors.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您在本书中的进展，您将看到越来越复杂的可分配性问题。请务必仔细阅读，以了解实际类型和预期类型之间报告的差异。这样做将使在TypeScript给您带来语法错误时更容易处理。
- en: Type Annotations
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型注解
- en: 'Sometimes a variable doesn’t have an initial value for TypeScript to read.
    TypeScript won’t attempt to figure out the initial type of the variable from later
    uses. It’ll consider the variable by default to be implicitly the `any` type:
    indicating that it could be anything in the world.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有时变量没有初始值供TypeScript读取。TypeScript不会尝试从后续使用中推断变量的初始类型。它默认将变量隐式视为`any`类型：表示它可以是世界上的任何东西。
- en: 'Variables that can’t have their initial type inferred go through what’s called
    an *evolving any*: rather than enforce any particular type, TypeScript will evolve
    its understanding of the variable’s type each time a new value is assigned.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 变量无法推断初始类型时会经历所谓的*演变any*：而不是强制任何特定类型，TypeScript将在每次分配新值时演变其对变量类型的理解。
- en: 'Here, assigning the evolving `any` variable `rocker` is first assigned a string,
    which means it has string methods such as `toUpperCase`, but then is evolved into
    a `number`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将演变的`any`变量`rocker`首先赋予一个字符串，这意味着它具有`toUpperCase`等字符串方法，但随后演变为`number`：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: TypeScript was able to catch that we were calling the `toUpperCase()` method
    on a variable evolved to type `number`. However, it wasn’t able to tell us earlier
    whether it was intentional that we were evolving the variable from `string` to
    `number` in the first place.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript能够捕获到我们在演变为`number`类型的变量上调用`toUpperCase()`方法。但是，在早期它无法告诉我们演变变量从`string`到`number`是否是有意的。
- en: Allowing variables to be evolving `any` typed—and using the `any` type in general—partially
    defeats the purpose of TypeScript’s type checking! TypeScript works best when
    it knows what types your values are meant to be. Much of TypeScript’s type checking
    can’t be applied to `any` typed values because they don’t have known types to
    be checked. [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)
    will cover how to configure TypeScript’s implicit `any` complaints.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 允许变量成为演变的`any`类型，以及通常使用`any`类型部分地败坏了TypeScript类型检查的目的！当TypeScript知道你的值意图成为何种类型时，它才能发挥最佳效果。大部分TypeScript类型检查无法应用于`any`类型的值，因为它们没有已知类型进行检查。[第13章，“配置选项”](ch13.xhtml#configuration_options)将讨论如何配置TypeScript的隐式`any`投诉。
- en: TypeScript provides a syntax for declaring the type of a variable without having
    to assign it an initial value, called a *type annotation*. A type annotation is
    placed after the name of a variable and includes a colon followed by the name
    of a type.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript提供了一种语法来声明变量的类型，而无需为其分配初始值，称为*类型注解*。类型注解放置在变量名之后，包括冒号后跟类型名称。
- en: 'This type annotation indicates the `rocker` variable is meant to be type `string`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型注解指示`rocker`变量应为`string`类型：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These type annotations exist only for TypeScript—they don’t affect the runtime
    code and are not valid JavaScript syntax. If you run `tsc` to compile TypeScript
    source code to JavaScript, they’ll be erased. For example, the previous example
    would be compiled to roughly the following JavaScript:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型注解仅适用于TypeScript——它们不影响运行时代码，也不是有效的JavaScript语法。如果你运行`tsc`将TypeScript源代码编译成JavaScript，它们将被删除。例如，前面的例子将被编译成大致以下JavaScript代码：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Assigning a value whose type is not assignable to the variable’s annotated type
    will cause a type error.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将类型不可分配给变量注释类型的值将导致类型错误。
- en: 'This snippet assigns a number to a `rocker` variable previously declared as
    type `string`, causing a type error:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段将一个数字赋给先前声明为`string`类型的`rocker`变量，导致类型错误：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You’ll see through the next few chapters how type annotations allow you to augment
    TypeScript’s insights into your code, allowing it to give you better features
    during development. TypeScript contains an assortment of new pieces of syntax,
    such as these type annotations that exist only in the type system.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在接下来的几章中看到，类型注解允许你增强TypeScript对你代码的理解，使其在开发过程中为你提供更好的功能。TypeScript包含各种新的语法片段，比如这些仅存在于类型系统中的类型注解。
- en: Note
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Nothing that exists only in the type system gets copied over into emitted JavaScript.
    TypeScript types don’t affect emitted JavaScript.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 任何仅存在于类型系统中的东西都不会复制到生成的JavaScript中。TypeScript类型不影响生成的JavaScript。
- en: Unnecessary Type Annotations
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不必要的类型注解
- en: Type annotations allow us to provide information to TypeScript that it wouldn’t
    have been able to glean on its own. You could also use them on variables that
    have immediately inferable types, but you wouldn’t be telling TypeScript anything
    it doesn’t already know.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解允许我们向TypeScript提供它无法自行获取的信息。你也可以在变量上使用它们，即使这些变量有立即可推断的类型，但你不会告诉TypeScript任何它不已经知道的信息。
- en: 'The following `: string` type annotation is redundant because TypeScript could
    already infer that `firstName` be of type `string`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '下面的`: string`类型注解是多余的，因为TypeScript已经能够推断`firstName`应为`string`类型：'
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you do add a type annotation to a variable with an initial value, TypeScript
    will check that it matches the type of the variable’s value.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为一个有初始值的变量添加类型注解，TypeScript 将检查它是否与变量值的类型匹配。
- en: 'The following `firstName` is declared to be of type `string`, but its initializer
    is the `number` `42`, which TypeScript sees as an incompatibility:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`firstName`声明为`string`类型，但其初始化器为`number`的`42`，TypeScript 视其为不兼容：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Many developers—myself included—generally prefer not to add type annotations
    on variables where the type annotations wouldn’t change anything. Having to manually
    write out type annotations can be cumbersome—especially when they change, and
    for the complex types I’ll show you later in this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者，包括我自己，通常不愿意在类型注解不会改变任何内容的变量上添加类型注解。手动编写类型注解可能很麻烦，特别是在它们改变时，以及在本书后面我将向您展示的复杂类型时。
- en: It can sometimes be useful to include explicit type annotations on variables
    to clearly document the code and/or to make TypeScript protected against accidental
    changes to the variable’s type. We’ll see in later chapters how explicit type
    annotations can sometimes explicitly tell TypeScript information it wouldn’t have
    inferred normally.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候在变量上包含显式类型注解可能很有用，用以清晰地文档化代码和/或使 TypeScript 免受变量类型意外更改的保护。我们将在后面的章节中看到，显式类型注解有时可以明确告诉
    TypeScript其通常不会推断的信息。
- en: Type Shapes
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型形状
- en: TypeScript does more than check that the values assigned to variables match
    their original types. TypeScript also knows what member properties should exist
    on objects. If you attempt to access a property of a variable, TypeScript will
    make sure that property is known to exist on that variable’s type.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 不仅检查分配给变量的值是否与其原始类型匹配。TypeScript 还知道对象上应该存在哪些成员属性。如果尝试访问变量的属性，TypeScript
    将确保该属性已知存在于该变量的类型上。
- en: 'Suppose we declare a `rapper` variable of type `string`. Later on, when we
    use that `rapper` variable, operations that TypeScript knows work on strings are
    allowed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们声明了一个类型为`string`的`rapper`变量。稍后当我们使用该`rapper`变量时，TypeScript 允许在字符串上已知的操作：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Operations that TypeScript doesn’t know to work on strings will not be allowed:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 不知道能在字符串上工作的操作将不被允许：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Types can also be more complex shapes, most notably objects. In the following
    snippet, TypeScript knows the `birthNames` object doesn’t have a `middleName`
    key and complains:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 类型也可以是更复杂的形状，最显著的是对象。在以下片段中，TypeScript 知道`birthNames`对象没有`middleName`键并发出警告：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: TypeScript’s understanding of object shapes allows it to report issues with
    the usage of objects, not just assignability. [Chapter 4, “Objects”](ch04.xhtml#objects)
    will describe more of TypeScript’s powerful features around objects and object
    types.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 对对象形状的理解使其能够报告关于对象使用的问题，而不仅仅是可赋值性。[第四章，“对象”](ch04.xhtml#objects)
    将描述 TypeScript 关于对象和对象类型强大功能的更多内容。
- en: Modules
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: The JavaScript programming language did not include a specification for how
    files can share code between each other until relatively recently in its history.
    ECMAScript 2015 added “ECMAScript modules,” or ESM, to standardize `import` and
    `export` syntax between files.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 直到相对较近的历史时期，JavaScript 编程语言并未包含文件间如何共享代码的规范。ECMAScript 2015 添加了“ECMAScript 模块”或
    ESM，以标准化文件间的`import`和`export`语法。
- en: 'For reference, this module file imports a `value` from a sibling `./values`
    file and exports a `doubled` variable:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 供参考，此模块文件从兄弟文件`./values`导入了一个`value`并导出了一个`doubled`变量。
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To match with the ECMAScript specification, in this book I’ll use the following
    nomenclature:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合 ECMAScript 规范，在本书中我将使用以下命名法：
- en: Module
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 模块
- en: A file with a top-level `export` or `import`
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 具有顶级`export`或`import`的文件
- en: Script
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本
- en: Any file that is not a module
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 任何不是模块的文件
- en: TypeScript is able to work with those modern module files as well as older files.
    Anything declared in a module file will be available only in that file unless
    an explicit `export` statement in that file exports it. A variable declared in
    one module with the same name as a variable declared in another file won’t be
    considered a naming conflict (unless one file imports the other file’s variable).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 能够处理这些现代模块文件以及较旧的文件。在模块文件中声明的任何内容只在该文件中有效，除非该文件显式地用`export`语句导出它。一个模块中声明的变量如果与另一个文件中声明的变量同名，则不会被视为命名冲突（除非一个文件导入另一个文件的变量）。
- en: 'The following `a.ts` and `b.ts` files are both modules that export a similarly
    named `shared` variable without issue. `c.ts` causes a type error because it has
    a naming conflict between an imported `shared` and its own value:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 `a.ts` 和 `b.ts` 文件都是导出了一个名为 `shared` 的相似变量的模块，没有问题。`c.ts` 导致类型错误，因为它在导入的
    `shared` 和自身的值之间存在命名冲突：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If a file is a script, though, TypeScript will consider it to be globally scoped,
    meaning all scripts have access to its contents. That means variables declared
    in a script file cannot have the same name as variables declared in other script
    files.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件是脚本，TypeScript 将其视为全局作用域，这意味着所有脚本都可以访问其内容。这意味着在脚本文件中声明的变量不能与其他脚本文件中声明的变量同名。
- en: 'The following `a.ts` and `b.ts` files are considered scripts because they do
    not have module-style `export` or `import` statements. That means their variables
    of the same name conflict with each other as if they were declared in the same
    file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 `a.ts` 和 `b.ts` 文件被视为脚本，因为它们没有模块风格的 `export` 或 `import` 声明。这意味着它们的同名变量会彼此冲突，就好像它们是在同一个文件中声明的一样：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you see these “Cannot redeclare…” errors in a TypeScript file, it may be
    because you have yet to add an `export` or `import` statement to the file. Per
    the ECMAScript specification, if you need a file to be a module without an `export`
    or `import` statement, you can add an `export {};` somewhere in the file to force
    it to be a module:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 TypeScript 文件中看到这些“Cannot redeclare…”错误，可能是因为您还未在文件中添加 `export` 或 `import`
    声明。根据 ECMAScript 规范，如果需要一个文件成为模块但没有 `export` 或 `import` 声明，可以在文件的某处添加 `export
    {};` 强制将其视为模块：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Warning
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: TypeScript will not recognize the types of imports and exports in TypeScript
    files written using older module systems such as CommonJS. TypeScript will generally
    see values returned from CommonJS-style `require` functions to be typed as `any`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 不会识别使用旧的模块系统（如 CommonJS）编写的 TypeScript 文件中的导入和导出类型。TypeScript 通常会将从
    CommonJS 风格的 `require` 函数返回的值视为 `any` 类型。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you saw how TypeScript’s type system works at its core:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了 TypeScript 类型系统的核心工作原理：
- en: What a “type” is and the primitive types recognized by TypeScript
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “类型”是什么以及TypeScript所识别的原始类型
- en: What a “type system” is and how TypeScript’s type system understands code
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “类型系统”是什么以及TypeScript 的类型系统如何理解代码
- en: How type errors compare to syntax errors
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型错误与语法错误的比较
- en: Inferred variable types and variable assignability
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推断变量类型和变量可赋性
- en: Type annotations to explicitly declare variable types and avoid evolving `any`
    types
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型注解用于显式声明变量类型，避免演变为 `any` 类型
- en: Object member checking on type shapes
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对类型形状进行对象成员检查
- en: ECMAScript module files’ declaration scoping compared to script files
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript 模块文件的声明作用域与脚本文件相比
- en: Tip
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/the-type-system*](https://learningtypescript.com/the-type-system).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了本章的阅读，请在[*https://learningtypescript.com/the-type-system*](https://learningtypescript.com/the-type-system)上练习您所学到的内容。
- en: Why did the number and string break up?
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数字和字符串为什么会分离？
- en: ''
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: They weren’t each other’s types.
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 他们不是彼此的类型。
