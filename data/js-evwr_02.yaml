- en: Chapter 1\. Our Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。我们的开发环境
- en: John Wooden, the late coach of the UCLA men’s basketball team, is one of the
    most successful coaches of all time, winning 10 national championships in a 12-year
    period. His teams consisted of top recruits, including hall-of-fame players such
    as Lew Alcindor (Kareem Abdul-Jabbar) and Bill Walton. On the first day of practice,
    Wooden would sit down each of his new recruits, players who had been the best
    in the United States in high school, and teach them to put on their socks properly.
    When asked about this, [Wooden stated](https://oreil.ly/lnZkf) that “it’s the
    little details that make the big things come about.”
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·伍登（John Wooden），UCLA男子篮球队的已故教练，是有史以来最成功的教练之一，在12年内赢得了10个国家冠军。他的队伍包括顶级新秀，包括名人堂球员如Lew
    Alcindor（Kareem Abdul-Jabbar）和Bill Walton。在第一天的训练中，伍登会坐下他的每一位新秀队员，这些在美国高中时期曾经是最优秀的球员，并教他们正确穿袜子的方法。当被问及此事时，[伍登表示](https://oreil.ly/lnZkf)，“正是一些小细节造就了重大成就。”
- en: Chefs use the term *mise en place*, meaning “everything in its place,” to describe
    the practice of preparing the tools and ingredients required for the menu prior
    to cooking. This preparation enables the kitchen’s cooks to successfully prepare
    meals during busy rushes, as the small details have already been considered. Much
    like Coach Wooden’s players and chefs preparing for a dinner rush, it is worth
    dedicating time to setting up our development environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 厨师们使用术语*mise en place*，意思是“一切就位”，来描述在烹饪前准备菜单所需的工具和食材的做法。这种准备使得厨房的厨师们能够在繁忙时段成功地准备餐食，因为已经考虑到了小细节。就像伍德恩教练的球员和厨师为晚餐高峰期做准备一样，值得花时间来设置我们的开发环境。
- en: A useful development environment does not require expensive software or top-of-the-line
    hardware. In fact, I’d encourage you to start simple, use open source software,
    and grow your tools with you. Though a runner prefers a specific brand of sneakers
    and a carpenter may always reach for her favorite hammer, it took time and experience
    to establish these preferences. Experiment with tools, observe others, and over
    time you will create the environment that works best for you.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的开发环境并不需要昂贵的软件或顶级硬件。事实上，我鼓励您从简单开始，使用开源软件，并随着您的需求增加工具。尽管跑步者喜欢特定品牌的运动鞋，木匠可能总是会拿起她喜欢的锤子，但建立这些偏好需要时间和经验。尝试不同的工具，观察他人，随着时间的推移，您将创建最适合自己的环境。
- en: In this chapter we’ll install a text editor, Node.js, Git, MongoDB, and several
    helpful JavaScript packages as well as locate our terminal application. It’s possible
    that you already have a development environment that works well for you; however,
    we will also be installing several required tools that will be used throughout
    the book. If you’re like me and typically skip over the instruction manual, I’d
    still encourage you to read through this guide.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装一个文本编辑器、Node.js、Git、MongoDB和几个有用的JavaScript包，以及找到我们的终端应用程序。您可能已经拥有一个对您而言效果很好的开发环境；然而，我们还将安装本书中将使用的几个必需工具。如果您像我一样通常跳过使用说明书，我仍然鼓励您通读本指南。
- en: If you find yourself stuck at any point, please reach out to the JavaScript
    Everywhere community, via our Spectrum channel at [*spectrum.chat/jseverywhere*](https://spectrum.chat/jseverywhere).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在任何时候遇到困难，请联系JavaScript Everywhere社区，通过我们的Spectrum频道[*spectrum.chat/jseverywhere*](https://spectrum.chat/jseverywhere)。
- en: Your Text Editor
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的文本编辑器
- en: Text editors are a lot like clothes. We all need them, but our preferences may
    vary wildly. Some like simple and well constructed. Some prefer the flashy paisley
    pattern. There’s no wrong decision, and you should use whatever makes you most
    comfortable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器就像衣服一样。我们都需要它们，但我们的偏好可能大相径庭。有些人喜欢简单且结构良好的。有些人喜欢花哨的佩斯利图案。没有错误的选择，您应该使用让自己最舒适的工具。
- en: If you don’t already have a favorite, I highly recommend [Visual Studio Code
    (VSCode)](https://code.visualstudio.com). It’s an open source editor that is available
    for Mac, Windows, and Linux. Additionally, it offers built-in features to simplify
    development and is easily modified with community extensions. It’s even built
    using JavaScript!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有最喜欢的文本编辑器，我强烈推荐[Visual Studio Code (VSCode)](https://code.visualstudio.com)。它是一个开源编辑器，适用于Mac、Windows和Linux。此外，它提供了内置功能来简化开发，并可以通过社区扩展进行轻松修改。它甚至是使用JavaScript构建的！
- en: The Terminal
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端
- en: If you’re using VSCode, it comes with an integrated terminal. For most development
    tasks, this may be all you need. Personally, I find using a dedicated terminal
    client preferable as I find it easier to manage multiple tabs and use more dedicated
    window space on my machine. I’d suggest trying both and finding what works best
    for you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用VSCode，它带有集成终端。对于大多数开发任务，这可能就足够了。就我个人而言，我发现使用专用终端客户端更可取，因为我发现在我的机器上更容易管理多个选项卡并使用更多的专用窗口空间。我建议尝试两种方法，找到最适合您的方法。
- en: Using a Dedicated Terminal Application
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用专用终端应用程序
- en: All operating systems come with a built-in terminal application and this is
    a great place to get started. On macOS it is called, fittingly enough, Terminal.
    On the Windows operating system, starting with Windows 7, the program is PowerShell.
    The name of the terminal for Linux distributions may vary, but often includes
    “Terminal.”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作系统都带有一个内置的终端应用程序，这是一个很好的开始。在macOS上，它被称为Terminal。在Windows操作系统上，从Windows 7开始，该程序是PowerShell。Linux发行版的终端名称可能有所不同，但通常包括“Terminal”。
- en: Using VSCode
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用VSCode
- en: To access the terminal in VSCode, click Terminal → New Terminal. This will present
    you with a terminal window. The prompt will be present in the same directory as
    the current project.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问VSCode中的终端，请单击Terminal → New Terminal。这将为您呈现一个终端窗口。提示将出现在与当前项目相同的目录中。
- en: Navigating the Filesystem
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航文件系统
- en: Once you’ve found your terminal, you’ll need the critical ability to navigate
    the filesystem. You can do this using the `cd` command, which stands for “change
    directory.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到您的终端，您将需要关键的能力来导航文件系统。您可以使用`cd`命令来做到这一点，它代表“更改目录”。
- en: Command-Line Prompts
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行提示
- en: Terminal instructions often include a `$` or `>` at the start of the line. These
    are used to designate the prompt and should not be copied. In this book, I’ll
    indicate the terminal prompt with a dollar sign (`$`). When entering instructions
    into your terminal application, do not type the `$`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 终端指令通常在行首包含`$`或`>`。这些用于指示提示，不应复制。在本书中，我将用美元符号（`$`）表示终端提示。在输入指令到您的终端应用程序时，不要输入`$`。
- en: 'When you open your terminal application, you’ll be presented with a cursor
    prompt, where you may enter commands. By default, you’re in your computer’s home
    directory. If you haven’t already, I’d recommend making a *Projects* folder that
    is a sub-directory within your home directory. This folder can house all of your
    development projects. You create a *Projects* directory and navigate into that
    folder like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开终端应用程序时，您将看到一个光标提示，您可以在其中输入命令。默认情况下，您位于计算机的主目录中。如果还没有这样做，我建议在主目录中创建一个*项目*文件夹作为子目录。这个文件夹可以存放所有您的开发项目。您可以创建一个*项目*目录并像这样导航到该文件夹：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the future, you can navigate to your *Projects* directory as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，您可以按照以下方式导航到您的*项目*目录：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now let’s say you have a folder called *jseverywhere* in your *Projects* directory.
    You can type `cd jseverywhere` from the *Projects* directory to navigate into
    that folder. To navigate backward into a directory (in this case, to *Projects*),
    you would type `cd ..` (the `cd` command followed by two periods).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设您在*项目*目录中有一个名为*jseverywhere*的文件夹。您可以从*项目*目录中键入`cd jseverywhere`来导航到该文件夹。要向后导航到一个目录（在这种情况下是*项目*），您将键入`cd
    ..`（`cd`命令后跟两个句点）。
- en: 'All together, this would look something like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这看起来可能是这样的：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If this is new to you, spend some time navigating through your files until you’re
    comfortable. I’ve found that filesystem issues are a common tripping point for
    budding developers. Having a grasp of this will provide you with a solid foundation
    for establishing your workflows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对您来说是新的，请花一些时间浏览您的文件，直到您感到舒适。我发现文件系统问题是初学者开发者常见的绊脚石。掌握这一点将为您建立工作流程提供坚实的基础。
- en: Command-Line Tools and Homebrew (Mac Only)
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行工具和Homebrew（仅限Mac）
- en: 'Certain command-line utilities are only available to macOS users once Xcode
    is installed. You can jump through this hoop, without installing Xcode, by installing
    `xcode-select` via your terminal. To do so, run the following command and click
    through the install prompts:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些命令行实用程序只有在安装了Xcode后才能供macOS用户使用。您可以通过在终端中安装`xcode-select`来绕过这个问题，而不必安装Xcode。要这样做，请运行以下命令并按照安装提示操作：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Homebrew is a package manager for macOS. It makes installing development dependencies,
    like programming languages and databases, as simple as running a command-line
    prompt. If you use a Mac, it will dramatically simplify your development environment.
    To install Homebrew, either head over to [*brew.sh*](https://brew.sh) to copy
    and paste the install command, or type the following in a single line:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew是macOS的包管理器。它使得安装开发依赖项（如编程语言和数据库）变得像在命令行提示符下运行一样简单。如果您使用Mac，它将大大简化您的开发环境。要安装Homebrew，请访问[*brew.sh*](https://brew.sh)，复制并粘贴安装命令，或者在一行中输入以下内容：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Node.js and NPM
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js和NPM
- en: '[Node.js](https://nodejs.org) is “a JavaScript runtime, built on Chrome’s V8
    JavaScript Engine.” In practical terms this means that Node is a platform that
    allows developers to write JavaScript outside of a browser environment. Node.js
    comes with NPM, the default package manager. NPM enables you to install thousands
    of libraries and JavaScript tools within your projects.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[Node.js](https://nodejs.org)是“建立在Chrome的V8 JavaScript引擎上的JavaScript运行时”。从实际角度来看，这意味着Node是一个平台，允许开发人员在非浏览器环境下编写JavaScript代码。Node.js自带NPM作为默认的包管理器。NPM使您能够在项目中安装数千个库和JavaScript工具。'
- en: Managing Node.js Versions
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Node.js版本
- en: If you plan on managing a large number of Node projects, you may find that you
    also need to manage multiple versions of Node on your machine. If that’s the case,
    I recommend using [Node Version Manager (NVM)](https://oreil.ly/fzBpO) to install
    Node. NVM is a script that enables you to manage multiple active Node versions.
    For Windows users, I recommend [nvm-windows](https://oreil.ly/qJeej). I won’t
    be covering Node versioning, but it is a helpful tool. If this is your first time
    working with Node, I recommend proceeding with the following instructions for
    your system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划管理大量的Node项目，您可能会发现需要在计算机上管理多个Node版本。如果是这种情况，我建议使用[Node Version Manager
    (NVM)](https://oreil.ly/fzBpO)来安装Node。NVM是一个脚本，使您能够管理多个活动的Node版本。对于Windows用户，我建议使用[nvm-windows](https://oreil.ly/qJeej)。我不会涵盖Node版本管理的内容，但这是一个有用的工具。如果这是您第一次使用Node，请按照系统的以下说明操作。
- en: Installing Node.js and NPM for macOS
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在macOS上安装Node.js和NPM
- en: 'macOS users can install Node.js and NPM using Homebrew. To install Node.js,
    type the following command into your terminal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: macOS用户可以使用Homebrew安装Node.js和NPM。要安装Node.js，请在终端中输入以下命令：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With Node installed, open your terminal application to verify it is working.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成Node后，请打开您的终端应用程序以验证其是否正常工作。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you see a version number after typing those commands, congratulations—you’ve
    successfully installed Node and NPM for macOS!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在输入这些命令后看到版本号码，恭喜你——你已成功在macOS上安装了Node和NPM！
- en: Installing Node.js and NPM for Windows
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装Node.js和NPM
- en: For Windows, the most straightforward way to install Node.js is to visit [*nodejs.org*](https://nodejs.org)
    and download the installer for your operating system.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，安装Node.js最简单的方法是访问[*nodejs.org*](https://nodejs.org)，并下载适用于您操作系统的安装程序。
- en: First, visit [*nodejs.org*](https://nodejs.org) and install the LTS version
    (12.14.1 at the time of writing), following the installation steps for your operating
    system. With Node installed, open your terminal application to verify it is working.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请访问[*nodejs.org*](https://nodejs.org)，安装LTS版本（本文撰写时为12.14.1），按照您操作系统的安装步骤进行操作。安装完成Node后，打开您的终端应用程序以验证其是否正常工作。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What is LTS?
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是LTS？
- en: LTS stands for “long-term support,” meaning that the Node.js Foundation has
    committed to providing support and security updates for that major version number
    (in this case 12.x). The standard support window lasts for three years after the
    version’s initial release. In Node.js, even-numbered releases are LTS versions.
    I recommend using an even-numbered release for application development.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: LTS代表“长期支持”，这意味着Node.js基金会承诺为该主要版本号（在本例中为12.x）提供支持和安全更新。标准支持窗口在该版本初始发布后持续三年。在Node.js中，偶数发布版本是LTS版本。我建议在应用程序开发中使用偶数发布版本。
- en: If you see a version number after typing those commands, congratulations—you’ve
    successfully installed Node and NPM for Windows!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在输入这些命令后看到版本号码，恭喜你——你已成功在Windows上安装了Node和NPM！
- en: MongoDB
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: MongoDB is the database that we will be using while developing our API. Mongo
    is a popular choice for working with Node.js, because it treats our data as JSON
    (JavaScript Object Notation) documents. This means that it’s comfortable for JavaScript
    developers to work with from the get-go.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 是我们在开发 API 时将使用的数据库。Mongo 是使用 Node.js 的热门选择，因为它将我们的数据视为 JSON（JavaScript
    对象表示）文档。这意味着 JavaScript 开发人员可以从一开始就轻松使用它。
- en: Official MongoDB Installation Documentation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 官方 MongoDB 安装文档
- en: The MongoDB documentation offers a regularly updated guide for installing MongoDB
    Community Edition across operating systems. If you run into issues with the installation,
    I recommend consulting the documentation at [*docs.mongodb.com/manual/administration/install-community*](https://docs.mongodb.com/manual/administration/install-community).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 文档提供了跨操作系统安装 MongoDB Community Edition 的定期更新指南。如果在安装过程中遇到问题，建议查阅文档[*docs.mongodb.com/manual/administration/install-community*](https://docs.mongodb.com/manual/administration/install-community)。
- en: Installing and Running MongoDB for macOS
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和运行 MongoDB for macOS
- en: 'To install MongoDB for macOS, first install with Homebrew:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装 MongoDB，首先使用 Homebrew 安装：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To start MongoDB, we can run it as a macOS service:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 MongoDB，我们可以将其作为 macOS 服务运行：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will start the MongoDB service and keep it running as a background process.
    Note that anytime you restart your machine and plan to develop with Mongo, you
    may need to run this command again to restart the MongoDB service. To verify that
    MongoDB has installed and is running, type **`ps -ef | grep mongod`** into your
    terminal. This will list the currently running Mongo processes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 MongoDB 服务并将其作为后台进程运行。请注意，每次重新启动计算机并计划使用 Mongo 进行开发时，您可能需要再次运行此命令以重新启动
    MongoDB 服务。要验证 MongoDB 是否已安装并运行，请在终端中键入**`ps -ef | grep mongod`**。这将列出当前正在运行的
    Mongo 进程。
- en: Installing and Running MongoDB for Windows
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和运行 MongoDB for Windows
- en: To install MongoDB for Windows, first download the installer from the [MongoDB
    Download Center](https://oreil.ly/XNQj6). Once the file has downloaded, run the
    installer following the installation wizard. I recommend choosing the Complete
    setup type, configuring it as a Service. All other values can remain as the defaults.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上安装 MongoDB，请首先从[MongoDB 下载中心](https://oreil.ly/XNQj6)下载安装程序。一旦文件下载完成，按照安装向导运行安装程序。我建议选择完整设置类型，并将其配置为服务。所有其他值可以保持默认设置。
- en: 'Once installation is complete, we may need to create the directory in which
    Mongo will write our data. Within your terminal, run the following commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可能需要创建一个目录，Mongo 将在其中写入我们的数据。在您的终端中运行以下命令：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To verify that MongoDB has installed and start the Mongo service:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证 MongoDB 是否已安装并启动 Mongo 服务：
- en: Locate the Windows Services console.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位 Windows 服务控制台。
- en: Find the MongoDB service.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找 MongoDB 服务。
- en: Right-click the MongoDB service.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 MongoDB 服务。
- en: Click Start.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启动。
- en: Note that anytime you restart your machine and plan to develop with Mongo, you
    may need to restart the MongoDB service.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每次重新启动计算机并计划使用 Mongo 进行开发时，您可能需要重新启动 MongoDB 服务。
- en: Git
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: 'Git is the most popular version control software, allowing you to do things
    like copy code repositories, merge code with others, and create branches of your
    own code that do not impact one another. Git will be helpful for “cloning” this
    book’s sample code repositories, meaning it will allow you to directly copy a
    folder of sample code. Depending on your operating system, Git may already be
    installed. Type the following into your terminal window:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是最流行的版本控制软件，允许您执行诸如复制代码存储库、将代码与其他人合并以及创建不相互影响的自己代码分支等操作。Git 将有助于“克隆”本书示例代码存储库，这意味着它将允许您直接复制一个示例代码文件夹。根据您的操作系统，Git
    可能已经安装。在终端窗口中键入以下内容：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If a number is returned, congrats—you’re all set! If not, visit [*git-scm.com*](https://git-scm.com)
    to install Git, or use Homebrew for macOS. Once you’ve completed the installation
    steps, once again type **`git --version`** into your terminal to verify that it
    has worked.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回了数字，则表示您已准备就绪！如果没有，请访问[*git-scm.com*](https://git-scm.com)安装 Git，或者在 macOS
    上使用 Homebrew。完成安装步骤后，再次在终端中键入**`git --version`**以验证是否已成功。
- en: Expo
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Expo
- en: 'Expo is a toolchain that simplifies the bootstrapping and development of iOS
    and Android projects with React Native. We will need to install the Expo command-line
    tool and, optionally (though recommended), the Expo app for iOS or Android. We’ll
    cover this in more detail in the mobile application portion of the book, but if
    you’re interested in getting a head start, visit [*expo.io*](https://expo.io)
    to learn more. To install the command-line tools, type the following into your
    terminal:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Expo是一个工具链，简化了使用React Native在iOS和Android项目中启动和开发的过程。我们需要安装Expo命令行工具，并可选地（但建议）安装iOS或Android上的Expo应用程序。我们将在本书的移动应用程序部分详细介绍这一点，但如果您有兴趣提前开始，请访问[*expo.io*](https://expo.io)了解更多信息。要安装命令行工具，请在终端中输入以下内容：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the `-g` global flag will make the `expo-cli` tool globally available
    to your machine’s Node.js installation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-g`全局标志将使`expo-cli`工具在您机器上的Node.js安装中全局可用。
- en: To install the Expo mobile application, visit the Apple App Store or Google
    Play Store on your device.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Expo移动应用程序，请访问您设备上的Apple App Store或Google Play Store。
- en: Prettier
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prettier
- en: Prettier is a code formatting tool with support for a number of languages, including
    JavaScript, HTML, CSS, GraphQL, and Markdown. It makes it easy to follow basic
    formatting rules, meaning that when you run the Prettier command, your code is
    automatically formatted to follow a standard set of best practices. Even better,
    you can configure your editor to do this automatically every time you save a file.
    This means that you’ll never again have a project with issues like inconsistent
    spaces and mixed quotes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier是一个代码格式化工具，支持多种语言，包括JavaScript、HTML、CSS、GraphQL和Markdown。它使得遵循基本的格式化规则变得很容易，这意味着当您运行Prettier命令时，您的代码会自动按照一套标准的最佳实践格式化。更好的是，您可以配置您的编辑器，在每次保存文件时自动执行此操作。这意味着您将永远不会再遇到项目中存在不一致空格和混合引号等问题。
- en: 'I recommend installing Prettier globally on your machine and configuring a
    plug-in for your editor. To install Prettier globally, go to your command-line
    and type:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在您的机器上全局安装Prettier并为您的编辑器配置插件。要全局安装Prettier，请转到命令行并键入：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once you’ve installed Prettier, visit [*Prettier.io*](https://prettier.io)
    to find the plug-in for your text editor. With the editor plug-in installed, I
    recommend adding the following settings within your editor’s settings file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Prettier后，请访问[*Prettier.io*](https://prettier.io)为您的文本编辑器找到插件。安装了编辑器插件后，我建议在编辑器的设置文件中添加以下设置：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These settings will automatically format files on save whenever a *.prettierrc*
    configuration file is within the project. The *.prettierrc* file specifies options
    for Prettier to follow. Now whenever that file is present, your editor will automatically
    reformat your code to meet the conventions of the project. Each project within
    this book will include a *.prettierrc* file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目中存在*.prettierrc*配置文件时，这些设置将在保存文件时自动格式化文件。*.prettierrc*文件指定了Prettier要遵循的选项。现在，每当该文件存在时，您的编辑器都会自动重新格式化代码以符合项目的约定。本书中的每个项目都将包括一个*.prettierrc*文件。
- en: ESLint
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESLint
- en: ESLint is a code linter for JavaScript. A linter differs from a formatter, such
    as Prettier, in that a linter also checks for code quality rules, such as unused
    variables, infinite loops, and unreachable code that falls after a return. As
    with Prettier, I recommend installing the ESLint plug-in for your favorite text
    editor. This will alert you to errors in real time as you write your code. You
    can find a list of editor plug-ins on the [ESLint website](https://oreil.ly/H3Zao).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint是用于JavaScript的代码检查工具。与Prettier等格式化工具不同，代码检查工具还会检查代码质量规则，如未使用的变量、无限循环和return后面不可达的代码。与Prettier一样，我建议为您喜欢的文本编辑器安装ESLint插件。这将在您编写代码时实时警告您的错误。您可以在[ESLint网站](https://oreil.ly/H3Zao)找到一系列编辑器插件。
- en: Similar to Prettier, projects can specify the ESLint rules they would like to
    follow within an *.eslintrc* file. This provides project maintainers with fine-grained
    control over their code preferences and a means to automatically enforce coding
    standards. Each of the projects within this book will include a helpful but permissive
    set of ESLint rules, aimed at helping you to avoid common pitfalls.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于Prettier，项目可以在*.eslintrc*文件中指定要遵循的ESLint规则。这为项目维护者提供了对其代码偏好的细粒度控制，并自动执行编码标准的手段。本书中的每个项目都将包括一组有用但宽容的ESLint规则，旨在帮助您避免常见的陷阱。
- en: Making Things Look Nice
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 美观化
- en: This is optional, but I’ve found that I enjoy programming just a bit more when
    I find my setup aesthetically pleasing. I can’t help it; I have a degree in the
    arts. Take some time and test out different color themes and typefaces. Personally,
    I’ve grown to love the [Dracula Theme](https://draculatheme.com), which is a color
    theme available for nearly every text editor and terminal, along with Adobe’s
    [Source Code Pro typeface](https://oreil.ly/PktVn).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可选的，但我发现当我发现我的设置在美学上更加令人愉悦时，我更喜欢编程。我控制不住；我有艺术学位。花些时间测试不同的颜色主题和字体。就我个人而言，我已经喜欢上了[德拉库拉主题](https://draculatheme.com)，这是几乎每个文本编辑器和终端都可以使用的颜色主题，以及
    Adobe 的[源代码 Pro 字体](https://oreil.ly/PktVn)。
- en: Conclusion
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we’ve set up a working and flexible JavaScript development environment
    on our computer. One of the great joys of programming is personalizing your environment.
    I encourage you to experiment with the themes, colors, and tools that you use
    to make this environment your own. In the next section of the book, we will put
    this environment to work by developing our API application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在计算机上建立了一个工作灵活的 JavaScript 开发环境。编程的一大乐趣之一就是个性化你的环境。我鼓励你尝试使用不同的主题、颜色和工具，让这个环境更符合你的喜好。在本书的下一节中，我们将通过开发
    API 应用程序来利用这个环境。
