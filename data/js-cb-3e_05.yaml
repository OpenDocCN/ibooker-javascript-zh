- en: Chapter 4\. Dates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章\. 日期
- en: JavaScript has surprisingly capable date features, which are wrapped in the
    somewhat old-fashioned `Date` object. As you’ll see, the `Date` object has quirks
    and hidden traps—like the way it counts months starting at 0 and parses year information
    differently depending on the locale settings of the current computer. But once
    you learn to navigate these stumbling blocks, you’ll be able to accomplish a number
    of common, useful operations, like counting the days between two dates, formatting
    dates for display, and timing events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 具有出乎意料的强大日期功能，这些功能包装在有些老式的 `Date` 对象中。正如你将会看到的，`Date` 对象有其怪癖和隐藏陷阱——比如它从0开始计数月份，并根据当前计算机的地区设置不同解析年份信息。但一旦你学会如何应对这些障碍，你将能够完成许多常见而有用的操作，比如计算两个日期之间的天数，为显示格式化日期，以及计时事件。
- en: Getting the Current Date and Time
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取当前日期和时间
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Problem
- en: You need to get the current date or time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要获取当前日期或时间。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Solution
- en: 'JavaScript includes a `Date` object that provides good support for manipulating
    date information (and more modest support for performing date calculations). When
    you create a new `Date` object, it is automatically populated with the current
    day and time, down to the nearest millisecond:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 包含一个 `Date` 对象，提供了良好的支持，用于操作日期信息（以及较为适度的日期计算支持）。当你创建一个新的 `Date` 对象时，它会自动填充当前的日期和时间，精确到最近的毫秒：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now it’s simply a matter of extracting the information you want from your `Date`
    object. The `Date` object has a long list of methods that can help you in this
    task. [Table 4-1](#date_methods) lists the most important methods. Notice that
    the counting used by different methods isn’t always consistent. Months and weekdays
    are numbered starting at 0, while days are numbered starting at 1.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只需从你的 `Date` 对象中提取你想要的信息。`Date` 对象有一长串方法可以帮助你完成这个任务。[表 4-1](#date_methods)
    列出了最重要的方法。请注意，不同方法使用的计数并不总是一致的。月份和星期的编号从0开始，而日期从1开始编号。
- en: Table 4-1\. Date methods for getting pieces of date information
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-1\. 获取日期信息的日期方法
- en: '| Method | Gets | Possible values |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 获取 | 可能的值 |'
- en: '| --- | --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `getFullYear()` | The year | A four-digit number like 2021 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `getFullYear()` | 年份 | 像 2021 这样的四位数字 |'
- en: '| `getMonth()` | The month number | 0 to 11, where 0 represents January |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `getMonth()` | 月份编号 | 0 到 11，其中 0 表示一月 |'
- en: '| `getDate()` | The day of the month | 1 to 31 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `getDate()` | 月份中的某一天 | 1 到 31 |'
- en: '| `getDay()` | The day of the week | 0 to 6, where 0 represents Sunday |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `getDay()` | 星期几 | 0 到 6，其中 0 表示星期日 |'
- en: '| `getHours()` | The hour of the day | 0 to 23 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `getHours()` | 一天中的小时 | 0 到 23 |'
- en: '| `getMinutes()` | The minute | 0 to 59 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `getMinutes()` | 分钟数 | 0 到 59 |'
- en: '| `getSeconds()` | The seconds | 0 to 59 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `getSeconds()` | 秒数 | 0 到 59 |'
- en: '| `getMilliseconds()` | The milliseconds (one thousandth seconds) | 0 to 999
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `getMilliseconds()` | 毫秒数（千分之一秒） | 0 到 999 |'
- en: 'Here’s an example that displays some basic information about the current date:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个显示当前日期一些基本信息的示例：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `Date` methods listed in [Table 4-1](#date_methods) exist in two versions.
    The versions shown in the table use the local time settings. The second set of
    methods adds the prefix *UTC* (as in `getUTCMonth()` and `getUTCSeconds()`). They
    use *Coordinated Universal Time*, the global time standard. If you need to compare
    dates from different time zones (or ones that have different conventions for following
    *daylight saving time*), you must use the UTC methods. Internally, the `Date`
    object always uses UTC.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-1](#date_methods) 中列出的 `Date` 方法存在两个版本。表中显示的版本使用本地时间设置。第二组方法在方法名称前加上前缀
    *UTC*（如 `getUTCMonth()` 和 `getUTCSeconds()`）。它们使用 *协调世界时*，全球时间标准。如果你需要比较来自不同时区的日期（或者遵循不同夏令时约定的日期），你必须使用
    UTC 方法。在内部，`Date` 对象始终使用 UTC。'
- en: Discussion
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The `Date()` object has several constructors. The empty constructor creates
    a `Date` object for the current date and time, as you’ve just seen. But you can
    also create a `Date` object for a different date by specifying the year, month,
    and day, like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date()` 对象有几个构造函数。空构造函数创建一个当前日期和时间的 `Date` 对象，正如你刚刚看到的。但你也可以通过指定年、月和日来创建一个不同日期的
    `Date` 对象，就像这样：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once again, be wary of the inconsistent counting (months start at 0, while days
    start at 1). That means the `anotherDay` variable above represents February 10,
    *not* January 10.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，要注意不一致的计数方式（月份从 0 开始，而日期从 1 开始）。这意味着上面的 `anotherDay` 变量代表的是 2 月 10 日，而不是
    1 月 10 日。
- en: 'Optionally, you can tack on up to four more parameters to the `Date` constructor
    for hours, minutes, seconds, and milliseconds:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以为 `Date` 构造函数添加最多四个参数，分别为小时、分钟、秒钟和毫秒：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you’ll see in this chapter, JavaScript’s built-in `Date` object has some
    well-known limitations and a few quirks. If you need to perform extensive date
    operations in your code, such as calculating date ranges, parsing different types
    of date strings, or shifting dates between time zones, the best practice is to
    use a tested third-party date library, such as [*day.js*](https://github.com/iamkun/dayjs)
    or [*date-fns*](https://date-fns.org).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章所述，JavaScript 内置的 `Date` 对象有一些众所周知的局限性和一些怪异之处。如果您需要在代码中执行广泛的日期操作，例如计算日期范围、解析不同类型的日期字符串或在时区之间移动日期，则最佳实践是使用经过测试的第三方日期库，例如
    [*day.js*](https://github.com/iamkun/dayjs) 或 [*date-fns*](https://date-fns.org)。
- en: See Also
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Once you have a date, you may want to use it in date calculations, as explained
    in [“Comparing Dates and Testing Dates for Equality”](#comparing_dates). You may
    also be interested in turning a date into a formatted string ([“Formatting a Date
    Value as a String”](#convert_date_to_string)), or a date-containing string into
    a proper `Date` object ([“Converting a String to a Date”](#convert_string_to_date)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了日期，您可能希望在日期计算中使用它，如 [“比较日期和测试日期是否相等”](#comparing_dates) 中所述。您可能还有兴趣将日期转换为格式化的字符串（[“将日期值格式化为字符串”](#convert_date_to_string)）或将包含日期的字符串转换为正确的
    `Date` 对象（[“将字符串转换为日期”](#convert_string_to_date)）。
- en: Converting a String to a Date
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串转换为日期
- en: Problem
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have date information in a string, but you want to convert it to a `Date`
    object so you can manipulate it in your code or perform date calculations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个日期信息的字符串，但您希望将其转换为 `Date` 对象，以便在代码中操纵它或执行日期计算。
- en: Solution
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'If you’re fortunate, you’ll have your date string in the ISO 8601 standard
    timestamp format (like “2021-12-17T03:24:00Z”), which you can pass directly to
    the `Date` constructor:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您很幸运，您的日期字符串符合 ISO 8601 标准时间戳格式（例如 “2021-12-17T03:24:00Z”），您可以直接将其传递给 `Date`
    构造函数：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The *T* in this string separates the the date from the time, and the *Z* at
    the end of the string indicates it’s a universal time using the UTC time zone,
    which is the best way to ensure consistency on different computers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此字符串中的 *T* 将日期与时间分隔开，字符串末尾的 *Z* 表示它是使用 UTC 时区的通用时间，这是确保在不同计算机上保持一致性的最佳方式。
- en: There are other formats that the `Date` constructor (and the `Date.parse()`
    method) may recognize. However, they are now strongly discouraged, because their
    implementations are not consistent across different browsers. They may appear
    to work in a test example, but they run into trouble when different browsers apply
    different locale-specific settings, like daylight saving time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date` 构造函数（以及 `Date.parse()` 方法）可能识别其他格式。但是，现在强烈建议避免使用这些格式，因为它们在不同浏览器中的实现不一致。它们在测试示例中可能运行正常，但是在不同浏览器应用不同的区域设置（例如夏令时）时可能会遇到问题。'
- en: If your date isn’t in the ISO 8601 format, you’ll need to take a manual approach.
    Extract the different date components from your string, then use those with the
    `Date` constructor. You can make good use of `String` methods like `split()`,
    `slice()`, and `indexOf()`, which are explored in more detail in the recipes in
    [Chapter 2](ch02.html#ch02).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的日期不是 ISO 8601 格式，您需要采取手动方法。从字符串中提取不同的日期组件，然后与 `Date` 构造函数一起使用。您可以充分利用像 `split()`、`slice()`
    和 `indexOf()` 这样的 `String` 方法，这些方法在 [第 2 章](ch02.html#ch02) 的示例中有更详细的讨论。
- en: 'For example, if you have a date string in the format *mm/dd/yyyy*, you can
    use code like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个格式为 *mm/dd/yyyy* 的日期字符串，您可以使用以下代码：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `Date` object constructor doesn’t perform much validation. Check your input
    before you create a `Date` object, because the `Date` object may accept values
    that you would not. For example, it will allow day numbers to roll over (in other
    words, if you set 40 as your day number, JavaScript will just move your date into
    the next month). The `Date` constructor will also accept strings that may be parsed
    inconsistently on different computers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date` 对象构造函数并不执行太多的验证。在创建 `Date` 对象之前，请检查您的输入，因为 `Date` 对象可能接受您不希望的值。例如，它允许日期数字滚动（换句话说，如果您将
    40 设置为您的日期数字，JavaScript 将会将您的日期移动到下个月）。`Date` 构造函数还会接受可能在不同计算机上解析不一致的字符串。'
- en: 'If you attempt to create a `Date` object with a nonnumeric string, you’ll receive
    an “Invalid Date” object. You can test for this condition using `isNaN()`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试用非数字字符串创建一个`Date`对象，你将收到一个“Invalid Date”对象。你可以使用`isNaN()`来测试这种情况：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This technique works because `Date` objects are actually *numbers* behind the
    scenes, a fact explored in [“Comparing Dates and Testing Dates for Equality”](#comparing_dates).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术有效，因为`Date`对象实际上是幕后的*数字*，这一点在[“比较日期和测试日期的相等性”](#comparing_dates)中有所探讨。
- en: See Also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Formatting a Date Value as a String”](#convert_date_to_string) explains the
    reverse operation—taking a `Date` object and converting it to a string.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[“将日期值格式化为字符串”](#convert_date_to_string)解释了相反的操作——将`Date`对象转换为字符串。'
- en: Adding Days to a Date
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给日期添加天数
- en: Problem
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to find a date that’s a specific number of days before or after another
    date.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你想找到在另一个日期之前或之后特定天数的日期。
- en: Solution
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Find the current day number with `Date.getDate()`, then change it with `Date.setDate()`.
    The `Date` object is smart enough to roll over to the next month or year as needed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Date.getDate()`找到当前日期号码，然后用`Date.setDate()`更改它。`Date`对象足够智能，可以根据需要滚动到下一个月或年。
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `setDate()` method isn’t limited to positive integers. You can use a negative
    number to shift a date backward. You may want to use the other *setXxx()* methods
    to modify a date, like `setMonths()` to move it forward or backward one month
    at a time, `setHours()` to move it by hours, and so on. All these methods roll
    over just like `setDate()`, so adding 48 hours will move a date exactly two days
    forward.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDate()`方法不仅限于正整数。你可以使用负数来向后移动日期。你可能想使用其他*setXxx()*方法来修改日期，比如`setMonths()`每次向前或向后移动一个月，`setHours()`每小时移动，等等。所有这些方法都会像`setDate()`一样滚动，因此添加48小时将使日期向前移动两天。'
- en: 'The `Date` object is *mutable*, which makes its behavior look distinctly old-fashioned.
    In more modern JavaScript libraries, you would expect a method like `setDate()`
    to return a new `Date` object. But what it actually does is change the *current*
    `Date` object. This happens even if you declare a date with `const`. (The `const`
    prevents you from setting your variable to point to a different `Date` object,
    but it doesn’t stop you from altering the currently referenced `Date` object.)
    To safely avoid potential problems, you can clone your date before operating on
    it. Just use `Date.getTime()` to get the underlying millisecond count that represents
    your date and use it to create a new object:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date`对象是*可变的*，这使得其行为看起来相当老式。在更现代的JavaScript库中，你期望像`setDate()`这样的方法返回一个新的`Date`对象。但它实际上改变的是*当前*的`Date`对象。即使你用`const`声明了一个日期，这种情况仍然会发生。（`const`阻止你将变量指向不同的`Date`对象，但不能阻止你修改当前引用的`Date`对象。）为了安全地避免潜在的问题，你可以在操作日期之前克隆它。只需使用`Date.getTime()`获取表示日期的毫秒数，并用它创建一个新对象：'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See Also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Calculating the Time Elapsed Between Two Dates”](#calculating_time_between_dates)
    shows how to calculate the time period between two dates.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[“计算两个日期之间经过的时间”](#calculating_time_between_dates)展示了如何计算两个日期之间的时间段。'
- en: Comparing Dates and Testing Dates for Equality
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较日期和测试日期的相等性
- en: Problem
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to see if two `Date` objects represent the same calendar date, or determine
    if one date is before another.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要查看两个`Date`对象是否表示相同的日历日期，或者确定一个日期是否在另一个日期之前。
- en: Solution
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'You can compare `Date` objects just like you compare numbers, with the `<`
    and `>` operators:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像比较数字一样比较`Date`对象，使用`<`和`>`运算符：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Internally, dates are stored as numbers. When you use the `<` or `>` operator,
    they are automatically converted to numbers and compared. When you run this code,
    you are comparing the millisecond value for `oldDay` (943,074,000,000) to the
    millisecond value for `newerDay` (1,612,155,600,000).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，日期被存储为数字。当你使用`<`或`>`运算符时，它们会自动转换为数字并进行比较。当你运行此代码时，你正在比较`oldDay`（943,074,000,000）的毫秒值与`newerDay`（1,612,155,600,000）的毫秒值。
- en: The equality operator (`=`) works differently. It tests the object reference,
    not the object *content*. (In other words, two `Date` objects are equal only if
    you are comparing two variables that point to the same instance.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 等号运算符（`=`）的工作方式不同。它测试对象的引用，而不是对象的*内容*。（换句话说，只有当你比较指向同一实例的两个变量时，两个`Date`对象才相等。）
- en: 'If you want to test if two `Date` objects represent the same moment in time,
    you need to convert them to numbers yourself. The clearest way to do this is by
    calling `Date.getTime()`, which returns the millisecond number for a date:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望测试两个`Date`对象是否表示同一时刻，您需要自己将它们转换为数字。最清晰的方法是调用`Date.getTime()`，它返回日期的毫秒数：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Despite its name, `getTime()` does not return *just* the time. It returns the
    millisecond number that is an exact representation of that `Date` object’s date
    *and* time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其名称为`getTime()`，但它并不仅仅返回时间。它返回的是毫秒数，准确表示该`Date`对象的日期和时间。
- en: Discussion
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Internally, a `Date` object is just an integer. Specifically, it’s the number
    of milliseconds that have elapsed since January 1, 1970\. The millisecond number
    can be negative or positive, which means that the `Date` object can represent
    dates from the distant past (roughly 271,821 BCE) to the distant future (year
    275,760 CE). You can get the millisecond number by calling `Date.getTime()`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，`Date`对象只是一个整数。具体来说，它是自1970年1月1日以来经过的毫秒数。毫秒数可以是负数或正数，这意味着`Date`对象可以表示从遥远的过去（大约公元前271,821年）到遥远的未来（公元275,760年）的日期。您可以通过调用`Date.getTime()`获取毫秒数。
- en: Two `Date` objects are only the same if they match exactly, down to the millisecond.
    Two `Date` objects that represent the same date but have a different time component
    won’t match. This can be a problem, because you may not realize that your `Date`
    object contains time information. This is a common issue when creating a `Date`
    object for the current day ([“Getting the Current Date and Time”](#get_current_date_and_time)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 两个`Date`对象仅在精确匹配（毫秒级别）时才相同。即使两个`Date`对象表示同一日期但具有不同的时间组件，它们也不会匹配。这可能是个问题，因为您可能没有意识到您的`Date`对象包含时间信息。这在为当前日期创建`Date`对象时是一个常见问题（[“获取当前日期和时间”](#get_current_date_and_time)）。
- en: 'To avoid this issue, you can remove the time information using `Date.setHours()`.
    Despite its name, the `setHours()` method accepts up to four parameters, allowing
    you to set the hour, minute, second, and millisecond. To create a date-only `Date`
    object, set all these components to 0:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要避免这个问题，您可以使用`Date.setHours()`来移除时间信息。尽管它的名称是`setHours()`，但该方法最多接受四个参数，允许您设置小时、分钟、秒和毫秒。为了创建一个仅包含日期的`Date`对象，将所有这些组件都设置为0：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See Also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: For more math with dates, see Recipes and .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于日期的数学内容，请参见Recipes and 。
- en: Calculating the Time Elapsed Between Two Dates
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算两个日期之间的经过时间
- en: Problem
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You need to calculate how many days, hours, or minutes separate two dates.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要计算两个日期之间相隔多少天、小时或分钟。
- en: Solution
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Because dates are numbers (in milliseconds, see [“Comparing Dates and Testing
    Dates for Equality”](#comparing_dates)), calculations with them are relatively
    straightforward. If you subtract one date from another, you get the number of
    milliseconds in between:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因为日期是数字（以毫秒为单位，请参见[“比较日期和测试日期是否相等”](#comparing_dates)），所以与它们进行计算相对简单。如果从一个日期减去另一个日期，您将得到它们之间的毫秒数：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Unless you’re timing short operations for performance testing, the number of
    milliseconds isn’t a particularly useful unit. It’s up to you to divide this number
    to convert it into a more meaningful number of minutes, hours, or days:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您正在为性能测试计时短操作，否则毫秒数不是特别有用的单位。您需要将此数字除以适当的值，以将其转换为更有意义的分钟数、小时数或天数：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Even though this calculation should work out to an exact number of days (because
    neither date has any time information), you still need to use `Math.round()` on
    the result to deal with the rounding errors inherent to floating-point math (see
    [“Preserving Accuracy in Decimal Values”](ch03.html#preserving_decimal_accuracy)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此计算应该得出确切的天数（因为两个日期都没有任何时间信息），但仍需在结果上使用`Math.round()`来处理浮点数运算中的舍入误差（请参见[“保留小数值的准确性”](ch03.html#preserving_decimal_accuracy)）。
- en: Discussion
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'There are two pitfalls to be aware of when performing date calculations:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行日期计算时，有两个需要注意的陷阱：
- en: Dates may contain time information. (For example, a new `Date` object created
    for the current day is accurate up to the millisecond it was created.) Before
    you count days, use `setHours()` to remove the time component, as explained in
    [“Comparing Dates and Testing Dates for Equality”](#comparing_dates).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期可能包含时间信息。（例如，为当前日期创建的新`Date`对象在其创建的毫秒级别上是准确的。）在计算天数之前，请使用`setHours()`来移除时间组件，正如[“比较日期和测试日期是否相等”](#comparing_dates)中所解释的那样。
- en: Calculations with two dates only make sense if the dates are in the same time
    zone. Ideally, that means you are comparing two local dates or two dates in the
    UTC standard. It may seem straightforward enough to convert dates from one time
    zone to another, but often there are unexpected edge cases with daylight saving
    time.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在日期处于相同时区时，两个日期的计算才有意义。理想情况下，这意味着您比较两个本地日期或两个UTC标准日期。从一个时区转换日期到另一个时区可能看起来很简单，但通常会出现关于夏令时的意外边缘情况。
- en: There is a tentative replacement for the aging `Date` object. The [`Temporal`
    object](https://oreil.ly/BAbB2) aims to improve calculations with local dates
    and different time zones. In the meantime, if your date needs go beyond the `Date`
    object, you can experiment with a third-party library for manipulating the date.
    Both [*day.js*](https://github.com/iamkun/dayjs) and [*date-fns*](https://date-fns.org)
    are popular choices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于老旧的`Date`对象，有一个暂定的替代方案。[`Temporal`对象](https://oreil.ly/BAbB2)旨在改进使用本地日期和不同时区的计算。与此同时，如果您的日期需求超出了`Date`对象，可以尝试使用第三方库来操作日期。[*day.js*](https://github.com/iamkun/dayjs)和[*date-fns*](https://date-fns.org)都是流行的选择。
- en: 'And if you want to use tiny time calculations for profiling performance, the
    `Date` object is not the best choice. Instead, use the `Performance` object, which
    is available in a browser environment through the built-in `window.performance`
    property. It lets you capture a high-resolution timestamp that’s accurate to *fractions*
    of a millisecond, if supported by the system. Here’s an example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要使用微小的时间计算来分析性能，请注意`Date`对象不是最佳选择。相反，请使用`Performance`对象，在浏览器环境中通过内置的`window.performance`属性可用。它允许您捕获高分辨率时间戳，如果系统支持，精度可以达到*毫秒的分数*。以下是一个示例：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The result (`elapsedMilliseconds`) is not the nearest whole millisecond, but
    the most accurate fractional millisecond count that’s supported on the current
    hardware.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 结果（`elapsedMilliseconds`）不是最近的整毫秒，而是当前硬件支持的最精确的分数毫秒计数。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Although Node doesn’t provide the `Performance` object, it has its own mechanism
    for retrieving high-resolution time information. You use its global `process`
    object, which provides the `process.hrtime.bigint()` method. It returns a timing
    readout in *nanoseconds*, or billionths of a second. Simply subtract one `process.hrtime.bigint()`
    readout from another to find the time difference in nanoseconds. (Each millisecond
    is 1,000,000 nanoseconds.)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Node不提供`Performance`对象，但它具有自己的机制来检索高分辨率时间信息。您可以使用其全局`process`对象，该对象提供`process.hrtime.bigint()`方法。它返回以*纳秒*或十亿分之一秒为单位的时间读数。只需从另一个`process.hrtime.bigint()`读数中减去一个读数，即可找到纳秒中的时间差异。（每毫秒为1,000,000纳秒。）
- en: Because the nanosecond count is obviously going to be a very large number, you
    need to use the `BigInt` data type to hold it, as described in [“Manipulating
    Very Large Numbers with BigInt”](ch03.html#using_bigint).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因为纳秒计数显然会是一个非常大的数字，您需要使用`BigInt`数据类型来保存它，如[“使用BigInt操作非常大的数字”](ch03.html#using_bigint)中所述。
- en: See Also
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Adding Days to a Date”](#adding_days_to_date) shows how to move a date forward
    or backward by adding to it or subtracting from it.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[“添加日期”](#adding_days_to_date)显示如何通过增加或减少日期来向前或向后移动日期。'
- en: Formatting a Date Value as a String
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将日期值格式化为字符串
- en: Problem
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a formatted string based on a `Date` object.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您想基于`Date`对象创建格式化的字符串。
- en: Solution
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: If you print a date with `console.log()`, you’ll get the date’s nicely formatted
    string representation, like “Wed Oct 21 2020 22:17:03 GMT-0400 (Eastern Daylight
    Time).” This representation is created by the `DateTime.toString()` method. It’s
    a standardized, nonlocale-specific date string that’s defined in the [JavaScript
    standard](https://oreil.ly/S0lMb).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`console.log()`打印日期，您将获得日期的格式化字符串表示，例如“Wed Oct 21 2020 22:17:03 GMT-0400
    (Eastern Daylight Time)”。此表示是由`DateTime.toString()`方法创建的标准化、非特定于区域设置的日期字符串，定义在[JavaScript标准](https://oreil.ly/S0lMb)中。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Internally, the `Date` object stores its time information as a UTC time, with
    no additional time zone information. When you convert a `Date` to a string, that
    UTC time is converted into a locale-specific time for the current time zone, as
    set on the computer or device where your code is running.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，`Date`对象将其时间信息存储为UTC时间，没有附加的时区信息。当您将`Date`转换为字符串时，该UTC时间将转换为当前计算机或设备上设置的特定于区域设置的时间。
- en: 'If you want your date string formatted differently, you could call one of the
    other prebuilt `Date` methods demonstrated here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望日期字符串格式不同，可以调用此处演示的其他预定义`Date`方法之一：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Keep in mind that if you use `toLocaleString()` or `toLocaleTime()`, your string
    representation is based on the browser implementation and the settings of the
    current computer. Do not assume consistency!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果使用`toLocaleString()`或`toLocaleTime()`，您的字符串表示基于浏览器实现和当前计算机的设置。不要假设一致性！
- en: Discussion
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: There are many possible ways to turn date information into a string. For display
    purposes, the *toXxxString()* methods work well. But if you want something more
    specific or fine-tuned, you may need to take control of the `Date` object yourself.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将日期信息转换为字符串有许多可能的方法。对于显示目的，*toXxxString()*方法效果很好。但是，如果您需要更具体或更精细调整的内容，可能需要自己控制`Date`对象。
- en: 'If you want to go beyond the standard formatting methods, there are two approaches
    you can take. You can use the *getXxx()* methods described in [“Getting the Current
    Date and Time”](#get_current_date_and_time) to extract individual time components
    from a date, and then concatenate those into the exact string you need. Here’s
    an example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望超越标准格式化方法，有两种方法可以尝试。您可以使用[“获取当前日期和时间”](#get_current_date_and_time)中描述的*getXxx()*方法从日期中提取单独的时间组件，然后将其连接成您需要的精确字符串。以下是一个示例：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This approach is extremely flexible, but it forces you to write your own date
    boilerplate, which isn’t ideal because it adds complexity and creates room for
    new bugs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法非常灵活，但它强制您编写自己的日期样板，这并不理想，因为它增加了复杂性并为新错误创造了空间。
- en: 'If you want to use a standard format for a specific locale, life is a bit easier.
    You can use the `Intl.DateTimeFormat` object to perform the conversion. Here are
    three examples that use locale strings for the US, the UK, and Japan:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为特定区域设置使用标准格式，那么情况会变得简单一些。您可以使用`Intl.DateTimeFormat`对象进行转换。以下是三个示例，使用了美国、英国和日本的区域字符串：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'All of these are date-only strings, but there are many other options you can
    set when you create the `Intl.DateTimeFormat()` object. Here’s just one example
    that adds the day of the week and month to the string, in German:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是仅包含日期的字符串，但是在创建`Intl.DateTimeFormat()`对象时，您可以设置许多其他选项。以下是一个示例，将星期几和月份添加到德语字符串中：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'These options also give you the ability to add time information to your string
    with the `hour`, `minute`, and `second` properties, which can be set to:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项还允许您通过`hour`、`minute`和`second`属性向字符串添加时间信息，可以设置为：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See Also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[“Converting a Numeric Value to a Formatted String”](ch02.html#converting_number_to_string)
    introduced the `Intl` object and the concept of locale strings, which identify
    different geographic and cultural regions. For a comprehensive explanation of
    the 21 options the `Intl.DateTimeFormat` object supports, see the [MDN reference](https://oreil.ly/at36f).
    It’s worth noting that a few of these details are implementation dependent and
    may not be present on all browsers. (Examples include the `timeStyle`, `dateStyle`,
    and `timeZone` properties, which we haven’t discussed here.) As always, for complex
    `Date` manipulation, consider a third-party library.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[“将数值转换为格式化字符串”](ch02.html#converting_number_to_string)介绍了`Intl`对象和区域字符串的概念，这些字符串标识不同的地理和文化区域。要详细了解`Intl.DateTimeFormat`对象支持的21个选项，请参阅[MDN参考文档](https://oreil.ly/at36f)。值得注意的是，其中一些细节取决于实现，并非所有浏览器都支持（例如`timeStyle`、`dateStyle`和`timeZone`属性，在此处我们没有讨论）。对于复杂的日期操作，始终考虑使用第三方库。'
