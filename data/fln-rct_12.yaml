- en: Chapter 11\. Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。结论
- en: 'If you’ve made it this far, thank you for joining me on this journey through
    the React ecosystem. I hope you’ve enjoyed this adventure as much as I have. In
    our time together, we pursued a deeper understanding of React, exploring its core
    principles, inner workings, and broader ecosystem. Assuming we already know how
    to *use* React, we focused on understanding its mechanism: how it actually works—with
    the end goal being practical takeaways we can use in our engineering careers going
    forward.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经走到这一步，感谢你加入我一起探索React生态系统的旅程。希望你和我一样享受这次冒险。在我们在一起的时间里，我们追求了对React更深入的理解，探索了它的核心原则、内部工作机制和更广泛的生态系统。假设我们已经知道如何*使用*React，我们专注于理解它的机制：它实际上是如何工作的——最终目标是我们可以在未来的工程生涯中应用的实用经验。
- en: Takeaways
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收获
- en: 'Let’s outline some of those takeaways now:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们概括一些收获：
- en: Rethink best practices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 重新思考最佳实践。
- en: Sometimes, we need to rethink everything. React’s introduction of JSX and the
    virtual DOM was a radical departure from the status quo. It challenged the established
    conventions and forced us to rethink how we build interfaces. This willingness
    to challenge the status quo and reimagine the way things are done is a hallmark
    of React’s philosophy, and thus as engineers, we should always be willing to challenge
    the status quo and rethink the way things are done.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要重新思考一切。React引入JSX和虚拟DOM是对现状的激进改变。它挑战了已经建立的传统，迫使我们重新思考如何构建界面。挑战现状并重新想象事物如何完成的意愿是React哲学的标志，因此作为工程师，我们应该始终愿意挑战现状并重新思考事物的完成方式。
- en: Fully understand how JSX works.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 完全理解JSX的工作原理。
- en: 'If we’re limited by a programming language—as in, if we can’t have HTML-style
    syntax in JavaScript—we as engineers have the power to change that by creating
    a new language. This is what JSX is: a new language that compiles down to JavaScript.
    We can do this too now that we fully understand how JSX works and some compiler
    theory.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们受限于一种编程语言——比如说，如果我们不能在JavaScript中使用HTML样式的语法——我们作为工程师有权力通过创建一种新语言来改变这一点。这就是JSX的作用：一种编译成JavaScript的新语言。现在我们完全理解了JSX的工作原理和一些编译器理论，我们也可以做到这一点。
- en: Constraints are not a bad thing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 约束并不是一件坏事。
- en: Constraints are the mother of invention. React is fundamentally an innovation
    born out of the constraints of the web, where reading `innerWidth` of an element
    causes a reflow, and where different browsers have different APIs for events.
    The takeaway here is that constraints are not a bad thing. They force us to think
    outside the box and come up with creative solutions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 约束是创新之母。React基本上是在Web的约束下诞生的创新，其中读取元素的`innerWidth`会导致重新布局，不同的浏览器有不同的事件API。这里的要点是，约束并不是一件坏事。它们迫使我们跳出固有思维，提出创造性解决方案。
- en: Declarative abstractions unlock powerful capabilities.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性抽象解锁了强大的能力。
- en: By decoupling the expression of JSX from the reconciler, React pioneered a “write
    once, run anywhere” approach to UI development, allowing us to use the same code
    to render to the DOM, the server, or even a native platform. This is a powerful
    capability that we can leverage in our own projects as we consider separating
    concerns and landing on the right level of abstraction.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将JSX的表达与协调器分离，React开创了一种“一次编写，随处运行”的UI开发方法，使我们能够使用相同的代码来渲染到DOM、服务器，甚至原生平台。这是一个强大的能力，我们可以在自己的项目中利用这一点，考虑分离关注点并确定正确的抽象级别。
- en: Unlocking powerful capabilities allows us to build more flexible and maintainable
    applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 解锁强大的能力使我们能够构建更灵活、易维护的应用程序。
- en: We uncovered a number of patterns, from higher-order components to render props
    to hooks to context. These patterns are powerful tools that we can use to abstract
    logic, share behavior across components, and manage state more effectively. While
    these patterns introduce complexity, they also unlock powerful capabilities, allowing
    us to build more flexible and maintainable applications. Moreover, like HOCs,
    these patterns predate React. What patterns are we using today that will be the
    foundation of the next generation of UI frameworks? What patterns can we invent
    that will make our lives easier?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们揭示了许多模式，从高阶组件到渲染属性到钩子到上下文。这些模式是我们可以用来抽象逻辑、在组件之间共享行为、更有效地管理状态的强大工具。虽然这些模式引入了复杂性，但它们也解锁了强大的能力，使我们能够构建更灵活、易维护的应用程序。此外，像HOCs一样，这些模式早在React之前就存在。我们今天正在使用哪些模式，它们将成为下一代UI框架的基础？我们可以发明哪些模式使我们的生活更轻松？
- en: Powerful capabilities can be leveraged in our own projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们自己的项目中利用强大的能力。
- en: We learned that when we go beyond the browser, through to the server, a slew
    of new possibilities open up. We can render our React components on the server,
    use the browser’s native fetch API to load data, and we can use native HTML forms
    for user inputs. These are powerful capabilities that we can leverage in our own
    projects as we consider the trade-offs of server-side rendering and the benefits
    of leveraging the web’s fundamentals.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，当我们超越浏览器，通过到服务器，一系列新的可能性会展现。我们可以在服务器上渲染我们的 React 组件，使用浏览器的原生 fetch API
    加载数据，并且我们可以使用原生 HTML 表单进行用户输入。这些都是我们可以在我们自己的项目中利用的强大能力，考虑到服务器端渲染的权衡和利用 web 基础知识的好处。
- en: The benefits of improving user experience.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 改善用户体验的好处。
- en: We now are empowered to take full advantage of React’s concurrent features,
    such as `useTransition`, to improve user experience by deferring work to be done
    “in an alternate universe” and then committing the changes to the DOM when they’re
    ready. This is a powerful capability that we can leverage in our own projects
    as we consider the trade-offs of deferring work and the benefits of improving
    user experience.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以充分利用 React 的并发特性，比如`useTransition`，通过将工作推迟到“另一个宇宙”来改善用户体验，然后在准备就绪时将更改提交到
    DOM。这是我们可以在我们自己的项目中利用的强大能力，考虑到推迟工作的权衡和改善用户体验的好处。
- en: All this is done in a language that we know and understand.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是用我们知道和理解的语言完成的。
- en: 'We explored the intricacies between Next.js and Remix through the lens of creating
    our own framework, ultimately recognizing that all of this is just JavaScript
    with some servers and things: we can build our own framework, too, given enough
    time and resources. While we’re thankful for the work of the authors, we can also
    be empowered that all of this is done in a language that we know and understand.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建我们自己的框架的视角深入探讨了 Next.js 和 Remix 之间的复杂性，最终认识到这一切只是一些带有服务器和其他东西的 JavaScript：我们也可以根据充足的时间和资源构建我们自己的框架。虽然我们感谢作者的工作，但我们也可以自信地说，所有这些都是用我们知道和理解的语言完成的。
- en: Ship drastically less code to our users.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 向我们的用户交付大大减少的代码。
- en: Similar to going beyond the browser to the server, we learned that going beyond
    the browser to the bundler unlocks an entire new world of possibilities, leveraging
    the bundler to split client components from server components and ship drastically
    less code to our users. What other cool compiler/bundler tricks can we use to
    improve our users’ experience?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就像从浏览器到服务器的进一步扩展一样，我们了解到通过打包工具进一步扩展浏览器可以解锁全新的可能性，利用打包工具将客户端组件与服务器组件分离，并向我们的用户交付大大减少的代码。我们还能使用哪些酷炫的编译器/打包工具技巧来改善用户体验呢？
- en: We can take inspiration from these other frameworks and apply them to our own
    projects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从其他框架中汲取灵感，并应用到我们自己的项目中。
- en: 'We zoomed out and looked at how even outside React, everyone’s sort of solving
    the same problem: how do we build user interfaces well, that are fast, responsive,
    reactive, and also come with great developer experience? We explored some ideas
    from Vue, Solid, Qwik, and more, and we learned that we can take inspiration from
    these other frameworks and apply them to our own projects.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们放大视角看了一下，即使在 React 之外，每个人也在解决同样的问题：我们如何构建用户界面，既快速、响应迅速，又具有出色的开发者体验？我们从 Vue、Solid、Qwik
    等框架中探索了一些思路，我们了解到可以从这些其他框架中汲取灵感，并应用到我们自己的项目中。
- en: As we draw the curtains on our exploration of React.js, it’s essential to reflect
    on the journey we’ve taken and understand the transformative nature of this library.
    React’s growth over the years stands as a testament to its adaptability, resilience,
    and the innovative spirit of its community. From introducing a more intuitive
    way of building interfaces with JSX, to reimagining how updates can be more efficient
    with the virtual DOM, React has undoubtedly left an indelible mark on the landscape
    of web development.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们对 React.js 的探索画上句点，反思我们所走过的旅程并理解这个库的变革性质是至关重要的。多年来，React 的成长证明了它的适应性、韧性和社区创新精神。从通过
    JSX 引入更直观的界面构建方式，到重新构想通过虚拟 DOM 实现更高效更新，React 毫无疑问在 web 开发的领域留下了不可磨灭的印记。
- en: Our Timeline
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的时间轴
- en: The initial chapters of this book presented a gentle introduction to the core
    principles of React. At its heart, React’s philosophy is about building components
    that make updates to web experiences more approachable, scalable, and maintainable.
    These self-contained units of work—components, fibers, elements—encapsulate both
    the logic and the UI, making it easier to reason about our applications as they
    scale.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的初章简要介绍了React的核心原则。在其核心，React的理念是构建使得网页体验更加易于接近、可扩展和可维护的组件。这些自包含的工作单元——组件、纤维、元素——封装了逻辑和UI，使得我们能够更轻松地理解应用在扩展时的运作方式。
- en: With JSX, React offers a declarative approach to UI development. By making our
    interfaces a function of our application’s state, we can easily understand and
    predict how changes in our data will affect our UI. The clear separation and the
    single source of truth concept have undoubtedly changed how developers approach
    UI construction.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSX，React提供了一种声明式的UI开发方式。通过将我们的界面作为应用状态的函数，我们可以轻松地理解和预测数据变化对UI的影响。清晰的分离和单一的真相源概念无疑改变了开发人员处理UI构建的方式。
- en: As React gained traction, its influence inevitably rippled through the tech
    industry, inspiring many platforms and frameworks. One of the most noteworthy
    influenced platforms is Apple’s SwiftUI, a framework for building user interfaces
    across all Apple devices.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 随着React的影响力逐渐扩展，它不可避免地影响了科技行业，激发了许多平台和框架。其中最显著的受影响平台之一是苹果的SwiftUI，这是一个用于在所有苹果设备上构建用户界面的框架。
- en: Influenced by React and others, SwiftUI adopted a similar philosophy. Instead
    of the classic MVC (Model-View-Controller) design pattern often seen in iOS development,
    SwiftUI encourages developers to build UIs using smaller, component-like structures
    called views. Each view in SwiftUI is a self-contained unit, much like React components.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 受React和其他技术影响，SwiftUI采纳了类似的理念。与iOS开发中经常见到的经典MVC（Model-View-Controller）设计模式不同，SwiftUI鼓励开发人员使用称为视图的较小、组件式结构构建UI。SwiftUI中的每个视图都是一个自包含的单元，类似于React组件。
- en: As UI frameworks continue to evolve, the cross-pollination of ideas will persist.
    Innovations from one platform can inspire improvements in another, leading to
    a richer, more cohesive development landscape. React’s influence on SwiftUI and
    the broader ecosystem is a prime example of this symbiotic relationship, and it
    sets the stage for future collaborations and inspirations in the tech world.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着UI框架的不断发展，思想的跨越污染将继续存在。一个平台的创新可以激发另一个平台的改进，从而导致更丰富、更具连贯性的开发格局。React对SwiftUI及更广泛生态系统的影响是这种共生关系的一个典型例子，它为科技界的未来合作和灵感奠定了基础。
- en: The Mechanics Behind the Magic
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 魔术背后的机制
- en: The virtual DOM and the Fiber reconciler were some of the more technical topics
    we delved into. These concepts are the gears and pulleys behind React’s efficient
    and performant updates. The virtual DOM acts as a mediator between our application’s
    state and the actual DOM. By comparing differences and batching updates, React
    ensures that the least amount of work is done to keep the UI in sync with the
    state.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟DOM和Fiber协调器是我们深入探讨的一些更技术性的主题。这些概念是React高效和高性能更新的齿轮和滑轮。虚拟DOM充当我们应用状态与实际DOM之间的中介。通过比较差异和批量更新，React确保以最小的工作量保持UI与状态同步。
- en: The reconciler, on the other hand, is the brain behind this operation. It decides
    when and how to update components, optimizing for performance and ensuring consistency.
    We explored the inner workings of the reconciler, learning about the different
    phases and the work that goes into each one. We also looked at how the reconciler
    prioritizes work, ensuring that the most important updates are processed first.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，协调器是这个操作的大脑。它决定何时以及如何更新组件，优化性能并确保一致性。我们探索了协调器的内部工作原理，学习了不同阶段的工作及其背后的工作。我们还看到协调器如何优先处理工作，确保首先处理最重要的更新。
- en: Advanced Adventures
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级冒险
- en: Venturing into the advanced terrains, we looked at advanced patterns in React.
    These patterns, such as higher-order components, render props, hooks, and context,
    allow developers to abstract logic, share behavior across components, and manage
    state more effectively. While these patterns introduce complexity, they also unlock
    powerful capabilities, allowing us to build more flexible and maintainable applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 探索高级领域时，我们研究了React中的高级模式。这些模式，如高阶组件、渲染属性、钩子和上下文，允许开发人员抽象逻辑、在组件之间共享行为，并更有效地管理状态。虽然这些模式引入了复杂性，但它们也解锁了强大的能力，使我们能够构建更灵活、可维护的应用程序。
- en: Server-side React and concurrent React took us on a journey through the evolution
    of React applications. With the increasing need for fast initial loads and interactive
    experiences, leveraging the server and async operations has become vital. These
    techniques ensure our applications remain snappy, responsive, and user-centric.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端React和并发React带领我们穿越了React应用程序的演变过程。随着对快速初始加载和交互体验需求的增加，利用服务器和异步操作变得至关重要。这些技术确保我们的应用程序保持灵敏、响应迅速和以用户为中心。
- en: We explored the server side of `react-dom`, including functions like `renderToString`
    and `renderToPipeableStream`, outlining the trade-offs of each. We also explored
    some of React’s asynchronous capabilities, such as `useSyncExternalStore` and
    `useTransition`, and how they can be used to improve the user experience.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了`react-dom`的服务器端，包括诸如`renderToString`和`renderToPipeableStream`等函数，概述了每种方法的权衡。我们还探讨了React的一些异步能力，例如`useSyncExternalStore`和`useTransition`，以及它们如何用于改善用户体验。
- en: Finally, we dipped our toes into React Server Components, a more recent addition
    to the React ecosystem that represents the library’s continued evolution. By enabling
    components to be rendered on the server only, we can create more efficient applications,
    optimizing for both performance and user experience.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们涉足了React Server Components，这是React生态系统中较新的增加，代表了该库持续的演进。通过仅在服务器上渲染组件，我们可以创建更高效的应用程序，优化性能和用户体验。
- en: In our final chapters, we explored the broader ecosystem surrounding React with
    the frameworks and the alternative libraries. React’s success has spawned a plethora
    of tools, frameworks, and alternatives, each bringing its own set of advantages
    and trade-offs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后的章节中，我们探索了围绕React的更广泛生态系统，包括各种框架和替代库。React的成功催生了大量工具、框架和替代品，每个都带来了其自身的优势和折衷。
- en: React has come a long way since its inception, and its journey is a reflection
    of the ever-evolving world of web development. As you’ve journeyed through this
    book, you’ve not only learned about a library but have also gained insight into
    the paradigms and principles that drive modern web development.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: React自诞生以来已经走过了漫长的道路，其旅程反映了不断发展的Web开发世界。当你阅读本书时，你不仅学习了一个库，还深入了解了驱动现代Web开发的范式和原则。
- en: Staying Up-to-Date
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持更新
- en: Keeping up with the constantly evolving JavaScript ecosystem, including the
    many frameworks built around React, can feel like a daunting task. Every year,
    a number of new tools and libraries are introduced, each with its own set of features,
    benefits, and trade-offs. As a developer, making an informed decision about the
    right framework to use for a future project involves more than just a familiarity
    with the current state of the ecosystem. It also requires a forward-looking understanding
    of the trajectory of these tools and how they fit within the broader context of
    web development.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 跟上不断发展的JavaScript生态系统，包括围绕React构建的许多框架，可能会感觉像一项艰巨的任务。每年都会推出许多新工具和库，每个都具有其独特的功能、优点和折衷。作为开发人员，要做出关于未来项目使用合适框架的明智决策，不仅需要熟悉生态系统的当前状态，还需要前瞻性地理解这些工具的发展轨迹及其在Web开发更广泛背景中的位置。
- en: 'There are several strategies for staying up-to-date and continuously making
    informed decisions about choosing the right React framework for your future projects:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种策略可以保持更新，并持续为未来项目选择合适的React框架做出明智决策：
- en: Follow trusted sources.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关注可信的消息来源。
- en: The JavaScript ecosystem evolves at a rapid pace. It’s essential to follow trustworthy
    sources that provide quality content and regular updates about the latest trends
    and tools. This could be blogs, YouTube channels, newsletters, podcasts, or online
    communities. For example, following the official blogs and Twitter accounts of
    Next.js and Remix could provide insights into their upcoming features, improvements,
    and overall roadmap.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 生态系统发展迅速。跟随提供高质量内容和定期更新的可信源至关重要，这些内容包括博客、YouTube 频道、新闻稿、播客或在线社区。例如，关注
    Next.js 和 Remix 的官方博客和 Twitter 账号可以获取它们即将推出的功能、改进和整体路线图。
- en: 'Some sources we recommend are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐的一些资源包括：
- en: The React docs at [react.dev](https://react.dev)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 文档位于 [react.dev](https://react.dev)
- en: 'React core members on 𝕏, formerly Twitter, including but not limited to:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 核心成员在𝕏（原 Twitter），包括但不限于：
- en: '*@sophiebits*'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@sophiebits*'
- en: '*@sebmarkbage*'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@sebmarkbage*'
- en: '*@zmofei*'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@zmofei*'
- en: '*@acdlite*'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@acdlite*'
- en: '*@rickhanlonii*'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@rickhanlonii*'
- en: '*@dan_abramov2*'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@dan_abramov2*'
- en: 'React community creators on 𝕏, including but not limited to:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 社区创作者在𝕏（包括但不限于）：
- en: '*@kadikraman*'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@kadikraman*'
- en: '*@kentcdodds*'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@kentcdodds*'
- en: '*@shaundai*'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@shaundai*'
- en: '*@Saurav_Varma*'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@Saurav_Varma*'
- en: '*@rachelnabors*'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*@rachelnabors*'
- en: Join relevant communities.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 参与相关社区。
- en: Online communities such as Reddit, Stack Overflow, GitHub, or various Discord
    and Slack groups are excellent places to keep an eye on emerging trends and tools.
    Community members often share their experiences with different frameworks, which
    can provide a useful perspective when deciding between different tools.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Reddit、Stack Overflow、GitHub 或各种 Discord 和 Slack 群体等在线社区是关注新兴趋势和工具的绝佳场所。社区成员经常分享他们对不同框架的经验，这对于在不同工具之间做出决策时提供了有用的视角。
- en: 'Some useful community resources are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的社区资源包括：
- en: The React subreddit
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React subreddit
- en: The Reactiflux Discord server
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reactiflux Discord 服务器
- en: The bytes.dev newsletter
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bytes.dev 新闻简报
- en: The React Roundup podcast
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Roundup 播客
- en: The “This Week in React” newsletter
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “This Week in React” 新闻简报
- en: Attend conferences and meetups.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 参加会议和聚会。
- en: Conferences and meetups are great for staying updated on the latest developments
    and best practices in the JavaScript and React ecosystem. Even if you can’t attend
    in person, many of these events offer online streaming or record their talks for
    later viewing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 参加会议和聚会有助于了解 JavaScript 和 React 生态系统的最新发展和最佳实践。即使无法亲临现场，许多活动都提供在线直播或录制的讲座以供后续观看。
- en: 'Some wonderful React conferences to attend are:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一些很棒的 React 会议包括：
- en: React Brussels
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Brussels
- en: React Alicante
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Alicante
- en: React India
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React India
- en: React Day Verona
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Day Verona
- en: Experiment with different frameworks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不同的框架。
- en: Nothing beats hands-on experience when it comes to understanding a tool. Allocating
    some time to build small projects or prototypes with different frameworks can
    provide invaluable insights. This can help you understand the strengths and weaknesses
    of each framework and how they fit with your development style and project requirements.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么比实际操作更能帮助理解工具的了。花些时间用不同的框架构建小项目或原型，可以提供宝贵的见解。这可以帮助你理解每个框架的优缺点以及它们如何与你的开发风格和项目需求相匹配。
- en: Build in public.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 公开构建。
- en: Popularized by Shawn Wang (*@swyx*), probably the best way to stay up-to-date
    is to build in public. This means sharing your work, thoughts, and ideas with
    the community. This can be as simple as posting on social media about your work,
    or as involved as writing a blog post or creating a YouTube video. By sharing
    your work, you can get feedback from the community, which can help you improve
    your skills and gain a deeper understanding of the tools you’re using.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Shawn Wang（*@swyx*）推广，保持最新的最佳方式可能就是公开构建。这意味着与社区分享你的工作、想法和观点。可以简单地在社交媒体上发布关于你工作的内容，也可以写一篇博客或制作一个YouTube视频。通过分享你的工作，你可以从社区中获得反馈，这有助于提高你的技能并深入了解你正在使用的工具。
- en: Writing a book has been a great way for me to learn React. I’ve learned so much
    from the community, and I’ve been able to share my knowledge with others. I highly
    recommend it!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 写书对我来说是学习 React 的一种很好的方式。我从社区学到了很多东西，也能够与他人分享我的知识。我强烈推荐这样做！
- en: As we conclude, remember that learning React isn’t just about mastering a library;
    it’s about embracing a mindset. A mindset of component-driven development, performance
    optimization, and continuously adapting to the ever-changing demands of the web.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结束时，请记住，学习 React 不仅仅是掌握一个库；它是接纳一种思维方式的过程。这种以组件驱动开发、性能优化和持续适应 Web 不断变化需求为核心的思维方式。
- en: The future of web development is bright, and React, along with its community,
    will undoubtedly play a significant role in shaping it. Whether you’re a seasoned
    developer or someone just starting out, the skills and knowledge you’ve acquired
    from this book will serve you well as you continue your journey in the vast and
    exciting realm of web development.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Web 开发的未来光明无限，React 及其社区无疑将在塑造中发挥重要作用。无论您是经验丰富的开发者还是刚刚起步的人，您从本书中获得的技能和知识将在您继续在广阔而令人兴奋的
    Web 开发领域中追求过程中发挥重要作用。
- en: Here’s to building more intuitive, performant, and user-centric applications
    with React. Cheers to the future, and thank you for being a part of this adventure!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 祝愿使用 React 构建更直观、高性能和用户中心的应用程序。为未来干杯，感谢您成为这一冒险的一部分！
