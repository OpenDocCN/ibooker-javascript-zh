- en: Chapter 5\. Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 数据库
- en: When I was a kid, I obsessively collected sports cards of all types. A big part
    of collecting the cards was organizing them. I kept the star players in one box,
    basketball superstar Michael Jordan had an entire box dedicated to his cards,
    and the rest of my cards were kept organized by sport, and suborganized by team.
    This organization method enabled me to store the cards safely and easily find
    the card that I was looking for at any given time. Little did I know, but a storage
    system like this is the tangible equivalent to a database. At its core, a database
    allows us to store information and retrieve it later.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我还是个孩子时，我痴迷于收集各种类型的体育卡片。收集卡片的重要部分是组织它们。我把明星球员放在一个盒子里，篮球巨星迈克尔·乔丹的卡片则专门放在一个盒子里，我的其他卡片则按照运动类型进行组织，并按照团队进行进一步的子分类。这种组织方法使我能够安全地存储卡片，并在任何时候轻松找到我想要的卡片。我当时并不知道，但这种存储系统相当于数据库的有形等价物。在其核心，数据库允许我们存储信息并在以后检索。
- en: When I first started out with web development, I found databases intimidating.
    I would see instructions for running a database and entering obscure SQL commands,
    and it felt like an additional level of abstraction that I couldn’t wrap my head
    around. Thankfully, I was eventually able to scale the wall and am no longer intimidated
    by a SQL table join, so if you are where I was, I want you to know that it is
    possible to navigate the world of databases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我刚开始进行Web开发时，我觉得数据库很吓人。我会看到运行数据库和输入晦涩SQL命令的说明，感觉就像是我无法理解的额外抽象层。幸运的是，最终我能够攀登这道墙，不再害怕SQL表连接，所以如果你和我当时一样，我希望你知道，可以探索数据库世界。
- en: In this book we’ll be using [MongoDB](https://www.mongodb.com) as our database
    of choice. I’ve chosen Mongo because it is a popular choice in the Node.js ecosystem
    and is a great database to get started with for anyone who is new to the topic.
    Mongo stores our data in “documents” that work like JavaScript objects. This means
    that we will be able to write and retrieve information in a format that is familiar
    to any JavaScript developer. However, if you have a database that you strongly
    prefer, such as PostgreSQL, the topics covered in this book are transferable to
    any type of system with a little work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用[MongoDB](https://www.mongodb.com)作为我们的首选数据库。我选择Mongo是因为它在Node.js生态系统中非常流行，并且对于任何对该主题新手来说都是一个很好的入门数据库选择。Mongo将我们的数据存储在“文档”中，这类似于JavaScript对象。这意味着我们将能够以任何JavaScript开发者熟悉的格式编写和检索信息。然而，如果你有一个强烈偏爱的数据库，比如PostgreSQL，本书涵盖的主题经过一些工作后也适用于任何类型的系统。
- en: Before we can work with Mongo, we will need to ensure that the MongoDB server
    is running locally. This is something that is required throughout development.
    To do so, follow the instructions for your system in [Chapter 1](ch01.html#our-dev-environment).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用Mongo之前，我们需要确保MongoDB服务器在本地运行。这在整个开发过程中都是必需的。要做到这一点，请按照第一章中系统的说明进行操作[第一章](ch01.html#our-dev-environment)。
- en: Getting Started with MongoDB
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始学习MongoDB
- en: 'With Mongo running, let’s explore how we can interact with Mongo directly from
    our terminal, using the Mongo shell. Begin by opening the MongoDB shell by typing
    the `mongo` command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当Mongo运行时，让我们探索如何直接从终端与Mongo交互，使用Mongo shell。通过输入`mongo`命令来打开MongoDB shell：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After running this command, you should see information about your MongoDB shell,
    the local server connection, and some additional information printed to the terminal.
    We can now interact directly with MongoDB from within the terminal application.
    We can create a database as well as switch to a new database with the `use` command.
    Let’s create a database called `learning`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您应该会在MongoDB shell中看到有关本地服务器连接以及一些其他信息打印到终端的信息。现在我们可以直接从终端应用程序与MongoDB交互。我们可以创建一个数据库，以及使用`use`命令切换到一个新的数据库。让我们创建一个名为`learning`的数据库：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In my card collection, described at the beginning of the chapter, I kept my
    cards organized in separate boxes. MongoDB brings with it the same concept, called
    *collections*. A collection is how we group similar documents together. For example,
    a blog application may have a collection for posts, another for users, and a third
    for comments. If we were to compare a collection to a JavaScript object, it would
    be the top-level object, while documents are the individual objects within. We
    can visualize it like so:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头描述的我的卡片收藏中，我将我的卡片组织在单独的盒子中。MongoDB也带来了相同的概念，称为 *集合*。集合是我们将相似文档组合在一起的方式。例如，一个博客应用程序可能有一个集合用于文章，另一个用于用户，第三个用于评论。如果我们将集合与JavaScript对象进行比较，它将是顶级对象，而文档则是其中的各个对象。我们可以将其可视化如下：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this information in hand, let’s create a document within a collection
    in our `learning` database. We’ll create a `pizza` collection where we will store
    documents with a pizza type. Enter the following into the MongoDB shell:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，让我们在 `learning` 数据库中创建一个集合内的文档。我们将创建一个 `pizza` 集合，其中将存储具有披萨类型的文档。在MongoDB
    shell中输入以下内容：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If this is successful, we should see a returned result that reads:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功的话，我们应该看到返回的结果如下：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also write multiple entries into the database at once:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以一次性将多个条目写入数据库：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we’ve written some documents to our database, let’s retrieve them.
    To do so, we’ll use MongoDB’s `find` method. To see all of the documents in the
    collection, run a `find` command with empty parameters:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经向数据库写入了一些文档，让我们来检索它们。为此，我们将使用MongoDB的 `find` 方法。要查看集合中的所有文档，请运行带空参数的 `find`
    命令：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We should now see all three entries in the database. In addition to storing
    the data, MongoDB automatically assigns a unique ID to each entry. The results
    should look something like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该在数据库中看到所有三个条目。除了存储数据之外，MongoDB还会自动为每个条目分配一个唯一的ID。结果应该看起来像这样：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also find individual documents, both by property values as well as with
    Mongo’s assigned ID:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以按属性值以及Mongo分配的ID找到单个文档：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Not only do we want to be able to find documents, but it’s also useful to be
    able to update them. We can do so by using Mongo’s `update` method, which accepts
    a first parameter of a document to change and a second parameter of the change
    to the document. Let’s update our `Veggie` pizza to be a `Mushroom` pizza:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅我们想要能够找到文档，还可以更新它们也非常有用。我们可以使用Mongo的 `update` 方法来进行操作，它接受第一个参数作为要更改的文档，第二个参数是要更改的内容。让我们将我们的
    `Veggie` 披萨更新为 `Mushroom` 披萨：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if we run `db.pizza.find()`, we should see that your document has been
    updated:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行 `db.pizza.find()`，我们应该能看到您的文档已经更新：
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As with updating a document, we can also remove one using Mongo’s `remove`
    method. Let’s remove the mushroom pizza from our database:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与更新文档类似，我们也可以使用Mongo的 `remove` 方法删除一个文档。让我们从数据库中删除蘑菇披萨：
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now if we perform a `db.pizza.find()` query, we will see only two entries within
    our collection. If we decided that we no longer wanted to include any of the data,
    we could run the `remove` method without an empty object parameter, which will
    wipe out our entire collection:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们执行 `db.pizza.find()` 查询，我们将在集合中看到只有两个条目。如果我们决定不再包含任何数据，我们可以运行 `remove`
    方法，并且不带空对象参数，这将清除我们的整个集合：
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We’ve now successfully used the MongoDB shell to create a database, add documents
    to a collection, update those documents, and remove them. These fundamental database
    operations will provide a solid footing as we integrate a database into our project.
    In development, we can also access our database using the MongoDB shell. This
    can prove helpful for tasks such as debugging and manually removing or updating
    entries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已成功使用MongoDB shell创建了数据库，向集合添加了文档，更新了这些文档，并将它们删除。这些基本的数据库操作将为我们在项目中集成数据库提供坚实的基础。在开发中，我们还可以使用MongoDB
    shell访问我们的数据库。这对于调试和手动删除或更新条目等任务可能非常有帮助。
- en: Connecting MongoDB to Our Application
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将MongoDB连接到我们的应用程序
- en: Now that you’ve learned a bit about using MongoDB from the shell, let’s connect
    it to our API application. To do this, we’ll be using the [Mongoose Object Document
    Mapper (ODM)](https://mongoosejs.com). Mongoose is a library that simplifies working
    with MongoDB in Node.js applications by reducing and streamlining boilerplate
    code, through the use of its schema-based modeling solution. Yes, you read that
    right—another schema! As you’ll see, once we’ve defined our database schema, working
    with MongoDB via Mongoose is similar to the types of commands we wrote within
    the Mongo shell.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了一些关于使用MongoDB shell的知识，让我们将其连接到我们的API应用程序。为此，我们将使用[Mongoose对象文档映射器（ODM）](https://mongoosejs.com)。Mongoose是一个库，通过其基于模式的建模解决方案，在Node.js应用程序中简化了与MongoDB的工作，通过减少和简化样板代码。是的，您没看错——又是一个模式！一旦我们定义了数据库模式，通过Mongoose在MongoDB上的操作类似于我们在Mongo
    shell中编写的命令类型。
- en: 'We will first need to update our *.env* file with the URL of our local database.
    This will allow us to set the database URL in whatever environment we are working
    (such as local development and production). The default URL of a local MongoDB
    server is *mongodb://localhost:27017*, to which we’ll add the name of our database.
    So, within our *.env* file, we will set a `DB_HOST` variable with the URL of our
    Mongo database instance as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要更新我们的*.env*文件，其中包含我们本地数据库的URL。这将允许我们在我们工作的任何环境（例如本地开发和生产）中设置数据库URL。本地MongoDB服务器的默认URL是*mongodb://localhost:27017*，我们将在此URL后添加我们数据库的名称。因此，在我们的*.env*文件中，我们将设置一个`DB_HOST`变量，并设置Mongo数据库实例的URL如下：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The next step in working with a database in our application is to connect to
    it. Let’s write some code that will connect our application to our database at
    startup. To do this, we’ll first create a new file within the *src* directory,
    named *db.js*. Within *db.js* we’ll write our database connection code. We’ll
    also include a function to `close` our database connection, which will prove useful
    for testing the application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中与数据库一起工作的下一步是连接它。让我们编写一些代码，在启动时将我们的应用程序连接到我们的数据库。为此，我们将首先在*src*目录中创建一个名为*db.js*的新文件。在*db.js*中，我们将编写我们的数据库连接代码。我们还将包括一个用于`close`数据库连接的函数，这在测试应用程序时将非常有用。
- en: 'In *src/db.js*, enter the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在*src/db.js*中，输入以下内容：
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we’ll update our *src/index.js* to call this connection. To do so, we will
    first import our *.env* configuration as well as the *db.js* file. Within the
    imports, at the top of the file, add these imports:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新我们的*src/index.js*来调用这个连接。为此，我们将首先导入我们的*.env*配置以及*db.js*文件。在文件顶部的导入中，添加这些导入：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'I like to store the `DB_HOST` value that is defined in the *.env* file as a
    variable. Add this variable directly below the `port` variable definition:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢将在*.env*文件中定义的`DB_HOST`值作为一个变量进行存储。直接在`port`变量定义下面添加这个变量。
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can then call our connection, by adding the following to the *src/index.js*
    file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过将以下内容添加到*src/index.js*文件来调用我们的连接：
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The *src/index.js* file will now read as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/index.js*文件现在将如下所示：'
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Though the actual functionality has not changed, if you run `npm run dev`, the
    application should successfully connect to the database and run without errors.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管实际功能没有改变，但如果您运行`npm run dev`，应用程序应该能够成功连接到数据库并且没有错误。
- en: Reading and Writing Data from Our Application
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的应用程序中读取和写入数据
- en: Now that we can connect to our database, let’s write the code needed to read
    and write data to it from within the application. Mongoose allows us to define
    how the data will be stored in our database as a JavaScript object, and we can
    then store and act upon data that fits that model structure. With this in mind,
    let’s create our object, referred to as a Mongoose schema.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以连接到我们的数据库了，让我们编写必要的代码来从应用程序内部读取和写入数据。Mongoose允许我们定义数据将如何存储在我们的数据库中，作为一个JavaScript对象，并且我们可以存储和操作符合该模型结构的数据。有了这个想法，让我们创建我们的对象，称为一个Mongoose模式。
- en: 'First, create a folder within our *src* directory called *models* to house
    this schema file. In this folder, create a file named *note.js*. Within *src/models/note.js*,
    we’ll start by defining the basic setup of the file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的*src*目录中创建一个名为*models*的文件夹，用于存放这个模式文件。在这个文件夹中，创建一个名为*note.js*的文件。在*src/models/note.js*中，我们将从定义文件的基本设置开始：
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, we will define our schema, within the `noteSchema` variable. Similar to
    the in-memory data example, our current schema will, for now, include the content
    of the note as well as a hardcoded string representing the author. We’ll also
    include the option to include timestamps for our notes, which will be automatically
    stored when a note is created or edited. We’ll be adding functionality to our
    note schema as we go.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义我们的模式，在`noteSchema`变量内。类似于内存数据示例，我们当前的模式将包括笔记内容以及表示作者的硬编码字符串。我们还将包括选项来包含我们笔记的时间戳，这些时间戳将在笔记创建或编辑时自动存储。随着进展，我们将添加功能到我们的笔记模式中。
- en: 'Our Mongoose schema will be structured as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Mongoose 模式将被结构化如下：
- en: '[PRE20]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Data Permanence
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据永久性
- en: We’ll be updating and changing our data model throughout development, at times
    removing all of the data from our database. As a result, I wouldn’t recommend
    using this API to store important things like class notes, a list of your friends’
    birthdays, or the directions to your favorite pizza place.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们将更新和修改我们的数据模型，有时会从数据库中删除所有数据。因此，我不建议使用此 API 存储重要的东西，如课堂笔记、您朋友的生日清单或您最喜欢的比萨店的地址。
- en: 'Our overall *src/models/note.js* file should now read as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的整体 *src/models/note.js* 文件现在应该如下所示：
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To simplify importing our models into our Apollo Server Express application,
    we’ll add an *index.js* file to the *src/models* directory. This will combine
    our models into a single JavaScript module. While this isn’t strictly necessary,
    I find it to be a good pattern to follow as applications and database models grow.
    In *src/models/index.js* we’ll import our note model and add it to a `models`
    object to be exported:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化将我们的模型导入到我们的 Apollo Server Express 应用程序中，我们将在 *src/models* 目录下添加一个 *index.js*
    文件。这将把我们的模型组合成一个单独的 JavaScript 模块。虽然这并不是严格必要的，但在应用程序和数据库模型增长时，我发现这是一个很好的模式。在 *src/models/index.js*
    中，我们将导入我们的笔记模型，并将其添加到一个`models`对象中以便导出：
- en: '[PRE22]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can now incorporate our database models into our Apollo Server Express application
    code by importing our models into the *src/index.js* file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过将我们的模型导入到 *src/index.js* 文件中，将数据库模型整合到我们的 Apollo Server Express 应用程序代码中：
- en: '[PRE23]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With our database model code imported, we can adapt our resolvers to save and
    read from the database, rather than an in-memory variable. To do this, we’ll rewrite
    the `notes` query to pull the notes from the database by using the MongoDB `find`
    method:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的数据库模型代码导入后，我们可以调整我们的解析器以保存和从数据库中读取数据，而不是使用内存变量。为此，我们将重写`notes`查询以通过使用 MongoDB
    的`find`方法从数据库中获取笔记：
- en: '[PRE24]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With our server running, we can visit the GraphQL Playground in our browser
    and run our `notes` query:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的服务器运行后，我们可以在浏览器中访问 GraphQL Playground 并运行我们的`notes`查询：
- en: '[PRE25]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The expected result will be an empty array, since we have yet to add any data
    to our database ([Figure 5-1](#db-notes-query)):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果将是一个空数组，因为我们尚未向数据库中添加任何数据（[图 5-1](#db-notes-query)）：
- en: '[PRE26]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![A notes query in the GraphQL Playground](assets/jsev_0501.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![在 GraphQL Playground 中进行的笔记查询](assets/jsev_0501.png)'
- en: Figure 5-1\. A notes query
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 一个笔记查询
- en: 'To update our `newNote` mutation to add a note to our database, we’ll use our
    MongoDB model’s `create` method, which we’ll accept an object. For now, we will
    continue to hardcode the author’s name:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新我们的`newNote`变异以向我们的数据库添加一个笔记，我们将使用我们的 MongoDB 模型的`create`方法，该方法将接受一个对象。目前，我们将继续硬编码作者的名称：
- en: '[PRE27]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can now visit the GraphQL Playground and write a mutation that will add
    a note to our database:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以访问 GraphQL Playground 并编写一个变异来将笔记添加到我们的数据库中：
- en: '[PRE28]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Our mutation will return a new note, which contains the content we placed in
    our argument, the author’s name, as well as a MongoDB-generated ID ([Figure 5-2](#db-new-note-mutation)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的变异将返回一个新的笔记，其中包含我们放置在参数中的内容，作者的名称，以及 MongoDB 生成的 ID（[图 5-2](#db-new-note-mutation)）。
- en: '![A new note mutation in the GraphQL Playground](assets/jsev_0502.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![在 GraphQL Playground 中进行的新笔记变异](assets/jsev_0502.png)'
- en: Figure 5-2\. A mutation creates a new note in the database
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-2\. 变异在数据库中创建一个新的笔记
- en: If we now rerun our `notes` query, we should see our note retrieved from the
    database! (See [Figure 5-3](#db-notes-query-2).)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在重新运行我们的`notes`查询，我们应该看到我们从数据库中检索到的笔记！（见 [图 5-3](#db-notes-query-2)。）
- en: '![The notes query with data in the GraphQLPlayground](assets/jsev_0503.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![在 GraphQLPlayground 中包含数据的笔记查询](assets/jsev_0503.png)'
- en: Figure 5-3\. Our notes query returns the data from the database
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-3\. 我们的笔记查询从数据库返回的数据
- en: 'The last step is to rewrite our `note`s query to pull a specific note from
    our database, using the unique ID that MongoDB assigns to each entry. To do so,
    we’ll use Mongoose’s `findbyId` method:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是重写我们的`notes`查询，以从我们的数据库中检索特定笔记，使用MongoDB分配给每个条目的唯一ID。为此，我们将使用Mongoose的`findbyId`方法：
- en: '[PRE29]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can now write a query, using the unique ID we see in our `notes` query or
    `newNote` mutation, to retrieve an individual note from our database. To do so,
    we’ll write a `note` query with an `id` argument ([Figure 5-4](#db-note-query)):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以写一个查询，使用我们在`notes`查询或`newNote`变更中看到的唯一ID，以从我们的数据库中检索单个笔记。为此，我们将编写一个带有`id`参数的`note`查询（[图 5-4](#db-note-query)）：
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Your Note ID
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的笔记ID
- en: The ID used in the previous example is unique to my local database. Be sure
    to copy an ID from your own query or mutation results.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面示例中使用的ID是我本地数据库特有的。请确保从您自己的查询或变更结果中复制一个ID。
- en: '![A query for an individual note in the GraphQL Playground](assets/jsev_0504.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![在GraphQL Playground中查询单个笔记的查询](assets/jsev_0504.png)'
- en: Figure 5-4\. A query for an individual note
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-4\. 查询单个笔记
- en: 'Our final *src/index.js* file will look as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的*src/index.js*文件将如下所示：
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We can now read and write data from our database with our GraphQL API! Try adding
    more notes, viewing the full list of notes using the `notes` query, and viewing
    the content of individual notes by utilizing the `note` query.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过我们的GraphQL API从数据库中读取和写入数据！尝试添加更多笔记，使用`notes`查询查看完整的笔记列表，并通过使用`note`查询查看单个笔记的内容。
- en: Conclusion
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter you learned to use MongoDB and the Mongoose library with our
    API. A database, such as MongoDB, allows us to securely store and retrieve our
    application’s data. An object modeling library, such as Mongoose, simplifies working
    with a database by providing tools for database queries and data validation. In
    the next chapter, we’ll update our API to have full CRUD (create, read, update,
    and delete) functionality with our database content.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用MongoDB和Mongoose库与我们的API配合使用。数据库（例如MongoDB）允许我们安全地存储和检索应用程序的数据。对象建模库（例如Mongoose）通过提供数据库查询和数据验证工具，简化了与数据库的工作。在下一章中，我们将更新我们的API，使其具有与数据库内容的完整CRUD（创建、读取、更新和删除）功能。
