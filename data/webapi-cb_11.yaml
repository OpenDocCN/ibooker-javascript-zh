- en: Chapter 11\. Internationalization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章\. 国际化
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Modern browsers include a robust Internationalization API. This is a collection
    of APIs centered around language- or locale-specific tasks, such as:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器包括强大的国际化API。这是一组围绕语言或特定区域任务的API集合，例如：
- en: Formatting dates and times
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化日期和时间
- en: Formatting numbers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化数字
- en: Currency
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 货币
- en: Pluralization rules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数规则
- en: Before this API was available, you might have had to reach for a third-party
    library like Moment.js (for dates and times) or Numeral.js (for numbers). However,
    today’s browsers support many of the same use cases, and you may not need these
    libraries in your app anymore.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个API出现之前，您可能不得不使用Moment.js（用于日期和时间）或Numeral.js（用于数字）等第三方库。然而，现代浏览器支持许多相同的用例，您可能不再需要这些库来开发应用程序。
- en: Most of these APIs use the concept of a *locale*, which is usually a combination
    of a language and a region. For example, the locale for US English is `en-US`,
    and the locale for Canadian English is `en-CA`. You can use them with the default
    locale, which is the one being used by the browser, or you can specify a particular
    locale to format data appropriately for your desired region.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些API使用*区域设置*的概念，通常是语言和地区的组合。例如，美国英语的区域设置是`en-US`，加拿大英语的区域设置是`en-CA`。您可以使用默认区域设置，即浏览器正在使用的区域设置，或者您可以指定特定的区域设置以便根据您所需的区域适当地格式化数据。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There is a new JavaScript date and time API in development called Temporal.
    At the time of writing, this is currently an ECMAScript proposal. It may become
    part of the language in the near future, but for the time being this book will
    cover the standard Date API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript正在开发中的新的日期和时间API称为Temporal。在撰写本书时，这仍然是一个ECMAScript提案。它可能会在不久的将来成为语言的一部分，但目前本书将介绍标准的Date
    API。
- en: Formatting a Date
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化日期
- en: Problem
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to display a `Date` object in a format appropriate for the user’s locale.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望以适合用户区域设置的格式显示`Date`对象。
- en: Solution
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `Intl.DateTimeFormat` to format the `Date` object to a string value. Create
    the format object with two arguments: the desired locale and an options object
    where you can specify the format style. For dates, the supported format styles
    are (examples shown in the `en-US` locale):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Intl.DateTimeFormat`将`Date`对象格式化为字符串值。创建包含两个参数的格式对象：所需的区域设置和一个可以指定格式样式的选项对象。对于日期，支持的格式样式有（在`en-US`区域设置下显示示例）：
- en: '`short`: 10/16/23'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short`: 10/16/23'
- en: '`medium`: Oct 16, 2023'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`medium`: Oct 16, 2023'
- en: '`long`: October 16, 2023'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long`: 2023年10月16日'
- en: '`full`: Monday, October 16, 2023'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full`: 2023年10月16日星期一'
- en: To get the user’s current locale, you can check the `navigator.language` property
    (see [Example 11-1](#example11-1)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用户当前的区域设置，您可以检查`navigator.language`属性（参见[示例 11-1](#example11-1)）。
- en: Example 11-1\. Formatting a date
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-1\. 格式化日期
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You can also include the time information from a `Date` object by specifying
    a `timeStyle` property in the options object along with `dateStyle` (see [Example 11-2](#example11-2)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在选项对象中指定`timeStyle`属性和`dateStyle`（参见[示例 11-2](#example11-2)）来包含`Date`对象的时间信息。
- en: Example 11-2\. Formatting a date and time
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-2\. 格式化日期和时间
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Getting the Parts of a Formatted Date
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取格式化日期的部分
- en: Problem
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to split a formatted date into tokens. This is useful, for example,
    if you want to style different parts of the formatted date differently.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将格式化的日期拆分为令牌。例如，如果您希望不同部分的格式化日期具有不同的样式，则此操作非常有用。
- en: Solution
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `formatToParts` method of `Intl.DateTimeFormat` to format the date and
    return an array of tokens (see [Example 11-3](#code_formatParts)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Intl.DateTimeFormat`的`formatToParts`方法格式化日期并返回一个令牌数组（参见[示例 11-3](#code_formatParts)）。
- en: Example 11-3\. Getting the parts of a formatted date
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-3\. 获取格式化日期的部分
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Discussion
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: For a short date of `10/1/23`, the `parts` object shown in [Example 11-3](#code_formatParts)
    looks like [Example 11-4](#example11-4).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`10/1/23`的短日期，[示例 11-3](#code_formatParts)中显示的`parts`对象如[示例 11-4](#example11-4)所示。
- en: Example 11-4\. The formatted date parts
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-4\. 格式化的日期部分
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Formatting a Relative Date
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化相对日期
- en: Problem
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to format the difference between a given date and today in an approximate,
    human-readable format. For example, you want a formatted string like “2 days ago”
    or “in 3 months.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望以近似的人类可读格式格式化给定日期与今天之间的差异。例如，您希望得到类似“2天前”或“3个月后”的格式化字符串。
- en: Solution
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `Intl.RelativeTimeFormat`. It has a `format` method that you call with a
    value offset, such as –2 (in the past) or 3 (in the future), and a unit such as
    “day,” “month,” etc. For example, calling `format(-2, *day*)` in the `en-US` locale
    results in the string “2 days ago.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Intl.RelativeTimeFormat`。它具有`format`方法，您可以用值偏移量（例如-2代表过去，3代表将来）和单位（如“day”、“month”等）调用它。例如，在`en-US`区域设置中调用`format(-2,
    *day*)`将返回字符串“2天前”。
- en: This is actually a two-step process. `Intl.RelativeTimeFormat` doesn’t directly
    calculate this between two dates. Rather, you need to first determine the offset
    and the unit to pass to the `format` method. The idea is to find the largest unit
    that differs between the two dates.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上这是一个两步过程。`Intl.RelativeTimeFormat`不直接计算两个日期之间的时间差。相反，您需要首先确定偏移量和单位，然后将它们传递给`format`方法。其思想是找到在两个日期之间存在差异的最大单位。
- en: First, create a helper function that returns an object containing the offset
    and unit, as shown in [Example 11-5](#example11-5).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个帮助函数，该函数返回一个包含偏移量和单位的对象，如[示例 11-5](#example11-5)所示。
- en: Example 11-5\. Finding the offset and unit
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-5\. 查找偏移量和单位
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This function returns an object with two properties: `offset` and `unit`, which
    you can pass to an `Intl.RelativeTimeFormat` (see [Example 11-6](#example11-6)).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回一个包含两个属性`offset`和`unit`的对象，您可以将其传递给`Intl.RelativeTimeFormat`（参见[示例 11-6](#example11-6)）。
- en: Example 11-6\. Formatting the relative date
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-6\. 格式化相对日期
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the expected output if you called this function with the given dates
    on October 7, 2023 (keep in mind that when creating `Date` objects in this way,
    the months start at 0, but the days start at 1):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在2023年10月7日调用此函数，则以下是预期输出（请记住，以这种方式创建`Date`对象时，月份从0开始，但日期从1开始）：
- en: 'October 1, 2023: `getRelativeDate(new Date(2023, 9, 1))`: “6 days ago”'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2023年10月1日：`getRelativeDate(new Date(2023, 9, 1))`：“6天前”
- en: 'May 2, 2023: `getRelativeDate(new Date(2023, 4, 2))`: “5 months ago”'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2023年5月2日：`getRelativeDate(new Date(2023, 4, 2))`：“5个月前”
- en: 'June 2, 2025: `getRelativeDate(new Date(2025, 5, 2))`: “in 2 years”'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2025年6月2日：`getRelativeDate(new Date(2025, 5, 2))`：“在2年内”
- en: Discussion
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`getDateDifference` works by comparing the year, month, and day (in that order)
    of the given date with today’s date, until it finds one that doesn’t match. Then
    it returns the difference and the name of the unit, which are passed to the `Intl.RelativeTimeFormat`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`getDateDifference`通过比较给定日期的年份、月份和日期（按顺序），与今天的日期进行比较，直到找到不匹配的日期为止。然后返回差异和单位名称，这些将传递给`Intl.RelativeTimeFormat`。'
- en: The `getRelativeDate` function doesn’t give an exact relative time in months,
    days, hours, minutes, and seconds. It gives an approximation of the magnitude
    of the time difference.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`getRelativeDate`函数并不会精确地返回月份、天数、小时、分钟和秒数的相对时间。它只是给出时间差的量级估计。'
- en: Consider comparing May 2, 2023 to October 7, 2023\. This is a difference of
    5 months and 5 days, but `getRelativeDate` only says “5 months ago” as an approximation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑将2023年5月2日与2023年10月7日进行比较。它们相差5个月5天，但`getRelativeDate`仅显示“5个月前”作为近似。
- en: Formatting Numbers
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**格式化数字**'
- en: Problem
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to format a number with thousands separators and decimal places in
    a locale-specific way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望以区域特定的方式使用千位分隔符和小数位数格式化数字。
- en: Solution
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Pass the number to an `Intl.NumberFormat`’s `format` method. This method returns
    a string containing the formatted number.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将数字传递给`Intl.NumberFormat`的`format`方法。该方法返回一个包含格式化后数字的字符串。
- en: By default, `Intl.NumberFormat` uses the default locale (assume that the default
    locale in [Example 11-7](#example11-7) is `en-US`).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Intl.NumberFormat`使用默认区域设置（假设[示例 11-7](#example11-7)中的默认区域设置是`en-US`）。
- en: Example 11-7\. Formatting a number in the default locale
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-7\. 使用默认区域设置格式化数字
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also specify a different locale to the `Intl.NumberFormat` constructor
    (see [Example 11-8](#example11-8)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以为`Intl.NumberFormat`构造函数指定不同的区域设置（参见[示例 11-8](#example11-8)）。
- en: Example 11-8\. Formatting a number in the `de-DE` locale
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-8\. 使用`de-DE`区域设置格式化数字
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`Intl.NumberFormat` applies locale-specific formatting rules to format individual
    numbers. You can also use it to format a range of numbers by passing two values
    to `formatRange`, as shown in [Example 11-9](#example11-9).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Intl.NumberFormat`应用区域特定的格式化规则来格式化单个数字。您还可以通过将两个值传递给`formatRange`来格式化一系列数字，如[示例 11-9](#example11-9)所示。'
- en: Example 11-9\. Formatting a range of numbers
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-9\. 格式化数字范围
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Rounding Decimal Places
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**舍入小数位数**'
- en: Problem
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to take a fractional number, which can have many decimal places, and
    round it to a set number of decimal places.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要取一个可以有许多小数位数的分数，并将其舍入到一定小数位数。
- en: Solution
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `maximumFractionDigits` option to specify the number of digits after
    the decimal point. [Example 11-10](#example11-10) shows how to round numbers to
    up to two decimal places.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`maximumFractionDigits`选项来指定小数点后的位数。 [示例 11-10](#example11-10)展示了如何将数字四舍五入到最多两位小数。
- en: Example 11-10\. Rounding a number
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-10\. 四舍五入数字
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Formatting a Price Range
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化价格范围
- en: Problem
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Given an array of prices, stored as numbers, you want to create a formatted
    price range that reflects the low and high prices in the array.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个作为数字存储的价格数组，您希望创建一个反映数组中最低和最高价格的格式化价格范围。
- en: Solution
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Determine the minimum and maximum prices, then pass the `style: *currency*`
    option when creating an `Intl.NumberFormat`. Use this `Intl.NumberFormat` to create
    the range. You can also specify the currency to get the proper symbol in the output.
    Finally, call `formatRange` on the `Intl.NumberFormat` with the lower and upper
    price bounds (see [Example 11-11](#code_formatPrices)).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '确定最低和最高价格，然后在创建`Intl.NumberFormat`时传递`style: *currency*`选项。使用此`Intl.NumberFormat`创建范围。还可以指定货币以获取输出中的正确符号。最后，在`Intl.NumberFormat`上调用`formatRange`，传入较低和较高的价格边界（参见[示例 11-11](#code_formatPrices)）。'
- en: Example 11-11\. Formatting a price range
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-11\. 格式化价格范围
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `Math.max` and `Math.min` functions take multiple arguments, and they return
    the maximum or minimum from the whole set of those arguments. [Example 11-11](#code_formatPrices)
    uses the array spread syntax to pass all elements from the `prices` array to `Math.max`
    and `Math.min`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math.max`和`Math.min`函数接受多个参数，并从整组参数中返回最大值或最小值。 [示例 11-11](#code_formatPrices)使用数组展开语法将`prices`数组中的所有元素传递给`Math.max`和`Math.min`。'
- en: Formatting Measurement Units
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化测量单位
- en: Problem
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to format a number along with a measurement unit.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要格式化一个带有测量单位的数字。
- en: Solution
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `unit` style when creating the `Intl.NumberFormat` object, and specify
    the target unit. [Example 11-12](#example11-12) shows how to format a number of
    gigabytes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Intl.NumberFormat`对象时使用`unit`样式，并指定目标单位。 [示例 11-12](#example11-12)展示了如何格式化千兆字节的数字。
- en: Example 11-12\. Formatting gigabytes
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-12\. 格式化千兆字节
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'You can also customize the unit label, by specifying the `unitDisplay` option
    to the `NumberFormat`. Possible values are:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过为`NumberFormat`指定`unitDisplay`选项来自定义单位标签。可能的值有：
- en: '`short`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`short`'
- en: 'Shows the abbreviated unit, separated with a space: `1,000 GB`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 显示缩写单位，用空格分隔：`1,000 GB`
- en: '`narrow`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`narrow`'
- en: 'Shows the abbreviated unit, with no space: `1,000GB`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 显示缩写单位，无空格：`1,000GB`
- en: '`long`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`long`'
- en: 'Shows the full unit name: `1,000 gigabytes`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 显示完整的单位名称：`1,000 gigabytes`
- en: Applying Pluralization Rules
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用复数规则
- en: Problem
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use the correct terminology when referring to different numbers
    of items. For example, consider a list of users. In English, you’d say “one user”
    (singular), but “three users” (plural). Other languages have more complex rules,
    and you want to make sure you cover these.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在引用不同数量的项目时使用正确的术语。例如，考虑用户列表。在英语中，您会说“一个用户”（单数），但“三个用户”（复数）。其他语言有更复杂的规则，您希望确保涵盖这些规则。
- en: Solution
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `Intl.PluralRules` to select the correct pluralized string.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Intl.PluralRules`来选择正确的复数形式字符串。
- en: First, construct an `Intl.PluralRules` object with the desired locale, and call
    its `select` method with the number of users (see [Example 11-13](#example11-13)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用所需的区域设置构建一个`Intl.PluralRules`对象，并调用其`select`方法来确定用户数量（参见[示例 11-13](#example11-13)）。
- en: Example 11-13\. Determining the plural form
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-13\. 确定复数形式
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `select` method returns a string depending on the plural form to be used
    and the specified locale. For the `en-US` locale, it returns either “one” (when
    the user count is one) or “other” (when the user count is not one). You can define
    messages using these values as a key, as shown in [Example 11-14](#code_pluralSolution).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`方法根据要使用的复数形式和指定的区域设置返回一个字符串。对于`en-US`区域设置，它返回“one”（当用户计数为一时）或“other”（当用户计数不为一时）。您可以使用这些值作为键来定义消息，如[示例 11-14](#code_pluralSolution)所示。'
- en: Example 11-14\. A full plural rules solution
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-14\. 完整的复数规则解决方案
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Discussion
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This solution requires knowing the different forms ahead of time so you can
    define the correct messages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此解决方案需要预先了解不同形式，以便定义正确的消息。
- en: '`Intl.PluralRules` also supports an `ordinal` mode, which works slightly differently.
    You can use this mode to format *ordinal* values like “1st,” “2nd,” “3rd,” etc.
    The formatting rules vary from language to language, and you can map them to suffixes
    that you apply to the numbers.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Intl.PluralRules` 还支持一种 `ordinal` 模式，其工作方式略有不同。你可以使用此模式来格式化 *序数* 值，如 “1st,”
    “2nd,” “3rd,” 等。格式化规则因语言而异，你可以将它们映射到附加到数字的后缀。'
- en: 'For example, with the `en-US` locale, an ordinal `Intl.PluralRules` returns
    values such as:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 `en-US` 区域设置中，序数 `Intl.PluralRules` 返回如下值：
- en: '`one` for numbers ending in 1—“1st,” “21st,” etc.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以 1 结尾的数字使用 `one` —“1st,” “21st,” 等。
- en: '`two` for numbers ending in 2—“2nd, 42nd,” etc.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以 2 结尾的数字使用 `two` —“2nd, 42nd,” 等。
- en: '`few` for numbers ending in 3—“3rd, “33rd,” etc.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以 3 结尾的数字使用 `few` —“3rd, “33rd,” 等。
- en: '`other` for other numbers—“5th,” “47th,” etc.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他数字使用 `other` —“5th,” “47th,” 等。
- en: Counting Characters, Words, and Sentences
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算字符、单词和句子的数量
- en: Problem
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to calculate the character, word, and sentence count of a string using
    locale-specific rules.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你想使用特定于区域设置的规则计算字符串的字符数、单词数和句子数。
- en: Solution
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `Intl.Segmenter` to split the string and count the occurrences.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Intl.Segmenter` 来分割字符串并计算出现次数。
- en: You can create a segmenter with grapheme (individual characters), word, or sentence
    granularity. The granularity determines the boundaries of the segments. Each segmenter
    can only have one granularity, so you need three segmenters (see [Example 11-15](#example11-15)).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个以字形（单个字符）、单词或句子为粒度的分段器。粒度决定了段的边界。每个分段器只能有一种粒度，所以你需要三个分段器（参见 [示例 11-15](#example11-15)）。
- en: Example 11-15\. Getting the character, word, and sentence count of a string
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-15\. 获取字符串的字符数、单词数和句子数
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/OL9G0)
    for the latest compatibility data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 可能尚未得到所有浏览器的支持。请查看 [CanIUse](https://oreil.ly/OL9G0) 获取最新的兼容性数据。
- en: Discussion
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When you call `segment` on a segmenter with some text, it returns an iterable
    object containing all of the segments. There are several ways to get the length
    of items in this iterable, but this example uses the array spread syntax, which
    creates an array containing all of the items. Then you just need to get the length
    of each array.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一段文本上调用分段器的 `segment` 方法时，它会返回一个包含所有段的可迭代对象。有几种方法可以获取此可迭代对象中项目的长度，但是此示例使用了数组展开语法，它创建一个包含所有项的数组。然后你只需要获取每个数组的长度。
- en: You may have solved this problem in the past by using the `split` method of
    a string. For example, you could split on whitespace to get an array of words
    and get the word count. This approach may work in your language, but the advantage
    of using `Intl.Segmenter` is that it takes the given locale’s rules for breaking
    up words and sentences.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能过去通过使用字符串的 `split` 方法来解决这个问题。例如，你可以在空格上分割以获取单词数组并获取单词计数。这种方法在你的语言中可能有效，但是使用
    `Intl.Segmenter` 的优势在于它采用给定区域设置的单词和句子分割规则。
- en: Formatting Lists
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化列表
- en: Problem
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an array of items that you want to display in a comma-separated list.
    For example, an array of users is shown as “user1, user2, and user3.”
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个项目数组，想要以逗号分隔的列表形式显示。例如，一个用户数组显示为 “user1, user2, 和 user3。”
- en: Solution
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `Intl.ListFormat` to combine the items into a list using the rules of the
    given locale. [Example 11-16](#example11-16) uses an array of users, each of which
    has a `username` property.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Intl.ListFormat` 根据给定区域设置的规则将项目合并成列表。[示例 11-16](#example11-16) 使用用户数组，每个用户具有
    `username` 属性。
- en: Example 11-16\. Formatting a list of user objects
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-16\. 格式化用户对象列表
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Discussion
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`Intl.ListFormat` adds words and punctuation as needed. For example, in the
    `en-US` locale, you get the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Intl.ListFormat` 根据需要添加单词和标点。例如，在 `en-US` 区域设置中，你会得到以下结果：'
- en: '1 user: “user1”'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 位用户：“user1”
- en: '2 users: “user1 and user2”'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 位用户：“user1 和 user2”
- en: '3 users: “user1, user2, and user3”'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3 位用户：“user1, user2, 和 user3”
- en: 'Here’s another example using the `de-DE` locale:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是另一个使用 `de-DE` 区域设置的示例：
- en: '1 user: “user1”'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 位用户：“user1”
- en: '2 users: “user1 und user2”'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 位用户：“user1 und user2”
- en: '3 users: “user1, user2 und user3”'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3 位用户：“user1, user2 und user3”
- en: Notice the use of “und” instead of “and,” and also notice in the third case
    that there’s no comma after user2 as there is in `en-US`. This is because German
    grammar does not use this comma (called the “Oxford comma”).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在第三种情况下使用 “und” 而不是 “and”，并且还要注意在 `en-US` 中没有在 user2 后面使用逗号的情况。这是因为德语语法不使用这个逗号（称为“牛津逗号”）。
- en: As you can see, using `Intl.ListFormat` is much more robust than using an array’s
    `join` method to join its values with a comma. That method, of course, does not
    take locale-specific rules into account.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，使用`Intl.ListFormat`比使用数组的`join`方法更加健壮，后者当然没有考虑区域设置规则。
- en: Sorting an Array of Names
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序一个名字数组
- en: Problem
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an array of names that you want to sort using locale-specific sorting
    rules.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个名字数组，想要使用特定于区域的排序规则进行排序。
- en: Solution
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create an `Intl.Collator` to provide the comparison logic, then use its `compare`
    function to pass to `Array.prototype.sort` (see [Example 11-17](#example11-17)).
    This function compares two strings. It returns a negative value if the first string
    comes before the second, zero if the strings are equal, or a positive value if
    the first string comes after the second.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`Intl.Collator`提供比较逻辑，然后使用它的`compare`函数传递给`Array.prototype.sort`（参见[示例 11-17](#example11-17)）。此函数比较两个字符串。如果第一个字符串在第二个之前，则返回负值，如果相等则返回零，如果第一个字符串在第二个之后则返回正值。
- en: Example 11-17\. Sorting an array of names with `Intl.Collator`
  id: totrans-159
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-17\. 使用`Intl.Collator`排序一个名字数组
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-161
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A `Collator` can return any negative or positive value, not just necessarily
    –1 or 1.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Collator`可以返回任何负值或正值，不一定只是–1或1。
- en: Discussion
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This is a concise way to sort an array of strings. Before `Intl.Collator`, you
    might have done something like [Example 11-18](#example11-18).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种对字符串数组进行排序的简洁方式。在`Intl.Collator`之前，你可能会做类似于[示例 11-18](#example11-18)的事情。
- en: Example 11-18\. Sorting an array of strings directly
  id: totrans-165
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 11-18\. 直接排序一个字符串数组
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This works fine, but one major difference is that you can’t specify which locale’s
    sorting rules to apply when comparing strings. Another benefit of `Intl.Collator`
    is its flexibility. You can fine-tune the logic it uses to compare strings.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法运行良好，但一个主要的区别在于，当比较字符串时，你无法指定要应用的区域设置的排序规则。另一个`Intl.Collator`的好处是它的灵活性。你可以微调它用来比较字符串的逻辑。
- en: 'For example, consider the array `[1, 2, 20, 3]`. Using the default collator,
    this would be the sorted order since it’s using string comparison logic. You can
    pass the `numeric: true` option to `Intl.Collator`, and the sorted array then
    becomes `[1, 2, 3, 20]`.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，考虑数组`[1, 2, 20, 3]`。使用默认排序器，这将是排序后的顺序，因为它使用字符串比较逻辑。你可以传递`numeric: true`选项给`Intl.Collator`，然后排序后的数组变成`[1,
    2, 3, 20]`。'
