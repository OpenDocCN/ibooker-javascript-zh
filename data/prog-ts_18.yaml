- en: Appendix E. Triple-Slash Directives
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 E. 三斜杠指令
- en: 'Triple-slash directives are just regular JavaScript comments that TypeScript
    looks for to do things like adjust compiler settings for a specific file, or indicate
    that your file depends on another file. Put your directives at the top of your
    file, before any code. Triple-slash directives look like this (each directive
    is a triple-slash, `///`, followed by an XML tag):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 三斜杠指令只是普通的 JavaScript 注释，TypeScript 会寻找这些指令来做一些事情，比如调整特定文件的编译器设置，或者指示你的文件依赖于另一个文件。将你的指令放在文件顶部，任何代码之前。三斜杠指令看起来像这样（每个指令都是三斜杠
    `///`，后面跟着一个 XML 标签）：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'TypeScript supports a handful of triple-slash directives. [Table E-1](#useful-directive-table)
    lists the ones you are most likely to use:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 支持少量三斜杠指令。[表 E-1](#useful-directive-table) 列出了你可能会使用的指令：
- en: '`amd-module`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`amd-module`'
- en: Head over to [“The amd-module Directive”](ch12.html#triple-slash-amd) to learn
    more.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 [“amd-module 指令”](ch12.html#triple-slash-amd) 了解更多。
- en: '`lib`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`'
- en: The `lib` directive is a way to indicate to TypeScript which of TypeScript’s
    `lib`s your module depends on, which you may want to do if your project doesn’t
    have a *tsconfig.json*. Declaring the `lib`s you depend on in your *tsconfig.json*
    is almost always a better option.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib` 指令是告诉 TypeScript 你的模块依赖于 TypeScript 的哪些 `lib` 的一种方式，如果你的项目没有 *tsconfig.json*，在
    *tsconfig.json* 中声明你依赖的 `lib` 是几乎总是更好的选择。'
- en: '`path`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`path`'
- en: When using TSC’s `outFile` option, use the `path` directive to declare a dependency
    on another file, so that the other file appears earlier in your compiled output
    than the dependent file does. If your project uses `import`s and `export`s, you
    likely won’t ever use this directive.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 TSC 的 `outFile` 选项时，请使用 `path` 指令声明对另一个文件的依赖，以便该文件在编译输出中出现在依赖文件之前。如果你的项目使用
    `import` 和 `export`，你可能永远不会使用此指令。
- en: '`type`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`'
- en: Head over to [“The types Directive”](ch12.html#import-elision) to learn more
    about the `type` directive.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 [“类型指令”](ch12.html#import-elision) 了解更多关于 `type` 指令的信息。
- en: Table E-1\. Triple-slash directives
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 表 E-1\. 三斜杠指令
- en: '| Directive | Syntax | Use it to… |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 指令 | 语法 | 用它来… |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `amd-module` | `<amd-module name="MyComponent" />` | Declare export names
    when compiling to AMD modules |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `amd-module` | `<amd-module name="MyComponent" />` | 在编译到 AMD 模块时声明导出名称 |'
- en: '| `lib` | `<reference lib="dom" />` | Declare which of TypeScript’s built-in
    `lib`s your type declarations depend on |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `lib` | `<reference lib="dom" />` | 声明你的类型声明依赖于 TypeScript 内置的哪些 `lib` |'
- en: '| `path` | `<reference path="./path.ts" />` | Declare which TypeScript files
    your module depends on |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `path` | `<reference path="./path.ts" />` | 声明你的模块依赖哪些 TypeScript 文件 |'
- en: '| `type` | `<reference types="./path.d.ts" />` | Declare which type declaration
    files your module depends on |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `type` | `<reference types="./path.d.ts" />` | 声明你的模块依赖哪些类型声明文件 |'
- en: Internal Directives
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部指令
- en: You will probably never use the `no-default-lib` directive ([Table E-2](#triple-slash-internal-table))
    in your own code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能永远不会在你自己的代码中使用 `no-default-lib` 指令（[表 E-2](#triple-slash-internal-table)）。
- en: Table E-2\. Internal triple-slash directives
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表 E-2\. 内部三斜杠指令
- en: '| Directive | Syntax | Use it to… |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 指令 | 语法 | 用它来… |'
- en: '| --- | --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `no-default-lib` | `<reference no-default-lib="true" />` | Tell TypeScript
    to not use any `lib`s at all for this file |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `no-default-lib` | `<reference no-default-lib="true" />` | 告诉 TypeScript
    在这个文件中完全不使用任何 `lib` |'
- en: Deprecated Directives
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 废弃的指令
- en: You should never use the `amd-dependency` directive ([Table E-3](#triple-slash-deprecated-table)),
    and instead stick to a regular `import`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不应该使用 `amd-dependency` 指令（[表 E-3](#triple-slash-deprecated-table)），而是坚持使用普通的
    `import`。
- en: Table E-3\. Deprecated triple-slash directives
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 E-3\. 废弃的三斜杠指令
- en: '| Directive | Syntax | Instead use… |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 指令 | 语法 | 可以用… |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `amd-dependency` | `<amd-dependency path="./a.ts" name="MyComponent" />`
    | `import` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `amd-dependency` | `<amd-dependency path="./a.ts" name="MyComponent" />`
    | `import` |'
