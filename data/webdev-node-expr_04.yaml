- en: Chapter 4\. Tidying Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 整理
- en: 'In the previous two chapters, we were just experimenting: dipping our toes
    into the waters, so to speak. Before we proceed to more complex functionality,
    we’re going to do some housekeeping and build some good habits into our work.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们只是在试验：可以说是试探水温。在我们继续进行更复杂的功能之前，我们将进行一些日常管理，并在我们的工作中养成一些良好的习惯。
- en: In this chapter, we’ll start our Meadowlark Travel project in earnest. Before
    we start building the website itself, though, we’re going to make sure we have
    the tools we need to produce a high-quality product.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将认真开始我们的Meadowlark Travel项目。不过，在我们开始构建网站本身之前，我们将确保我们拥有制作高质量产品所需的工具。
- en: Tip
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The running example in this book is not necessarily one you have to follow.
    If you’re anxious to build your own website, you could follow the framework of
    the running example but modify it accordingly so that by the time you finish this
    book, you could have a finished website!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例不一定是你必须遵循的示例。如果你渴望构建自己的网站，你可以按照本书示例的框架进行修改，以便在本书结束时，你可以拥有一个完成的网站！
- en: File and Directory Structure
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件和目录结构
- en: Structuring applications has spawned many a religious debate, and there’s no
    one right way to do it. However, there are some common conventions that are helpful
    to know about.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应用程序的结构引发了很多宗教性的辩论，没有一种正确的方法。然而，有一些常见的惯例是有帮助的。
- en: It’s typical to try to restrict the number of files in your project root. Typically,
    you’ll find configuration files (like *package.json*), a *README.md* file, and
    a bunch of directories. Most source code goes under a directory often called *src*.
    For the sake of brevity, we won’t be using that convention in this book (nor does
    the Express scaffolding application do this, surprisingly). For real-world projects,
    you’ll probably eventually find that your project root gets cluttered if you’re
    putting source code there, and you’ll want to collect those files under a directory
    like *src*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 试图限制项目根目录中文件的数量是很典型的。通常你会找到配置文件（如*package.json*）、一个*README.md*文件和一堆目录。大多数源代码放在一个通常称为*src*的目录下。出于简洁起见，我们在本书中不会使用这种约定（令人惊讶的是，即使Express脚手架应用程序也不会这样做）。对于真实项目，如果你把源代码放在项目根目录中，你可能最终会发现项目根目录变得混乱，你会想把这些文件收集到类似*src*的目录下。
- en: I’ve also mentioned that I prefer to name my main application file (sometimes
    called the *entry point*) after the project itself (*meadowlark.js*) as opposed
    to something generic like *index.js*, *app.js*, or *server.js*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾提到我更喜欢将我的主应用程序文件（有时称为*入口点*）命名为项目本身的名称（*meadowlark.js*），而不是像*index.js*、*app.js*或*server.js*这样的通用名称。
- en: It’s largely up to you how to structure your application, and I recommend providing
    a road map to your structure in the *README.md* file (or a readme linked from
    it).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如何构建应用程序的结构主要由你决定，我建议在*README.md*文件（或其链接的自述文件）中提供一个结构路线图。
- en: 'At minimum, I recommend you always have the following two files in your project
    root: *package.json* and *README.md*. The rest is up to your imagination.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，我建议你的项目根目录中始终有以下两个文件：*package.json*和*README.md*。其余的取决于你的想象力。
- en: Best Practices
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: The phrase *best practices* is one you hear thrown around a lot these days,
    and it means that you should “do things right” and not cut corners (we’ll talk
    about what this means specifically in a moment). No doubt you’ve heard the engineering
    adage that your options are “fast,” “cheap,” and “good,” and you can pick any
    two. The thing that’s always bothered me about this model is that it doesn’t take
    into account the *accrual value* of doing things correctly. The first time you
    do something correctly, it may take five times as long to do it as it would have
    to do it quick and dirty. The second time, though, it’s going to take only three
    times as long. By the time you’ve done it correctly a dozen times, you’ll be doing
    it almost as fast as the quick and dirty way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “最佳实践”这个词汇现在被广泛使用，意味着你应该“做正确的事情”，而不是走捷径（我们稍后会具体讨论这是什么意思）。毫无疑问，你听过工程行话：“快速”、“便宜”和“好”，你可以选择其中两个。关于这种模型一直让我困扰的是，它没有考虑到正确执行事务的*累积价值*。第一次正确执行某事可能要比快速而肮脏地完成花费五倍的时间。但第二次只需三倍的时间。当你做了十几次正确的事情时，你几乎能和快速而肮脏的方式做得一样快。
- en: I had a fencing coach who would always remind us that practice doesn’t make
    perfect; practice makes *permanent*. That is, if you do something over and over
    again, eventually it will become automatic, rote. That is true, but it says nothing
    about the quality of the thing you are practicing. If you practice bad habits,
    then bad habits become rote. Instead, you should follow the rule that *perfect*
    practice makes perfect. In that spirit, I encourage you to follow the rest of
    the examples in this book as if you were making a real-live website, as if your
    reputation and remuneration were depending on the quality of the outcome. Use
    this book to not only learn new skills but to practice building good habits.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我以前有一个击剑教练，他总是提醒我们，练习并不能造就完美；练习造就*永久性*。也就是说，如果你反复做某事，最终它会变得自动化，成为惯例。这种说法没错，但它并未评价你所练习事物的质量。如果你练习了不良习惯，那不良习惯也会变成惯例。相反，你应该遵循*完美*练习造就完美的原则。基于这种精神，我鼓励你在本书中的其余部分，像是在制作真实的网站一样，就好像你的声誉和报酬取决于结果的质量一样。利用本书不仅学习新技能，还要练习养成良好的习惯。
- en: The practices we will be focusing on are version control and QA. In this chapter,
    we’ll be discussing version control, and we’ll discuss QA in the next chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于版本控制和质量保证的实践。在本章中，我们将讨论版本控制，下一章我们将讨论质量保证。
- en: Version Control
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: 'I hope I don’t have to convince you of the value of version control (if I did,
    that might take a whole book itself). Broadly speaking, version control offers
    these benefits:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我无需说服你版本控制的价值（如果需要的话，可能要写一整本书）。广义上来说，版本控制提供以下好处：
- en: Documentation
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文档
- en: Being able to go back through the history of a project to see the decisions
    that were made and the order in which components were developed can be valuable
    documentation. Having a technical history of your project can be quite useful.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 能够回顾项目历史，了解所做决策的过程和组件开发顺序，可以成为有价值的文档。拥有项目的技术历史记录非常有用。
- en: Attribution
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 归因
- en: If you work on a team, attribution can be hugely important. Whenever you find
    something in code that is opaque or questionable, knowing who made that change
    can save you many hours. It could be that the comments associated with the change
    are sufficient to answer your questions, and if not, you’ll know who to talk to.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在团队中工作，归因可能非常重要。当你在代码中发现不透明或可疑的内容时，知道谁做出了这些改变可以节省你很多时间。也许与这些改变相关的注释足以回答你的问题，如果不行，你也知道应该找谁询问。
- en: Experimentation
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实验
- en: A good version control system enables experimentation. You can go off on a tangent,
    trying something new, without fear of affecting the stability of your project.
    If the experiment is successful, you can fold it back into the project, and if
    it is not successful, you can abandon it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的版本控制系统能够促进实验。你可以随意尝试新事物，不必担心会影响项目的稳定性。如果实验成功，你可以将其融入项目中；如果失败，你可以放弃它。
- en: Years ago, I made the switch to distributed version control systems (DVCSs).
    I narrowed my choices down to Git and Mercurial and went with Git, because of
    its ubiquity and flexibility. Both are excellent and free version control systems,
    and I recommend you use one of them. In this book, we will be using Git, but you
    are welcome to substitute Mercurial (or another version control system altogether).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，我转向了分布式版本控制系统（DVCS）。我把选择范围缩小到Git和Mercurial，最终选择了Git，因为它普及广泛且灵活。两者都是优秀且免费的版本控制系统，我推荐你使用其中之一。在本书中，我们将使用Git，但你也可以选择Mercurial（或者其他版本控制系统）。
- en: If you are unfamiliar with Git, I recommend Jon Loeliger’s excellent *[Version
    Control with Git](http://bit.ly/Version_Ctrl_Git)* (O’Reilly). Also, GitHub has
    a good listing of [Git learning resources](https://try.github.io).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Git不熟悉，我推荐Jon Loeliger的优秀著作*[Version Control with Git](http://bit.ly/Version_Ctrl_Git)*（O’Reilly）。此外，GitHub有一个很好的[Git学习资源列表](https://try.github.io)。
- en: How to Use Git with This Book
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Git本书
- en: First, make sure you have Git. Type `git --version`. If it doesn’t respond with
    a version number, you’ll need to install Git. See the [Git documentation](https://git-scm.com)
    for installation instructions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保你已经安装了Git。输入`git --version`检查版本号。如果没有显示版本号，你需要安装Git。参见[Git文档](https://git-scm.com)获取安装指南。
- en: There are two ways to follow along with the examples in this book. One is to
    type out the examples yourself and follow along with the Git commands. The other
    is to clone the companion repository I am using for all of the examples and check
    out the associated files for each example. Some people learn better by typing
    out examples, while some prefer to just see and run the changes without having
    to type it all in.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中跟随示例的两种方法。一种是自己打出示例并跟随Git命令。另一种是克隆我用于所有示例的伴随存储库，并检出每个示例的相关文件。有些人通过打出示例学得更好，而有些人则更喜欢只是看并运行更改，而无需全部输入。
- en: If You’re Following Along by Doing It Yourself
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果您通过自己做来进行跟随
- en: 'We already have a very rough framework for our project: some views, a layout,
    a logo, a main application file, and a *package.json* file. Let’s go ahead and
    create a Git repository and add all those files.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的项目建立了一个非常粗略的框架：一些视图，一个布局，一个标志，一个主应用程序文件和一个*package.json*文件。让我们继续创建一个Git存储库并添加所有这些文件。
- en: 'First, we go to the project directory and initialize a Git repository there:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们进入项目目录并在那里初始化一个Git存储库：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now before we add all the files, we’ll create a *.gitignore* file to help prevent
    us from accidentally adding things we don’t want to add. Create a text file called
    *.gitignore* in your project directory in which you can add any files or directories
    you want Git to ignore by default (one per line). It also supports wildcards.
    For example, if your editor creates backup files with a tilde at the end (like
    *meadowlark.js~*), you might put `*~` in the *.gitignore* file. If you’re on a
    Mac, you’ll want to put `.DS_Store` in there. You’ll also want to put `node_modules`
    in there (for reasons that will be discussed soon). So for now, the file might
    look like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们添加所有文件之前，我们将创建一个*.gitignore*文件，以帮助防止我们意外添加不想添加的内容。在项目目录中创建一个名为*.gitignore*的文本文件，您可以在其中添加任何希望Git默认忽略的文件或目录（每行一个）。它还支持通配符。例如，如果您的编辑器创建带有波浪线结尾的备份文件（如*meadowlark.js~*），您可以在*.gitignore*文件中放置`*~`。如果您使用Mac，您会想在那里放置`.DS_Store`。您还需要把`node_modules`放在那里（稍后将讨论原因）。因此，目前文件可能如下所示：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Entries in the *.gitignore* file also apply to subdirectories. So if you put
    `*~` in the *.gitignore* in the project root, all such backup files will be ignored
    even if they are in subdirectories.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*.gitignore*文件中的条目也适用于子目录。因此，如果您在项目根目录的*.gitignore*中放置了`*~`，则所有这样的备份文件都将被忽略，即使它们位于子目录中。'
- en: 'Now we can add all of our existing files. There are many ways to do this in
    Git. I generally favor `git add -A`, which is the most sweeping of all the variants.
    If you are new to Git, I recommend you either add files one by one (`git add meadowlark.js`,
    for example) if you want to commit only one or two files, or add all of your changes
    (including any files you might have deleted) using `git add -A`. Since we want
    to add all the work we’ve already done, we’ll use the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以添加所有现有文件。在Git中有很多方法可以做到这一点。我通常喜欢`git add -A`，这是所有变体中最全面的。如果您是Git的新手，我建议您逐个添加文件（例如`git
    add meadowlark.js`），如果只想提交一两个文件，或者使用`git add -A`添加所有更改（包括您可能删除的任何文件）。由于我们想添加所有已完成的工作，我们将使用以下操作：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Newcomers to Git are commonly confused by the `git add` command; it adds *changes*,
    not files. So if you’ve modified *meadowlark.js*, and then you type `git add meadowlark.js`
    ,what you’re really doing is adding the changes you’ve made.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Git的新手通常会对`git add`命令感到困惑；它添加的是*更改*，而不是文件。因此，如果您修改了*meadowlark.js*，然后输入`git
    add meadowlark.js`，您实际上是在添加您所做的更改。
- en: 'Git has a “staging area,” where changes go when you run `git add`. So the changes
    we’ve added haven’t actually been committed yet, but they’re ready to go. To commit
    the changes, use `git commit`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Git有一个“暂存区”，当您运行`git add`时，更改会进入其中。因此，我们添加的更改实际上还没有提交，但它们已经准备就绪。要提交更改，请使用`git
    commit`：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `-m "Initial commit."` allows you to write a message associated with this
    commit. Git won’t even let you make a commit without a message, and for good reason.
    Always strive to make meaningful commit messages; they should briefly but concisely
    describe the work you’ve done.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`-m "Initial commit."`允许您编写与此提交相关联的消息。Git甚至不会让您提交没有消息的提交，这是有道理的。始终努力编写有意义的提交消息；它们应简要但简洁地描述您所做的工作。'
- en: If You’re Following Along by Using the Official Repository
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果您通过使用官方存储库进行跟随
- en: 'To get the official repository for this book, run `git clone`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取本书的官方存储库，请运行`git clone`：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This repository has a directory for each chapter that contains code samples.
    For example, the source code for this chapter can be found in the `ch04` directory.
    The code samples in each chapter are generally numbered for ease of reference.
    Throughout the repository, I have liberally added *README.md* files containing
    additional notes about the samples.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本仓库为每个章节设有包含代码示例的目录。例如，本章的源代码可以在`ch04`目录中找到。每章的代码示例通常按顺序编号以便参考。在整个仓库中，我还大量添加了*README.md*文件，其中包含有关示例的额外说明。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the first version of this book, I took a different approach with the repository,
    with a linear history as if you were developing an increasingly sophisticated
    project. While this approach pleasantly mirrored the way a project in the real
    world might develop, it caused a lot of headache, both for me and for my readers.
    As npm packages changed, the code samples would change, and short of rewriting
    the entire history of the repo, there was no good way to update the repository
    or note the changes in the text. While the chapter-per-directory approach is more
    artificial, it allows the text to be synced more closely with the repository and
    also enables easier community contribution.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一版中，我采用了一种不同的方法处理仓库，以线性历史记录的形式开发一个越来越复杂的项目。虽然这种方法愉快地反映了现实世界中项目可能发展的方式，但它给我和我的读者带来了很多困扰。随着
    npm 包的更改，代码示例也会改变，除非重新编写整个仓库的历史记录，否则没有好的方法更新仓库或记录文本中的更改。虽然每个目录对应一个章节的方法更为人为，但它允许文本与仓库更紧密地同步，并且还便于社区的贡献。
- en: As this book is updated and improved, the repository will also be updated, and
    when it is, I will add a version tag so you can check out a version of the repository
    that corresponds to the version of the book you’re reading now. The current version
    of the repository is 2.0.0\. I am roughly following *semantic versioning* principles
    here (more on this later in this chapter); the PATCH increment (the last number)
    represents minor changes that shouldn’t impact your ability to follow along with
    the book. That is, if the repo is at version 2.0.15, that should still correspond
    with this version of the book. However, if the MINOR increment (the second number)
    is different (2.1.0), that indicates that the content in the companion repo may
    have diverged from what you’re reading, and you may want to check out a tag starting
    with 2.0.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当本书更新和改进时，仓库也会进行相应更新。当仓库更新时，我会添加一个版本标签，这样你就可以查看与当前阅读版本对应的仓库版本。目前仓库的版本是 2.0.0。在这里，我大致遵循*语义化版本*原则（本章后面将详细介绍）；PATCH
    增量（最后一个数字）代表了不应影响你跟进书中内容的小改动。也就是说，如果仓库版本是 2.0.15，它仍应与本书版本对应。然而，如果MINOR 增量（第二个数字）不同（2.1.0），这意味着伴随仓库中的内容可能已偏离你当前阅读的内容，你可能需要查看一个以
    2.0 开头的标签。
- en: The companion repo liberally makes use of *README.md* files to add additional
    explanation to the code samples.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随仓库广泛使用*README.md*文件来为代码示例添加额外解释。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'If at any point you want to experiment, keep in mind that the tag you have
    checked out puts you in what Git calls a “detached HEAD” state. While you are
    free to edit any files, it is unsafe to commit anything you do without creating
    a branch first. So if you do want to base an experimental branch off of a tag,
    simply create a new branch and check it out, which you can do with one command:
    `git checkout` `-b` `experiment` (where `experiment` is the name of your branch;
    you can use whatever you want). Then you can safely edit and commit on that branch
    as much as you want.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进行任何实验，请记住你所检出的标签会让你进入 Git 所谓的“分离 HEAD”状态。虽然你可以自由编辑任何文件，但在未创建分支的情况下提交所做的任何更改是不安全的。因此，如果你想基于标签创建一个实验分支，只需执行一个命令：`git
    checkout` `-b` `experiment`（其中`experiment`是你的分支名称；你可以随意取名）。然后你可以在该分支上安全地进行编辑和提交任意数量的更改。
- en: npm Packages
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm 包
- en: The npm packages that your project relies on reside in a directory called *node_modules*.
    (It’s unfortunate that this is called *node_modules* and not *npm_packages*, as
    Node modules are a related but different concept.) Feel free to explore that directory
    to satisfy your curiosity or to debug your program, but you should never modify
    any code in this directory. In addition to that being bad practice, all of your
    changes could easily be undone by npm.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目依赖的 npm 包存放在一个名为 *node_modules* 的目录中。（遗憾的是这被称为 *node_modules* 而不是 *npm_packages*，因为
    Node 模块是一个相关但不同的概念。）随意探索这个目录以满足你的好奇心或调试你的程序，但你不应该修改这个目录中的任何代码。除了这是一种不良实践之外，你所有的更改很容易就会被
    npm 撤销。
- en: 'If you need to make a modification to a package your project depends on, the
    correct course of action would be to create your own fork of the package. If you
    do go this route and feel that your improvements would be useful to others, congratulations:
    you’re now involved in an open source project! You can submit your changes, and
    if they meet the project standards, they’ll be included in the official package.
    Contributing to existing packages and creating customized builds is beyond the
    scope of this book, but there is a vibrant community of developers out there to
    help you if you want to contribute to existing packages.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要修改项目依赖的某个包，正确的做法是创建该包的分支（fork）。如果你确实采取了这种方法，并且认为你的改进对其他人有用，那么恭喜你：你现在参与了一个开源项目！你可以提交你的改动，如果它们符合项目标准，它们将被包含在官方包中。贡献到现有包和创建定制版本超出了本书的范围，但在那里有一个充满活力的开发者社区，可以在你想要贡献到现有包时提供帮助。
- en: 'Two of the main purposes of the *package.json* file are to describe your project
    and to list its dependencies. Go ahead and look at your *package.json* file now.
    You should see something like this (the exact version numbers will probably be
    different, as these packages get updated often):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*package.json* 文件的两个主要目的是描述你的项目和列出它的依赖项。现在就去查看你的 *package.json* 文件吧。你应该看到类似以下内容（确切的版本号可能会不同，因为这些包经常更新）：'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Right now, our *package.json* file contains only information about dependencies.
    The caret (`^`) in front of the package versions indicates that any version that
    starts with the specified version number—up to the next major version number—will
    work. For example, this *package.json* indicates that any version of Express that
    starts with 4.0.0 will work, so 4.0.1 and 4.9.9 would both work, but 3.4.7 would
    not, nor would 5.0.0. This is the default version specificity when you use `npm
    install`, and is generally a pretty safe bet. The consequence of this approach
    is that if you want to move up to a newer version, you will have to edit the file
    to specify the new version. Generally, that’s a good thing because it prevents
    changes in dependencies from breaking your project without your knowing about
    it. Version numbers in npm are parsed by a component called *semver* (for “semantic
    versioning”). If you want more information about versioning in npm, consult the
    [Semantic Versioning Specification](http://try.github.io/) and [this article by
    Tamas Piros](http://bit.ly/34Vr3lX).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 *package.json* 文件只包含关于依赖项的信息。在包版本前面的插入符（`^`）表示以指定版本号开头的任何版本——直到下一个主要版本号——都可以工作。例如，这个
    *package.json* 表明任何以 4.0.0 开头的 Express 版本都可以工作，所以 4.0.1 和 4.9.9 都可以工作，但 3.4.7
    和 5.0.0 则不行。这是使用 `npm install` 时的默认版本特定性，并且通常是一个相当安全的选择。采用这种方法的后果是，如果你想升级到一个更新的版本，你将不得不编辑文件以指定新版本。总的来说，这是件好事，因为它可以防止依赖关系的变化在你不知情的情况下破坏你的项目。npm
    中的版本号由一个名为 *semver*（语义化版本）的组件解析。如果你想了解更多关于 npm 中版本控制的信息，请参考[Tamas Piros 的这篇文章](http://bit.ly/34Vr3lX)。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Semantic Versioning Specification states that software using semantic versioning
    must declare a “public API.” I’ve always found this wording to be confusing; what
    they really mean is “someone must care about interfacing with your software.”
    If you consider this in the broadest sense, it could really be construed to mean
    anything. So don’t get hung up on that part of the specification; the important
    details are in the format.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 语义化版本规范（[Semantic Versioning Specification](http://try.github.io/)）规定，使用语义化版本的软件必须声明“公共
    API”。我一直觉得这个措辞很令人困惑；他们真正的意思是“有人必须关心与你的软件的接口”。如果你从最广泛的意义上考虑，这实际上可以被理解为任何事物。因此，不要过分纠结于规范的这一部分；重要的细节在于格式。
- en: Since the *package.json* file lists all the dependencies, the *node_modules*
    directory is really a derived artifact. That is, if you were to delete it, all
    you would have to do to get the project working again would be to run `npm install`,
    which will re-create the directory and put all the necessary dependencies in it.
    It is for this reason that I recommend putting `node_modules` in your *.gitignore*
    file and not including it in source control. However, some people feel that your
    repository should contain everything necessary to run the project and prefer to
    keep `node_modules` in source control. I find that this is “noise” in the repository,
    and I prefer to omit it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 *package.json* 文件列出了所有依赖项，*node_modules* 目录实际上是一个衍生的产物。也就是说，如果你删除了它，只需运行
    `npm install` 即可重新创建这个目录并放置所有必要的依赖项，从而使项目重新工作起来。因此，我建议将 `node_modules` 放入你的 *.gitignore*
    文件中，不要将其纳入源代码控制。然而，有些人认为你的存储库应包含运行项目所需的一切，并希望将 `node_modules` 保留在源代码控制中。我发现这在存储库中只是“噪音”，我更倾向于省略它。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: As of version of 5 of npm, an additional file, *package-lock.json*, will be
    created. Whereas *package.json* can be “loose” in its specification of dependency
    versions (with the `^` and `~` version modifiers), *package-lock.json* records
    the *exact* versions that were installed, which can be helpful if you need to
    re-create the exact dependency versions in your project. I recommend you check
    this file into source control and don’t modify it by hand. See the [*package-lock.json*
    documentation](http://bit.ly/2O8IjNK) for more information.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 npm 的版本 5 开始，还会创建一个额外的文件 *package-lock.json*。虽然 *package.json* 可以在指定依赖版本时是“宽松”的（使用
    `^` 和 `~` 版本修饰符），*package-lock.json* 记录了安装的 *确切* 版本，如果你需要在项目中重新创建确切的依赖版本，这将非常有帮助。我建议你将这个文件纳入源代码控制，并且不要手动修改它。请参阅
    [*package-lock.json* 文档](http://bit.ly/2O8IjNK) 了解更多信息。
- en: Project Metadata
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目元数据
- en: The other purpose of the *package.json* file is to store project metadata, such
    as the name of the project, authors, license information, and so on. If you use
    `npm init` to initially create your *package.json* file, it will populate the
    file with the necessary fields for you, and you can update them at any time. If
    you intend to make your project available on npm or GitHub, this metadata becomes
    critical. If you would like more information about the fields in *package.json*,
    see the [*package.json* documentation](http://bit.ly/2X7GVPs). The other important
    piece of metadata is the *README.md* file. This file can be a handy place to describe
    the overall architecture of the website, as well as any critical information that
    someone new to the project might need. It is in a text-based wiki format called
    Markdown. Refer to the [Markdown documentation](http://bit.ly/2q7BQur) for more
    information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*package.json* 文件的另一个目的是存储项目元数据，例如项目名称、作者、许可信息等等。如果你使用 `npm init` 来最初创建你的 *package.json*
    文件，它将为你填充文件所需的字段，并且你随时可以更新它们。如果你打算在 npm 或 GitHub 上公开你的项目，这些元数据就变得至关重要。如果你想了解更多关于
    *package.json* 文件中字段的信息，请参阅 [*package.json* 文档](http://bit.ly/2X7GVPs)。另一个重要的元数据是
    *README.md* 文件。这个文件可以方便地描述网站的整体架构，以及新加入项目的人可能需要的任何关键信息。它是一种名为 Markdown 的文本基础的
    wiki 格式。请参阅 [Markdown 文档](http://bit.ly/2q7BQur) 了解更多信息。'
- en: Node Modules
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node 模块
- en: 'As mentioned earlier, Node modules and npm packages are related but different
    concepts. *Node modules*, as the name implies, offer a mechanism for modularization
    and encapsulation. *npm packages* provide a standardized scheme for storing, versioning,
    and referencing projects (which are not restricted to modules). For example, we
    import Express itself as a module in our main application file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Node 模块和 npm 包是相关但不同的概念。*Node 模块*，顾名思义，提供了一种模块化和封装的机制。*npm 包* 提供了一种标准化的方案来存储、版本化和引用项目（不仅限于模块）。例如，我们在主应用程序文件中将
    Express 本身作为一个模块导入：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`require` is a Node function for importing a module. By default, Node looks
    for modules in the directory *node_modules* (it should be no surprise, then, that
    there’s an *express* directory inside of *node_modules*). However, Node also provides
    a mechanism for creating your own modules (you should never create your own modules
    in the *node_modules* directory). In addition to modules installed into *node_modules*
    via a package manager, there are more than 30 “core modules” provided by Node,
    such as `fs`, `http`, `os`, and `path`. To see the whole list, [see this illuminating
    Stack Overflow question](http://bit.ly/2NDIkKH) and refer to the [official Node
    documentation](https://nodejs.org/en/docs/).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`require`是一个用于导入模块的 Node 函数。默认情况下，Node 在*node_modules*目录中查找模块（因此，在*node_modules*目录中有一个*express*目录应该并不奇怪）。然而，Node
    也提供了创建自己模块的机制（你绝不应该在*node_modules*目录中创建自己的模块）。除了通过包管理器安装到*node_modules*中的模块外，Node
    还提供了30多个“核心模块”，如`fs`、`http`、`os`和`path`。要查看完整列表，请参阅[这个启发性的 Stack Overflow 问题](http://bit.ly/2NDIkKH)，并参考[官方
    Node 文档](https://nodejs.org/en/docs/)。'
- en: Let’s see how we can modularize the fortune cookie functionality we implemented
    in the previous chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将我们在前一章节中实现的幸运饼干功能模块化。
- en: 'First let’s create a directory to store our modules. You can call it whatever
    you want, but *lib* (short for “library”) is a common choice. In that folder,
    create a file called *fortune.js* (*ch04/lib/fortune.js* in the companion repo):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们创建一个目录来存储我们的模块。你可以随意命名，但是*lib*（代表“库”）是一个常见选择。在那个文件夹中，创建一个名为*fortune.js*的文件（在伴随的存储库中是*ch04/lib/fortune.js*）：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The important thing to note here is the use of the global variable `exports`.
    If you want something to be visible outside of the module, you have to add it
    to `exports`. In this example, the function `getFortune` will be available from
    outside this module, but our array `fortuneCookies` will be *completely hidden*.
    This is a good thing: encapsulation allows for less error-prone and fragile code.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的重要事项是使用全局变量`exports`。如果你希望某些内容在模块外可见，你必须将其添加到`exports`中。在这个例子中，函数`getFortune`将在此模块外部可用，但我们的数组`fortuneCookies`将*完全隐藏*。这是件好事：封装允许更少出错和更不易破碎的代码。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There are several ways to export functionality from a module. We will be covering
    different methods throughout the book and summarizing them in [Chapter 22](ch22.xhtml#ch_maintenance).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以从一个模块中导出功能。我们将在本书中涵盖不同的方法，并在[第22章](ch22.xhtml#ch_maintenance)中总结它们。
- en: 'Now in *meadowlark.js*, we can remove the `fortuneCookies` array (though there
    would be no harm in leaving it; it can’t conflict in any way with the array of
    the same name defined in *lib/fortune.js*). It is traditional (but not required)
    to specify imports at the top of the file, so at the top of the *meadowlark.js*
    file, add the following line (*ch04/meadowlark.js* in the companion repo):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在*meadowlark.js*中，我们可以移除`fortuneCookies`数组（虽然留下它也没有什么问题；它不会与在*lib/fortune.js*中定义的同名数组产生任何冲突）。在文件的顶部指定导入是传统的（但不是必需的），因此在*meadowlark.js*文件的顶部添加以下行（在伴随的存储库中是*ch04/meadowlark.js*）：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that we prefix our module name with `./`. This signals to Node that it
    should not look for the module in the *node_modules* directory; if we omitted
    that prefix, this would fail.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们的模块名前缀为`./`。这告诉 Node 不要在*node_modules*目录中查找模块；如果我们省略了这个前缀，这将会失败。
- en: 'Now in our route for the About page, we can utilize the `getFortune` method
    from our module:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在关于页面的路由中，我们可以利用来自我们模块的`getFortune`方法：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you’re following along, let’s commit those changes:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在跟进，让我们提交这些更改：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You will find modules to be a powerful and easy way to encapsulate functionality,
    which will improve the overall design and maintainability of your project, as
    well as make testing easier. Refer to the [official Node module documentation](https://nodejs.org/api/modules.html)
    for more information.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现模块是一种强大且易于封装功能的方式，这将提高项目的整体设计和可维护性，并且使得测试更容易。查看[官方 Node 模块文档](https://nodejs.org/api/modules.html)获取更多信息。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Node modules are sometimes called *CommonJS (CJS) modules*, in reference to
    an older specification that Node took inspiration from. The JavaScript language
    is adopting an official packaging mechanism, called ECMAScript Modules (ESM).
    If you’ve been writing JavaScript in React or another progressive frontend language,
    you may already be familiar with ESM, which uses `import` and `export` (instead
    of `exports`, `module.exports`, and `require`). For more information, see Dr.
    Axel Rauschmayer’s blog post [“ECMAScript 6 modules: the final syntax”](http://bit.ly/2X8ZSkM).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'Node模块有时被称为*CommonJS（CJS）模块*，这是因为Node受到了一个旧规范的启发。JavaScript语言正在采用一种官方的打包机制，称为ECMAScript模块（ESM）。如果你已经在React或其他前端语言中编写JavaScript，你可能已经熟悉了ESM，它使用`import`和`export`（而不是`exports`、`module.exports`和`require`）。欲了解更多信息，请参阅Axel
    Rauschmayer博士的博文[“ECMAScript 6 modules: the final syntax”](http://bit.ly/2X8ZSkM)。'
- en: Conclusion
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Now that we’re armed with some more information about Git, npm, and modules,
    we’re ready to discuss how we can produce a better product by employing good quality
    assurance (QA) practices in our coding.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Git、npm和模块有了更多的信息，我们准备讨论如何通过在编码中采用良好的质量保证（QA）实践来生产更好的产品。
- en: 'I encourage you to keep in mind the following lessons from this chapter:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你牢记本章节的以下几点教训：
- en: Version control makes the software development process safer and more predictable,
    and I encourage you to use it even for small projects; it builds good habits!
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制使软件开发过程更安全、更可预测，我鼓励你即使在小项目中也要使用它；这将养成良好的习惯！
- en: Modularization is an important technique for managing the complexity of software.
    In addition to providing a rich ecosystem of modules others have developed through
    npm, you can package your own code in modules to better organize your project.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化是管理软件复杂性的重要技术。除了通过npm提供的丰富模块生态系统外，你还可以将自己的代码打包成模块，以更好地组织项目。
- en: Node modules (also called CJS) use a different syntax than ECMAScript modules
    (ESM), and you may have to switch between the two syntaxes when you go between
    frontend and backend code. It’s a good idea to be familiar with both.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node模块（也称为CJS）使用与ECMAScript模块（ESM）不同的语法，当你在前端和后端代码之间切换时可能需要转换这两种语法。熟悉这两种语法是个不错的主意。
