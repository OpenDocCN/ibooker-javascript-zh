- en: Appendix F. TSC Compiler Flags for Safety
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 F. TSC 编译器安全标志
- en: Tip
  id: totrans-1
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: For a complete list of available compiler flags, head over to the [TypeScript
    Handbook website](http://bit.ly/2JWfsgY).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取完整的编译器标志列表，请访问 [TypeScript Handbook website](http://bit.ly/2JWfsgY)。
- en: Each TypeScript release introduces new checks that you can enable to squeeze
    even more safety out of your code. Some of these flags—prefixed with `strict`—are
    included as part of the `strict` flag; or, you can opt into `strict` flags one
    at a time. [Table F-1](#ts-safety-flag-table) lists the compiler flags related
    to safety that are available at the time of writing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 TypeScript 发布版本都引入了新的检查，您可以启用这些检查以使代码更加安全。其中一些标志以`strict`为前缀，作为`strict`标志的一部分包含在内；或者，您可以逐个选择加入`strict`标志。[表格
    F-1](#ts-safety-flag-table) 列出了与安全性相关的编译器标志（截至撰写本文时）。
- en: Table F-1\. TSC safety flags
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表 F-1\. TSC 安全标志
- en: '| Flag | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| Flag | Description |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `alwaysStrict` | Emit `''use strict''`. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `alwaysStrict` | 发出 `''use strict''`。 |'
- en: '| `noEmitOnError` | Don’t emit JavaScript when your code has type errors. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `noEmitOnError` | 当代码存在类型错误时不生成 JavaScript。 |'
- en: '| `noFallthroughCasesInSwitch` | Make sure that every `switch` case either
    returns a value or breaks. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `noFallthroughCasesInSwitch` | 确保每个`switch`分支要么返回一个值，要么中断。 |'
- en: '| `noImplicitAny` | Error when a variable’s type is inferred as `any`. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `noImplicitAny` | 当变量类型被推断为`any`时报错。 |'
- en: '| `noImplicitReturns` | Make sure that every code path in every function explicitly
    returns. See [“Totality”](ch06.html#totality). |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `noImplicitReturns` | 确保每个函数中的每条代码路径都显式返回。参见 [“Totality”](ch06.html#totality)。
    |'
- en: '| `noImplicitThis` | Error when you use `this` in a function without explicitly
    annotating the `this` type. See [“Typing this”](ch04.html#typing-this). |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `noImplicitThis` | 在函数中使用`this`而未显式注释`this`类型时报错。参见 [“Typing this”](ch04.html#typing-this)。
    |'
- en: '| `noUnusedLocals` | Warn about unused local variables. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `noUnusedLocals` | 警告未使用的局部变量。 |'
- en: '| `noUnusedParameters` | Warn about unused function parameters. Prefix your
    parameter name with `_` to ignore this error. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `noUnusedParameters` | 警告未使用的函数参数。使用 `_` 前缀忽略此错误。 |'
- en: '| `strictBindCallApply` | Enforce type safety for `bind`, `call`, and `apply`.
    See [“call, apply, and bind”](ch04.html#call-apply-bind). |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `strictBindCallApply` | 强制执行`bind`、`call`和`apply`的类型安全性。参见 [“call, apply,
    and bind”](ch04.html#call-apply-bind)。 |'
- en: '| `strictFunctionTypes` | Enforce that functions are contravariant in their
    parameter and `this` types. See [“Function variance”](ch06.html#function-variance).
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `strictFunctionTypes` | 强制函数在其参数和`this`类型上是逆变的。参见 [“Function variance”](ch06.html#function-variance)。
    |'
- en: '| `strictNullChecks` | Promote `null` to a type. See [“null, undefined, void,
    and never”](ch03.html#null-undefined). |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `strictNullChecks` | 将`null`提升为一种类型。参见 [“null, undefined, void, and never”](ch03.html#null-undefined)。
    |'
- en: '| `strictPropertyInitialization` | Enforce that class properties are either
    nullable or initialized. See [Chapter 5](ch05.html#classes). |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `strictPropertyInitialization` | 强制类属性要么是可空的，要么被初始化。参见 [第5章](ch05.html#classes)。
    |'
