- en: Chapter 1\. From JavaScript to TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：从 JavaScript 到 TypeScript
- en: JavaScript today
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当前 JavaScript
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Supports browsers decades past
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 支持浏览器数十年
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Beauty of the web
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 网页的美丽
- en: 'Before talking about TypeScript, we need to first understand where it came
    from: JavaScript!'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论 TypeScript 之前，我们需要先了解它来自哪里：JavaScript！
- en: History of JavaScript
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 的历史
- en: JavaScript was designed in 10 days by Brendan Eich at Netscape in 1995 to be
    approachable and easy to use for websites. Developers have been poking fun at
    its quirks and perceived shortcomings ever since. I’ll cover some of them in the
    next section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 由 Brendan Eich 在 1995 年在 Netscape 设计完成，旨在为网站提供一种易于接近和使用的语言。开发者们从那时起就在调侃其怪癖和被认为的缺点。我将在下一节中介绍其中的一些。
- en: JavaScript has evolved tremendously since 1995, though! Its steering committee,
    TC39, has released new versions of ECMAScript—the language specification that
    JavaScript is based on—yearly since 2015 with new features that bring it in line
    with other modern languages. Impressively, even with regular new language versions,
    JavaScript has managed to maintain backward compatibility for decades in varying
    environments, including browsers, embedded applications, and server runtimes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1995 年以来，JavaScript 已经发展得非常迅猛！它的主导委员会 TC39 自 2015 年以来每年发布 ECMAScript 的新版本——JavaScript
    所基于的语言规范，这些新特性使其与其他现代语言保持一致。令人印象深刻的是，即使有定期发布的新语言版本，JavaScript 在各种环境中，包括浏览器、嵌入式应用和服务器运行时，几十年来仍然保持向后兼容性。
- en: Today, JavaScript is a wonderfully flexible language with a lot of strengths.
    One should appreciate that while JavaScript has its quirks, it’s also helped enable
    the incredible growth of web applications and the internet.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，JavaScript 是一门极具灵活性和众多优点的语言。人们应该赞赏 JavaScript 虽然有其特 quirks，但也帮助推动了 Web 应用和互联网的令人难以置信的增长。
- en: Show me the perfect programming language and I’ll show you a language with no
    users.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给我展示一个完美的编程语言，我会告诉你一个没有用户的语言。
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anders Hejlsberg, TSConf 2019
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Anders Hejlsberg，TSConf 2019
- en: Vanilla JavaScript’s Pitfalls
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生 JavaScript 的缺点
- en: 'Developers often refer to using JavaScript without any significant language
    extensions or frameworks as “vanilla”: referring to it being the familiar, original
    flavor. I’ll soon go over why TypeScript adds just the right flavor to overcome
    these particular major pitfalls, but it’s useful to understand just why they can
    be painful. All these weaknesses become more pronounced the larger and longer-lived
    a project gets.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者经常使用没有任何重要语言扩展或框架的 JavaScript 作为“原生”：这是指它作为熟悉的原始版本。我很快会介绍 TypeScript 是如何恰到好处地解决这些主要问题的，但了解它们为何会令人痛苦也是有益的。所有这些缺点在项目变得越来越大和更长寿时会更加显著。
- en: Costly Freedom
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自由的代价
- en: 'Many developers’ biggest gripe with JavaScript is unfortunately one of its
    key features: JavaScript provides virtually no restrictions in how you structure
    your code. That freedom makes it a ton of fun to start a project in JavaScript!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者对 JavaScript 的最大抱怨之一，不幸的是这也是它的关键特性之一：JavaScript 几乎没有限制你如何结构化你的代码。这种自由让人在
    JavaScript 中启动一个项目非常有趣！
- en: 'As you get to have more and more files, though, it becomes apparent how that
    freedom can be damaging. Take the following snippet, presented out of context
    from some fictional painting application:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着文件越来越多，自由的破坏性也变得越来越明显。从某些虚构的绘画应用程序中提取出来的下面这段代码片段就是一个典型例子，没有上下文支持：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Reading that code without any context, you can only have vague ideas on how
    to call the `paintPainting` function. Perhaps if you’ve worked in the surrounding
    codebase you may recall that `painter` should be what’s returned by some `getPainter`
    function. You might even make a lucky guess that `painting` is a string.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有任何上下文的情况下阅读该代码，你只能对如何调用 `paintPainting` 函数有模糊的想法。也许如果你在周围的代码库中工作过，你可能会记得
    `painter` 应该是某个 `getPainter` 函数返回的内容。你甚至可能会幸运地猜到 `painting` 是一个字符串。
- en: Even if those assumptions are correct, though, later changes to the code may
    invalidate them. Perhaps `painting` is changed from a string to some other data
    type, or maybe one or more of the painter’s methods are renamed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这些假设是正确的，稍后对代码的更改可能会使它们失效。也许 `painting` 从字符串更改为其他数据类型，或者可能会有一个或多个画家的方法被重命名。
- en: Other languages might refuse to let you run code if their compiler determines
    it would likely crash. Not so with dynamically typed languages—those that run
    code without checking if it will likely crash first—such as JavaScript.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其他语言可能会拒绝运行代码，如果它们的编译器确定它可能会崩溃。动态类型的语言——例如 JavaScript，运行代码时不会事先检查是否可能会崩溃。
- en: The freedom of code that makes JavaScript so fun becomes a real pain when you
    want safety in running your code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的自由性让 JavaScript 用起来很有趣，但当您希望在运行代码时获得安全性时，这成为一个真正的痛点。
- en: Loose Documentation
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 松散的文档
- en: 'Nothing exists in the JavaScript language specification to formalize describing
    what function parameters, function returns, variables, or other constructs in
    code are meant to be. Many developers have adopted a standard called JSDoc to
    describe functions and variables using block comments. The JSDoc standard describes
    how you might write documentation comments placed directly above constructs such
    as functions and variables, formatted in a standard way. Here’s an example, again
    taken out of context:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 语言规范中没有任何内容可以正式描述代码中函数参数、函数返回值、变量或其他结构的含义。许多开发人员采用了一个称为 JSDoc 的标准，使用块注释来描述函数和变量。JSDoc
    标准描述了如何编写直接放置在函数和变量等结构上方的文档注释，并以标准方式格式化。这里有一个例子，同样摘自上下文：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'JSDoc has key issues that often make it unpleasant to use in a large codebase:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JSDoc 存在一些关键问题，这些问题经常使得在大型代码库中使用它变得不愉快：
- en: Nothing stops JSDoc descriptions from being wrong about code.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有什么可以阻止 JSDoc 描述与代码不符。
- en: Even if your JSDoc descriptions were previously correct, during code refactors
    it can be difficult to find all the now-invalid JSDoc comments related to your
    changes.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使您的 JSDoc 描述以前是正确的，在代码重构过程中，可能很难找到所有与您的更改相关的现在无效的 JSDoc 注释。
- en: Describing complex objects is unwieldy and verbose, requiring multiple standalone
    comments to define types and their relationships.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述复杂对象笨拙且冗长，需要多个独立的注释来定义类型及其关系。
- en: Maintaining JSDoc comments across a dozen files doesn’t take up too much time,
    but across hundreds or even thousands of constantly updating files can be a real
    chore.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 维护十几个文件中的 JSDoc 注释不会花费太多时间，但在数百甚至数千个不断更新的文件中进行维护可能是一项真正的苦差事。
- en: Weaker Developer Tooling
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更弱的开发工具
- en: Because JavaScript doesn’t provide built-in ways to identify types, and code
    easily diverges from JSDoc comments, it can be difficult to automate large changes
    to or gain insights about a codebase. JavaScript developers are often surprised
    to see features in typed languages such as C# and Java that allow developers to
    perform class member renamings or jump to the place an argument’s type was declared.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 JavaScript 没有提供内置方法来识别类型，并且代码很容易偏离 JSDoc 注释，因此难以自动化地进行大规模的更改或获得关于代码库的见解。JavaScript
    开发人员经常会对像 C# 和 Java 这样的类型语言中的特性感到惊讶，这些特性允许开发人员执行类成员重命名或跳转到声明参数类型的位置。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'You may protest that modern IDEs such as VS Code do provide some development
    tools such as automated refactors to JavaScript. True, but: they use TypeScript
    or an equivalent under the hood for many of their JavaScript features, and those
    development tools are not as reliable or as powerful in most JavaScript code as
    they are in well-defined TypeScript code.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会抗议说现代 IDE（如 VS Code）提供了一些开发工具，例如自动重构到 JavaScript。没错，但是：它们在大多数 JavaScript
    代码中使用 TypeScript 或等效语言，在性能和可靠性上不如在良好定义的 TypeScript 代码中。
- en: TypeScript!
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript！
- en: TypeScript was created internally at Microsoft in the early 2010s then released
    and open sourced in 2012. The head of its development is Anders Hejlsberg, notable
    for also having lead the development of the popular C# and Turbo Pascal languages.
    TypeScript is often described as a “superset of JavaScript” or “JavaScript with
    types.” But what *is* TypeScript?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 在 2010 年代初期在 Microsoft 内部创建，然后于 2012 年发布并开源。其开发负责人是 Anders Hejlsberg，他也负责开发流行的
    C# 和 Turbo Pascal 语言。TypeScript 通常被描述为“JavaScript 的超集”或“带类型的 JavaScript”。但是 TypeScript
    到底是什么呢？
- en: 'TypeScript is four things:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是四个东西：
- en: Programming language
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言
- en: A language that includes all the existing JavaScript syntax, plus new TypeScript-specific
    syntax for defining and using types
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一种语言，包括所有现有的 JavaScript 语法，以及用于定义和使用类型的新的 TypeScript 特定语法
- en: Type checker
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器
- en: A program that takes in a set of files written in JavaScript and/or TypeScript,
    develops an understanding of all the constructs (variables, functions…) created,
    and lets you know if it thinks anything is set up incorrectly
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个接受 JavaScript 和/或 TypeScript 编写的一组文件的程序，开发对所有创建的结构（变量、函数等）的理解，并告知您是否认为任何设置不正确
- en: Compiler
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器
- en: A program that runs the type checker, reports any issues, then outputs the equivalent
    JavaScript code
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 运行类型检查器的程序，报告任何问题，然后输出等效的 JavaScript 代码
- en: Language service
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 语言服务
- en: A program that uses the type checker to tell editors such as VS Code how to
    provide helpful utilities to developers
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用类型检查器告知诸如 VS Code 等编辑器如何为开发人员提供有用工具的程序
- en: Getting Started in the TypeScript Playground
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 TypeScript Playground 入门
- en: You’ve read a good amount about TypeScript by now. Let’s get you writing it!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您已经阅读了大量关于 TypeScript 的内容。让我们开始编写它吧！
- en: The main TypeScript website includes a “Playground” editor at [*https://www.typescriptlang.org/play*](https://www.typescriptlang.org/play).
    You can type code into the main editor and see many of the same editor suggestions
    you would see when working with TypeScript locally in a full IDE (Integrated Development
    Environment).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的主要网站在 [*https://www.typescriptlang.org/play*](https://www.typescriptlang.org/play)
    包含一个“Playground”编辑器。您可以在主编辑器中输入代码，并查看与在本地使用完整集成开发环境（IDE）时相同的许多编辑器建议。
- en: Most of the snippets in this book are intentionally small and self-contained
    enough that you could type them out in the Playground and tinker with them for
    fun.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中大多数片段都故意足够小且自包含，以便您可以在 Playground 中输入它们并进行乐趣调整。
- en: TypeScript in Action
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScript 实战
- en: 'Take a look at this code snippet:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这段代码片段：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code is written in normal JavaScript syntax—I haven’t introduced TypeScript-specific
    syntax yet. If you were to run the TypeScript type checker on this code, it would
    use its knowledge that the `length` property of a string is a number—not a function—to
    give you the complaint shown in the comment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码使用普通的 JavaScript 语法编写——我还没有介绍 TypeScript 特定的语法。如果您对此代码运行 TypeScript 类型检查器，它会利用其知识，即字符串的
    `length` 属性是一个数字而不是函数，从而向您显示在注释中所示的投诉。
- en: If you were to paste that code into the playground or an editor, it would be
    told by the language service to give you a little red squiggly under `length`
    indicating TypeScript’s displeasure with your code. Hovering over the squigglied
    code would give you the text of the complaint ([Figure 1-1](#string_length_not_callable)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将该代码粘贴到 playground 或编辑器中，语言服务会在 `length` 下面放置一个小红波浪线，表示 TypeScript 对您的代码不满意。悬停在这段波浪线下面会显示投诉的文本（[图 1-1](#string_length_not_callable)）。
- en: '![TypeScript reporting the ''length'' property of a firstName string is not
    callable.](Images/lets_0101.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![TypeScript 报告 ''length'' 属性的 firstName 字符串不可调用。](Images/lets_0101.png)'
- en: Figure 1-1\. TypeScript reporting an error on string length not being callable
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. TypeScript 报告字符串长度不可调用的错误
- en: Being told of these simple errors in your editor as you type them is a lot more
    pleasant than waiting until a particular line of code happens to be run and throw
    an error. If you tried to run that code in JavaScript, it would crash!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您键入时，在编辑器中即时发现这些简单错误要比等到特定行代码运行并抛出错误要愉快得多。如果您尝试在 JavaScript 中运行该代码，它会崩溃！
- en: Freedom Through Restriction
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过限制获得自由
- en: TypeScript allows us to specify what types of values may be provided for parameters
    and variables. Some developers find having to explicitly write out in your code
    how particular areas are supposed to work to be restrictive at first.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 允许我们指定参数和变量可以提供的值的类型。有些开发人员最初会觉得在代码中明确写出特定区域如何工作是一种限制。
- en: But! I would argue that being “restricted” in this way is actually a good thing!
    By restricting our code to only being able to be used in the ways you specify,
    TypeScript can give you confidence that changes in one area of code won’t break
    other areas of code that use it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是！我认为以这种方式“受限制”实际上是件好事！通过将我们的代码限制为只能按照您指定的方式使用，TypeScript可以让您确信代码中的更改不会破坏其他使用它的代码区域。
- en: If, say, you change the number of required parameters for a function, TypeScript
    will let you know if you forget to update a place that calls the function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您更改了函数的必需参数数量，TypeScript 将在您忘记更新调用该函数的地方时提醒您。
- en: 'In the following example, `sayMyName` was changed from taking in two parameters
    to taking one parameter, but the call to it with two strings wasn’t updated and
    so is triggering a TypeScript complaint:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，`sayMyName` 从接收两个参数更改为接收一个参数，但调用它时传递了两个字符串，并因此触发了 TypeScript 的投诉：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That code would run without crashing in JavaScript, but its output would be
    different from expected (it wouldn’t include `"Knowles"`):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码在 JavaScript 中不会崩溃运行，但其输出与预期不同（不包括 `"Knowles"`）：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Calling functions with the wrong number of arguments is exactly the sort of
    short-sighted JavaScript freedom that TypeScript restricts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数时使用错误数量的参数正是 TypeScript 限制的短视 JavaScript 自由的一种体现。
- en: Precise Documentation
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精确的文档
- en: 'Let’s look at a TypeScript-ified version of the `paintPainting` function from
    earlier. Although I haven’t yet gone over the specifics of TypeScript syntax for
    documenting types, the following snippet still hints at the great precision with
    which TypeScript can document code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下之前的`paintPainting`函数的TypeScript版本。尽管我还没有详细介绍用于记录类型的TypeScript语法，但以下代码片段仍然暗示了TypeScript可以精确记录代码的能力：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A TypeScript developer reading this code for the first time could understand
    that `painter` has at least three properties, two of which are methods. By baking
    in syntax to describe the “shapes” of objects, TypeScript provides an excellent,
    enforced system for describing how objects look.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次阅读此代码的TypeScript开发人员可以理解`painter`至少有三个属性，其中两个是方法。通过嵌入描述对象“形状”的语法，TypeScript提供了一个出色的、强制性的系统，用于描述对象的外观。
- en: Stronger Developer Tooling
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更强大的开发人员工具
- en: TypeScript’s typings allow editors such as VS Code to gain much deeper insights
    into your code. They can then use those insights to surface intelligent suggestions
    as you type. These suggestions can be incredibly useful for development.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的类型允许诸如VS Code之类的编辑器更深入地了解您的代码。它们可以利用这些见解在您输入时提供智能建议。这些建议对开发非常有用。
- en: If you’ve used VS Code to write JavaScript before, you might have noticed that
    it suggests “autocompletions” as you write code with built-in types of objects
    like strings. If, say, you start typing the member of something known to be a
    string, TypeScript can suggest all the members of the strings ([Figure 1-2](#javascript_autocomplete)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前使用VS Code编写JavaScript，您可能已经注意到，当您使用内置对象类型（如字符串）编写代码时，它会建议“自动完成”。例如，如果您开始输入已知为字符串的某个成员，TypeScript可以建议所有字符串的成员（[图1-2](#javascript_autocomplete)）。
- en: '![TypeScript suggesting a dropdown of properties starting with ''se'' as members
    of a string.](Images/lets_0102.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![TypeScript建议一个下拉列表，其中以''se''开头的属性作为字符串的成员。](Images/lets_0102.png)'
- en: Figure 1-2\. TypeScript providing autocompletion suggestions in JavaScript for
    a string
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2。TypeScript为字符串提供JavaScript中的自动完成建议
- en: When you add TypeScript’s type checker for understanding code, it can give you
    these useful suggestions even for code you’ve written. Upon typing `painter.`
    in the `paintPainting` function, TypeScript would take its knowledge that the
    `painter` parameter is of type `Painter` and the `Painter` type has the following
    members ([Figure 1-3](#typescript_painter_dropdown)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为了理解代码添加TypeScript的类型检查器时，即使是您编写的代码，它也可以为您提供这些有用的建议。在`paintPainting`函数中键入`painter.`时，TypeScript会知道`painter`参数的类型是`Painter`，而`Painter`类型具有以下成员（[图1-3](#typescript_painter_dropdown)）。
- en: '![TypeScript suggesting a dropdown of properties starting with ''se'' as members
    of a string.](Images/lets_0103.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![TypeScript建议一个下拉列表，其中以''se''开头的属性作为字符串的成员。](Images/lets_0103.png)'
- en: Figure 1-3\. TypeScript providing autocompletion suggestions in JavaScript for
    a string
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-3。TypeScript为字符串提供JavaScript中的自动完成建议
- en: Snazzy! I’ll cover a plethora of other useful editor features in [Chapter 12,
    “Using IDE Features”](ch12.xhtml#using_ide_features).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我将在[第12章，“使用IDE功能”](ch12.xhtml#using_ide_features)中介绍大量其他有用的编辑器功能。
- en: Compiling Syntax
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译语法
- en: TypeScript’s compiler allows us to input TypeScript syntax, have it type checked,
    and get the equivalent JavaScript emitted. As a convenience, the compiler may
    also take modern JavaScript syntax and compile it down into its older ECMAScript
    equivalents.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的编译器允许我们输入TypeScript语法，进行类型检查，并获得等效的JavaScript输出。作为一种便利，编译器还可以将现代JavaScript语法编译成其较旧的ECMAScript等效形式。
- en: 'If you were to paste this TypeScript code into the Playground:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将此TypeScript代码粘贴到Playground中：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Playground would show you on the right-hand side of the screen that this
    would be the equivalent JavaScript output by the compiler ([Figure 1-4](#playground_artist_compile)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Playground会在屏幕右侧显示，编译器输出的等效JavaScript代码（[图1-4](#playground_artist_compile)）。
- en: '![TypeScript Playground compiling TypeScript code into equivalent JavaScript.](Images/lets_0104.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![TypeScript Playground将TypeScript代码编译成等效的JavaScript。](Images/lets_0104.png)'
- en: Figure 1-4\. TypeScript Playground compiling TypeScript code into equivalent
    JavaScript
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-4。TypeScript Playground将TypeScript代码编译成等效的JavaScript
- en: The TypeScript Playground is a great tool for showing how source TypeScript
    becomes output JavaScript.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript Playground是展示源TypeScript如何变成输出JavaScript的绝佳工具。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Many JavaScript projects use dedicated transpilers such as Babel ([*https://babeljs.io*](https://babeljs.io))
    instead of TypeScript’s own to transpile source code into runnable JavaScript.
    You can find a list of common project starters on [*https://learningtypescript.com/starters*](https://learningtypescript.com/starters).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 JavaScript 项目使用专门的转译器，如 Babel ([*https://babeljs.io*](https://babeljs.io))，而不是
    TypeScript 自己的转译器来将源代码转译为可运行的 JavaScript。你可以在 [*https://learningtypescript.com/starters*](https://learningtypescript.com/starters)
    上找到常见项目启动器的列表。
- en: Getting Started Locally
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地开始
- en: 'You can run TypeScript on your computer as long as you have Node.js installed.
    To install the latest version of TypeScript globally, run the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你的计算机安装了 Node.js，就可以在计算机上运行 TypeScript。要全局安装最新版本的 TypeScript，请运行以下命令：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, you’ll be able to run TypeScript on the command line with the `tsc` (**T**ype**S**cript
    **C**ompiler) command. Try it with the `--version` flag to make sure it’s set
    up properly:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过 `tsc`（**T**ype**S**cript **C**ompiler）命令在命令行上运行 TypeScript。尝试使用 `--version`
    标志确保它已正确设置：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It should print out something like `Version X.Y.Z`—whichever version is current
    as of you installing TypeScript:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该输出类似 `Version X.Y.Z` 的东西——安装 TypeScript 时的当前版本：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running Locally
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地运行
- en: 'Now that TypeScript is installed, let’s have you set up a folder locally to
    run TypeScript on code. Create a folder somewhere on your computer and run this
    command to create a new *tsconfig.json* configuration file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 TypeScript 已安装好，让我们在本地设置一个文件夹来运行 TypeScript 代码。在你的计算机上的任意位置创建一个文件夹，并运行以下命令来创建一个新的
    *tsconfig.json* 配置文件：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A *tsconfig.json* file declares the settings that TypeScript uses when analyzing
    your code. Most of the options in that file aren’t going to be relevant to you
    in this book (there are a lot of uncommon edge cases in programming that the language
    needs to account for!). I’ll cover them in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options).
    The important feature is that now you can run `tsc` to tell TypeScript to compile
    all the files in that folder and TypeScript will refer to that *tsconfig.json*
    for any configuration options.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*tsconfig.json* 文件声明了 TypeScript 在分析你的代码时使用的设置。在这本书中，文件中的大多数选项对你来说并不重要（编程中存在许多罕见的边界案例，语言需要考虑到这些情况！）。我会在
    [第 13 章，“配置选项”](ch13.xhtml#configuration_options) 中进行讲解。现在的重要功能是你现在可以运行 `tsc`
    命令来告诉 TypeScript 编译该文件夹中的所有文件，并且 TypeScript 将参考 *tsconfig.json* 文件中的任何配置选项。'
- en: 'Try adding a file named *index.ts* with the following contents:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试添加一个名为 *index.ts* 的文件，其中包含以下内容：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, run `tsc` and provide it the name of that *index.ts* file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行 `tsc` 并提供 *index.ts* 文件的名称：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should get an error that looks roughly like:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到一个类似以下的错误：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Indeed, `blub` does not exist on the `console`. What was I thinking?
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，在 `console` 上不存在 `blub`。我当时在想什么呢？
- en: Before you fix the code to appease TypeScript, note that `tsc` created an *index.js*
    for you with contents including the `console.blub`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在你修复代码以符合 TypeScript 要求之前，请注意，`tsc` 为你创建了一个名为 *index.js* 的文件，其中包含了 `console.blub`。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is an important concept: even though there was a *type error* in our code,
    the *syntax* was still completely valid. The TypeScript compiler will still produce
    JavaScript from an input file regardless of any type errors.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的概念：尽管我们的代码中存在 *类型错误*，但 *语法* 仍然完全有效。TypeScript 编译器仍将从输入文件生成 JavaScript，而不管是否存在任何类型错误。
- en: 'Correct the code in *index.ts* to call `console.log` and run `tsc` again. There
    should be no complaints in your terminal, and the *index.js* file should now contain
    updated output code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 修正 *index.ts* 中的代码以调用 `console.log` 并再次运行 `tsc`。在你的终端中应该没有任何投诉，并且 *index.js*
    文件现在应包含更新后的输出代码：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: I highly recommend playing with the book’s snippets as you read through them,
    either in the playground or in an editor with TypeScript support, meaning it runs
    the TypeScript language service for you. Small self-contained exercises, as well
    as larger projects, are also available to help you practice what you’ve learned
    on [*https://learningtypescript.com*](https://learningtypescript.com).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议在阅读过程中与书中的代码片段进行互动，可以在 playground 中或者带 TypeScript 支持的编辑器中运行它们。这意味着它会为你运行
    TypeScript 语言服务。书中还提供了一些小型的自包含练习和更大的项目，帮助你练习所学的内容，你可以在 [*https://learningtypescript.com*](https://learningtypescript.com)
    上找到这些资源。
- en: Editor Features
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器功能
- en: Another benefit of creating a *tsconfig.json* file is that when editors are
    opened to a particular folder, they will now recognize that folder as a TypeScript
    project. For example, if you open VS Code in a folder, the settings it uses to
    analyze your TypeScript code will respect whatever’s in that folder’s *tsconfig.json*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 *tsconfig.json* 文件的另一个好处是，当编辑器打开到特定文件夹时，它们现在将识别该文件夹为 TypeScript 项目。例如，如果你在一个文件夹中打开
    VS Code，则用于分析你的 TypeScript 代码的设置将尊重该文件夹 *tsconfig.json* 中的内容。
- en: As an exercise, go back through the code snippets in this chapter and type them
    in your editor. You should see drop-downs suggesting completions for names as
    you type them, especially for members such as the `log` on `console`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个练习，回顾本章中的代码片段，并在编辑器中输入它们。当你输入时，你应该看到下拉列表建议为名称（特别是 `console` 上的 `log`）完成。
- en: 'Very exciting: you’re using the TypeScript language service to help yourself
    write code! You’re on your way to being a TypeScript developer!'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 非常激动人心：你正在使用 TypeScript 语言服务帮助自己编写代码！你正在成为一名 TypeScript 开发者的路上！
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: VS Code comes with great TypeScript support and is itself built in TypeScript.
    You don’t *have* to use it for TypeScript—virtually all modern editors have excellent
    TypeScript support either built-in or available via plugins—but I do recommend
    it for at least trying out TypeScript while reading through this book. If you
    do use a different editor, I also recommend enabling its TypeScript support. I’ll
    cover editor features more deeply in [Chapter 12, “Using IDE Features”](ch12.xhtml#using_ide_features).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 提供了出色的 TypeScript 支持，它本身就是用 TypeScript 构建的。你不一定非要用它来写 TypeScript——几乎所有现代编辑器都具有出色的
    TypeScript 支持，无论是内置的还是通过插件提供的——但我建议至少在阅读本书时尝试一下 TypeScript。如果你使用不同的编辑器，我也建议启用其
    TypeScript 支持。我将更深入地介绍编辑器功能，见[第 12 章，“使用 IDE 功能”](ch12.xhtml#using_ide_features)。
- en: What TypeScript Is Not
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript 的非所是
- en: Now that you’ve seen how wonderful TypeScript is, I have to warn you about some
    limitations. Every tool excels at some areas and has limitations in others.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到 TypeScript 有多么美妙了，我必须警告你一些局限性。每种工具都在某些领域表现出色，在其他方面则有局限性。
- en: A Remedy for Bad Code
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 治愈糟糕代码的良方
- en: TypeScript helps you structure your JavaScript, but other than enforcing type
    safety, it doesn’t enforce any opinions on what that structure should look like.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 帮助你组织你的 JavaScript，但除了强制类型安全外，它不会对这种结构有任何看法。
- en: Good!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 好！
- en: TypeScript is a language that everyone is meant to be able to use, not an opinionated
    framework with a target audience. You can write code using whatever architectural
    patterns you’re used to from JavaScript, and TypeScript will support them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是一种每个人都应该能够使用的语言，而不是针对特定目标受众的主观框架。你可以使用 JavaScript 中习惯的任何架构模式编写代码，TypeScript
    将支持它们。
- en: If anybody tries to tell you that TypeScript forces you to use classes, or makes
    it hard to write good code, or whatever code style complaints are out there, give
    them a stern look and tell them to pick up a copy of *Learning TypeScript*. TypeScript
    does not enforce code style opinions such as whether to use classes or functions,
    nor is it associated with any particular application framework—Angular, React,
    etc.—over others.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人告诉你 TypeScript 强制使用类，或者使得编写良好代码变得困难，或者对其他任何代码风格抱怨，给他们一个严厉的眼神，并告诉他们去买一本《学习
    TypeScript》。TypeScript 不强制代码风格的看法，比如是否使用类或函数，也不与任何特定的应用框架（如 Angular、React 等）相关联。
- en: Extensions to JavaScript (Mostly)
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 的扩展（主要是）
- en: 'TypeScript’s design goals explicitly state that it should:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的设计目标明确指出它应该：
- en: Align with current and future ECMAScript proposals
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与当前和未来的 ECMAScript 提议保持一致
- en: Preserve runtime behavior of all JavaScript code
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留所有 JavaScript 代码的运行时行为
- en: TypeScript does not try to change how JavaScript works at all. Its creators
    have tried very hard to avoid adding new code features that would add to or conflict
    with JavaScript. Such a task is the domain of TC39, the technical committee that
    works on ECMAScript itself.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 并不试图改变 JavaScript 的工作方式。它的创造者们非常努力地避免添加新的代码功能，这些功能可能会增加或与 JavaScript
    冲突。这样的任务是 TC39 的领域，即负责 ECMAScript 的技术委员会。
- en: There are a few older features in TypeScript that were added many years ago
    to reflect common use cases in JavaScript code. Most of those features are either
    relatively uncommon or have fallen out of favor, and are only covered briefly
    in [Chapter 14, “Syntax Extensions”](ch14.xhtml#syntax_extensions). I recommend
    staying away from them in most cases.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 中有一些较早的功能，多年前添加以反映 JavaScript 代码中的常见用例。这些功能大多数情况下要么相对不常见，要么已经不再流行，并且仅在
    [第 14 章，“语法扩展”](ch14.xhtml#syntax_extensions) 中简要介绍。我建议在大多数情况下远离它们。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As of 2022, TC39 is investigating adding a syntax for type annotations to JavaScript.
    The latest proposals have them acting as a form of comments that do not impact
    code at runtime and are used only for development-time systems such as TypeScript.
    It will be many years until type comments or some equivalent are added to JavaScript,
    so they won’t be mentioned elsewhere in this book.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2022 年，TC39 正在研究向 JavaScript 添加类型注解的语法。最新的提议将它们作为不影响运行时代码的一种形式的注释，仅用于开发时系统，如
    TypeScript。将来多年内，JavaScript 可能会添加类型注释或其等效物，因此本书中不会进一步提到。
- en: Slower Than JavaScript
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比 JavaScript 慢
- en: Sometimes on the internet, you might hear some opinionated developers complain
    that TypeScript is slower than JavaScript at runtime. That claim is generally
    inaccurate and misleading. The only changes TypeScript makes to code are if you
    ask it to compile your code down to earlier versions of JavaScript to support
    older runtime environments such as Internet Explorer 11. Many production frameworks
    don’t use TypeScript’s compiler at all, instead using a separate tool for transpilation
    (the part of compiling that converts source code from one programming language
    into another) and TypeScript only for type checking.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上有时您可能会听到一些有主观看法的开发者抱怨 TypeScript 在运行时比 JavaScript 慢。这种说法通常是不准确和误导性的。TypeScript
    对代码的唯一更改是，如果要求它将您的代码编译成早期版本的 JavaScript 以支持旧的运行时环境，如 Internet Explorer 11。许多生产框架根本不使用
    TypeScript 的编译器，而是使用单独的工具进行转译（编译的部分，将源代码从一种编程语言转换为另一种）并且仅用 TypeScript 进行类型检查。
- en: TypeScript does, however, add some time to building your code. TypeScript code
    must be compiled down to JavaScript before most environments, such as browsers
    and Node.js, will run it. Most build pipelines are generally set up so that the
    performance hit is negligible, and slower TypeScript features such as analyzing
    code for likely mistakes are done separately from generating runnable application
    code files.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 确实会增加编译代码的时间。大多数环境（如浏览器和 Node.js）在运行 TypeScript 代码之前，必须将其编译成 JavaScript。大多数构建管道通常设置为性能损失可以忽略不计，而较慢的
    TypeScript 功能（如分析代码以检测可能的错误）是独立于生成可运行应用程序代码文件的。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Even projects that seemingly allow running TypeScript code directly, such as
    ts-node and Deno, themselves internally convert TypeScript code to JavaScript
    before running it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 即使看起来允许直接运行 TypeScript 代码的项目，如 ts-node 和 Deno，在运行之前也会将 TypeScript 代码内部转换为 JavaScript。
- en: Finished Evolving
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束进化
- en: The web is nowhere near finished evolving, and thus neither is TypeScript. The
    TypeScript language is constantly receiving bug fixes and feature additions to
    match the ever-shifting needs of the web community. The basic tenets of TypeScript
    you’ll learn in this book will remain about the same, but error messages, fancier
    features, and editor integrations will improve over time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Web 的进化还远未结束，因此 TypeScript 也未成熟。TypeScript 语言不断接收 bug 修复和功能增强，以满足 Web 社区不断变化的需求。本书中学到的
    TypeScript 的基本原则大致保持不变，但错误消息、更复杂的功能和编辑器集成将随时间改进。
- en: In fact, while this edition of the book was published with TypeScript version
    4.7.2 as the latest, by the time you started reading it, we can be certain a newer
    version has been released. Some of the TypeScript error messages in this book
    might even already be out of date!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，虽然本书的这个版本是基于 TypeScript 4.7.2 发布的，但当您开始阅读时，我们可以肯定已经发布了更新版本。本书中的一些 TypeScript
    错误消息甚至可能已经过时！
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you read up on the context for some of JavaScript’s main weaknesses,
    where TypeScript comes into play, and how to get started with TypeScript:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解 JavaScript 的一些主要弱点的背景，TypeScript 的作用以及如何开始使用 TypeScript：
- en: A brief history of JavaScript
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 的简短历史
- en: 'JavaScript’s pitfalls: costly freedom, loose documentation, and weaker developer
    tooling'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 的缺点：昂贵的自由、松散的文档和较弱的开发工具
- en: 'What TypeScript is: a programming language, a type checker, a compiler, and
    a language service'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 是什么：一种编程语言，类型检查器，编译器和语言服务
- en: 'TypeScript’s advantages: freedom through restriction, precise documentation,
    and stronger developer tooling'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 的优势：通过限制获得自由，精确的文档和更强大的开发者工具
- en: Getting started writing TypeScript code on the TypeScript Playground and locally
    on your computer
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始在 TypeScript Playground 和本地计算机上编写 TypeScript 代码
- en: 'What TypeScript is not: a remedy for bad code, extensions to JavaScript (mostly),
    slower than JavaScript, or finished evolving'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 并非什么：修复糟糕代码的药方，JavaScript 的扩展（大多数情况下），比 JavaScript 更慢，或者已经完全进化完毕。
- en: Tip
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/from-javascript-to-typescript*](https://learningtypescript.com/from-javascript-to-typescript).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成阅读本章之后，请在[*https://learningtypescript.com/from-javascript-to-typescript*](https://learningtypescript.com/from-javascript-to-typescript)上练习你学到的内容。
- en: What happens if you spot errors running the TypeScript compiler?
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你在运行 TypeScript 编译器时发现错误会发生什么？
- en: ''
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You’d better go `catch` them!
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你最好去`catch`它们！
