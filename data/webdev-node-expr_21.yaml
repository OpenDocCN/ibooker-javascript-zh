- en: Chapter 21\. Going Live
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第21章. 上线
- en: 'The big day is here: you’ve spent weeks or months toiling over your labor of
    love, and now your website or service is ready to launch. It’s not as easy as
    just “flipping a switch” and then your website is live…or is it?'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大日子终于到了：你花了数周或数月的心血，现在你的网站或服务已经准备好上线了。这并不像“翻开一个开关”那么简单，然后你的网站就上线了……或者说是吗？
- en: In this chapter (which you should really read *weeks* before launch, not the
    day of!), you’ll learn about some of the domain registration and hosting services
    available to you, techniques for moving from a staging environment to production,
    deployment techniques, and things to consider when picking production services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中（你真的应该在发布前*数周*而不是当天读这部分！），你将了解到一些域名注册和托管服务，以及从测试环境到生产环境的迁移技巧、部署技术以及选择生产服务时需要考虑的事项。
- en: Domain Registration and Hosting
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域名注册和托管
- en: People are often confused about the difference between *domain registration*
    and *hosting*. If you’re reading this book, you probably aren’t, but I bet you
    know people who are, like your clients or your manager.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 人们经常困惑于*域名注册*和*托管*之间的区别。如果你在读这本书，你可能不会困惑，但我打赌你知道有些人是，比如你的客户或你的经理。
- en: Every website and service on the internet can be identified by an *Internet
    Protocol (IP) address* (or more than one). These numbers are not particularly
    friendly to humans (and that situation will only get worse as IPv6 adoption improves),
    but your computer ultimately needs these numbers to show you a web page. That’s
    where *domain names* come in. They map a human-friendly name (like *google.com*)
    with an IP address (74.125.239.13 or 2601:1c2:1902:5b38:c256:27ff:fe70:47d1).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的每个网站和服务都可以通过一个*互联网协议（IP）地址*（或多个）进行识别。这些数字对人类来说并不友好（随着IPv6的推广，情况只会变得更糟），但是你的计算机最终需要这些数字来显示网页。这就是*域名*的作用。它们将一个人类友好的名称（如*google.com*）映射到一个IP地址（74.125.239.13或2601:1c2:1902:5b38:c256:27ff:fe70:47d1）。
- en: A real-world analogy would be the difference between a business name and a physical
    address. A domain name is like your business name (Apple), and an IP address is
    like your physical address (One Apple Park Way, Cupertino, CA 95014). If you need
    to actually get in your car and visit Apple’s headquarters, you’ll need to know
    the physical address. Fortunately, if you know the business name, you can probably
    get the physical address. The other reason this abstraction is helpful is that
    an organization can move (getting a new physical address), and people can still
    find it even though it’s moved (as a matter of fact, Apple *did* move its physical
    headquarters between the first and second editions of this book).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实世界的类比是企业名称和物理地址之间的区别。域名就像你的企业名称（苹果），IP地址就像你的物理地址（One Apple Park Way, Cupertino,
    CA 95014）。如果你真的需要驾车去访问苹果总部，你就需要知道物理地址。幸运的是，如果你知道企业名称，你可能会找到物理地址。这种抽象有帮助的另一个原因是，一个组织可以搬迁（获取新的物理地址），人们仍然可以找到它，尽管它已经搬迁过（事实上，苹果在这本书的第一版和第二版之间确实搬过总部）。
- en: '*Hosting*, on the other hand, describes the computers that run your website.
    To continue the physical analogy, hosting could be compared to the buildings you
    see once you reach the physical address. What is often confusing to people is
    that domain registration has very little to do with hosting, and you do not always
    purchase your domain from the same entity that you pay for hosting (in the same
    way that you usually buy land from one person and pay another person to build
    and maintain buildings for you).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，*托管*描述的是运行你的网站的计算机。继续使用物理类比，托管可以比作你到达物理地址后看到的建筑物。人们经常感到困惑的是，域名注册与托管几乎没有关系，你并不总是从同一实体那里购买域名和托管服务（就像通常情况下你从一个人那里购买土地，另一个人负责为你建造和维护建筑物）。
- en: 'While it’s certainly possible to host your website without a domain name, it’s
    quite unfriendly: IP addresses aren’t very marketable! Usually, when you purchase
    hosting, you’re automatically assigned a subdomain (which we’ll cover in a moment),
    which can be thought of as something between a marketing-friendly domain name
    and an IP address (for example, *ec2-54-201-235-192.us-west-2.compute.amazonaws.com*).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可能有可能在没有域名的情况下托管你的网站，但这样做不友好：IP地址并不具有市场化！通常情况下，当你购买托管服务时，会自动分配一个子域名（我们稍后会介绍），这可以被看作是介于一个市场友好的域名和一个IP地址之间的东西（例如，*ec2-54-201-235-192.us-west-2.compute.amazonaws.com*）。
- en: 'Once you have a domain, and you go live, you could reach your website with
    multiple URLs. For example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有了一个域名，并且上线了，你可以通过多个URL访问你的网站。例如：
- en: '*http://meadowlarktravel.com/*'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*http://meadowlarktravel.com/*'
- en: '*http://www.meadowlarktravel.com/*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*http://www.meadowlarktravel.com/*'
- en: '*http://ec2-54-201-235-192.us-west-2.compute.amazonaws.com/*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*http://ec2-54-201-235-192.us-west-2.compute.amazonaws.com/*'
- en: '*http://54.201.235.192/*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*http://54.201.235.192/*'
- en: Thanks to domain mapping, all of these addresses point to the same website.
    Once the requests reach your website, it is possible to take action based on the
    URL that was used. For example, if someone gets to your website from the IP address,
    you could automatically redirect to the domain name, though that is not very common
    as there is little point to it (it is more common to redirect from *http://meadowlarktravel.com/*
    to *http://www.meadowlarktravel.com/*).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于域名映射，所有这些地址都指向同一个网站。一旦请求到达你的网站，就可以根据使用的URL采取行动。例如，如果有人从IP地址访问你的网站，你可以自动重定向到域名，尽管这种情况并不常见（更常见的是从*http://meadowlarktravel.com/*重定向到*http://www.meadowlarktravel.com/*）。
- en: Most domain registrars offer hosting services (or partner with companies that
    do). Aside from AWS, I’ve never found registrar hosting options to be particularly
    attractive, and it’s okay to separate domain registration and hosting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数域名注册商提供主机服务（或与提供主机服务的公司合作）。除了AWS，我从未觉得注册商的主机选项特别吸引人，将域名注册和主机服务分开是可以的。
- en: Domain Name System
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域名系统（DNS）
- en: The *Domain Name System* (DNS) is what’s responsible for mapping domain names
    to IP addresses. The system is fairly intricate, but there are some things about
    DNS that you should know as a website owner.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*域名系统*（DNS）负责将域名映射到IP地址。这个系统相当复杂，但作为网站所有者，你应该了解一些关于DNS的事情。'
- en: Security
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性
- en: You should always keep in mind that *domain names are valuable*. If a hacker
    were to completely compromise your hosting service and take control of your hosting,
    but you retained control of your domain, you could get new hosting and redirect
    the domain. If, on the other hand, your *domain* were compromised, you could be
    in real trouble. Your reputation is tied to your domain, and good domain names
    are carefully guarded. People who have lost control of domains have found that
    it can be devastating, and there are those in the world who will actively try
    to compromise your domain (especially if it’s a particularly short or memorable
    one) so they can sell it off, ruin your reputation, or blackmail you. The upshot
    is that *you should take domain security very seriously*, perhaps even more seriously
    than your data (depending on how valuable your data is). I’ve seen people spend
    inordinate amounts of time and money on hosting security while getting the cheapest,
    sketchiest domain registration they can find. Don’t make that mistake. (Fortunately,
    quality domain registration is not particularly expensive.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该时刻牢记*域名的价值*。如果黑客完全控制了你的主机服务并接管了你的主机，但你仍然控制着域名，你可以获取新的主机并重定向域名。然而，如果你的*域名*被攻破，情况可能会很严重。你的声誉与域名紧密相连，好的域名是谨慎保护的。那些失去域名控制权的人发现情况可能会非常严重，世界上有些人会积极尝试攻破你的域名（特别是特别短或容易记忆的域名），以便出售它、破坏你的声誉或敲诈你。总之，*你应该非常认真对待域名安全性*，甚至可能比对待数据安全性更为重要（这取决于你的数据价值）。我见过有人在购买主机安全性方面投入大量时间和金钱，却在域名注册上选择最便宜、最靠不住的服务商。不要犯这样的错误。（幸运的是，高质量的域名注册并不特别昂贵。）
- en: Given the importance of protecting ownership of your domain, you should employ
    good security practices with respect to your domain registration. At the very
    least, you should use strong, unique passwords, and employ proper password hygiene
    (no keeping it on a sticky note attached to your monitor). Preferably, you should
    use a registrar that offers two-factor authentication. Don’t be afraid to ask
    your registrar pointed questions about what is required to authorize changes to
    your account. The registrars I recommend are AWS Route 53, Name.com and Namecheap.com.
    All three offer two-factor authentication, and I have found their support to be
    good and their online control panels to be easy and robust.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到保护你的域名所有权的重要性，你应该在域名注册方面采取良好的安全实践。至少，你应该使用强大的、唯一的密码，并采用适当的密码卫生（不要将密码写在挂在显示器上的便条上）。最好是使用支持双因素认证的注册商。不要害怕向你的注册商提出直接的问题，询问如何授权对账户进行更改。我推荐的注册商包括AWS
    Route 53、Name.com和Namecheap.com。这三家都提供双因素认证，我发现它们的支持服务很好，在线控制面板也易于使用且功能强大。
- en: When you register a domain, you must provide a third-party email address that’s
    associated with that domain (i.e., if you’re registering *meadowlarktravel.com*,
    you shouldn’t use *admin@meadowlarktravel.com* as your registrant email). Since
    any security system is as strong as its weakest link, you should use an email
    address with good security. It’s quite common to use a Gmail or Outlook account,
    and if you do, you should employ the same security standards as you do with your
    domain registrar account (good password hygiene and two-factor authentication).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你注册一个域名时，你必须提供一个与该域名相关联的第三方电子邮件地址（即，如果你注册了 *meadowlarktravel.com*，你不应该使用 *admin@meadowlarktravel.com*
    作为你的注册邮箱）。由于任何安全系统的强度取决于它最薄弱的环节，你应该使用一个安全性好的电子邮件地址。使用Gmail或Outlook账户是相当普遍的，如果你使用这些账户，你应该采用与你的域名注册商账户相同的安全标准（良好的密码卫生和双因素认证）。
- en: Top-Level Domains
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶级域名
- en: 'What your domain ends with (such as *.com* or *.net*) is called a *top-level-domain*
    (TLD). Generally speaking, there are two types of TLD: country code TLDs and general
    TLDs. Country code TLDs (such as *.us*, *.es*, and *.uk*) are designed to provide
    a geographic categorization. However, there are few restrictions on who can acquire
    these TLDs (the internet is truly a global network, after all), so they are often
    used for “clever” domains, such as *placehold.it* and *goo.gl*.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你的域名以什么结尾（比如 *.com* 或 *.net*）被称为*顶级域名*（TLD）。一般来说，有两种类型的TLD：国家代码TLD和通用TLD。国家代码TLD（例如
    *.us*、*.es* 和 *.uk*）旨在提供地理分类。然而，几乎没有限制可以获取这些TLD的人（毕竟互联网是一个真正的全球网络），因此它们通常被用于“聪明”的域名，比如
    *placehold.it* 和 *goo.gl*。
- en: General TLDs (gTLDs) include the familiar *.com*, *.net*, *.gov*, *.fed*, *.mil*,
    and *.edu*. While anyone can acquire an available *.com* or *.net* domain, there
    are restrictions in place for the others mentioned. For more information, see
    [Table 21-1](#restrictedgtlds).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通用TLD（gTLDs）包括熟悉的 *.com*、*.net*、*.gov*、*.fed*、*.mil* 和 *.edu*。虽然任何人都可以获取可用的
    *.com* 或 *.net* 域名，但对其他提到的域名有一些限制。欲了解更多信息，请参见[表21-1](#restrictedgtlds)。
- en: Table 21-1\. Restricted gTLDs
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表21-1\. 受限制的gTLDs
- en: '| TLD | More information |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| TLD | 更多信息 |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *.gov*, *.fed* | [*https://www.dotgov.gov*](https://www.dotgov.gov) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| *.gov*, *.fed* | [*https://www.dotgov.gov*](https://www.dotgov.gov) |'
- en: '| *.edu* | [*https://net.educause.edu/*](https://net.educause.edu/) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| *.edu* | [*https://net.educause.edu/*](https://net.educause.edu/) |'
- en: '| *.mil* | Military personnel and contractors should contact their IT department,
    or the [Department of Defense Unified Registration System](http://bit.ly/354JvZF)
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| *.mil* | 军事人员和承包商应联系他们的IT部门，或者访问[国防部统一注册系统](http://bit.ly/354JvZF) |'
- en: The Internet Corporation for Assigned Names and Numbers (ICANN) is ultimately
    responsible for management of TLDs, though it delegates much of the actual administration
    to other organizations. Recently, the ICANN has authorized many new gTLDs, such
    as *.agency*, *.florist*, *.recipes*, and even *.ninja*. For the foreseeable future,
    *.com* will probably remain the “premium” TLD, and the hardest one to get real
    estate in. People who were lucky (or shrewd) enough to purchase *.com* domains
    in the internet’s formative years received massive payouts for prime domains (for
    example, Facebook purchased *fb.com* in 2010 for a whopping $8.5 million dollars).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网名称与数字地址分配机构（ICANN）最终负责管理顶级域名，尽管它将大部分实际管理工作委托给其他组织。最近，ICANN 授权了许多新的通用顶级域名（gTLD），如
    *.agency*, *.florist*, *.recipes*，甚至 *.ninja*。在可预见的未来，*.com* 可能仍然是“优质”的顶级域名，也是最难获取的。在互联网发展初期，购买
    *.com* 域名的人们因为拥有优质域名而获得了巨额回报（例如，Facebook 在 2010 年以惊人的 850 万美元购买了 *fb.com* 域名）。
- en: 'Given the scarcity of *.com* domains, people are turning to alternative TLDs,
    or using *.com.us* to try to get a domain that accurately reflects their organization.
    When picking a domain, you should consider how it’s going to be used. If you plan
    on marketing primarily electronically (where people are more likely to click a
    link than type in a domain), then you should probably focus more on getting a
    catchy or meaningful domain than a short one. If you’re focusing on print advertising,
    or you have reason to believe people will be entering your URL manually into their
    devices, you might consider alternative TLDs so you can get a shorter domain name.
    It’s also common practice to have two domains: a short, easy-to-type one, and
    a longer one more suitable for marketing.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 *.com* 域名的稀缺性，人们开始转向使用替代的顶级域名，或者使用 *.com.us* 尝试获取更符合他们组织特征的域名。在选择域名时，应考虑其将如何使用。如果您计划主要通过电子市场营销（人们更可能点击链接而不是输入域名），则应更注重获取一个引人注目或有意义的域名而不是短域名。如果您侧重于印刷广告，或者有理由相信人们会手动输入您的
    URL 到他们的设备中，那么您可能应该考虑使用替代的顶级域名，以获取一个更短的域名。同时，拥有两个域名也是常见的做法：一个短而易于输入的，一个更适合市场营销的长域名。
- en: Subdomains
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子域名
- en: 'Whereas a TLD goes after your domain, a subdomain goes before it. By far, the
    most common subdomain is *www*. I’ve never particularly cared for this subdomain.
    After all, you’re at a computer, *using* the World Wide Web; I’m pretty sure you’re
    not going to be confused if there isn’t a *www* to remind you of what you’re doing.
    For this reason, I recommend using no subdomain for your primary domain: *http://meadowlarktravel.com/*
    instead of *http://www.meadowlarktravel.com/*. It’s shorter and less busy, and
    thanks to redirects, there’s no danger of losing visits from people who automatically
    start everything with *www*.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级域名（TLD）位于域名之后，而子域名位于之前。迄今为止，最常见的子域名是 *www*。我从来没有特别喜欢这个子域名。毕竟，你是在使用互联网，我相信你不会因为没有
    *www* 而感到困惑。因此，我建议在主域名中不使用子域名：*http://meadowlarktravel.com/* 而不是 *http://www.meadowlarktravel.com/*。这样更短更简洁，而且通过重定向，不会因为没有
    *www* 而失去访问量。
- en: 'Subdomains are used for other purposes too. I commonly see things like *blogs.meadowlarktravel.com*,
    *api.meadowlarktravel.com*, and *m.meadowlarktravel.com* (for a mobile site).
    Often this is done for technical reasons: it can be easier to use a subdomain
    if, for example, your blog uses a completely different server than the rest of
    your site. A good proxy, though, can redirect traffic appropriately based on either
    subdomain or path, so the choice of whether to use a subdomain or a path should
    be more content-focused than technology-focused (remember what Tim Berners-Lee
    said about URLs expressing your information architecture, not your technical architecture).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 子域名也被用于其他用途。我经常看到像 *blogs.meadowlarktravel.com*, *api.meadowlarktravel.com*,
    和 *m.meadowlarktravel.com*（用于移动站点）这样的东西。通常这是出于技术原因：如果你的博客使用完全不同的服务器，使用子域名可能更容易。然而，一个良好的代理服务器可以根据子域名或路径适当地重定向流量，所以使用子域名还是路径应该更多地关注内容而不是技术（记住
    Tim Berners-Lee 关于 URL 表达信息架构而不是技术架构的说法）。
- en: I recommend that subdomains be used to compartmentalize significantly different
    parts of your website or service. For example, I think it’s a good use of subdomains
    to make your API available at *api.meadowlarktravel.com*. Microsites (sites that
    have a different appearance than the rest of your site, usually highlighting a
    single product or subject) are also good candidates for subdomains. Another sensible
    use for subdomains is to separate admin interfaces from public interfaces (*admin.meadowlarktravel.com*,
    for employees only).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用子域名来分隔网站或服务中显著不同的部分。例如，我认为将您的 API 放在 *api.meadowlarktravel.com* 子域名下是一个很好的用法。微网站（与站点其他部分外观不同的网站，通常突出单个产品或主题）也是子域名的良好候选。另一个合理使用子域名的方法是将管理界面与公共界面分离（*admin.meadowlarktravel.com*，仅供员工使用）。
- en: Your domain registrar, unless you specify otherwise, will redirect all traffic
    to your server regardless of subdomain. It is up to your server (or proxy), then,
    to take appropriate action based on the subdomain.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有指定，否则您的域名注册商将重定向所有流量到您的服务器，而不管子域名如何。接下来是由您的服务器（或代理）根据子域名采取适当的操作。
- en: Nameservers
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名字服务器
- en: The “glue” that makes domains work are nameservers, and this is what you’ll
    be asked to provide when you establish hosting for your website. Usually, this
    is pretty straightforward, as your hosting service will do most of the work for
    you. For example, let’s say we choose to host *meadowlarktravel.com* at [DigitalOcean](https://www.digitalocean.com).
    When you set up your hosting account with DigitalOcean, you’ll be given the names
    of the DigitalOcean nameservers (there are multiple ones for redundancy). DigitalOcean,
    like most hosting providers, calls their nameservers *ns1.digitalocean.com*, *ns1.digitalocean.com*,
    and so on. Go to your domain registrar and set the nameservers for the domain
    you want to host, and you’re all set.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使域名正常工作的“胶水”是名字服务器，这是您在为网站建立托管时需要提供的内容。通常情况下，这相对简单，因为您的托管服务会为您完成大部分工作。例如，假设我们选择在
    [DigitalOcean](https://www.digitalocean.com) 上托管 *meadowlarktravel.com*。当您在 DigitalOcean
    设置您的托管账户时，将会提供 DigitalOcean 名字服务器的名称（为了冗余通常有多个）。DigitalOcean，像大多数托管提供商一样，将它们的名字服务器称为
    *ns1.digitalocean.com*，*ns1.digitalocean.com* 等等。前往您的域名注册商并为您想要托管的域名设置名字服务器，然后您就可以开始使用了。
- en: 'The way the mapping works in this case is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，映射的工作方式如下：
- en: Website visitor navigates to *http://meadowlarktravel.com/*.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站访客导航到 *http://meadowlarktravel.com/*。
- en: The browser sends the request to the computer’s network system.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器将请求发送到计算机的网络系统。
- en: The computer’s network system, which has been given an internet IP address and
    a DNS server by the internet provider, asks the DNS resolver to resolve *meadowlarktravel.com*.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算机的网络系统已经通过互联网提供商分配了互联网 IP 地址和 DNS 服务器，请求 DNS 解析器解析 *meadowlarktravel.com*。
- en: The DNS resolver is aware that *meadowlarktravel.com* is handled by *ns1.digitalocean.com*,
    so it asks *ns1.digitalocean.com* to give it an IP address for *meadowlarktravel.com*.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNS 解析器知道 *meadowlarktravel.com* 由 *ns1.digitalocean.com* 处理，因此请求 *ns1.digitalocean.com*
    为 *meadowlarktravel.com* 提供 IP 地址。
- en: The server at *ns1.digitalocean.com* receives the request and recognizes that
    *meadowlarktravel.com* is indeed an active account, and returns the associated
    IP address.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器 *ns1.digitalocean.com* 接收请求并确认 *meadowlarktravel.com* 是一个活跃的账户，然后返回关联的 IP
    地址。
- en: 'While this is the most common case, it’s not the only way to configure your
    domain mapping. Since the server (or proxy) that actually serves your website
    has an IP address, we can cut out the middleman by registering that IP address
    with the DNS resolvers (this effectively cuts out the middleman of the nameserver
    *ns1.digitalocean.com* in the previous example). For this approach to work, your
    hosting service must assign you a *static* IP address. Commonly, hosting providers
    will give your server(s) a *dynamic* IP address, which means it may change without
    notice, which would render this scheme ineffective. It can sometimes cost extra
    to get a static IP address instead of a dynamic one: check with your hosting provider.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是最常见的情况，但并不是唯一配置域映射的方式。因为实际提供网站服务的服务器（或代理）有一个 IP 地址，我们可以通过将该 IP 地址注册到 DNS
    解析器中来省略名字服务器 *ns1.digitalocean.com* 这一中间步骤（在前述示例中有效）。要使此方法生效，您的托管服务必须分配给您一个 *静态*
    IP 地址。通常，托管提供商会为您的服务器分配一个 *动态* IP 地址，这意味着它可能会在没有通知的情况下更改，这将使这种方案失效。有时，获取静态 IP
    地址可能需要额外费用，而不是动态 IP 地址：请向您的托管提供商查询。
- en: If you want to map your domain to your website directly (skipping your host’s
    nameservers), you will either be adding an A record or a CNAME record. An *A record*
    maps a domain name directly to an IP address, whereas a *CNAME* maps one domain
    name to another. CNAME records are usually a little less flexible, so A records
    are generally preferred.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想直接将你的域名映射到你的网站（跳过主机的名称服务器），你将添加A记录或CNAME记录。*A记录*直接将域名映射到IP地址，而*CNAME*将一个域名映射到另一个域名。CNAME记录通常稍微不太灵活，因此通常更喜欢A记录。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you’re using AWS for your nameservers, in addition to A and CNAME records,
    it also has a record called an *alias* that offers a lot of advantages if you’re
    pointing it to a service hosted on AWS. For more information, see the [AWS documentation](https://amzn.to/2pUuDhv).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用AWS作为你的名称服务器，除了A记录和CNAME记录之外，它还有一种称为*别名*的记录，如果你指向AWS上托管的服务，它提供了很多优势。更多信息，请参阅[AWS文档](https://amzn.to/2pUuDhv)。
- en: 'Whatever technique you use, domain mapping is usually aggressively cached,
    meaning that when you change your domain records, it can take up to 48 hours for
    your domain to be attached to the new server. Keep in mind that this is also subject
    to geography: if you see your domain working in Los Angeles, your client in New
    York may see the domain attached to the previous server. In my experience, 24
    hours is usually sufficient for domains to resolve correctly in the continental
    US, with international resolution taking up to 48 hours.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用什么技术，域名映射通常会被强烈缓存，这意味着当你更改域名记录时，可能需要长达48小时才能将域名绑定到新服务器上。请记住，这也与地理位置有关：如果你在洛杉矶看到你的域名工作正常，你在纽约的客户可能会看到域名绑定到之前的服务器上。根据我的经验，通常情况下24小时足以使域名在美国大陆正确解析，而国际解析可能需要长达48小时。
- en: If you need something to go live precisely at a certain time, you should not
    rely on DNS changes. Rather, modify your server to redirect to the “coming soon”
    site or page, and make the DNS changes in advance of the actual switchover. At
    the appointed moment, then, you can have your server switch over to the live site,
    and your visitors will see the change immediately, regardless of where they are
    in the world.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在特定时间精确上线某些内容，不应该依赖DNS更改。相反，修改你的服务器以重定向到“即将推出”的站点或页面，并提前进行DNS更改，以便在实际切换之前完成。在约定的时刻，然后你可以让服务器切换到线上站点，你的访客无论身处何地都会立即看到变化。
- en: Hosting
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管
- en: Choosing a hosting service can seem overwhelming at first. Node has taken off
    in a big way, and everyone’s clamoring to offer Node hosting to meet the demand.
    How you select a hosting provider depends very much on your needs. If you have
    reason to believe your site will be the next Amazon or Twitter, you’ll have a
    very different set of concerns than you would if you were building a website for
    your local stamp collector’s club.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个托管服务可能一开始看起来很困难。Node已经大行其道，每个人都在竞相提供Node托管以满足需求。如何选择托管提供商非常依赖于你的需求。如果你有理由相信你的网站将成为下一个亚马逊或Twitter，那么你将有完全不同的考虑，而如果你为本地集邮俱乐部建立网站，你将有完全不同的考虑。
- en: Traditional hosting or cloud hosting?
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传统托管还是云托管？
- en: 'The term “cloud” is one of the most nebulous tech terms to crop up in recent
    years. Really, it’s just a fancy way to say “the internet,” or “part of the internet.”
    The term is not entirely useless, though. While not part of the technical definition
    of the term, hosting in the cloud usually implies a certain commoditizing of computing
    resources. That is to say, we no longer think about a “server” as a distinct,
    physical entity: it’s simply a homogeneous resource somewhere in the cloud, and
    one is as good as another. I’m oversimplifying, of course: computing resources
    are distinguished (and priced) according to their memory, number of CPUs, etc.
    The difference is between knowing (and caring) what actual server your app is
    hosted on, and knowing it’s hosted on *some* server in the cloud, and it could
    just as easily be moved over to a different one without you knowing (or caring).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “云”这个术语是近年来出现的最模糊的技术术语之一。实际上，它只是“互联网”的一种花哨说法，或者说“互联网”的一部分。然而，这个术语并非完全无用。虽然不是术语的技术定义的一部分，但在云中托管通常意味着对计算资源进行某种商品化。也就是说，我们不再把“服务器”看作一个独立的物理实体：它只是云中的某个同质资源，而一个服务器和另一个服务器是一样好的。当然，我这么说有点简化了：计算资源根据它们的内存、CPU数量等进行区分（和定价）。区别在于知道（和关心）你的应用实际托管在哪台服务器上，以及知道它托管在云中的*某个*服务器上，并且可以轻松地迁移到另一个服务器上，而你可能不知道（或不关心）。
- en: Cloud hosting is also highly *virtualized*. That is, the server(s) your app
    is running on are not usually physical machines, but virtual machines running
    on physical servers. This idea was not introduced by cloud hosting, but it has
    become synonymous with it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 云托管也高度*虚拟化*。也就是说，你的应用程序运行的服务器通常不是物理机器，而是运行在物理服务器上的虚拟机。这个概念并不是云托管引入的，但它已经与云托管成为同义词。
- en: While cloud hosting had humble origins, it means a lot more than “homogenous
    servers” now. The major cloud providers offer many infrastructure services that
    (in theory) reduce your maintenance burden and offer a high degree of scalability.
    These services include database storage, file storage, networking queues, authentication,
    video processing, telecommunications services, artificial intelligence engines,
    and much more.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然云托管起源卑微，但现在意味着不仅仅是“同质化服务器”。主要的云服务提供商提供许多基础设施服务，（理论上）可以减少你的维护负担，并提供高度可伸缩性。这些服务包括数据库存储、文件存储、网络队列、认证、视频处理、电信服务、人工智能引擎等等。
- en: 'Cloud hosting can be a little disconcerting at first, not knowing anything
    about the actual physical machine your server is running on, trusting that your
    servers aren’t going to be affected by the other servers running on the same computer.
    Really, though, nothing has changed: when your hosting bill comes, you’re still
    paying for essentially the same thing: someone taking care of the physical hardware
    and networking that enables your web applications. All that’s changed is that
    you’re more removed from the hardware.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 云托管刚开始可能会让人有些不安，因为你并不了解你的服务器实际上是在哪台物理机上运行的，你只能相信你的服务器不会受到同一台计算机上运行的其他服务器的影响。不过，实际上并没有什么变化：当你的托管账单到来时，你仍然在支付基本相同的费用：有人负责处理物理硬件和网络，以便使你的网络应用程序得以运行。改变的只是你与硬件的距离更远了。
- en: I believe that “traditional” hosting (for lack of a better term) will eventually
    disappear altogether. That’s not to say hosting companies will go out of business
    (though some inevitably will); they will just start to offer cloud hosting themselves.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信“传统”托管（用缺乏更好术语来说）最终会完全消失。这并不是说托管公司会破产（虽然有些公司难免会），他们只是开始自行提供云托管服务。
- en: XaaS
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任何即服务（XaaS）
- en: 'When considering cloud hosting, you will come across the acronyms SaaS, PaaS,
    IaaS, and FaaS:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑云托管时，你会遇到缩写诸如SaaS、PaaS、IaaS和FaaS：
- en: Software as a Service (SaaS)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 软件即服务（SaaS）
- en: 'SaaS generally describes software (websites, apps) that are provided to you:
    you just use them. An example would be Google Documents or Dropbox.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 软件即服务（SaaS）通常描述提供给你的软件（网站、应用程序）：你只需使用它们。例如Google Documents或Dropbox。
- en: Platform as a Service (PaaS)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 平台即服务（PaaS）
- en: PaaS provides all of the infrastructure for you (operating systems, networking—all
    of that is handled). All you have to do is write your applications. While there
    is often a blurry line between PaaS and IaaS (and you will often find yourself
    straddling that line as a developer), this is generally the service model we’re
    discussing in this book. If you’re running a website or web service, PaaS is probably
    what you’re looking for.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 平台即服务（PaaS）为你提供所有基础设施（操作系统、网络等全部处理）。你只需编写你的应用程序。尽管PaaS和IaaS之间常常模糊不清（作为开发者，你会发现自己常常游走在这条界线上），但一般来说，本书讨论的是这种服务模型。如果你在运行网站或网络服务，PaaS可能正是你所需要的。
- en: Infrastructure as a Service (IaaS)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即服务（IaaS）
- en: 'IaaS gives you the most flexibility, but at cost. All you get are virtual machines
    and a basic network connecting them. You are then responsible for installing and
    maintaining operating systems, databases, and network policies. Unless you need
    this level of control over your environment, you will generally want to stick
    with PaaS. (Note that PaaS does allow you to have control over the *choice* of
    operating systems and network configuration: you just don’t have to do it yourself.)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS提供了最大的灵活性，但也伴随着成本。你只能获得虚拟机和基本的网络连接。然后，你需要负责安装和维护操作系统、数据库和网络策略。除非你需要对环境有这种程度的控制，否则通常会选择PaaS。（注意，PaaS允许你选择操作系统和网络配置，你只是不必亲自操作。）
- en: Functions as a Service (FaaS)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 函数即服务（FaaS）
- en: FaaS describes offerings such as AWS Lambda, Google Functions, and Azure Functions,
    which provide a way to run individual functions in the cloud without having to
    configure the runtime environment yourself. It’s at the core of what is commonly
    being called “serverless” architecture.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: FaaS 描述了 AWS Lambda、Google Functions 和 Azure Functions 等服务，它们提供了在云中运行单个函数的方式，而无需自行配置运行时环境。这正是通常被称为“无服务器”架构的核心。
- en: The behemoths
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 巨头
- en: The companies that essentially run the internet (or, at least, are heavily invested
    in the running of the internet) have realized that with the commoditization of
    computing resources, they have another viable product to sell. Amazon, Microsoft,
    and Google all offer cloud computing services, and their services are quite good.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 主导互联网运行（或至少在互联网运行中投入了大量资源）的公司已经意识到，随着计算资源的商品化，它们有另一个可行的产品要销售。亚马逊、微软和谷歌都提供云计算服务，它们的服务非常优秀。
- en: 'All of these services are priced similarly: if your hosting needs are modest,
    there will be minimal price difference among the three. If you have very high
    bandwidth or storage needs, you will have to evaluate the services more carefully,
    as the cost difference could be greater, depending on your needs.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些服务的定价方式大致相同：如果您的托管需求不多，三者之间的价格差异将很小。如果您具有非常高的带宽或存储需求，您将需要更仔细地评估这些服务，因为根据您的需求，成本差异可能会更大。
- en: While Microsoft does not normally leap to mind when we consider open source
    platforms, I would not overlook Azure. Not only is the platform established and
    robust, but Microsoft has bent over backward to make it friendly to not just Node,
    but the open source community. Microsoft offers a one-month Azure trial, which
    is a great way to determine if the service meets your needs; if you’re considering
    one of the big three, I definitely recommend the free trial to evaluate Azure.
    Microsoft offers Node APIs for all of its major services, including its cloud
    storage service. In addition to excellent Node hosting, Azure offers an excellent
    cloud storage system (with a JavaScript API), as well as good support for MongoDB.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑开源平台时，微软通常不会立即浮现在脑海中，但我不会忽视 Azure。这个平台不仅成熟而稳健，而且微软已经全力以赴地使其对 Node 和开源社区友好。微软提供一个月的
    Azure 试用期，这是评估服务是否符合您需求的好方法；如果您正在考虑这“三巨头”之一，我绝对推荐免费试用 Azure。微软为其所有主要服务提供 Node
    API，包括其云存储服务。除了出色的 Node 主机托管外，Azure 还提供了出色的云存储系统（具有 JavaScript API），以及对 MongoDB
    的良好支持。
- en: Amazon offers the most comprehensive set of resources, including SMS (text message),
    cloud storage, email services, payment services (ecommerce), DNS, and more. In
    addition, Amazon offers a free usage tier, making it very easy to evaluate.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了最全面的资源集合，包括短信（文本消息）、云存储、电子邮件服务、支付服务（电子商务）、DNS 等等。此外，亚马逊还提供免费使用层，非常便于评估。
- en: Google’s cloud platform has come a long way and now offers robust Node hosting
    and, as you might expect, excellent integration with its own services (mapping,
    authentication, and search being particularly attractive).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的云平台已经发展了很长一段路程，现在提供强大的 Node 主机托管服务，并且如您所料，与其自身的服务（尤其是映射、认证和搜索）完美集成。
- en: In addition to the “big three,” it is worth considering [Heroku](https://www.heroku.com),
    which has been catering to people wanting to host fast and nimble Node applications
    for some time now. I’ve also had great luck with [DigitalOcean](https://www.digitalocean.com),
    which focuses more on providing containers and a limited number of services in
    a very user-friendly manner.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这“三巨头”，还值得考虑 [Heroku](https://www.heroku.com)，它长期以来一直为想要托管快速灵活 Node 应用程序的人提供服务。我在
    [DigitalOcean](https://www.digitalocean.com) 也有很好的运气，后者更专注于以非常用户友好的方式提供容器和有限数量的服务。
- en: Boutique hosting
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精品托管
- en: Smaller hosting services, which I’m going to call “boutique” hosting services
    (for lack of a better word), may not have the infrastructure or resources of Microsoft,
    Amazon, or Google, but that doesn’t mean they don’t offer something valuable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 较小的托管服务，我将其称为“精品”托管服务（只是没有更好的词），可能没有微软、亚马逊或谷歌的基础设施或资源，但这并不意味着它们不提供有价值的东西。
- en: Because boutique hosting services can’t compete in terms of infrastructure,
    they usually focus on customer service and support. If you need a lot of support,
    you might want to consider a boutique hosting service. If you have a hosting provider
    you’ve been happy with, don’t hesitate to ask if it offers (or plans on offering)
    Node hosting.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为精品托管服务在基础设施方面无法与大公司竞争，它们通常专注于客户服务和支持。如果你需要大量支持，你可能需要考虑精品托管服务。如果你对你现有的托管提供商感到满意，不要犹豫询问它是否提供（或计划提供）Node托管。
- en: Deployment
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: It still surprises me that, in 2019, people are still using FTP to deploy their
    applications. If you are, *please stop*. FTP is in no way secure. Not only are
    all your files transmitted unencrypted, but your *username and password* are also.
    If your hosting provider doesn’t give you an option, find a new hosting provider.
    If you really have no choice, make sure you use a unique password that you’re
    not using for anything else.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 令我惊讶的是，即使在2019年，仍然有人在使用FTP部署他们的应用程序。如果你是，*请停止*。FTP绝对不安全。你的所有文件不仅以未加密的方式传输，而且你的*用户名和密码*也是如此。如果你的托管提供商没有给你选择的余地，请找一个新的托管提供商。如果你真的别无选择，请确保使用一个你在其他地方没有使用过的唯一密码。
- en: At minimum, you should be using SFTP or FTPS (not to be confused), but you should
    really be considering a *continuous delivery* (CD) service.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，你应该使用SFTP或FTPS（不要混淆），但你确实应该考虑使用*持续交付*（CD）服务。
- en: The idea behind CD is that you’re never very far away from a version that can
    be released (weeks or even days). CD is usually used in the same breath as *continuous
    integration* (CI), which refers to automated processes for integrating the work
    of developers and testing them.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: CD的理念是，你离可发布版本（可能是几周甚至几天）不会很远。CD通常与*持续集成*（CI）一起使用，后者指的是开发者工作自动集成和测试的流程。
- en: In general, the more you can automate your processes, the easier your development
    will be. Imagine merging in changes, and automatically getting notified that unit
    tests pass, then integration tests pass, and then seeing your changes online…in
    a matter of minutes! It’s a great goal, but you have to invest some work up front
    to get it set up, and there will be some maintenance over time.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，你能够自动化你的流程越多，你的开发工作就会越容易。想象一下合并变更，并自动收到单元测试通过的通知，然后是集成测试通过的通知，最后看到你的变更在线上的过程……只需几分钟！这是一个伟大的目标，但你必须投入一些前期工作来设置它，并且随着时间的推移会有一些维护工作。
- en: Although the steps themselves are similar (run unit tests, run integration tests,
    deploy to staging servers, deploy to production servers), the process of setting
    up CI/CD pipelines (a word you’ll hear a lot when discussing CI/CD) varies substantially.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管步骤本身相似（运行单元测试、运行集成测试、部署到预发布服务器、部署到生产服务器），但设置CI/CD流水线（在讨论CI/CD时你会经常听到的词汇）的过程差异很大。
- en: 'You should look at some of the options available for CI/CD and choose one that
    meets your needs:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该查看一些可用的CI/CD选项，并选择符合你需求的。
- en: '[AWS CodePipeline](https://amzn.to/2CzTQAo)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[AWS CodePipeline](https://amzn.to/2CzTQAo)'
- en: If you’re hosting on AWS, CodePipeline should be first on your list, as it will
    be the easiest path to CI/CD for you. It’s very robust, but I’ve found it to be
    a little less user-friendly than some of the other options.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用AWS托管，CodePipeline应该是你首选，因为它是你实现CI/CD的最简单路径。它非常强大，但我发现它不太用户友好，比一些其他选项稍显复杂。
- en: '[Microsoft Azure Web Apps](http://bit.ly/2CEsSI0)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[Microsoft Azure Web Apps](http://bit.ly/2CEsSI0)'
- en: If you’re hosting on Azure, Web Apps is your best bet (are you noticing a trend
    here?). I haven’t had much experience with this service, but it seems to be well
    loved in the community.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Azure托管，Web Apps是你最好的选择（你注意到这里有趋势吗？）。我对这项服务的经验不多，但在社区中似乎备受喜爱。
- en: '[Travis CI](https://travis-ci.org/)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[Travis CI](https://travis-ci.org/)'
- en: Travis CI has been around for a long time now, and has a large, loyal user base
    and good documentation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI已经存在很长时间了，拥有庞大且忠诚的用户群和良好的文档。
- en: '[Semaphore](https://semaphoreci.com/)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[Semaphore](https://semaphoreci.com/)'
- en: Semaphore is easy to set up and configure, but it doesn’t offer many features,
    and its basic (low-cost) plans are slow.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Semaphore易于设置和配置，但它并没有提供太多功能，其基本（低成本）计划速度较慢。
- en: '[Google Cloud Build](http://bit.ly/2NGuIys)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[Google Cloud Build](http://bit.ly/2NGuIys)'
- en: I haven’t tried Google Cloud Build yet, but it looks robust and, like CodePipeline
    and Azure Web Apps, it’s likely that is the best choice if you’re hosting on Google
    Cloud.]
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有尝试过Google Cloud Build，但它看起来非常强大，就像CodePipeline和Azure Web Apps一样，如果你使用Google
    Cloud托管，这很可能是最佳选择。
- en: '[CircleCI](https://circleci.com/)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[CircleCI](https://circleci.com/)'
- en: CircleCI is another CI that’s been around for some time, and is well loved.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI 是另一个有一段时间的 CI，而且深受喜爱。
- en: '[Jenkins](https://jenkins.io/)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jenkins](https://jenkins.io/)'
- en: Jenkins is another incumbent with a large community. My experience is that it
    hasn’t kept up with modern deployment practices as well as some of the other options
    here, but it did just release a new version that looks promising.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是另一个有着庞大社区的老牌工具。根据我的经验，它在跟上现代部署实践方面没有一些其他选项做得好，但它刚刚发布了一个看起来很有前景的新版本。
- en: 'At the end of the day, CI/CD services are automating the activities that *you*
    create. You still have to write the code, determine your versioning scheme, write
    high-quality unit and integration tests and a way to run them, and understand
    your deployment infrastructure. The examples in this book could be automated simply
    enough: most everything could be deployed to a single server running a Node instance.
    However, as you start to grow your infrastructure, so too will your CI/CD pipeline
    grow in complexity.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在一天结束时，CI/CD 服务自动化了*你*创建的活动。你仍然需要编写代码，确定你的版本控制方案，编写高质量的单元测试和集成测试，并且了解你的部署基础设施。这本书中的示例可以简单地自动化：几乎所有内容都可以部署到运行
    Node 实例的单个服务器上。然而，随着基础设施的扩展，你的 CI/CD 流水线复杂度也会增加。
- en: Git’s role in deployment
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git 在部署中的角色
- en: Git’s greatest strength (and greatest weakness) is its flexibility. It can be
    adapted to almost any workflow imaginable. For the sake of deployment, I recommend
    creating one or more branches *specifically for deployment*. For example, you
    might have a `production` branch and a `staging` branch. How you use those branches
    is very much up to your individual workflow.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的最大优势（也是最大弱点）是其灵活性。它可以适应几乎任何想象得到的工作流程。为了部署，我建议创建一个或多个*专门用于部署*的分支。例如，你可以有一个`production`分支和一个`staging`分支。如何使用这些分支在很大程度上取决于你的个人工作流程。
- en: One popular approach is to flow from `master` to `staging` to `production`.
    So once some changes on `master` are ready to go live, you could merge them into
    `staging`. Once they have been approved on the staging server, you could then
    merge `staging` into `production`. While this makes logical sense, I dislike the
    clutter it creates (merges, merges everywhere). Also, if you have lots of features
    that need to be staged and pushed to production in different orders, this can
    get messy quickly.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的方法是从`master`分支流向`staging`，再到`production`。因此，一旦`master`分支上的某些变更准备上线，你可以将它们合并到`staging`分支。一旦在
    staging 服务器上获得批准，你可以将`staging`合并到`production`分支。虽然这在逻辑上是合理的，但我不喜欢它造成的混乱（到处都是合并）。此外，如果有很多需要按不同顺序进行分阶段和推送到生产环境的功能，这很快会变得混乱。
- en: 'I feel a better approach is to merge `master` into `staging` and, when you’re
    ready to go live with changes, then merge `master` into `production`. In this
    way, `staging` and `production` become less associated: you can even have multiple
    staging branches to experiment with different features before going live (and
    you can merge things other than `master` into them). Only when something has been
    approved for production do you merge it into `production`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得更好的方法是将`master`合并到`staging`，当你准备好发布更改时，再将`master`合并到`production`。这样一来，`staging`和`production`就不会关联那么紧密：你甚至可以有多个用于测试不同功能的
    staging 分支（你可以将不同于`master`的内容合并到它们）。只有在某些内容被批准用于生产环境后，才将其合并到`production`分支。
- en: What happens when you need to roll back changes? This is where things can get
    complicated. There are multiple techniques for undoing changes, such as applying
    the inverse of a commit to undo prior commits (`git revert`), these techniques
    not only are complicated, but also can can cause problems down the line. The typical
    way of handling this is to create tags (for example, `git tag v1.2.0` on your
    `production` branch) every time you make a deployment. If you need to roll back
    to a specific version, you always have that tag available.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要回滚更改时会发生什么？这就是事情变得复杂的地方。有多种技术可以撤销更改，例如应用提交的反向来撤销先前的提交（`git revert`），这些技术不仅复杂，而且可能会引发后续问题。处理这些情况的典型方式是在每次部署时在你的`production`分支上创建标签（例如，`git
    tag v1.2.0`）。如果需要回滚到特定版本，你始终可以使用该标签。
- en: In the end, it is up to you and your team to decide on a Git workflow. More
    important than the workflow you pick is the consistency with which you use it,
    and the training and communication surrounding it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，决定 Git 工作流的是你和你的团队。比你选择的工作流更重要的是你使用它的一致性，以及围绕它的培训和沟通。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: We’ve already discussed the value of keeping your binary assets (multimedia
    and documents) separate from your code repository. Git-based deployment offers
    another incentive for this approach. If you have 4 GB of multimedia data in your
    repository, they’re going to take forever to clone, and you have an unnecessary
    copy of all of your data for every production server.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了将二进制资产（多媒体和文档）与代码存储库分开保持的价值。基于Git的部署为此方法提供了另一个激励。如果您的存储库中有4 GB的多媒体数据，它们将需要很长时间来克隆，并且您不必为每个生产服务器都保存全部数据的副本。
- en: Manual Git-based deployment
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动基于Git的部署
- en: If you’re not ready yet to take the step of setting up CI/CD, you could start
    with a manual Git-based deployment. The advantage of this approach is that you’ll
    get comfortable with the steps and challenges involved in deployment, which will
    serve you well when you take the step of automation.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有准备好设置CI/CD，可以从手动基于Git的部署开始。这种方法的优点在于您将熟悉部署所涉及的步骤和挑战，这将为您在迈出自动化的步骤时提供帮助。
- en: For each server you want to deploy to, you will have to clone the repository,
    check out the `production` branch, and then set up the infrastructure necessary
    to start/restart your app (which will be dependent on your choice of platform).
    When you update the `production` branch, you will have to go to each server, run
    `git pull --ff-only`, run `npm install --production`, and then restart the app.
    If your deployments aren’t often, and you don’t have very many servers, this may
    not represent a terrible hardship, but if you’re updating more often, this will
    get old fast, and you’ll want to find some way to automate the system.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每台您想部署到的服务器，您都需要克隆存储库，检出`production`分支，然后设置启动/重新启动应用所需的基础设施（这将取决于您选择的平台）。当您更新`production`分支时，您需要进入每台服务器，运行`git
    pull --ff-only`，运行`npm install --production`，然后重新启动应用程序。如果您的部署不频繁，且服务器数量不多，这可能不会带来太大的困扰，但如果您经常更新，这将很快变得单调，您会想要找到某种方式来自动化系统。
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The `--ff-only` argument to `git pull` allows only fast-forward pulls, preventing
    automatic merging or rebasing. If you know the pull is fast-forward only, you
    may safely omit it, but if you get in the habit of doing it, you will never accidentally
    invoke a merge or rebase!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`git pull`的`--ff-only`参数允许仅快进式拉取，防止自动合并或重新基础。如果您知道拉取仅为快进式，可以安全地省略它，但如果您习惯于这样做，您将永远不会意外地调用合并或重新基础！'
- en: In essence, what you are doing here is replicating the way you work in development,
    except you’re doing it on a remote server. Manual processes always run the risk
    of human error, and I recommend this approach only as a stepping stone toward
    more automated development.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，您在这里所做的是在远程服务器上复制您在开发中的工作方式。手动过程总会存在人为错误的风险，我建议这种方法只是向更自动化的开发迈出的一小步。
- en: Conclusion
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Deploying your website (especially for the first time) should be an exciting
    occasion. There should be champagne and cheering, but all too often, there is
    sweating, cursing, and late nights. I’ve seen far too many websites launched at
    three in the morning by an irritable, exhausted team. Fortunately, that’s changing,
    partly thanks to cloud deployment.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 部署您的网站（尤其是首次）应该是一个令人兴奋的时刻。应该有香槟和欢呼声，但往往情况是出汗、诅咒和彻夜未眠。我见过太多次由疲惫不堪的团队在凌晨三点发布网站。幸运的是，这种情况正在改变，部分归功于云部署。
- en: 'No matter what deployment strategy you choose, the most important thing you
    can do is to start production deployments early, before the site is ready to go
    live. You don’t have to hook up the domain, so the public doesn’t need to know.
    If you’ve already deployed the site to production servers half a dozen times before
    the day of launch, your chances of a successful launch will be much higher. Ideally,
    your functioning website will already be running on the production server long
    before launch: all you have to do is flip the switch from the old site to the
    new site.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择什么部署策略，您能做的最重要的事情是尽早开始生产部署，而不必等网站准备好上线。您不必连接域名，因此公众无需知道。如果在正式发布之前您已将网站部署到生产服务器半打次以上，成功发布的机会将大大提高。理想情况下，您的功能性网站在发布之前很久就已经在生产服务器上运行：您只需从旧网站切换到新网站。
