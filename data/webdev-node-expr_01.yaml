- en: Chapter 1\. Introducing Express
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 介绍Express
- en: The JavaScript Revolution
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript革命
- en: Before I introduce the main subject of this book, it is important to provide
    a little background and historical context, and that means talking about JavaScript
    and Node. The age of JavaScript is truly upon us. From its humble beginnings as
    a client-side scripting language, not only has it become completely ubiquitous
    on the client side, but its use as a server-side language has finally taken off
    too, thanks to Node.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我介绍本书的主题之前，重要的是提供一些背景和历史背景，这意味着谈论JavaScript和Node。JavaScript的时代确实已经来临。从它作为客户端脚本语言的谦逊开始，它不仅在客户端完全普及，而且它作为服务器端语言的使用也终于起飞，多亏了Node。
- en: 'The promise of an all-JavaScript technology stack is clear: no more context
    switching! No longer do you have to switch mental gears from JavaScript to PHP,
    C#, Ruby, or Python (or any other server-side language). Furthermore, it empowers
    frontend engineers to make the jump to server-side programming. This is not to
    say that server-side programming is strictly about the language; there’s still
    a lot to learn. With JavaScript, though, at least the language won’t be a barrier.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一种完全基于JavaScript的技术栈的承诺是明确的：不再需要切换上下文！你再也不必从JavaScript切换到PHP、C#、Ruby或Python（或任何其他服务器端语言）。此外，它还赋予了前端工程师向服务器端编程迈进的能力。这并不是说服务器端编程只与语言有关；仍然有很多需要学习的地方。不过，至少使用JavaScript时，语言本身不会成为障碍。
- en: This book is for all those who see the promise of the JavaScript technology
    stack. Perhaps you are a frontend engineer looking to extend your experience into
    backend development. Perhaps you’re an experienced backend developer like myself
    who is looking to JavaScript as a viable alternative to entrenched server-side
    languages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为了所有看到JavaScript技术栈的潜力的人而写的。也许你是一名前端工程师，希望将你的经验扩展到后端开发。也许你像我一样是一名有经验的后端开发者，正在将JavaScript作为一种可行的替代方案来看待传统的服务器端语言。
- en: 'If you’ve been a software engineer for as long as I have, you have seen many
    languages, frameworks, and APIs come into vogue. Some have taken off, and some
    have faded into obsolescence. You probably take pride in your ability to rapidly
    learn new languages, new systems. Every new language you come across feels a little
    more familiar: you recognize a bit here from a language you learned in college,
    a bit there from that job you had a few years ago. It feels good to have that
    kind of perspective, certainly, but it’s also wearying. Sometimes you want to
    just *get something done*, without having to learn a whole new technology or dust
    off skills you haven’t used in months or years.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样是一名软件工程师这么长时间了，你会看到许多语言、框架和API进入流行。有些大行其道，有些则逐渐被淘汰。你可能为自己能够快速学习新语言和新系统而感到自豪。你遇到的每种新语言都会感觉更加熟悉：你从大学学习的语言中认出一些内容，在几年前的工作中学到了另一些内容。有这样的视角感觉很好，当然，但也很疲惫。有时候你只想*做点事情*，而不必学习全新的技术或者重新磨练数月甚至数年未用的技能。
- en: 'JavaScript may seem, at first, an unlikely champion. I sympathize, believe
    me. If you told me in 2007 that I would not only come to think of JavaScript as
    my language of choice, but also write a book about it, I would have told you you
    were crazy. I had all the usual prejudices against JavaScript: I thought it was
    a “toy” language, something for amateurs and dilettantes to mangle and abuse.
    To be fair, JavaScript did lower the bar for amateurs, and there was a lot of
    questionable JavaScript out there, which did not help the language’s reputation.
    To turn a popular saying on its head, “Hate the player, not the game.”'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript乍看起来可能不太可能成为冠军。我能理解，相信我。如果你在2007年告诉我，我不仅会认为JavaScript是我首选的语言，还会写一本关于它的书，我会告诉你你疯了。我对JavaScript有所有通常的偏见：我认为它是一个“玩具”语言，是给业余者和浅尝辄止者搞砸和滥用的东西。公平地说，JavaScript确实降低了业余者的门槛，而且存在许多问题的JavaScript，这并没有帮助改善语言的声誉。换句话说，可以说“恨玩家，不恨游戏”。
- en: It is unfortunate that people suffer this prejudice against JavaScript; it has
    prevented people from discovering how powerful, flexible, and elegant the language
    is. Many people are just now starting to take JavaScript seriously, even though
    the language as we know it now has been around since 1996 (although many of its
    more attractive features were added in 2005).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 令人遗憾的是，人们对JavaScript持有这种偏见；这阻止了人们发现这门语言有多么强大、灵活和优雅。即使我们现在所知的这门语言自1996年以来已经存在了（尽管它的许多更吸引人的特性是在2005年添加的）。
- en: 'By picking up this book, you are probably free of that prejudice: either because,
    like me, you have gotten past it or because you never had it in the first place.
    In either case, you are fortunate, and I look forward to introducing you to Express,
    a technology made possible by a delightful and surprising language.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读这本书，你可能摆脱了那种偏见：要么是因为像我一样，你已经克服了它，要么是因为你一开始就没有那种偏见。无论哪种情况，你都很幸运，我期待着向你介绍
    Express，这是一项由一种令人愉快而惊喜的语言实现的技术。
- en: In 2009, years after people had started to realize the power and expressiveness
    of JavaScript as a browser scripting language, Ryan Dahl saw JavaScript’s potential
    as a server-side language, and Node.js was born. This was a fertile time for internet
    technology. Ruby (and Ruby on Rails) took some great ideas from academic computer
    science, combined them with some new ideas of its own, and showed the world a
    quicker way to build websites and web applications. Microsoft, in a valiant effort
    to become relevant in the internet age, did amazing things with .NET and learned
    not only from Ruby and JavaScript but also from Java’s mistakes, while borrowing
    heavily from the halls of academia.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，当人们开始意识到JavaScript作为浏览器脚本语言的强大和表现力时，Ryan Dahl意识到JavaScript作为服务端语言的潜力，于是Node.js诞生了。这是互联网技术蓬勃发展的时期。Ruby（以及Ruby
    on Rails）从学术计算机科学中吸取了一些很棒的思想，结合了一些自己的新思想，并向世界展示了一种更快构建网站和Web应用程序的方式。微软为了在互联网时代取得关键成就，不仅从Ruby和JavaScript中吸取了教训，还从Java的错误中汲取了教训，并且大量借鉴了学术界的成果。
- en: Today, web developers have the freedom to use the very latest JavaScript language
    features without fear of alienating users with older browsers, thanks to transcompilation
    technologies like Babel. Webpack has become the ubiquitous solution for managing
    dependencies in web applications and ensuring performance, and frameworks such
    as React, Angular, and Vue are changing the way people approach web development,
    relegating declarative Document Object Model (DOM) manipulation libraries (such
    as jQuery) to yesterday’s news.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Web开发人员有自由使用最新的JavaScript语言特性的权利，而不用担心排斥使用旧版浏览器的用户，这得益于Babel等转换技术。Webpack已经成为管理Web应用程序依赖关系并确保性能的通用解决方案，而React、Angular和Vue等框架正在改变人们对Web开发的看法，将声明式的文档对象模型（DOM）操作库（如jQuery）淘汰到昨天的新闻。
- en: It is an exciting time to be involved in internet technology. Everywhere there
    are amazing new ideas (or amazing old ideas revitalized). The spirit of innovation
    and excitement is greater now than it has been in many years.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '现在参与互联网技术是一件激动人心的事情。到处都有惊人的新思想（或者是惊人的老思想重焕生机）。创新和激情的精神现在比许多年前都要强烈。 '
- en: Introducing Express
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Express
- en: 'The Express website describes Express as a “minimal and flexible Node.js web
    application framework that provides a robust set of features for web and mobile
    applications.” What does that really mean, though? Let’s break that description
    down:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Express网站将Express描述为“一个最小化且灵活的Node.js Web应用程序框架，为Web和移动应用程序提供了丰富的功能集。” 然而，这究竟意味着什么呢？让我们详细了解一下这个描述：
- en: Minimal
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化
- en: This is one of the most appealing aspects of Express. Many times, framework
    developers forget that usually “less is more.” The Express philosophy is to provide
    the *minimal* layer between your brain and the server. That doesn’t mean that
    it’s not robust or that it doesn’t have enough useful features. It means that
    it gets in your way less, allowing you full expression of your ideas, while at
    the same time providing something useful. Express provides you a minimal framework,
    and you can add in different parts of Express functionality as needed, replacing
    whatever doesn’t meet your needs. This is a breath of fresh air. So many frameworks
    give you *everything*, leaving you with a bloated, mysterious, and complex project
    before you’ve even written a single line of code. Often, the first task is to
    waste time carving off unneeded functionality or replacing the functionality that
    doesn’t meet requirements. Express takes the opposite approach, allowing you to
    add what you need when you need it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Express 中最吸引人的方面之一。许多时候，框架开发者会忘记通常情况下“少即是多”的原则。Express 的理念是在你的大脑和服务器之间提供*最小*的层次。这并不意味着它不强大，或者它没有足够的有用功能。它的意思是它少给你增添麻烦，让你完全表达自己的想法，同时提供有用的东西。Express提供了一个最小的框架，你可以根据需要添加Express功能的不同部分，替换不符合你需求的部分。这是一种清新的气息。这么多框架给你提供*一切*，使你在甚至写一行代码之前就面临庞大、神秘和复杂的项目。通常，第一项任务是浪费时间剔除不需要的功能，或者替换不符合要求的功能。Express采取了相反的方式，允许你在需要时添加你需要的东西。
- en: Flexible
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 灵活
- en: 'At the end of the day, what Express does is very simple: it accepts HTTP requests
    from a client (which can be a browser, a mobile device, another server, a desktop
    application…anything that speaks HTTP) and returns an HTTP response. This basic
    pattern describes almost everything connected to the internet, making Express
    extremely flexible in its applications.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 说到底，Express所做的事情非常简单：它接受来自客户端的 HTTP 请求（可以是浏览器、移动设备、另一个服务器、桌面应用程序…… 任何能够使用 HTTP
    接口的东西），然后返回一个 HTTP 响应。这一基本模式描述了几乎与互联网有关的所有事物，使得Express在应用中非常灵活。
- en: Web application framework
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用框架
- en: Perhaps a more accurate description would be “server-side part of a web application
    framework.” Today, when you think of “web application framework,” you generally
    think of a single-page application framework like React, Angular, or Vue. However,
    except for a handful of standalone applications, most web applications need to
    share data and integrate with other services. They generally do so through a web
    API, which can be considered the server-side component of a web application framework.
    Note that it’s still possible (and sometimes desirable) to build an entire application
    with server-side rendering only, in which case Express may very well constitute
    the entire web application framework!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 也许更准确的描述应该是“Web 应用框架的服务器端组件”。今天，当你想到“Web 应用框架”，你通常会考虑到像React、Angular或Vue这样的单页应用框架。然而，除了少数独立应用程序外，大多数Web应用需要共享数据，并与其他服务集成。它们通常通过Web
    API来实现，这可以被认为是Web应用框架的服务器端组件。请注意，仍然有可能（有时也是可取的）只使用服务器端渲染构建整个应用程序，这种情况下，Express很可能构成整个Web应用框架！
- en: 'In addition to the features of Express explicitly mentioned in its own description,
    I would add two of my own:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Express自己描述的功能，我还想补充两点：
- en: Fast
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 快速
- en: As Express became the go-to web framework for Node.js development, it attracted
    a lot of attention from big companies that were running high-performance, high-traffic
    websites. This created pressure on the Express team to focus on performance, and
    Express now offers leading performance for high-traffic websites.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Express成为Node.js开发的首选Web框架，吸引了许多运行高性能、高流量网站的大公司的注意。这给Express团队带来了对性能的关注，使得Express现在为高流量网站提供了领先的性能。
- en: Unopinionated
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 无固执己见
- en: One of the hallmarks of the JavaScript ecosystem is its size and diversity.
    While Express is often at the center of Node.js web development, there are hundreds
    (if not thousands) of community packages that go into an Express application.
    The Express team recognized this ecosystem diversity and responded by providing
    an extremely flexible middleware system that makes it easy to use the components
    of your choice in creating your application. Over the course of Express’s development,
    you can see it shedding “built-in” components in favor of configurable middleware.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 生态系统的一个显著特点是其规模和多样性。虽然 Express 经常成为 Node.js Web 开发的核心，但在一个 Express
    应用程序中，涉及到成百上千（如果不是成千上万）的社区包。Express 团队意识到了这种生态系统的多样性，并通过提供极其灵活的中间件系统来响应，使得在创建应用程序时能够轻松使用自己选择的组件。在
    Express 的发展过程中，你可以看到它放弃了一些“内置”组件，转而采用可配置的中间件。
- en: I mentioned that Express is the “server-side part” of a web application framework…so
    we should probably consider the relationship between server-side and client-side
    applications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到 Express 是一个 Web 应用程序框架的“服务器端部分”…因此我们可能应该考虑一下服务器端应用程序和客户端应用程序之间的关系。
- en: Server-Side and Client-Side Applications
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端和客户端应用程序
- en: A *server-side application* is one where the pages in the application are rendered
    on the server (as HTML, CSS, images and other multimedia assets, and JavaScript)
    and sent to the client. A *client-side application*, by contrast, renders most
    of its own user interface from an initial application bundle that is sent only
    once. That is, once the browser receives the initial (generally very minimal)
    HTML, it uses JavaScript to modify the DOM dynamically and doesn’t need to rely
    on the server to display new pages (though raw data usually still comes from the
    server).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务器端应用程序* 是指在服务器上渲染应用程序的页面（以 HTML、CSS、图像和其他多媒体资产以及 JavaScript 的形式）并发送给客户端的应用程序。相比之下，*客户端应用程序*
    大多数情况下从一次性发送的初始应用程序捆绑包中渲染其自己的用户界面。也就是说，一旦浏览器接收到最初（通常非常简化的）HTML，它就使用 JavaScript
    动态修改 DOM，不需要依赖服务器来显示新页面（尽管原始数据通常仍然来自服务器）。'
- en: Prior to 1999, server-side applications were the standard. As a matter of fact,
    the term *web application* was officially introduced that year. I think of the
    period roughly between 1999 and 2012 as the Web 2.0 era, during which the technologies
    and techniques that would eventually become client-side applications were being
    developed. By 2012, with smartphones firmly entrenched, it was common practice
    to send as little information as possible over the network, a practice that favored
    client-side applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1999 年之前，服务器端应用程序是标准。事实上，*Web 应用程序* 这个术语就是在那一年正式引入的。我认为大约在 1999 年到 2012 年之间的时期是
    Web 2.0 时代，这段时间内开发了最终成为客户端应用程序的技术和技巧。到了 2012 年，随着智能手机的广泛普及，向网络发送尽可能少的信息成为常规做法，这种做法有利于客户端应用程序的发展。
- en: Server-side applications are often called *server-side rendered* (SSR), and
    client-side applications are usually called *single-page applications* (SPAs).
    Client-side applications are fully realized in frameworks such as React, Angular,
    and Vue. I’ve always felt that “single-page” was a bit of a misnomer because—from
    the user’s perspective—there can indeed be many pages. The only difference is
    whether the page is shipped from the server or dynamically rendered in the client.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端应用程序通常被称为*服务器端渲染*（SSR），客户端应用程序通常称为*单页应用程序*（SPA）。客户端应用程序在诸如 React、Angular
    和 Vue 等框架中得到了完全实现。我一直觉得“单页”有点不恰当，因为从用户的角度来看，确实可以有很多页面。唯一的区别在于页面是从服务器发送还是在客户端动态渲染。
- en: In reality, there are many blurred lines between server-side applications and
    client-side applications. Many client-side applications have two to three HTML
    bundles that can be sent to that client (for example, the public interface and
    the logged-in interface, or a regular interface and an admin interface). Furthermore,
    SPAs are often combined with SSR to increase first-page-load performance and aid
    in search engine optimization (SEO).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在服务器端应用程序和客户端应用程序之间有许多模糊的界限。许多客户端应用程序有两到三个 HTML 捆绑包可以发送给客户端（例如，公共界面和已登录界面，或者常规界面和管理员界面）。此外，SPA
    通常与 SSR 结合使用，以提高第一次加载性能并帮助搜索引擎优化（SEO）。
- en: In general, if the server sends a small number of HTML files (generally one
    to three), and the user experiences a rich, multiview experience based on dynamic
    DOM manipulation, we consider that client-side rendering. The data (usually in
    the form of JSON) and multimedia assets for different views generally still come
    from the network.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，如果服务器发送少量HTML文件（通常是一到三个），并且用户通过动态DOM操作体验丰富的多视图体验，我们认为这是客户端渲染。不同视图的数据（通常以JSON形式）和多媒体资产通常仍然来自网络。
- en: Express, of course, doesn’t really care much if you’re making a server-side
    or client-side application; it is happy to fill either role. It makes no difference
    to Express if you are serving one HTML bundle or a hundred.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Express并不太在乎你是在制作服务器端应用程序还是客户端应用程序；它愿意在任何角色中发挥作用。对于Express来说，无论您是提供一个HTML包还是一百个HTML包都没有区别。
- en: While SPAs have definitively “won” as the predominant web application architecture,
    this book begins with examples consistent with server-side applications. They
    are still relevant, and the conceptual difference between serving one HTML bundle
    or many is small. There is an SPA example in [Chapter 16](ch16.xhtml#ch_single_page_applications).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单页应用（SPAs）已经明确地“赢得了”主导的Web应用架构地位，本书始于与服务器端应用一致的例子。它们仍然相关，并且服务一个HTML包或多个之间的概念差异很小。在[第16章](ch16.xhtml#ch_single_page_applications)中有一个SPA示例。
- en: A Brief History of Express
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express的简史
- en: 'The creator of Express, TJ Holowaychuk, describes Express as a web framework
    inspired by Sinatra, which is a web framework based on Ruby. It is no surprise
    that Express borrows from a framework built on Ruby: Ruby spawned a wealth of
    great approaches to web development, aimed at making web development faster, more
    efficient, and more maintainable.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Express的创造者TJ Holowaychuk将Express描述为受Sinatra启发的Web框架，Sinatra是基于Ruby的Web框架。Express借鉴了建立在Ruby上的框架并不奇怪：Ruby衍生出了大量优秀的Web开发方法，旨在使Web开发更快、更高效和更易于维护。
- en: As much as Express was inspired by Sinatra, it was also deeply intertwined with
    Connect, a “plug-in” library for Node. Connect coined the term *middleware* to
    describe pluggable Node modules that can handle web requests to varying degrees.
    In 2014, in version 4.0, Express removed its dependency on Connect, but it still
    owes its concept of middleware to Connect.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Express受到了Sinatra的启发，但它也与Connect深度交织，Connect是Node的一个“插件”库。Connect创造了“中间件”这个术语，用来描述可以处理Web请求的可插拔Node模块。在2014年的4.0版本中，Express移除了对Connect的依赖，但仍然保留了其中间件的概念。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Express underwent a fairly substantial rewrite between 2.x and 3.0, then again
    between 3.x and 4.0\. This book focuses on version 4.0.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Express在2.x和3.0之间经历了相当大的重写，然后在3.x和4.0之间又重写了一次。本书侧重于4.0版本。
- en: 'Node: A New Kind of Web Server'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node：一种新型Web服务器
- en: In a way, Node has a lot in common with other popular web servers, like Microsoft’s
    Internet Information Services (IIS) or Apache. What is more interesting, though,
    is how it differs, so let’s start there.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，Node与其他流行的Web服务器（如Microsoft的Internet Information Services（IIS）或Apache）有很多共同点。不过更有趣的是它们的区别，所以让我们从这里开始。
- en: Much like Express, Node’s approach to web servers is very minimal. Unlike IIS
    or Apache, which a person can spend many years mastering, Node is easy to set
    up and configure. That is not to say that tuning Node servers for maximum performance
    in a production setting is a trivial matter; it’s just that the configuration
    options are simpler and more straightforward.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与Express类似，Node对于Web服务器的处理非常简化。与花费多年来掌握的IIS或Apache不同，Node的设置和配置都很容易。这并不是说在生产环境中调优Node服务器以获得最佳性能是一件微不足道的事情；只是配置选项更简单，更直接。
- en: 'Another major difference between Node and more traditional web servers is that
    Node is single threaded. At first blush, this may seem like a step backward. As
    it turns out, it is a stroke of genius. Single threading vastly simplifies the
    business of writing web apps, and if you need the performance of a multithreaded
    app, you can simply spin up more instances of Node, and you will effectively have
    the performance benefits of multithreading. The astute reader is probably thinking
    this sounds like smoke and mirrors. After all, isn’t multithreading through server
    parallelism (as opposed to app parallelism) simply moving the complexity around,
    not eliminating it? Perhaps, but in my experience, it has moved the complexity
    to exactly where it should be. Furthermore, with the growing popularity of cloud
    computing and treating servers as generic commodities, this approach makes a lot
    more sense. IIS and Apache are powerful indeed, and they are designed to squeeze
    the very last drop of performance out of today’s powerful hardware. That comes
    at a cost, though: they require considerable expertise to set up and tune to achieve
    that performance.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Node和更传统的Web服务器之间的另一个重要区别是Node是单线程的。乍一看，这似乎是向后退。事实证明，这是一个天才的举措。单线程极大地简化了编写Web应用程序的业务，并且如果你需要多线程应用程序的性能，你可以简单地启动更多Node实例，从而有效地获得多线程的性能优势。敏锐的读者可能会觉得这听起来像是虚张声势。毕竟，通过服务器并行性（与应用程序并行性相对），多线程并不是简单地将复杂性移动，而是重新分配了复杂性。也许是这样，但根据我的经验，它已经将复杂性移动到了恰到好处的位置。此外，随着云计算和将服务器视为通用商品的日益流行，这种方法变得更加合理。IIS和Apache确实很强大，它们被设计用来从今天强大的硬件中挤取最后一滴性能。然而，这是有代价的：它们需要相当多的专业知识来设置和调优以达到这种性能。
- en: 'In terms of the way apps are written, Node apps have more in common with PHP
    or Ruby apps than .NET or Java apps. While the JavaScript engine that Node uses
    (Google’s V8) does compile JavaScript to native machine code (much like C or C++),
    it does so transparently,^([1](ch01.xhtml#idm45053609101112)) so from the user’s
    perspective, it behaves like a purely interpreted language. Not having a separate
    compile step reduces maintenance and deployment hassles: all you have to do is
    update a JavaScript file, and your changes will automatically be available.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序编写方式上，Node应用与PHP或Ruby应用更为相似，而不是.NET或Java应用。虽然Node使用的JavaScript引擎（Google的V8）将JavaScript编译为本机机器码（类似于C或C++），但它是透明的，所以从用户的角度来看，它表现得像一个纯解释语言。没有单独的编译步骤可以减少维护和部署的麻烦：你只需要更新一个JavaScript文件，你的更改就会自动生效。
- en: Another compelling benefit of Node apps is that Node is incredibly platform
    independent. It’s not the first or only platform-independent server technology,
    but platform independence is really more of a spectrum than a binary proposition.
    For example, you can run .NET apps on a Linux server thanks to Mono, but it’s
    a painful endeavor thanks to spotty documentation and system incompatibilities.
    Likewise, you can run PHP apps on a Windows server, but it is not generally as
    easy to set up as it is on a Linux machine. Node, on the other hand, is a snap
    to set up on all the major operating systems (Windows, macOS, and Linux) and enables
    easy collaboration. Among website design teams, a mix of PCs and Macs is quite
    common. Certain platforms, like .NET, introduce challenges for frontend developers
    and designers, who often use Macs, which has a huge impact on collaboration and
    efficiency. The idea of being able to spin up a functioning server on any operating
    system in a matter of minutes (or even seconds!) is a dream come true.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个Node应用的引人注目的好处是Node非常独立于平台。它并非第一个或唯一的平台无关服务器技术，但平台独立实际上更像是一个连续的谱而不是一个二进制命题。例如，你可以通过Mono在Linux服务器上运行.NET应用，但由于文档不完善和系统不兼容性，这是一项艰难的任务。同样地，你可以在Windows服务器上运行PHP应用，但通常不像在Linux机器上那样容易设置。另一方面，Node在所有主要操作系统（Windows、macOS和Linux）上都很容易设置，并支持简单的协作。在网站设计团队中，PC和Mac的混合使用非常普遍。某些平台，比如.NET，给前端开发人员和设计师带来了挑战，而他们通常使用Mac，这对协作和效率产生了巨大影响。能够在几分钟甚至几秒钟内在任何操作系统上启动一个功能齐全的服务器的想法实现了梦想。
- en: The Node Ecosystem
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node生态系统
- en: Node, of course, lies at the heart of the stack. It’s the software that enables
    JavaScript to run on the server, uncoupled from a browser, which in turn allows
    frameworks written in JavaScript (like Express) to be used. Another important
    component is the database, which will be covered in more depth in [Chapter 13](ch13.xhtml#ch_persistence).
    All but the simplest of web apps will need a database, and there are databases
    that are more at home in the Node ecosystem than others.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Node位于整个堆栈的核心。它是使JavaScript在服务器上运行的软件，与浏览器解耦，从而允许使用JavaScript编写的框架（如Express）。另一个重要组件是数据库，我们将在[第13章](ch13.xhtml#ch_persistence)中更深入地讨论它。除了最简单的Web应用程序之外，几乎所有的Web应用程序都需要数据库，而有些数据库比其他数据库更适合Node生态系统。
- en: 'It is unsurprising that database interfaces are available for all the major
    relational databases (MySQL, MariaDB, PostgreSQL, Oracle, SQL Server); it would
    be foolish to neglect those established behemoths. However, the advent of Node
    development has revitalized a new approach to database storage: the so-called
    NoSQL databases. It’s not always helpful to define something as what it’s *not*,
    so we’ll add that these NoSQL databases might be more properly called “document
    databases” or “key/value pair databases.” They provide a conceptually simpler
    approach to data storage. There are many, but MongoDB is one of the front-runners,
    and it’s the NoSQL database we will be using in this book.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，针对所有主要关系数据库（如MySQL、MariaDB、PostgreSQL、Oracle、SQL Server）都提供了数据库接口；忽视这些已经建立起来的巨头是愚蠢的。然而，Node开发的出现使数据库存储采用了一种新的方法：所谓的NoSQL数据库。将某物定义为其“不是”并不总是有帮助，因此我们会补充说，这些NoSQL数据库更恰当地称为“文档数据库”或“键/值对数据库”。它们提供了一种概念上更简单的数据存储方法。虽然有很多种，但MongoDB是其中的佼佼者，也是本书中我们将使用的NoSQL数据库。
- en: 'Because building a functional website depends on multiple pieces of technology,
    acronyms have been spawned to describe the “stack” that a website is built on.
    For example, the combination of Linux, Apache, MySQL, and PHP is referred to as
    the *LAMP* stack. Valeri Karpov, an engineer at MongoDB, coined the acronym *MEAN*:
    Mongo, Express, Angular, and Node. While it’s certainly catchy, it is limiting:
    there are so many choices for databases and application frameworks that “MEAN”
    doesn’t capture the diversity of the ecosystem (it also leaves out what I believe
    is an important component: rendering engines).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于构建一个功能性网站依赖于多种技术组件，因此衍生出了一些缩写词来描述网站所依赖的“技术堆栈”。例如，Linux、Apache、MySQL 和 PHP
    的组合被称为*LAMP*堆栈。MongoDB 工程师瓦列里·卡尔波夫创造了缩写*MEAN*：Mongo、Express、Angular 和 Node。虽然这确实引人注目，但它有其局限性：数据库和应用程序框架的选择如此之多，以至于“MEAN”无法捕捉到生态系统的多样性（它还忽略了我认为很重要的一个组件：渲染引擎）。
- en: Coining an inclusive acronym is an interesting exercise. The indispensable component,
    of course, is Node. While there are other server-side JavaScript containers, Node
    is emerging as the dominant one. Express, also, is not the only web app framework
    available, though it is close to Node in its dominance. The two other components
    that are usually essential for web app development are a database server and a
    rendering engine (either a templating engine like Handlebars or an SPA framework
    like React). For these last two components, there aren’t as many clear front-runners,
    and this is where I believe it’s a disservice to be restrictive.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创造一个包容性缩写词是一个有趣的练习。当然，不可或缺的组件是Node。虽然还有其他服务器端JavaScript容器，但Node正逐渐成为主导。Express也不是唯一的Web应用程序框架，尽管它在与Node的竞争中占据了重要地位。通常对Web应用程序开发至关重要的另外两个组件是数据库服务器和渲染引擎（如Handlebars这样的模板引擎或者像React这样的SPA框架）。对于这最后两个组件来说，没有明确的佼佼者，这就是我认为局限性是一种错误。
- en: What ties all these technologies together is JavaScript, so in an effort to
    be inclusive, I will be referring to the *JavaScript stack*. For the purposes
    of this book, that means Node, Express, and MongoDB (there is also a relational
    database example in [Chapter 13](ch13.xhtml#ch_persistence)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些技术联系在一起的是JavaScript，为了包容性，我将使用“JavaScript堆栈”这个术语。对于本书的目的而言，这意味着Node、Express
    和 MongoDB（在[第13章](ch13.xhtml#ch_persistence)中还有一个关于关系数据库的示例）。
- en: Licensing
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可证
- en: When developing Node applications, you may find yourself having to pay more
    attention to licensing than you ever have before (I certainly have). One of the
    beauties of the Node ecosystem is the vast array of packages available to you.
    However, each of those packages carries its own licensing, and worse, each package
    may depend on other packages, meaning that understanding the licensing of the
    various parts of the app you’ve written can be tricky.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Node 应用程序时，你可能会发现自己需要比以往更多地关注许可证问题（我确实有这种感觉）。Node 生态系统的一大优点是提供给你的大量包。然而，每个包都有其自己的许可证，更糟糕的是，每个包可能依赖于其他包，这意味着理解你编写的应用程序各部分的许可证可能会有些棘手。
- en: However, there is some good news. One of the most popular licenses for Node
    packages is the MIT license, which is painlessly permissive, allowing you to do
    *almost* anything you want, including use the package in closed source software.
    However, you shouldn’t just assume every package you use is MIT licensed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，还有一些好消息。Node 包中最流行的许可证之一是 MIT 许可证，非常宽松，允许你几乎可以做*任何*你想做的事情，包括在闭源软件中使用该包。但是，你不应该假设你使用的每个包都是
    MIT 许可的。
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: There are several packages available in npm that will try to figure out the
    licenses of each dependency in your project. Search npm for `nlf` or `license-report`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 npm 中有几个可用的包会尝试查找你项目中每个依赖项的许可证。在 npm 中搜索 `nlf` 或 `license-report`。
- en: 'While MIT is the most common license you will encounter, you may also see the
    following licenses:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 MIT 是你最常遇到的许可证，但你可能也会看到以下许可证：
- en: GNU General Public License (GPL)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 通用公共许可证（GPL）
- en: The GPL is a popular open source license that has been cleverly crafted to keep
    software free. That means if you use GPL-licensed code in your project, your project
    must *also* be GPL licensed. Naturally, this means your project can’t be closed
    source.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: GPL 是一种流行的开源许可证，精心设计用于保持软件的自由。这意味着如果你在项目中使用 GPL 许可的代码，你的项目*也*必须使用 GPL 许可。自然地，这意味着你的项目不能是闭源的。
- en: Apache 2.0
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 2.0
- en: This license, like MIT, allows you to use a different license for your project,
    including a closed source license. You must, however, include notice of components
    that use the Apache 2.0 license.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此许可证与 MIT 类似，允许你为你的项目选择不同的许可证，包括闭源许可证。然而，你必须包含使用 Apache 2.0 许可证组件的通知。
- en: Berkeley Software Distribution (BSD)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 伯克利软件分发许可证（BSD）
- en: Similar to Apache, this license allows you to use whatever license you wish
    for your project, as long as you include notice of the BSD-licensed components.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Apache，该许可证允许你在项目中使用任何你希望的许可证，只要包含 BSD 许可证组件的通知。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Software is sometimes *dual licensed* (licensed under two different licenses).
    A common reason for doing this is to allow the software to be used in both GPL
    projects and projects with more permissive licensing. (For a component to be used
    in GPL software, the component must be GPL licensed.) This is a licensing scheme
    I often employ with my own projects: dual licensing with GPL and MIT.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有时软件会以*双重许可*（以两种不同的许可证许可）发布。这样做的一个常见原因是允许软件在 GPL 项目和更宽松许可的项目中使用。（对于一个组件要用于 GPL
    软件，该组件必须是 GPL 许可的。）这是我在自己的项目中经常采用的许可方案：使用 GPL 和 MIT 双重许可。
- en: Lastly, if you find yourself writing your own packages, you should be a good
    citizen and pick a license for your package, and document it correctly. There
    is nothing more frustrating to a developer than using someone’s package and having
    to dig around in the source to determine the licensing or, worse, find that it
    isn’t licensed at all.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你发现自己正在编写自己的包，你应该成为一个好公民，并为你的包选择一个许可证，并正确地记录它。对于开发者来说，没有什么比使用某人的包并不得不深入源代码查找许可证或者更糟糕的是发现它根本没有许可证更令人沮丧的了。
- en: Conclusion
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I hope this chapter has given you some more insight into what Express is and
    how it fits into the larger Node and JavaScript ecosystem, as well some clarity
    on the relationship between server-side and client-side web applications.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 希望本章节能让你更加深入地了解 Express 是什么以及它如何融入更大的 Node 和 JavaScript 生态系统中，同时也更加清晰地了解服务端和客户端
    Web 应用程序之间的关系。
- en: 'If you’re still feeling confused about what Express actually *is*, don’t worry:
    sometimes it’s much easier to just start using something to understand what it
    is, and this book will get you started building web applications with Express.
    Before we start using Express, however, we’re going to take a tour of Node in
    the next chapter, which is important background information to understanding how
    Express works.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然对Express究竟是什么感到困惑，不用担心：有时候，开始使用它以理解它的本质要容易得多，这本书将帮助你开始使用Express构建Web应用程序。然而，在我们开始使用Express之前，我们将在下一章节中对Node进行介绍，这是理解Express如何工作的重要背景信息。
- en: ^([1](ch01.xhtml#idm45053609101112-marker)) Often called *just in time* (JIT)
    compilation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm45053609101112-marker)) 经常被称为*即时*（JIT）编译。
