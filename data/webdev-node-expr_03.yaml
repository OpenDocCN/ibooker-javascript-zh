- en: Chapter 3\. Saving Time with Express
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：使用 Express 节省时间
- en: In [Chapter 2](ch02.xhtml#ch_getting_started_with_node), you learned how to
    create a simple web server using only Node. In this chapter, we will re-create
    that server using Express. This will provide a jumping-off point for the rest
    of the content of this book and introduce you to the basics of Express.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](ch02.xhtml#ch_getting_started_with_node)中，您学习了如何仅使用Node创建一个简单的Web服务器。在本章中，我们将使用Express重新创建该服务器。这将为本书其余内容提供一个起点，并介绍Express的基础知识。
- en: Scaffolding
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚手架
- en: '*Scaffolding* is not a new idea, but many people (myself included) were introduced
    to the concept by Ruby. The idea is simple: most projects require a certain amount
    of so-called *boilerplate* code, and who wants to re-create that code every time
    you begin a new project? A simple way is to create a rough skeleton of a project,
    and every time you need a new project, you just copy this skeleton, or template.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*脚手架*并非新概念，但许多人（包括我自己）是通过Ruby了解到这一概念的。其思想很简单：大多数项目都需要一定量的所谓*样板*代码，谁又愿意在每次开始新项目时重新创建这些代码呢？一个简单的方法是创建一个项目的粗略框架，每次需要新项目时，只需复制这个框架或模板即可。'
- en: Ruby on Rails took this concept one step further by providing a program that
    would automatically generate scaffolding for you. The advantage of this approach
    is that it could generate a more sophisticated framework than just selecting from
    a collection of templates.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby on Rails将这一概念推进了一步，提供了一个可以自动生成脚手架的程序。这种方法的优势在于，它可以生成比仅从模板集合中选择更复杂的框架。
- en: Express has taken a page from Ruby on Rails and provided a utility to generate
    scaffolding to start your Express project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Express借鉴了Ruby on Rails的一些方法，并提供了一个实用程序来生成脚手架，以启动您的Express项目。
- en: While the Express scaffolding utility is useful, I think it’s valuable to learn
    how to set up Express from scratch. In addition to learning more, you have more
    control over what gets installed and the structure of your project. Also, the
    Express scaffolding utility is geared toward server-side HTML generation and is
    less relevant for APIs and single-page applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Express脚手架实用程序很有用，但我认为从零开始学习如何设置Express也很有价值。除了学到更多知识外，您还可以控制所安装的内容以及项目的结构。此外，Express脚手架实用程序面向的是服务器端HTML生成，对于API和单页面应用程序则不太相关。
- en: 'While we won’t be using the scaffolding utility, I encourage you to take a
    look at it once you’ve finished the book: by then you’ll be armed with everything
    you need to know to evaluate whether the scaffolding it generates is useful for
    you. For more information, see the [`express-generator` documentation](http://bit.ly/2CyvvLr).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会使用脚手架实用程序，但我鼓励您在完成本书后查看它：到那时，您将掌握评估它生成的脚手架是否对您有用的一切知识。更多信息，请参阅[`express-generator`文档](http://bit.ly/2CyvvLr)。
- en: The Meadowlark Travel Website
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Meadowlark Travel 网站](https://meadowlark.example.org) '
- en: 'Throughout this book, we’ll be using a running example: a fictional website
    for Meadowlark Travel, a company offering services for people visiting the great
    state of Oregon. If you’re more interested in creating an API, have no fear: the
    Meadowlark Travel website will expose an API in addition to serving a functional
    website.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们将使用一个运行示例：Meadowlark Travel的虚构网站，该公司为访问俄勒冈州的人们提供服务。如果您更感兴趣创建API，不必担心：Meadowlark
    Travel网站将除了提供功能性网站外还提供API。
- en: Initial Steps
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始步骤
- en: 'Start by creating a new directory: this will be the root directory for your
    project. In this book, whenever we refer to the project directory, app directory,
    or project root, we’re referring to this directory.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个新目录：这将是您项目的根目录。在本书中，无论我们提到项目目录、应用目录还是项目根目录，我们都指的是这个目录。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You’ll probably want to keep your web app files separate from all the other
    files that usually accompany a project, such as meeting notes, documentation,
    etc. For that reason, I recommend making your project root a subdirectory of your
    project directory. For example, for the Meadowlark Travel website, I might keep
    the project in *~/projects/meadowlark*, and the project root in *~/projects/meadowlark/site*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望将Web应用文件与通常陪伴项目的所有其他文件分开，例如会议记录、文档等。因此，我建议将项目根目录设置为项目目录的子目录。例如，对于Meadowlark
    Travel网站，我可能会将项目保存在*~/projects/meadowlark*，并将项目根目录设置为*~/projects/meadowlark/site*。
- en: 'npm manages project dependencies—as well as metadata about the project—in a
    file called *package.json*. The easiest way to create this file is to run `npm
    init`: it will ask you a series of questions and generate a *package.json* file
    to get you started (for the “entry point” question, use *meadowlark.js* for the
    name of your project).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: npm在一个名为*package.json*的文件中管理项目依赖项以及有关项目的元数据。创建此文件的最简单方法是运行`npm init`：它会询问您一系列问题并生成一个*package.json*文件，以便您开始（对于“入口点”问题，请使用*meadowlark.js*作为项目名称）。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Every time you run npm, you may get warnings about a missing description or
    repository field. It’s safe to ignore these warnings, but if you want to eliminate
    them, edit the *package.json* file and provide values for the fields npm is complaining
    about. For more information about the fields in this file, see the [npm *package.json*
    documentation](http://bit.ly/2O8HrbW).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行npm时，可能会收到有关缺少描述或存储库字段的警告。可以安全地忽略这些警告，但如果您想消除它们，可以编辑*package.json*文件并为npm正在投诉的字段提供值。有关此文件中字段的更多信息，请参阅[npm
    *package.json*文档](http://bit.ly/2O8HrbW)。
- en: 'The first step will be installing Express. Run the following npm command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将是安装Express。运行以下npm命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running `npm install` will install the named package(s) in the *node_modules*
    directory and update the *package.json* file. Since the *node_modules* directory
    can be regenerated at any time with npm, we will not save it in our repository.
    To ensure we don’t accidentally add it to our repository, we create a file called
    *.gitignore*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm install`将安装所命名的包到*node_modules*目录，并更新*package.json*文件。由于*node_modules*目录可以随时用npm重新生成，我们不会将其保存在仓库中。为了确保不会意外将其添加到仓库中，我们创建一个名为*.gitignore*的文件：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now create a file called *meadowlark.js*. This will be our project’s entry
    point. Throughout the book, we will simply be referring to this file as the *app
    file* (*ch03/00-meadowlark.js* in the companion repo):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个名为*meadowlark.js*的文件。这将是我们项目的入口点。在整本书中，我们将简称此文件为*应用文件*（在伴随的仓库中是*ch03/00-meadowlark.js*）：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Many tutorials, as well as the Express scaffolding generator, encourage you
    to name your primary file *app.js* (or sometimes *index.js* or *server.js*). Unless
    you’re using a hosting service or deployment system that requires your main application
    file to have a specific name, I don’t feel there’s a compelling reason to do this,
    and I prefer to name the primary file after the project. Anyone who’s ever stared
    at a bunch of editor tabs that all say “index.html” will immediately see the wisdom
    of this. `npm init` will default to *index.js*; if you use a different name for
    your application file, make sure to update the `main` property in *package.json*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 许多教程以及Express脚手架生成器都鼓励您将主文件命名为*app.js*（有时是*index.js*或*server.js*）。除非您使用要求主应用程序文件具有特定名称的托管服务或部署系统，否则我认为没有必要这样做，我更喜欢以项目命名主文件。任何曾经看着一堆标签都写着“index.html”的人立即会看出这种做法的智慧。`npm
    init`将默认为*index.js*；如果您使用不同的名称作为应用程序文件，请确保更新*package.json*中的`main`属性。
- en: 'You now have a minimal Express server. You can start the server (`node meadowlark.js`)
    and navigate to *http://localhost:3000*. The result will be disappointing: you
    haven’t provided Express with any routes, so it will simply give you a generic
    404 message indicating that the page doesn’t exist.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您拥有了一个最小化的Express服务器。您可以启动服务器（`node meadowlark.js`）并导航至*http://localhost:3000*。结果可能会让人失望：您尚未为Express提供任何路由，因此它将只是给出一个通用的404消息，表明页面不存在。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note how we choose the port that we want our application to run on: `const
    port = process.env.PORT || 3000`. This allows us to override the port by setting
    an environment variable before you start the server. If your app isn’t running
    on port 3000 when you run this example, check to see whether your `PORT` environment
    variable is set.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何选择我们希望应用程序运行的端口：`const port = process.env.PORT || 3000`。这允许我们在启动服务器之前通过设置环境变量来覆盖端口。如果在运行此示例时您的应用程序未在端口3000上运行，请检查您的`PORT`环境变量是否已设置。
- en: 'Let’s add some routes for the home page and an About page. Before the 404 handler,
    we’ll add two new routes (*ch03/01-meadowlark.js* in the companion repo):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为主页和关于页面添加一些路由。在404处理程序之前，我们将添加两个新路由（在伴随的仓库中是*ch03/01-meadowlark.js*）：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`app.get` is the method by which we’re adding routes. In the Express documentation,
    you will see `app.METHOD`. This doesn’t mean that there’s literally a method called
    `METHOD`; it’s just a placeholder for your (lowercased) HTTP verbs (`get` and
    `post` being the most common). This method takes two parameters: a path and a
    function.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get` 是我们添加路由的方法。在 Express 文档中，你会看到 `app.METHOD`。这并不意味着真的有一个叫做 `METHOD`
    的方法；它只是一个占位符，代表（小写的）HTTP 动词（`get` 和 `post` 是最常见的）。这个方法接受两个参数：路径和一个函数。'
- en: 'The *path* is what defines the route. Note that `app.METHOD` does the heavy
    lifting for you: by default, it doesn’t care about the case or trailing slash,
    and it doesn’t consider the querystring when performing the match. So the route
    for the About page will work for */about*, */About*, */about/*, */about?foo=bar*,
    */about/?foo=bar*, etc.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*路径* 定义了路由。请注意，`app.METHOD` 为您完成了大部分工作：默认情况下，它不区分大小写或尾随斜杠，并且在匹配时不考虑查询字符串。因此，About
    页面的路由将适用于 */about*、*/About*、*/about/*、*/about?foo=bar*、*/about/?foo=bar* 等。'
- en: The *function* you provide will get invoked when the route is matched. The parameters
    passed to that function are the request and response objects, which we’ll learn
    more about in [Chapter 6](ch06.xhtml#ch_the_request_and_response_objects). For
    now, we’re just returning plain text with a status code of 200 (Express defaults
    to a status code of 200—you don’t have to specify it explicitly).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由匹配时，您提供的函数将被调用。传递给该函数的参数是请求和响应对象，我们将在[第6章](ch06.xhtml#ch_the_request_and_response_objects)更详细地了解它们。现在，我们只是返回带有状态码
    200 的纯文本（Express 默认状态码为 200，您不必显式指定它）。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: I highly recommend getting a browser plug-in that shows you the status code
    of the HTTP request as well as any redirects that took place. It will make it
    easier to spot redirect issues in your code or incorrect status codes, which are
    often overlooked. For Chrome, Ayima’s Redirect Path works wonderfully. In most
    browsers, you can see the status code in the Network section of the developer
    tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议安装一个浏览器插件，它可以显示 HTTP 请求的状态码以及任何重定向，这将有助于您快速发现代码中的重定向问题或不正确的状态码，这些问题通常被忽视。对于
    Chrome，Ayima 的 Redirect Path 插件效果非常好。在大多数浏览器中，您可以在开发者工具的网络部分看到状态码。
- en: Instead of using Node’s low-level `res.end`, we’re switching to using Express’s
    extension, `res.send`. We are also replacing Node’s `res.writeHead` with `res.set`
    and `res.status`. Express is also providing us a convenience method, `res.type`,
    which sets the `Content-Type` header. While it’s still possible to use `res.writeHead`
    and `res.end`, it isn’t necessary or recommended.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再使用 Node 的底层方法 `res.end`，而是切换到 Express 提供的 `res.send`。我们还用 `res.set` 和 `res.status`
    替换了 Node 的 `res.writeHead`。Express 还为我们提供了一个便捷方法 `res.type`，它设置 `Content-Type`
    头部。虽然仍然可以使用 `res.writeHead` 和 `res.end`，但这并不是必需或建议的。
- en: 'Note that our custom 404 and 500 pages must be handled slightly differently.
    Instead of using `app.get`, we are using `app.use`. `app.use` is the method by
    which Express adds *middleware*. We’ll be covering middleware in more depth in
    [Chapter 10](ch10.xhtml#ch_middleware), but for now, you can think of this as
    a catchall handler for anything that didn’t get matched by a route. This brings
    us to an important point: *in Express, the order in which routes and middleware
    are added is significant*. If we put the 404 handler above the routes, the home
    page and About page would stop working; instead, those URLs would result in a
    404\. Right now, our routes are pretty simple, but they also support wildcards,
    which can lead to problems with ordering. For example, what if we wanted to add
    subpages to About, such as */about/contact* and */about/directions*? The following
    will not work as expected:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的自定义 404 和 500 页面必须稍有不同处理。我们不再使用 `app.get`，而是使用 `app.use`。`app.use` 是
    Express 添加*中间件*的方法。我们将在[第10章](ch10.xhtml#ch_middleware)更深入地讨论中间件，但现在你可以将其视为一个捕捉未被路由匹配的所有请求的处理程序。这带来了一个重要的观点：*在
    Express 中，添加路由和中间件的顺序非常重要*。如果我们将 404 处理程序放在路由之上，主页和 About 页面将无法正常工作；相反，这些 URL
    将导致 404 错误。目前，我们的路由相当简单，但也支持通配符，这可能会导致顺序问题。例如，如果我们想为 About 添加子页面，如 */about/contact*
    和 */about/directions*，以下方法将无法按预期工作：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this example, the `/about/contact` and `/about/directions` handlers will
    never be matched because the first handler uses a wildcard in its path: `/about*`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`/about/contact` 和 `/about/directions` 处理程序永远不会匹配，因为第一个处理程序在其路径中使用了通配符：`/about*`。
- en: Express can distinguish between the 404 and 500 handlers by the number of arguments
    their callback functions take. Error routes will be covered in depth in [Chapter 10](ch10.xhtml#ch_middleware)
    and [Chapter 12](ch12.xhtml#ch_production_concerns).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Express可以通过它们的回调函数接受的参数数量来区分404和500处理程序。错误路由将在[第10章](ch10.xhtml#ch_middleware)和[第12章](ch12.xhtml#ch_production_concerns)中深入讨论。
- en: Now you can start the server again and see that there’s a functioning home page
    and About page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以重新启动服务器，看看是否有一个正常运行的首页和关于页面。
- en: So far, we haven’t done anything that couldn’t be done just as easily without
    Express, but already Express is providing us some functionality that isn’t immediately
    obvious. Remember in the previous chapter how we had to normalize `req.url` to
    determine what resource was being requested? We had to manually strip off the
    querystring and the trailing slash and convert to lowercase. Express’s router
    is now handling those details for us automatically. While it may not seem like
    a large thing now, it’s only scratching the surface of what Express’s router is
    capable of.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有做过任何不用Express就能轻松完成的事情，但是Express已经为我们提供了一些功能，这些功能并不是立即显而易见的。还记得上一章中我们如何规范化`req.url`以确定所请求的资源吗？我们不得不手动去掉查询字符串和尾随斜杠，并转换为小写。现在Express的路由器已经自动处理了这些细节。虽然现在看起来可能不是很大的事情，但这只是Express路由器能够实现的功能的冰山一角。
- en: Views and Layouts
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图和布局
- en: If you’re familiar with the “model-view-controller” paradigm, then the concept
    of a view will be no stranger to you. Essentially, a *view* is what gets delivered
    to the user. In the case of a website, that usually means HTML, though you could
    also deliver a PNG or a PDF or anything that can be rendered by the client. For
    our purposes, we will consider views to be HTML.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉“模型-视图-控制器”范式，那么视图的概念对你来说不会陌生。本质上，*视图*就是向用户传递的内容。对于网站来说，通常意味着HTML，尽管你也可以传递PNG、PDF或任何客户端可以呈现的内容。在我们的目的中，我们将视图视为HTML。
- en: 'A view differs from a static resource (like an image or CSS file) in that a
    view doesn’t necessarily have to be static: the HTML can be constructed on the
    fly to provide a customized page for each request.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 视图与静态资源（如图像或CSS文件）不同之处在于视图不一定是静态的：HTML可以动态生成，以为每个请求提供定制页面。
- en: 'Express supports many different view engines that provide different levels
    of abstraction. Express gives some preference to a view engine called *Pug* (which
    is no surprise, because it is also the brainchild of TJ Holowaychuk). The approach
    Pug takes is minimal: what you write doesn’t resemble HTML at all, which certainly
    represents a lot less typing (no more angle brackets or closing tags). The Pug
    engine then takes that and converts it to HTML.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Express支持许多不同的视图引擎，提供不同程度的抽象化。Express对名为*Pug*的视图引擎有些偏爱（这一点并不奇怪，因为它也是TJ Holowaychuk的作品）。Pug采用的方法很简洁：你写的东西完全不像HTML，这无疑减少了很多打字（不再有尖括号或闭合标签）。然后Pug引擎会将其转换为HTML。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Pug was originally called Jade, and the name changed with the release of version
    2 because of a trademark issue.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Pug最初被称为Jade，在第2版发布时更名是因为商标问题。
- en: Pug is appealing, but that level of abstraction comes at a cost. If you’re a
    frontend developer, you have to understand HTML and understand it well, even if
    you’re actually writing your views in Pug. Most frontend developers I know are
    uncomfortable with the idea of their primary markup language being abstracted
    away. For this reason, I am recommending the use of another, less abstract templating
    framework called *Handlebars*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Pug很吸引人，但这种抽象程度是有代价的。如果你是前端开发人员，即使你实际上是在用Pug编写视图，你也必须深入理解HTML，并且要理解得很透彻。我认识的大多数前端开发人员对他们的主要标记语言被抽象化这个想法感到不舒服。因此，我建议使用另一种不那么抽象的模板框架*Handlebars*。
- en: 'Handlebars (which is based on the popular language-independent templating language
    Mustache) doesn’t attempt to abstract away HTML for you: you write HTML with special
    tags that allow Handlebars to inject content.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Handlebars（基于流行的语言无关模板语言Mustache）不会试图为你抽象HTML：你需要使用特殊的标记编写HTML，这些标记允许Handlebars注入内容。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the years following the original release of this book, React has taken the
    world by storm…which abstracts HTML away from frontend developers! Viewed through
    that lens, my prediction that frontend developers didn’t want HTML abstracted
    away hasn’t stood the test of time. However, JSX (the JavaScript language extension
    that most React developers use) is (almost) identical to writing HTML, so I wasn’t
    entirely wrong.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书最初发布后的几年里，React风靡全球……这使得HTML对于前端开发者来说被抽象化了！透过这个视角看，我预测前端开发者不希望HTML被抽象化的说法并没有经受住时间的考验。然而，JSX（大多数React开发者使用的JavaScript语言扩展）几乎与编写HTML相同，所以我并不完全错。
- en: 'To provide Handlebars support, we’ll use Eric Ferraiuolo’s `express-handlebars`
    package. In your project directory, execute the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供Handlebars支持，我们将使用Eric Ferraiuolo的`express-handlebars`包。在项目目录中，执行以下操作：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then in *meadowlark.js*, modify the first few lines (*ch03/02-meadowlark.js*
    in the companion repo):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在*meadowlark.js*中修改前几行（*ch03/02-meadowlark.js*在配套存储库中）：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This creates a view engine and configures Express to use it by default. Now
    create a directory called *views* that has a subdirectory called *layouts*. If
    you’re an experienced web developer, you’re probably already comfortable with
    the concepts of *layouts* (sometimes called *master pages*). When you build a
    website, there’s a certain amount of HTML that’s the same—or very close to the
    same—on every page. It not only becomes tedious to rewrite all that repetitive
    code for every page, but also creates a potential maintenance nightmare: if you
    want to change something on every page, you have to change *all* the files. Layouts
    free you from this, providing a common framework for all the pages on your site.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个视图引擎，并配置Express默认使用它。现在创建一个名为*views*的目录，其中有一个名为*layouts*的子目录。如果你是一名经验丰富的Web开发者，你可能已经对*layouts*（有时称为*master
    pages*）的概念感到非常熟悉。当你构建一个网站时，有一部分HTML在每个页面上是相同的或非常接近相同的。重复编写所有这些重复的代码不仅变得乏味，而且可能造成维护的噩梦：如果你想在每个页面上做一些改动，你必须改动*所有*的文件。布局解放了你的手，为你的网站上的所有页面提供了一个共同的框架。
- en: 'So let’s create a template for our site. Create a file called *views/layouts/main.handlebars*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们为我们的网站创建一个模板。创建一个名为*views/layouts/main.handlebars*的文件：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The only thing that you probably haven’t seen before is this: `{{{body}}}`.
    This expression will be replaced with the HTML for each view. When we created
    the Handlebars instance, note we specified the default layout (`defaultLayout:
    \''main''`). That means that unless you specify otherwise, this is the layout
    that will be used for any view.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '你可能之前没有见过的唯一一件事情是这个：`{{{body}}}`。这个表达式将被每个视图的HTML替换。当我们创建Handlebars实例时，请注意我们指定了默认布局（`defaultLayout:
    \''main''`）。这意味着除非你另行指定，否则这将是任何视图使用的布局。'
- en: 'Now let’s create view pages for our home page, *views/home.handlebars*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为我们的主页创建视图页面，*views/home.handlebars*：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then our About page, *views/about.handlebars*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是我们的关于页面，*views/about.handlebars*：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then our Not Found page, *views/404.handlebars*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是我们的找不到页面，*views/404.handlebars*：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And finally our Server Error page, *views/500.handlebars*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们的服务器错误页面，*views/500.handlebars*：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You probably want your editor to associate *.handlebars* and *.hbs* (another
    common extension for Handlebars files) with HTML to enable syntax highlighting
    and other editor features. For vim, you can add the line `au BufNewFile,BufRead
    *.handlebars set filetype=html` to your *~/.vimrc* file. For other editors, consult
    your documentation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望你的编辑器将*.handlebars*和*.hbs*（Handlebars文件的另一种常见扩展名）与HTML关联起来，以启用语法高亮和其他编辑器功能。对于vim，你可以在*~/.vimrc*文件中添加一行`au
    BufNewFile,BufRead *.handlebars set filetype=html`。对于其他编辑器，请查阅其文档。
- en: 'Now that we have some views set up, we have to replace our old routes with
    new ones that use these views (*ch03/02-meadowlark.js* in the companion repo):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些视图设置，我们必须用这些视图替换旧的路由（*ch03/02-meadowlark.js*在配套存储库中）：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that we no longer have to specify the content type or status code: the
    view engine will return a content type of `text/html` and a status code of 200
    by default. In the catchall handler, which provides our custom 404 page, and the
    500 handler, we have to set the status code explicitly.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不再需要指定内容类型或状态码：视图引擎将默认返回`text/html`的内容类型和状态码200。在提供我们自定义404页面的通用处理程序以及500处理程序中，我们必须显式设置状态码。
- en: If you start your server and check out the home or About page, you’ll see that
    the views have been rendered. If you examine the source, you’ll see that the boilerplate
    HTML from *views/layouts/main.handlebars* is there.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启动服务器并查看主页或关于页面，你会发现视图已经渲染完毕。如果你查看源代码，你会看到来自*views/layouts/main.handlebars*的样板HTML代码。
- en: Even though every time you visit the home page, you get the same HTML, these
    routes are considered *dynamic content*, because we could make a different decision
    each time the route gets called (which we’ll see plenty of later in this book).
    However, content that really never changes, in other words, static content, is
    common and important, so we’ll consider static content next.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每次访问主页时，你都会得到相同的HTML，但这些路由被视为*动态内容*，因为我们每次调用路由时可以做出不同的决策（这在本书的后面部分会有很多例子）。然而，从来不变的内容，换句话说，静态内容，是常见且重要的，所以我们接下来会考虑静态内容。
- en: Static Files and Views
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态文件和视图
- en: Express relies on *middleware* to handle static files and views. Middleware
    is a concept that will be covered in more detail in [Chapter 10](ch10.xhtml#ch_middleware).
    For now, it’s sufficient to know that middleware provides modularization, making
    it easier to handle requests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Express依赖于*中间件*来处理静态文件和视图。中间件是一个将在[第10章](ch10.xhtml#ch_middleware)中更详细介绍的概念。现在，只需知道中间件提供了模块化，使得处理请求更加容易即可。
- en: The `static` middleware allows you to designate one or more directories as containing
    static resources that are simply to be delivered to the client without any special
    handling. This is where you would put things such as images, CSS files, and client-side
    JavaScript files.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`static`中间件允许你指定一个或多个目录，其中包含静态资源，这些资源会简单地提供给客户端，不需要任何特殊处理。这是你放置图片、CSS文件和客户端JavaScript文件等内容的地方。'
- en: 'In your project directory, create a subdirectory called *public* (we call it
    *public* because anything in this directory will be served to the client without
    question). Then, before you declare any routes, you’ll add the `static` middleware
    (*ch03/02-meadowlark.js* in the companion repo):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目目录中，创建一个名为*public*的子目录（我们称之为*public*，因为该目录中的任何内容都会毫不保留地提供给客户端）。然后，在声明任何路由之前，你将添加`static`中间件（*ch03/02-meadowlark.js*在配套的代码库中）：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `static` middleware has the same effect as creating a route for each static
    file you want to deliver that renders a file and returns it to the client. So
    let’s create an *img* subdirectory inside *public* and put our *logo.png* file
    in there.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`static`中间件的作用与创建每个要提供的静态文件的路由具有相同的效果，它渲染一个文件并将其返回给客户端。因此，让我们在*public*目录内创建一个*img*子目录，并把我们的*logo.png*文件放在其中。'
- en: 'Now we can simply reference */img/logo.png* (note, we do not specify `public`;
    that directory is invisible to the client), and the `static` middleware will serve
    that file, setting the content type appropriately. Now let’s modify our layout
    so that our logo appears on every page:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以简单地引用*/img/logo.png*（注意，我们不指定`public`；该目录对客户端是不可见的），而`static`中间件会适当地提供该文件，设置内容类型。现在让我们修改我们的布局，以便我们的logo出现在每一页上：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that middleware is processed in order, and static middleware—which
    is usually declared first or at least very early—will override other routes. For
    example, if you put an *index.html* file in the *public* directory (try it!),
    you’ll find that the contents of that file get served instead of the route you
    configured! So if you’re getting confusing results, check your static files and
    make sure there’s nothing unexpected matching the route.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，中间件按顺序处理，通常首先声明或至少非常早地声明的静态中间件将覆盖其他路由。例如，如果你在*public*目录中放置一个*index.html*文件（试试看！），你会发现该文件的内容会被提供，而不是你配置的路由！因此，如果你得到混乱的结果，请检查你的静态文件，并确保没有意外匹配到路由。
- en: Dynamic Content in Views
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图中的动态内容
- en: Views aren’t simply a complicated way to deliver static HTML (though they can
    certainly do that as well). The real power of views is that they can contain dynamic
    information.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 视图并不仅仅是传递静态HTML的复杂方式（尽管它们当然也可以这样做）。视图真正的威力在于它们可以包含动态信息。
- en: 'Let’s say that on the About page, we want to deliver a “virtual fortune cookie.”
    In our *meadowlark.js* file, we define an array of fortune cookies:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在关于页面上，我们想要提供一个“虚拟幸运饼干”。在我们的*meadowlark.js*文件中，我们定义了一个幸运饼干的数组：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Modify the view (*/views/about.handlebars*) to display a fortune:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 修改视图（*/views/about.handlebars*）以显示一则幸运饼干：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now modify the route */about* to deliver the random fortune cookie:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在修改路由*/about*，以提供随机的幸运饼干：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now if you restart the server and load the */about* page, you’ll see a random
    fortune, and you’ll get a new one every time you reload the page. Templating is
    incredibly useful, and we will be covering it in depth in [Chapter 7](ch07.xhtml#ch_templating).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你重新启动服务器并加载 */about* 页面，你会看到一个随机的幸运语，并且每次重新加载页面都会得到一个新的幸运语。模板化非常有用，我们将在[第7章](ch07.xhtml#ch_templating)中深入讲解。
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve created a basic website with Express. Even though it’s simple, it contains
    all the seeds we need for a full-featured website. In the next chapter, we’ll
    be crossing our *t*s and dotting our *i*s in preparation for adding more advanced
    functionality.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用Express创建了一个基本的网站。尽管它很简单，但已经包含了我们建立完整功能网站所需的所有基础。在下一章中，我们将开始准备添加更高级功能，严谨地做好每一个细节。
