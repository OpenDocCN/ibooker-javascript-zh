- en: Chapter 7\. Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 接口
- en: Why only use the
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为什么仅使用
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Boring built-in type shapes when
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 无聊的内置类型形状何时
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can make our own!
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们可以自己创建！
- en: I mentioned back in [Chapter 4, “Objects”](ch04.xhtml#objects) that although
    type aliases for `{ ... }` object types are a way to describe object shapes, TypeScript
    also includes an “interface” feature many developers prefer. Interfaces are another
    way to declare an object shape with an associated name. Interfaces are in many
    ways similar to aliased object types but are generally preferred for their more
    readable error messages, speedier compiler performance, and better interoperability
    with classes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第4章，“对象”](ch04.xhtml#objects)中提到，虽然 `{ ... }` 对象类型的类型别名是描述对象形状的一种方式，TypeScript
    还包括了许多开发人员更喜欢的“接口”特性。接口是另一种使用相关名称声明对象形状的方式。接口在很多方面与别名对象类型类似，但通常更受欢迎，因为它们具有更可读的错误消息、更快的编译器性能以及与类更好的互操作性。
- en: Type Aliases Versus Interfaces
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型别名与接口
- en: 'Here is a quick recap of the syntax for how an aliased object type would describe
    an object with a `born: number` and `name: string`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是一个快速回顾如何使用类型别名描述具有 `born: number` 和 `name: string` 的对象的语法：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the equivalent syntax for an interface:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是接口的等效语法：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The two syntaxes are almost identical.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语法几乎是相同的。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: TypeScript developers who prefer semicolons generally put them after type aliases
    and not after interfaces. This preference mirrors the difference between declaring
    a variable with a `;` versus declaring a class or function without.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢分号的 TypeScript 开发人员通常将它们放在类型别名后面，而不是接口后面。这种偏好反映了使用 `;` 声明变量与声明类或函数时的差异。
- en: 'TypeScript’s assignability checking and error messages for interfaces also
    work and look just about the same as they do for object types. The following assignability
    errors for assigning to the `valueLater` variable would be roughly the same if
    `Poet` was an interface or type alias:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的可赋值性检查和接口的错误消息在对象类型上的工作和外观几乎相同。如果 `Poet` 是一个接口或类型别名，则对 `valueLater`
    变量进行赋值的以下可赋值性错误大致相同：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, there are a few key differences between interfaces and type aliases:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，接口和类型别名之间存在一些关键差异：
- en: As you’ll see later in this chapter, interfaces can “merge” together to be augmented—a
    feature particularly useful when working with third-party code such as built-in
    globals or npm packages.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如您稍后在本章中看到的，接口可以“合并”在一起进行增强——这在处理第三方代码（如内置全局或 npm 包）时特别有用。
- en: As you’ll see in the next chapter, [Chapter 8, “Classes”](ch08.xhtml#classes),
    interfaces can be used to type check the structure of class declarations while
    type aliases cannot.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如您将在下一章[第8章，“类”](ch08.xhtml#classes)中看到的那样，接口可以用于对类声明的结构进行类型检查，而类型别名则不能。
- en: 'Interfaces are generally speedier for the TypeScript type checker to work with:
    they declare a named type that can be cached more easily internally, rather than
    a dynamic copy-and-paste of a new object literal the way type aliases do.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口通常更适合 TypeScript 类型检查器使用：它们声明了一个可以更轻松地在内部缓存的命名类型，而不是像类型别名那样动态复制和粘贴新的对象文字。
- en: Because interfaces are considered named objects rather than an alias for an
    unnamed object literal, their error messages are more likely to be readable in
    hard edge cases.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为接口被认为是具有命名对象而不是未命名对象文本别名的对象，它们的错误消息在硬边缘情况下更可能是可读的。
- en: For the latter two reasons and to maintain consistency, the rest of this book
    and its associated projects default to using interfaces over aliased object shapes.
    I generally recommend using interfaces whenever possible (i.e., until you need
    features such as union types from type aliases).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 基于后两个原因并为保持一致性，本书及其相关项目默认使用接口而不是别名对象形状。我通常建议尽可能使用接口（即，直到需要类型别名的联合类型等功能）。
- en: Types of Properties
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性类型
- en: JavaScript objects can be wild and wacky in real-world usage, including getters
    and setters, properties that only sometimes exist, or accepting any arbitrary
    property names. TypeScript provides a set of type system tools for interfaces
    to help us model that wackiness.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 对象在实际使用中可能非常复杂和奇特，包括 getter 和 setter、有时仅存在的属性或接受任意属性名称。TypeScript
    提供了一套接口类型系统工具，帮助我们建模这种奇特性。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Because interfaces and type aliases behave so similarly, the following types
    of properties introduced in this chapter are all also usable with aliased object
    types.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于接口和类型别名的行为非常相似，本章介绍的以下类型属性也适用于别名对象类型。
- en: Optional Properties
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选属性
- en: As with object types, interface properties don’t all have to be required in
    the object. You can indicate an interface’s property is optional by including
    a `?` before the `:` in its type annotation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象类型一样，接口属性并非都必须是对象中必需的。您可以通过在类型注释中的`:`之前包含`?`来指示接口的属性是可选的。
- en: 'This `Book` interface requires only a `required` property and optionally allows
    an `optional`. Objects adhering to it may provide `optional` or leave it out as
    long as they provide `required`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Book`接口仅需要一个`required`属性，并可选地允许一个`optional`属性。符合此接口的对象可以提供`optional`或者将其省略，只要它们提供`required`即可：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The same caveats around the difference between optional properties and properties
    whose type happens to include `undefined` in a type union apply to interfaces
    as well as object types. [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)
    will describe TypeScript’s strictness settings around optional properties.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接口和对象类型中，关于可选属性和类型联合中包含`undefined`的属性之间的差异同样适用。[第13章，“配置选项”](ch13.xhtml#configuration_options)将描述TypeScript在可选属性周围的严格设置。
- en: Read-Only Properties
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只读属性
- en: You may sometimes wish to block users of your interface from reassigning properties
    of objects adhering to an interface. TypeScript allows you to add a `readonly`
    modifier before a property name to indicate that once set, that property should
    not be set to a different value. These `readonly` properties can be read from
    normally, but not reassigned to anything new.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望阻止接口的用户重新分配符合接口的对象的属性。TypeScript允许您在属性名称之前添加`readonly`修饰符，以指示一旦设置，该属性不应该被设置为其他值。这些`readonly`属性可以正常读取，但不能重新分配为新值。
- en: 'For example, the `text` property in the below `Page` interface gives back a
    `string` when accessed, but causes a type error if assigned a new value:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面`Page`接口中的`text`属性在访问时返回一个`string`，但如果分配一个新值则会导致类型错误：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that `readonly` modifiers exist only in the type system, and only apply
    to the usage of that interface. It won’t apply to an object unless that object
    is used in a location that declares it to be of that interface.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`readonly`修饰符仅存在于类型系统中，并且仅适用于该接口的使用。除非该对象在使用位置声明为该接口，否则不会应用于对象。
- en: 'In this continuation of the `exclaim` example, the `text` property is allowed
    to be modified outside of the function because its parent object isn’t explicitly
    used as a `Text` until inside the function. `pageIsh` is allowed to be used as
    a `Page` because a writable property is assignable to a `readonly` property (mutable
    properties can be read from, which is all a `readonly` property needs):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`exclaim`示例的延续中，`text`属性可以在函数外部修改，因为其父对象直到函数内部才显式用作`Text`。`pageIsh`可以用作`Page`，因为可写属性可分配给`readonly`属性（可变属性可以从中读取，这正是`readonly`属性所需的）：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Declaring the variable `pageIsh` with the explicit type annotation `: Page`
    would have indicated to TypeScript that its `text` property was `readonly`. Its
    inferred type, however, was not `readonly`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '使用显式类型注释`: Page`声明变量`pageIsh`将表明其`text`属性是`readonly`的。然而，其推断类型却不是`readonly`的。'
- en: Read-only interface members are a handy way to make sure areas of code don’t
    unexpectedly modify objects they’re not meant to. However, remember that they’re
    a type system construct only and don’t exist in the compiled JavaScript output
    code. They only protect from modification during development with the TypeScript
    type checker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只读接口成员是一种确保代码区域不会意外修改其不应修改的对象的便捷方式。但请记住，它们仅仅是类型系统的构造，不存在于编译后的JavaScript输出代码中。它们仅在TypeScript类型检查期间保护不被修改。
- en: Functions and Methods
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数和方法
- en: It’s very common in JavaScript for object members to be functions. TypeScript
    therefore allows declaring interface members as being the function types previously
    covered in [Chapter 5, “Functions”](ch05.xhtml#functions).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，对象成员为函数是非常常见的。因此，TypeScript允许声明接口成员为之前在[第5章，“函数”](ch05.xhtml#functions)中介绍的函数类型。
- en: 'TypeScript provides two ways of declaring interface members as functions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript提供了两种将接口成员声明为函数的方法：
- en: '*Method* syntax: declaring that a member of the interface is a function intended
    to be called as a member of the object, like `member(): void`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*方法*语法：声明接口成员是作为对象的成员调用的函数，如`member(): void`'
- en: '*Property* syntax: declaring that a member of the interface is equal to a standalone
    function, like `member: () => void`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*属性*语法：声明接口成员等于独立函数，如`member: () => void`'
- en: The two declaration forms are an analog for the two ways you can declare a JavaScript
    object as having a function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种声明形式是声明JavaScript对象具有函数的两种方式的类比。
- en: 'Both `method` and `property` members shown here are functions that may be called
    with no parameters and return a `string`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的`method`和`property`成员都是可以不带参数调用并返回`string`的函数：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Both forms can receive the `?` optional modifier to indicate they don’t need
    to be provided:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 两种形式都可以接收`?`可选修饰符，表示它们不需要提供：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Method and property declarations can mostly be used interchangeably. The main
    differences between them that I’ll cover in this book are:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 方法和属性声明大部分可以互换使用。我将在本书中介绍它们之间的主要区别是：
- en: Methods cannot be declared as `readonly`; properties can.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法不能声明为`readonly`；属性可以。
- en: Interface merging (covered later in this chapter) treats them differently.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口合并（本章后面介绍）会对它们进行不同处理。
- en: Some of the operations performed on types covered in [Chapter 15, “Type Operations”](ch15.xhtml#type_operations)
    treat them differently.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第15章，“类型操作”](ch15.xhtml#type_operations)中涵盖的类型上执行的一些操作会有所不同。
- en: Future versions of TypeScript may add the option to be more strict about the
    differences between methods and property functions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的TypeScript版本可能会增加更严格地区分方法和属性函数的选项。
- en: 'For now, the general style guide I recommend is:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我推荐的一般风格指南是：
- en: Use a method function if you know the underlying function may refer to `this`,
    most commonly for instances of classes (covered in [Chapter 8, “Classes”](ch08.xhtml#classes)).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您知道底层函数可能引用`this`，最常见的是类的实例（在[第8章，“类”](ch08.xhtml#classes)中介绍），请使用方法函数。
- en: Use a property function otherwise.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则使用属性函数。
- en: Don’t sweat it if you mix up these two, or don’t understand the difference.
    It’ll rarely impact your code unless you’re being intentional about `this` scoping
    and which form you choose.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你混淆了这两种方式，或者不理解它们之间的区别，不要担心。除非你有意关注`this`作用域和你选择的形式，否则它很少会影响你的代码。
- en: Call Signatures
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用签名
- en: Interfaces and object types can declare *call signatures*, which is a type system
    description of how a value may be called like a function. Only values that may
    be called in the way the call signature declares will be assignable to the interface—i.e.,
    a function with assignable parameters and return type. A call signature looks
    similar to a function type, but with a `:` colon instead of an `=>` arrow.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接口和对象类型可以声明*调用签名*，这是一个描述值如何被调用的类型系统描述，就像一个函数一样。只有符合调用签名声明的方式调用的值才能赋值给接口，即具有可赋值参数和返回类型的函数。调用签名看起来类似于函数类型，但使用`:`冒号而不是`=>`箭头。
- en: 'The following `FunctionAlias` and `CallSignature` types both describe the same
    function parameters and return type:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`FunctionAlias`和`CallSignature`类型都描述了相同的函数参数和返回类型：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Call signatures can be used to describe functions that additionally have some
    user-defined property on them. TypeScript will recognize a property added to a
    function declaration as adding to that function declaration’s type.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 调用签名可用于描述具有一些用户定义属性的函数。TypeScript将识别添加到函数声明的属性作为增加到该函数声明类型的属性。
- en: 'The following `keepsTrackOfCalls` function declaration is given a `count` property
    of type `number`, making it assignable to the `FunctionWithCount` interface. It
    can therefore be assigned to the `hasCallCount` argument of type `FunctionWithCount`.
    The function at the end of the snippet was not given a `count`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`keepsTrackOfCalls`函数声明具有类型为`number`的`count`属性，使其可以赋值给`FunctionWithCount`接口。因此，它可以被赋值给类型为`FunctionWithCount`的`hasCallCount`参数。代码片段末尾的函数没有给出`count`：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Index Signatures
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引签名
- en: Some JavaScript projects create objects meant to store values under any arbitrary
    `string` key. For these “container” objects, declaring an interface with a field
    for every possible key would be impractical or impossible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一些JavaScript项目创建的对象旨在将值存储在任意`string`键下。对于这些“容器”对象，声明一个接口并为每个可能的键添加一个字段是不切实际或不可能的。
- en: 'TypeScript provides a syntax called an *index signature* to indicate that an
    interface’s objects are allowed to take in any key and give back a certain type
    under that key. They’re most commonly used with string keys because JavaScript
    object property lookups convert keys to strings implicitly. An index signature
    looks like a regular property definition but with a type after the key, and array
    brackets surrounding them, like `{ [i: string]: ... }`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeScript 提供了一种称为 *索引签名* 的语法，指示接口的对象允许接收任何键并返回该键下的特定类型。它们最常与字符串键一起使用，因为 JavaScript
    对象属性查找会隐式将键转换为字符串。索引签名看起来像常规的属性定义，但在键后面有一个类型，并用大括号括起来，例如 `{ [i: string]: ... }`。'
- en: 'This `WordCounts` interface is declared as allowing any `string` key with a
    `number` value. Objects of that type aren’t bound to receiving any particular
    key—as long as the value is a `number`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `WordCounts` 接口声明允许任何 `string` 键和 `number` 值。该类型的对象不限于接收任何特定的键，只要值是 `number`：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Index signatures are convenient for assigning values to an object but aren’t
    completely type safe. They indicate that an object should give back a value no
    matter what property is being accessed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 索引签名方便为对象分配值，但并不完全类型安全。它们指示对象无论访问哪个属性，都应返回一个值。
- en: 'This `publishDates` value safely gives back `Frankenstein` as a `Date` but
    tricks TypeScript into thinking its `Beloved` is defined even though it’s `undefined`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `publishDates` 值安全地返回 `Frankenstein` 作为 `Date`，但会让 TypeScript 认为其 `Beloved`
    已定义，尽管实际上是 `undefined`。
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When possible, if you’re looking to store key-value pairs and the keys aren’t
    known ahead of time, it is generally safer to use a `Map`. Its `.get` method always
    returns a type with `| undefined` to indicate that the key might not exist. [Chapter 9,
    “Type Modifiers”](ch09.xhtml#type_modifiers_chapter) will discuss working with
    generic container classes such as `Map` and `Set`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的话，如果您希望存储键值对并且事先不知道键，通常更安全的做法是使用 `Map`。其 `.get` 方法总是返回带有 `| undefined` 的类型，以指示可能不存在该键。[第9章，“类型修饰符”](ch09.xhtml#type_modifiers_chapter)
    将讨论如何使用通用容器类，如 `Map` 和 `Set`。
- en: Mixing properties and index signatures
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合属性和索引签名
- en: 'Interfaces are able to include explicitly named properties and catchall `string`
    index signatures, with one catch: each named property’s type must be assignable
    to its catchall index signature’s type. You can think of mixing them as telling
    TypeScript that named properties give a more specific type, and any other property
    falls back to the index signature’s type.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接口能够包含显式命名属性和通用的 `string` 索引签名，但有一个限制：每个命名属性的类型必须可分配给其通用索引签名的类型。您可以将它们混合使用，告诉
    TypeScript 命名属性提供更具体的类型，而任何其他属性则回退到索引签名的类型。
- en: 'Here, `HistoricalNovels` declares that all properties are type `number`, and
    additionally the `Oroonoko` property must exist to begin with:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`HistoricalNovels` 声明所有属性的类型都是 `number`，并且另外 `Oroonoko` 属性必须首先存在：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: One common type system trick with mixed properties and index signatures is to
    use a more specific property type literal for the named property than an index
    signature’s primitive. As long as the named property’s type is assignable to the
    index signature’s—which is true for a literal and a primitive, respectively—TypeScript
    will allow it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的类型系统技巧，混合属性和索引签名的是，使用比索引签名的原始类型更具体的属性类型文字。只要命名属性的类型可分配给索引签名的类型（分别对于文字和原始类型），TypeScript
    就会允许它。
- en: 'Here, `ChapterStarts` declares that a property under `preface` must be `0`
    and all other properties have the more general `number`. That means any object
    adhering to `ChapterStarts` must have a `preface` property equal to `0`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ChapterStarts` 声明 `preface` 下的属性必须是 `0`，而所有其他属性都是更一般的 `number`。这意味着任何符合
    `ChapterStarts` 的对象必须具有 `preface` 属性等于 `0`：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Numeric index signatures
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字索引签名
- en: Although JavaScript implicitly converts object property lookup keys to strings,
    it is sometimes desirable to only allow numbers as keys for an object. TypeScript
    index signatures can use a `number` type instead of `string` but with the same
    catch as named properties that their types must be assignable to the catchall
    `string` index signature’s.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 JavaScript 隐式将对象属性查找键转换为字符串，有时仅允许数字作为对象的键是可取的。TypeScript 索引签名可以使用 `number`
    类型而不是 `string`，但与命名属性相同的是，它们的类型必须可分配给通用的 `string` 索引签名。
- en: 'The following `MoreNarrowNumbers` interface would be allowed because `string`
    is assignable to `string | undefined`, but `MoreNarrowStrings` would not because
    `string | undefined` is not assignable to `string`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`MoreNarrowNumbers`接口将被允许，因为`string`可以分配给`string | undefined`，但`MoreNarrowStrings`不会，因为`string
    | undefined`不能分配给`string`：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Nested Interfaces
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套接口
- en: Just like object types can be nested as properties of other object types, interface
    types can also have properties that are themselves interface types (or object
    types).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 就像对象类型可以作为其他对象类型的属性进行嵌套一样，接口类型也可以具有作为接口类型（或对象类型）的属性。
- en: 'This `Novel` interface contains an `author` property that must satisfy an inline
    object type and a `setting` property that must satisfy the `Setting` interface:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Novel`接口包含一个必须满足内联对象类型的`author`属性和一个必须满足`Setting`接口的`setting`属性：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Interface Extensions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口扩展
- en: Sometimes you may end up with multiple interfaces that look similar to each
    other. One interface may contain all the same members of another interface, with
    a few extras added on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能会得到多个看起来相似的接口。一个接口可能包含另一个接口的所有相同成员，并添加一些额外的成员。
- en: TypeScript allows an interface to *extend* another interface, which declares
    it as copying all the members of another. An interface may be marked as extending
    another interface by adding the `extends` keyword after its name (the “derived”
    interface), followed by the name of the interface to extend (the “base” interface).
    Doing so indicates to TypeScript that all objects adhering to the derived interface
    must also have all the members of the base interface.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 允许一个接口*扩展*另一个接口，这表示它复制另一个接口的所有成员。通过在名称后添加`extends`关键字（“派生”接口）并在其后跟要扩展的接口的名称（“基”接口），可以将接口标记为扩展另一个接口。这样做告诉
    TypeScript，所有符合派生接口的对象也必须具有基接口的所有成员。
- en: 'In the following example, the `Novella` interface extends from `Writing` and
    thus requires objects to have at least both `Novella`’s `pages` and `Writing`’s
    `title` members:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`Novella`接口从`Writing`扩展，因此要求对象至少具有`Novella`的`pages`和`Writing`的`title`成员：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Interface extensions are a nifty way to represent that one type of entity in
    your project is a superset (it includes all the members of) another entity. They
    allow you to avoid having to type out the same code repeatedly across multiple
    interfaces to represent that relationship.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接口扩展是一种巧妙的方式，表示项目中的一种实体类型是另一种实体类型的超集（它包含另一个实体的所有成员）。它们允许您避免在多个接口中重复键入相同的代码以表示该关系。
- en: Overridden Properties
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖属性
- en: Derived interfaces may *override*, or replace, properties from their base interface
    by declaring the property again with a different type. TypeScript’s type checker
    will enforce that an overridden property must be assignable to its base property.
    It does so to ensure that instances of the derived interface type stay assignable
    to the base interface type.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 派生接口可以通过使用不同类型重新声明属性来*覆盖*或替换其基接口的属性。TypeScript 的类型检查器将强制执行覆盖属性必须可分配给其基属性。它这样做是为了确保派生接口类型的实例仍然可以分配给基接口类型。
- en: Most derived interfaces that redeclare properties do so either to make those
    properties a more specific subset of a type union or to make the properties a
    type that extends from the base interface’s type.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数重新声明属性的派生接口要么使这些属性成为类型联合的更具体子集，要么使属性成为扩展自基接口类型的类型。
- en: 'For example, this `WithNullableName` type is properly made non-nullable in
    `WithNonNullableName`. `WithNumericName`, however, is not allowed as `number |
    string` and is not assignable to `string | null`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个`WithNullableName`类型在`WithNonNullableName`中被正确地设置为非空。然而，`WithNumericName`不被允许作为`number
    | string`，并且不可分配给`string | null`：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Extending Multiple Interfaces
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展多个接口
- en: Interfaces in TypeScript are allowed to be declared as extending multiple other
    interfaces. Any number of interface names separated by commas may be used after
    the `extends` keyword following the derived interface’s name. The derived interface
    will receive all members from all base interfaces.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，允许将接口声明为扩展多个其他接口。在派生接口名称后的`extends`关键字之后可以使用任意数量的由逗号分隔的接口名称。派生接口将接收所有基接口的成员。
- en: 'Here, the `GivesBothAndEither` has three methods: one on its own, one from
    `GivesNumber`, and one from `GivesString`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`GivesBothAndEither`有三种方法：一个是自己的，一个来自`GivesNumber`，一个来自`GivesString`：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By marking an interface as extending multiple other interfaces, you can both
    reduce code duplication and make it easier for object shapes to be reused across
    different areas of code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将接口标记为扩展多个其他接口，可以减少代码重复，并使对象形状在不同代码区域中更易于重用。
- en: Interface Merging
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口合并
- en: One of the important features of interfaces is their ability to *merge* with
    each other. Interface merging means if two interfaces are declared in the same
    scope with the same name, they’ll join into one bigger interface under that name
    with all declared fields.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接口的重要特性之一是它们能够*合并*。接口合并意味着如果在同一作用域中声明了两个名称相同的接口，则它们将合并为一个更大的接口，在该名称下具有所有声明的字段。
- en: 'This snippet declares a `Merged` interface with two properties: `fromFirst`
    and `fromSecond`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此片段声明了一个具有两个属性`fromFirst`和`fromSecond`的`Merged`接口：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Interface merging isn’t a feature used very often in day-to-day TypeScript development.
    I would recommend avoiding it when possible, as it can be difficult to understand
    code where an interface is declared in multiple places.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接口合并在日常 TypeScript 开发中并不经常使用。我建议在可能的情况下避免使用它，因为在一个接口在多个位置声明时，代码理解起来可能会比较困难。
- en: 'However, interface merging is particularly useful for augmenting interfaces
    from external packages or built-in global interfaces such as `Window`. For example,
    when using the default TypeScript compiler options, declaring a `Window` interface
    in a file with a `myEnvironmentVariable` property makes a `window.myEnvironmentVariable`
    available:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，接口合并特别适用于增强来自外部包或内置全局接口（如`Window`）的接口。例如，在使用默认的 TypeScript 编译器选项时，在一个文件中声明了一个带有`myEnvironmentVariable`属性的`Window`接口，会使`window.myEnvironmentVariable`可用：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I’ll cover type definitions more deeply in [Chapter 11, “Declaration Files”](ch11.xhtml#declaration_files)
    and TypeScript global type options in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第11章，“声明文件”](ch11.xhtml#declaration_files)中更深入地讨论类型定义，以及在[第13章，“配置选项”](ch13.xhtml#configuration_options)中讨论
    TypeScript 全局类型选项。
- en: Member Naming Conflicts
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成员命名冲突
- en: Note that merged interfaces may not declare the same name of a property multiple
    times with different types. If a property is already declared in an interface,
    a later merged interface must use the same type.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，合并接口可能不会多次使用不同类型声明同一属性名称。如果在接口中已经声明了一个属性，则稍后合并的接口必须使用相同的类型。
- en: 'In this `MergedProperties` interface, the `same` property is allowed because
    it is the same in both declarations, but `different` is an error for being a different
    type:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`MergedProperties`接口中，`same`属性是允许的，因为它在两个声明中是相同的，但`different`因为类型不同而报错：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Merged interfaces may, however, define a method with the same name and a different
    signature. Doing so creates a function overload for the method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，合并接口可以定义具有相同名称但不同签名的方法。这样做会为方法创建一个函数重载。
- en: 'This `MergedMethods` interface creates a `different` method that has two overloads:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此`MergedMethods`接口创建了一个具有两个重载的`different`方法：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter introduced how object types may be described by interfaces:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何通过接口描述对象类型：
- en: Using interfaces instead of type aliases to declare object types
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用接口而不是类型别名来声明对象类型
- en: 'Various interface property types: optional, read-only, function, and method'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种接口属性类型：可选的、只读的、函数和方法
- en: Using index signatures for catchall object properties
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用索引签名捕获对象属性
- en: Reusing interfaces using nested interfaces and `extends` inheritance
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌套接口和`extends`继承重用接口
- en: How interfaces with the same name can merge together
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何合并具有相同名称的接口
- en: 'Next up will be a native JavaScript syntax for setting up multiple objects
    to have the same properties: classes.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来将是设置多个对象具有相同属性的本机 JavaScript 语法：类。
- en: Tip
  id: totrans-130
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/objects-and-interfaces*](https://learningtypescript.com/objects-and-interfaces).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了本章的阅读，请在[*https://learningtypescript.com/objects-and-interfaces*](https://learningtypescript.com/objects-and-interfaces)上练习所学内容。
- en: Why are interfaces good drivers?
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 接口为什么是好的驱动程序？
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: They’re great at merging.
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它们在合并时非常出色。
