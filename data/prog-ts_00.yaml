- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'This is a book for programmers of all walks: professional JavaScript engineers,
    C# people, Java sympathizers, Python lovers, Ruby aficionados, Haskell nerds.
    Whatever language(s) you write in, so long as you have some experience programming
    and know the basics of functions, variables, classes, and errors, this book is
    for you. Some experience with JavaScript, including a basic knowledge of the Document
    Object Model (DOM) and the network, will help you along the way—while we don’t
    dive deep into these concepts, they are a wellspring of excellent examples, and
    if you’re not familiar with them the examples might not make as much sense.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合各种程序员：专业的 JavaScript 工程师、C# 开发者、Java 爱好者、Python 爱好者、Ruby 爱好者、Haskell 粉丝。无论你使用哪种语言，只要有一定的编程经验并了解函数、变量、类和错误的基础知识，这本书都适合你。对
    JavaScript 有一定经验，包括对文档对象模型（DOM）和网络的基本了解，会帮助你更好地理解内容——虽然我们不深入讨论这些概念，但它们是出色示例的源泉，如果你不熟悉它们，可能会对示例的理解产生困难。
- en: Regardless of what programming languages you’ve used in the past, what unites
    all of us is our shared experience of tracking down exceptions, tracing through
    code line by line to figure out what went wrong and how we can fix it. This is
    the experience that TypeScript helps prevent by examining your code automatically
    and pointing out the mistakes you may have missed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你之前使用过什么编程语言，我们都有一个共同的经历：追踪异常、逐行分析代码，找出问题所在以及如何修复它。TypeScript 可以自动检查你的代码并指出可能忽略的错误，从而帮助防止这种经历。
- en: It’s OK if you haven’t worked with a statically typed language before. I’ll
    teach you about types and how to use them effectively to make your programs crash
    less, document your code better, and scale your applications across more users,
    engineers, and servers. I’ll try to avoid big words when I can, and explain ideas
    in a way that’s intuitive, memorable, and practical, using lots of examples along
    the way to help keep things concrete.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有使用过静态类型语言，也没关系。我将教你有关类型以及如何有效使用它们，以减少程序崩溃、改善代码文档化，并使你的应用程序在更多用户、工程师和服务器之间扩展。我会尽量避免使用专业术语，并以直观、记忆深刻和实用的方式解释思想，沿途使用大量示例来帮助保持具体性。
- en: 'That’s the thing about TypeScript: unlike a lot of other typed languages, TypeScript
    is intensely practical. It invents completely new concepts so you can speak more
    concisely and precisely, letting you write applications in a way that’s fun, modern,
    and safe.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的一个特点是：与许多其他静态类型语言不同，它极其实用。它创造全新的概念，让你能更简洁、更准确地表达，使你以一种有趣、现代和安全的方式编写应用程序。
- en: How This Book Is Organized
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的组织结构
- en: 'This book has two aims: to give you a deep understanding of how the TypeScript
    language works (theory) and provide bucketfuls of pragmatic advice about how to
    write production TypeScript code (practice).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书有两个目标：深入理解 TypeScript 语言的工作原理（理论）并提供大量实用建议，帮助编写生产级 TypeScript 代码（实践）。
- en: Because TypeScript is such a practical language, theory quickly turns to practice,
    and most of this book ends up being a mix of the two, with the first couple of
    chapters almost entirely theory, and the last few almost completely practice.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 TypeScript 是一种非常实用的语言，理论很快就转化为实践，所以本书的大部分内容都是理论与实践的结合。头几章几乎完全是理论，而最后几章则几乎完全是实践。
- en: I’ll start with the basics of what compilers, typecheckers, and types are. I’ll
    then give a broad overview of the different types and type operators in TypeScript,
    what they’re for, and how you use them. Using what we’ve learned, I’ll cover some
    advanced topics like TypeScript’s most sophisticated type system features, error
    handling, and asynchronous programming. Finally, I’ll wrap up with how to use
    TypeScript with your favorite frameworks (frontend and backend), migrating your
    existing JavaScript project to TypeScript, and running your TypeScript application
    in production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从编译器、类型检查器以及类型的基础知识开始讲起。然后，我会广泛介绍 TypeScript 中不同的类型和类型操作符，它们的用途以及如何使用它们。利用所学，我将涵盖一些高级主题，如
    TypeScript 最复杂的类型系统特性、错误处理和异步编程。最后，我将讲述如何将 TypeScript 与你喜爱的框架（前端和后端）结合使用，将现有的
    JavaScript 项目迁移到 TypeScript，并将你的 TypeScript 应用投入生产环境。
- en: Most chapters come with a set of exercises at the end. Try to do these yourself—they’ll
    give you a deeper intuition for what we cover than just reading would. Answers
    for chapter exercises are available online, at [*https://github.com/bcherny/programming-typescript-answers*](https://github.com/bcherny/programming-typescript-answers).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数章节末尾都有一组练习题。试着自己完成这些练习——这比单纯阅读能更深入理解我们所讲内容。章节练习的答案可以在网上找到，网址是 [*https://github.com/bcherny/programming-typescript-answers*](https://github.com/bcherny/programming-typescript-answers)。
- en: Style
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风格
- en: 'Throughout this book, I tried to stick to a single code style. Some aspects
    of this style are deeply personal—for example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我尽量保持一致的代码风格。这种风格的某些方面非常个人化，例如：
- en: I only use semicolons when necessary.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只在必要时使用分号。
- en: I indent with two spaces.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我用两个空格缩进。
- en: I use short variable names like `a`, `f`, or _ where the program is a quick
    snippet, or where the structure of the program is more important than the details.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在程序是一个快速片段或程序结构比细节更重要时，我使用诸如 `a`、`f` 或 _ 的短变量名。
- en: 'Some aspects of the code style, however, are things that I think you should
    do too. A few of these are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，代码风格的某些方面是我认为你也应该遵循的。其中一些是：
- en: You should use the latest JavaScript syntax and features (the latest JavaScript
    version is usually just called “esnext”). This will keep your code in line with
    the latest standards, improving interoperability and Googleability, and it can
    help reduce ramp-up time for new hires. It also lets you take advantage of powerful,
    modern JavaScript features like arrow functions, promises, and generators.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该使用最新的 JavaScript 语法和特性（最新的 JavaScript 版本通常称为“esnext”）。这将使你的代码符合最新的标准，提高互操作性和可搜索性，并有助于减少新员工的上手时间。它还可以让你利用强大的现代
    JavaScript 特性，如箭头函数、Promise 和生成器。
- en: You should keep your data structures immutable with spreads (`...`) most of
    the time.^([1](preface01.html#idm46304996469720))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该大多数时候使用扩展运算符 (`...`) 使你的数据结构不可变。^([1](preface01.html#idm46304996469720))
- en: You should make sure everything has a type, inferred when possible. Be careful
    not to abuse explicit types; this will help keep your code clear and terse, and
    improve safety by surfacing incorrect types rather than bandaiding over them.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该确保每个东西都有一个类型，在可能的情况下推断类型。要小心不要滥用显式类型；这将有助于保持代码清晰简洁，并通过展示不正确的类型而不是简单覆盖它们来提高安全性。
- en: You should keep your code reusable and generic. Polymorphism (see [“Polymorphism”](ch04.html#polymorphism))
    is your best friend.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该保持你的代码可重用和通用。多态性（见 [“多态性”](ch04.html#polymorphism)）是你的好朋友。
- en: Of course, these ideas are hardly new. But TypeScript works especially well
    when you stick to them. TypeScript’s built-in downlevel compiler, support for
    read-only types, powerful type inference, deep support for polymorphism, and completely
    structural type system encourage good coding style, while the language remains
    incredibly expressive and true to the underlying JavaScript.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些想法并非新鲜事物。但 TypeScript 在遵循这些想法时表现特别出色。TypeScript 的内置降级编译器、对只读类型的支持、强大的类型推断、深度支持多态性以及完全结构化类型系统都鼓励良好的编码风格，同时语言保持极高的表达能力和对底层
    JavaScript 的真实支持。
- en: A couple more notes before we begin.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，还有几点需要注意。
- en: JavaScript doesn’t expose pointers and references; instead it has value and
    reference types. Values are immutable, and include things like strings, numbers,
    and booleans, while references point to often-mutable data structures like arrays,
    objects, and functions. When I use the word “value” in this book, I usually mean
    it loosely to refer to either a JavaScript value or a reference.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 并没有暴露指针和引用；相反，它有值类型和引用类型。值是不可变的，包括字符串、数字和布尔值，而引用指向通常是可变的数据结构，如数组、对象和函数。在本书中，当我使用“值”一词时，通常是宽泛地指代
    JavaScript 值或引用。
- en: Lastly, you might find yourself writing less-than-ideal TypeScript code in the
    wild when interoperating with JavaScript, or incorrectly typed third-party libraries,
    or legacy code, or if you’re in a rush. This book largely presents how you *should*
    write TypeScript, and makes an argument for why you should try really hard not
    to make compromises. But in practice, how correct your code is is up to you and
    your team.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在与 JavaScript 互操作、不正确类型化的第三方库、遗留代码或者时间紧迫时，你可能会发现自己在实际中写了不那么理想的 TypeScript
    代码。本书大部分内容展示了你*应该*如何编写 TypeScript，并论述了为什么你应该尽力避免妥协。但实际上，你和你的团队的代码正确性取决于你们自己。
- en: Conventions Used in This Book
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*Italic*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 指示新术语、网址、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Constant width`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, data types, environment variables,
    statements, and keywords.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及段落中引用程序元素，如变量或函数名、数据类型、环境变量、语句和关键字。
- en: '*`Constant width italic`*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Constant width italic`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供值或由上下文确定的值替换的文本。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般注意事项。
- en: Warning
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用示例代码
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/bcherny/programming-typescript-answers*](https://github.com/bcherny/programming-typescript-answers).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以下载补充材料（示例代码、练习等）：[*https://github.com/bcherny/programming-typescript-answers*](https://github.com/bcherny/programming-typescript-answers)
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing a CD-ROM
    of examples from O’Reilly books does require permission. Answering a question
    by citing this book and quoting example code does not require permission. Incorporating
    a significant amount of example code from this book into your product’s documentation
    does require permission.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助你完成工作。一般情况下，如果本书提供示例代码，你可以在你的程序和文档中使用它。除非你复制了代码的大部分内容，否则无需征求我们的许可。例如，编写一个使用本书多个代码片段的程序不需要许可。售卖或分发包含奥莱利书籍示例的CD-ROM需要许可。通过引用本书和引用示例代码来回答问题不需要许可。将本书大量示例代码整合到产品文档中需要许可。
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Programming TypeScript*
    by Boris Cherny (O’Reilly). Copyright 2019 Boris Cherny, 978-1-492-03765-1.”'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢但不需要署名。署名通常包括标题、作者、出版商和ISBN。例如：“*Programming TypeScript* by Boris Cherny
    (O’Reilly). Copyright 2019 Boris Cherny, 978-1-492-03765-1.”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为您对示例代码的使用超出了合理使用范围或上述许可，请随时通过[*permissions@oreilly.com*](mailto:permissions@oreilly.com)联系我们。
- en: O’Reilly Online Learning
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奥莱利在线学习
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For almost 40 years, [*O’Reilly Media*](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 近40年来，[*奥莱利传媒*](http://oreilly.com) 提供技术和商业培训、知识和见解，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章、会议以及我们的在线学习平台分享他们的知识和专业知识。奥莱利的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境以及奥莱利及其他200多家出版商的大量文本和视频。更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请将关于本书的评论和问题发送给出版商：
- en: O’Reilly Media, Inc.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 奥莱利传媒公司
- en: 1005 Gravenstein Highway North
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastopol, CA 95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938 (在美国或加拿大)
- en: 707-829-0515 (international or local)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515 (国际或当地)
- en: 707-829-0104 (fax)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104 (传真)
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/programming-typescript*](https://oreil.ly/programming-typescript).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书准备了一个网页，其中列出了勘误、示例和任何其他信息。您可以访问这个页面：[*https://oreil.ly/programming-typescript*](https://oreil.ly/programming-typescript)。
- en: To comment or ask technical questions about this book, send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本书有评论或技术问题，请发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 获取关于我们的书籍、课程、会议和新闻的更多信息，请访问我们的网站：[*http://www.oreilly.com*](http://www.oreilly.com)
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: This book is the product of years’ worth of snippets and doodles, followed by
    a year’s worth of early mornings and nights and weekends and holidays spent writing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是多年碎片和涂鸦的产物，紧随其后的是一年早晨、夜晚、周末和假期的时间，用于写作。
- en: 'Thank you to O’Rielly for the opportunity to work on this book, and to my editor
    Angela Rufino for the support throughout the process. Thank you to Nick Nance
    for his contribution in [“Typesafe APIs”](ch09.html#APIs), and to Shyam Seshadri
    for his contribution in [“Angular 6/7”](ch09.html#Angular). Thanks to my technical
    editors: Daniel Rosenwasser of the TypeScript team, who spent an unreasonable
    amount of time reading through this manuscript and guiding me through the nuances
    of TypeScript’s type system, and Jonathan Creamer, Yakov Fain, and Paul Buying,
    and Rachel Head for technical edits and feedback. Thanks to my family—Liza and
    Ilya, Vadim, Roza and Alik, Faina and Yosif—for encouraging me to pursue this
    project.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢O’Rielly为我提供参与本书编写的机会，感谢我的编辑Angela Rufino在整个过程中的支持。感谢Nick Nance在[“Typesafe
    APIs”](ch09.html#APIs)中的贡献，以及Shyam Seshadri在[“Angular 6/7”](ch09.html#Angular)中的贡献。感谢我的技术编辑们：TypeScript团队的Daniel
    Rosenwasser，在阅读这份手稿并指导我了解TypeScript类型系统的微妙之处时花费了大量的时间；Jonathan Creamer、Yakov Fain、Paul
    Buying和Rachel Head为技术编辑和反馈所做的贡献。感谢我的家人——Liza和Ilya，Vadim，Roza和Alik，Faina和Yosif——鼓励我追求这个项目。
- en: Most of all, thanks to my partner Sara Gilford, who supported me throughout
    the writing process, even when it meant calling off weekend plans, late nights
    writing and coding, and far too many unprompted conversations about the ins and
    outs of type systems. I couldn’t have done it without you, and I’m forever grateful
    for your support.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，感谢我的搭档Sara Gilford，在整个写作过程中支持我，即使这意味着取消周末计划、深夜写作和编码，以及关于类型系统的内外讨论太多。没有你的支持，我无法完成这个项目，我会永远感激你的支持。
- en: '^([1](preface01.html#idm46304996469720-marker)) If you’re not coming from JavaScript,
    here’s an example: if you have an object `o`, and you want to add a property `k`
    to it with the value `3`, you can either mutate `o` directly—`o.k = 3`—or you
    can apply your change to `o`, creating a *new* object as a result—`let p = {...o,
    k: 3}`.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](preface01.html#idm46304996469720-marker)) 如果你不是来自JavaScript，这里有个例子：如果你有一个对象`o`，并且想要向其添加属性`k`，并赋值为`3`，你可以直接修改`o`——`o.k
    = 3`——或者你可以对`o`应用你的更改，生成一个*新*对象作为结果——`let p = {...o, k: 3}`。'
