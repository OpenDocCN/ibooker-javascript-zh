- en: Chapter 12\. Using IDE Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 使用IDE功能
- en: Programming with an
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编程时
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: IDE the first time feels
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一次使用IDE的感觉
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: like superpowers.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 就像超能力一样。
- en: No popular programming language would be complete without syntax highlighting
    and other IDE features to help developing in it. One of TypeScript’s greatest
    strengths is that its language service provides a suite of powerful development
    helpers for JavaScript and TypeScript code. This chapter will cover some of the
    most useful items.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 没有流行的编程语言会完整无缺地提供语法高亮和其他IDE功能来帮助开发。TypeScript最大的优势之一是其语言服务为JavaScript和TypeScript代码提供了一套强大的开发助手。本章将介绍一些最有用的项目。
- en: 'I highly recommend you try these IDE features out on the TypeScript projects
    you’ve built alongside this book. Although all the examples and screenshots in
    this chapter are of VS Code, my favorite editor, any IDE with TypeScript support
    will support most or all of this chapter. As of 2022 that includes the native
    support or TypeScript plugins for at least all of: Atom, Emacs, Vim, Visual Studio,
    and WebStorm.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你在阅读本书的同时尝试这些IDE功能，应用于你已经构建的TypeScript项目中。尽管本章中的所有示例和截图都是在我最喜欢的编辑器VS Code中完成的，但任何支持TypeScript的IDE都将支持本章的大多数或全部功能。截至2022年，这包括原生支持或至少支持TypeScript插件的所有编辑器：Atom，Emacs，Vim，Visual
    Studio和WebStorm。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter is a nonexhaustive list of some of the more commonly useful TypeScript
    IDE features, along with any default shortcuts for them in VS Code. You’ll likely
    find more as you keep writing TypeScript code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章列出了一些常用的TypeScript IDE功能，并附有它们在VS Code中的默认快捷键。在你继续编写TypeScript代码时，可能会发现更多功能。
- en: Many IDE features are generally made available in the context menu surfaced
    by right-clicking on a name in code. IDEs such as VS Code generally show keyboard
    shortcuts in the context menu too. Getting comfortable with your IDE’s keyboard
    shortcuts can help you write code and execute refactors much more quickly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多IDE功能通常通过在代码中右键单击名称来显示上下文菜单。诸如VS Code之类的IDE通常也在上下文菜单中显示键盘快捷键。熟悉你的IDE键盘快捷键可以帮助你更快地编写代码和执行重构。
- en: This screenshot shows the list of commands and their shortcuts in VS Code for
    a variable in TypeScript ([Figure 12-1](#ide_context_menu)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了在VS Code中，用于TypeScript变量的命令列表及其快捷方式（[图 12-1](#ide_context_menu)）。
- en: '![VS Code showing a list of commands in the right-click context menu for a
    variable.](Images/lets_1201.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![VS Code显示右键上下文菜单中用于变量的命令列表。](Images/lets_1201.png)'
- en: Figure 12-1\. VS Code showing a list of commands in the right-click context
    menu for a variable
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1 VS Code显示右键上下文菜单中用于变量的命令列表
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: In VS Code, as with most applications, up and down arrows select drop-down options,
    and Enter activates one.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中，与大多数应用程序一样，上下箭头选择下拉选项，Enter激活选项之一。
- en: Navigating Code
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码导航
- en: 'Developers generally spend much more time reading code rather than actively
    writing it. Tools that assist in navigating code are supremely useful for speeding
    that time up. Many of the features provided by the TypeScript language service
    are geared toward learning about code: in particular, jumping between type definitions
    or values in code and where they’re used.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者通常花费更多时间阅读代码而不是主动编写代码。帮助导航代码的工具对于加速这一过程非常有用。TypeScript语言服务提供的许多功能都旨在帮助理解代码，特别是在类型定义或代码中值之间跳转的功能。
- en: I’ll now go through commonly used navigation options from the context menu along
    with their VS Code shortcuts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将逐一介绍上下文菜单中常用的导航选项，以及它们在VS Code中的快捷键。
- en: Finding Definitions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找定义
- en: 'TypeScript can start from a reference to a type definition or value and navigate
    you back to its original location in code. VS Code also provides a couple of ways
    to backtrace in that way:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript可以从类型定义或值的引用开始，导航到代码中它们的原始位置。VS Code还提供了一些以此方式回溯的方法：
- en: Go to Definition (F12) navigates directly to where a requested name was originally
    defined.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到定义（F12）直接导航到请求的名称最初定义的位置。
- en: Cmd (Mac) / Ctrl (Windows) + clicking a name triggers going to definition as
    well.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cmd（Mac）/ Ctrl（Windows）+ 单击名称也会触发转到定义。
- en: Peek > Peek Definition (Option (Mac) / Alt (Windows) + F12) brings up a Peek
    box showing the definition instead.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Peek > Peek Definition（Option（Mac）/ Alt（Windows）+ F12）会显示定义的Peek框。
- en: Go to Type Definition is a specialized version of Go to Definition that goes
    to the definition of whatever type a value is. For an instance of a class or interface,
    it will reveal the class or interface itself instead of where the instance is
    defined.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Go to Type Definition 是 Go to Definition 的专业版本，用于查找值的类型定义。对于类或接口的实例，它将显示类或接口本身，而不是实例定义的位置。
- en: These screenshots show finding the definition of a `data` variable imported
    into a file with Go to Definition ([Figure 12-2](#variable_go_to_definition)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些截图展示了查找导入到带有 Go to Definition 的文件中的 `data` 变量定义（参见[图 12-2](#variable_go_to_definition)）。
- en: '![Left: going to definition on a variable name; right: the resultant opened
    data.ts file.](Images/lets_1202.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![左侧：点击变量名进行定义；右侧：结果打开的 data.ts 文件。](Images/lets_1202.png)'
- en: 'Figure 12-2\. Left: going to definition on a variable name; right: the resultant
    opened data.ts file'
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-2\. 左侧：点击变量名进行定义；右侧：结果打开的 data.ts 文件
- en: When the definition is declared in your own code, such as a relative file, the
    editor will bring you to that file. Modules outside your code such as npm packages
    will commonly use *.d.ts* declaration files instead.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义声明在您自己的代码中时，如相对文件，编辑器将会带您进入该文件。在您的代码之外的模块，例如 npm 包，通常会使用 *.d.ts* 声明文件。
- en: Finding References
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找引用
- en: Given a type definition or value, TypeScript can show you a list of all the
    references to it, or places it’s used in the project. VS Code provides a couple
    ways to visualize that list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 给定类型定义或值，TypeScript 可以显示项目中所有引用它或使用它的位置的列表。VS Code 提供了几种可视化该列表的方法。
- en: Go to References (Shift + F12) shows a list of references to that type definition
    or value—starting with itself—in an expandable Peek box just below the right-clicked
    name.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前往引用（Shift + F12）显示对该类型定义或值的引用列表——从它本身开始——在右键单击的名称下方的可展开的 Peek 框中。
- en: For example, here’s a Go to References of a `data` variable’s declaration in
    one file, *data.ts*, that shows both the declaration and its usage in another
    file, *index.ts* ([Figure 12-3](#ide_go_to_references)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里展示了一个 `data` 变量在一个文件 *data.ts* 中声明的引用的 Go to References，显示了该声明以及它在另一个文件
    *index.ts* 中的使用（参见[图 12-3](#ide_go_to_references)）。
- en: '![Peek menu showing references to a variable.](Images/lets_1203.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Peek 菜单显示对变量的引用。](Images/lets_1203.png)'
- en: Figure 12-3\. Peek menu showing references to a variable
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-3\. Peek 菜单显示对变量的引用
- en: That Peek box contains a file view of the referencing file. You can use that
    file—type, run editor commands, and so on—as if it were a regularly opened file.
    You can also double-click in the Peek box’s view of a file to open that file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该 Peek 框包含引用文件的视图。您可以像通常打开的文件一样使用该文件——例如，运行编辑器命令等。您还可以双击 Peek 框中文件的视图以打开该文件。
- en: Clicking through the list of file names on the right of the Peek box will switch
    the Peek box’s file view to the clicked file. Double-clicking a line of a file
    from the list will open the file and select its matched reference.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 Peek 框右侧的文件名列表将切换 Peek 框的文件视图到单击的文件。双击列表中文件的一行将打开该文件并选择其匹配的引用。
- en: Here, VS Code is showing the same `data` variable’s declaration and usage, but
    expanded in the sidebar view on the right ([Figure 12-4](#ide_go_to_references_other_file)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，VS Code 显示了相同 `data` 变量的声明和使用，但是在右侧的侧边栏视图中展开（参见[图 12-4](#ide_go_to_references_other_file)）。
- en: '![Peek menu showing an opened reference to a variable.](Images/lets_1204.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Peek 菜单显示对变量的打开引用。](Images/lets_1204.png)'
- en: Figure 12-4\. Peek menu showing an opened reference to a variable
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-4\. Peek 菜单显示对变量的打开引用
- en: Find All References (Option (Mac) / Alt (Windows) + Shift + F12) also shows
    a list of references, but in a sidebar view that stays visible after code navigation.
    This can be useful for opening or performing actions on more than just one reference
    at a time ([Figure 12-5](#ide_find_all_references)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查找所有引用（Option（Mac）/ Alt（Windows）+ Shift + F12）还显示引用的列表，但以侧边栏视图形式呈现，在代码导航后保持可见。这对于一次打开或执行多个引用的操作非常有用（参见[图 12-5](#ide_find_all_references)）。
- en: '![Find All References menu for a variable.](Images/lets_1205.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![查找变量的所有引用菜单。](Images/lets_1205.png)'
- en: Figure 12-5\. Find All References menu for a variable
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-5\. 查找变量的所有引用菜单
- en: Finding Implementations
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找实现
- en: Go to Implementations (Cmd (Mac) / Ctrl (Windows) + F12) and Find All Implementations
    are specialized versions of Go To / Find All References made for interfaces and
    abstract class methods. They find all implementations of an interface or abstract
    method in code ([Figure 12-6](#ide_find_all_implementations)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 转到实现（Cmd（Mac）/ Ctrl（Windows）+ F12）和查找所有实现是专为接口和抽象类方法而制作的 Go To / Find All References
    版本。它们可以在代码中查找接口或抽象方法的所有实现（[图 12-6](#ide_find_all_implementations)）。
- en: '![Find All Implementations menu for an interface.](Images/lets_1206.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![一个接口的查找所有实现菜单。](Images/lets_1206.png)'
- en: Figure 12-6\. Find All Implementations menu for an `AI` interface
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-6\. `AI` 接口的查找所有实现菜单
- en: These are particularly helpful when you’re specifically searching for how values
    typed as a type such as class or interface are used. Find All References might
    be too noisy, as it will also show definitions of and other type references to
    the class or interface.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您特别搜索作为类或接口类型的值如何使用时，这些功能尤其有帮助。查找所有引用可能会过于嘈杂，因为它还将显示类或接口的定义及其他类型引用。
- en: Writing Code
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写代码
- en: IDE language services such as VS Code’s TypeScript service run in the background
    of your editor and react to actions taken in files. They see edits to files as
    you type them—even before changes are saved to files. Doing so enables a slew
    of features that help automate common tasks when writing TypeScript code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 语言服务，例如 VS Code 的 TypeScript 服务，在编辑器的后台运行，并对文件中的操作做出反应。它们可以在您输入文件时即时看到文件的编辑，甚至在对文件进行保存之前。这样做可以启用一系列功能，帮助在编写
    TypeScript 代码时自动化常见任务。
- en: Completing Names
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成名称
- en: TypeScript’s APIs can be used by editors to fill in names that exist in the
    same file as well. When you start typing a name, such as when providing a previously
    declared variable as a function argument, editors using TypeScript will often
    suggest autocompletions with a list of variables with matching names. Clicking
    the name in the list with your mouse or hitting the Enter key will complete the
    name ([Figure 12-7](#variable_auto_import)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器可以使用 TypeScript 的 API 填写同一文件中存在的名称。当您开始键入名称时，例如在将先前声明的变量作为函数参数提供时，使用 TypeScript
    的编辑器通常会建议具有匹配名称的变量列表的自动完成。单击列表中的名称或按 Enter 键将完成名称（[图 12-7](#variable_auto_import)）。
- en: '![Left: autocompletions on a variable typed as `dat`; right: the result of
    autocompleting to an imported `data`.](Images/lets_1207.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![左侧：在变量 `dat` 上的自动完成；右侧：从导入的 `data` 的结果。](Images/lets_1207.png)'
- en: 'Figure 12-7\. Left: autocompletions on a variable typed as `dat`; right: the
    result of autocompleting to an imported `data`'
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-7\. 左侧：在变量 `dat` 上的自动完成；右侧：从导入的 `data` 的结果
- en: Automatic import additions will be offered for package dependencies as well.
    These screenshots show a TypeScript file’s imports and module code before and
    after `sortBy` is imported from the `"lodash"` package ([Figure 12-8](#package_auto_import)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 自动导入功能还将为包依赖项提供添加选项。这些截图展示了 TypeScript 文件在从 `"lodash"` 包导入 `sortBy` 前后的导入和模块代码（[图
    12-8](#package_auto_import)）。
- en: '![Left: autocompletions on a variable typed as `sortBy`; right: the result
    of autocompleting to an imported `sortBy` from lodash.](Images/lets_1208.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![左侧：在变量 `sortBy` 上的自动完成；右侧：从 `lodash` 导入的 `sortBy` 的结果](Images/lets_1208.png)'
- en: 'Figure 12-8\. Left: autocompletions on a variable typed as `sortBy`; right:
    the result of autocompleting to an imported `sortBy` from `lodash`'
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-8\. 左侧：在变量 `sortBy` 上的自动完成；右侧：从 `lodash` 导入的 `sortBy` 的结果
- en: Automatic imports are one of my favorite features of the TypeScript experience.
    They greatly expedite the often laborious processes of figuring out where imports
    come from and then explicitly typing them out.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 体验中我最喜欢的功能之一是自动导入。它们极大地加快了通常费时的过程，即找出导入的来源，然后显式地将其键入。
- en: Similarly, if you start typing the name of a property from a typed value, editors
    powered by TypeScript will offer to autocomplete to known properties of the value’s
    type ([Figure 12-9](#property_auto_complete)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果您开始输入类型值的属性名称，由 TypeScript 支持的编辑器将提供自动完成到该值类型已知属性的选项（[图 12-9](#property_auto_complete)）。
- en: '![Left: autocompletions on an array property typed as `forE`; right: the result
    of autocompleting to `.forEach`](Images/lets_1209.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![左侧：在数组属性 `forE` 上的自动完成；右侧：自动完成为 `.forEach` 的结果](Images/lets_1209.png)'
- en: 'Figure 12-9\. Left: autocompletions on a property typed as `forE`; right: the
    result of autocompleting to `.forEach`'
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-9\. 左侧：在属性 `forE` 上的自动完成；右侧：自动完成为 `.forEach` 的结果
- en: Automatic Import Updates
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动导入更新
- en: If you rename a file or move it from one folder to another, you may need to
    update potentially many import statements for the file. Updates may need to be
    made both in that file itself and in any other file that imports from it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您重命名文件或将其移动到另一个文件夹，您可能需要更新该文件的许多导入语句。更新可能需要在该文件本身以及任何从中导入的其他文件中进行。
- en: If you drag and drop a file or rename it to a nested folder path using the VS
    Code file explorer, VS Code will offer to use TypeScript to update file paths
    for you.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 VS Code 文件资源管理器拖放文件或将其重命名为嵌套文件夹路径，VS Code 将提供使用 TypeScript 来为您更新文件路径的选项。
- en: These screenshots show a *src/logging.ts* file being renamed to a *src/shared/logging.ts*
    location, and file imports getting updated in a corresponding manner ([Figure 12-10](#file_move)).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些截图展示了 *src/logging.ts* 文件被重命名为 *src/shared/logging.ts* 并相应地更新文件导入（[图 12-10](#file_move)）。
- en: '![Left: a `src/index.ts` file importing from `./logging`; middle: renaming
    `src/logging.ts` to `src/shared/logging.ts`; right: `src/index.ts` with updated
    import path.](Images/lets_1210.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![左图：*src/index.ts* 文件从 `./logging` 进行导入；中图：将 `src/logging.ts` 重命名为 `src/shared/logging.ts`；右图：`src/index.ts`
    中更新的导入路径。](Images/lets_1210.png)'
- en: 'Figure 12-10\. Left: a *src/index.ts* file importing from `"./logging"`; middle:
    renaming *src/logging.ts* to *src/shared/logging.ts*; right: *src/index.ts* with
    an updated import path'
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-10\. 左图：*src/index.ts* 文件从 `"./logging"` 进行导入；中图：将 *src/logging.ts* 重命名为
    *src/shared/logging.ts*；右图：*src/index.ts* 中更新的导入路径
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Multifile edits may leave changes to files unsaved. Remember to save any changed
    files after running edits on them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 多文件编辑可能会导致文件变更未保存。在对它们运行编辑后，请记得保存任何更改过的文件。
- en: Code Actions
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码操作
- en: Many of TypeScript’s IDE utilities are provided as actions you can trigger.
    While some of these modify only the current file being edited, some can modify
    many files at once. Using these code actions is a great way to direct TypeScript
    to do many of your manual code writing tasks such as calculating import paths
    and common refactors for you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 TypeScript 的 IDE 实用工具都是您可以触发的操作。虽然其中一些只修改当前正在编辑的文件，但有些可以一次修改多个文件。使用这些代码操作是引导
    TypeScript 自动执行您的手动代码编写任务的绝佳方式，例如计算导入路径和常见重构。
- en: Code actions are generally represented with some kind of icon in editors when
    available. VS Code, for example, shows a clickable light bulb next to your text
    cursor when at least one code action is available ([Figure 12-11](#error_lightbulb)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器通常在可用时使用某种图标来表示代码操作。例如，VS Code 在至少有一个代码操作可用时，会显示一个可点击的灯泡图标，显示在您的文本光标旁边（[图 12-11](#error_lightbulb)）。
- en: '![Code actions lightbulb next to a name causing a type error.](Images/lets_1211.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![代码操作灯泡，旁边是一个导致类型错误的名称。](Images/lets_1211.png)'
- en: Figure 12-11\. Code actions lightbulb next to a name causing a type error
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-11\. 代码操作灯泡，旁边是一个导致类型错误的名称
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Editors generally expose keyboard shortcuts to operate their code actions menu
    or equivalent, allowing you to trigger any action in this chapter without using
    a mouse. VS Code’s default shortcut to open a code actions menu is Cmd + `.` on
    Mac and Ctrl + `.` on Linux/Windows. Up and down arrows select drop-down options,
    and Enter activates one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器通常会暴露键盘快捷键，用于操作代码操作菜单或类似功能，允许您在本章中触发任何操作，而无需使用鼠标。VS Code 在 Mac 上打开代码操作菜单的默认快捷键是
    Cmd + `.`，在 Linux/Windows 上是 Ctrl + `.`。使用上下箭头选择下拉选项，按 Enter 键激活选中的操作。
- en: These code actions—in particular renames and refactors—are especially powerful
    by virtue of being informed by TypeScript’s type system. When applying an action
    to a type, TypeScript will understand which values across all files are of that
    type, and can then apply any needed changes to those values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码操作，特别是重命名和重构，因 TypeScript 的类型系统而特别强大。当对类型应用操作时，TypeScript 将理解所有文件中属于该类型的值，并可以对这些值进行任何需要的更改。
- en: Renaming
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名
- en: Changing a name that already exists, such as that of a function, interface,
    or variable can be cumbersome to perform manually. TypeScript can perform a renaming
    for a name that also updates all references to the name.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对已存在的名称（如函数、接口或变量）进行更改可能会手动操作繁琐。TypeScript 可以为名称执行重命名，同时更新所有引用该名称的地方。
- en: The Rename Symbol (F2) context menu option creates a text box where you can
    type in a new name. Triggering a rename on a function’s name, for example, would
    provide a text box to rename that function and all calls to it. Hit Enter to apply
    that name ([Figure 12-12](#rename_function)).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名符号（F2）上下文菜单选项会创建一个文本框，您可以在其中输入新名称。例如，对函数名称进行重命名将提供一个文本框，用于重命名该函数及其所有调用。按
    Enter 键应用该名称（[图 12-12](#rename_function)）。
- en: '![Box for renaming a `log` function, with `logData` inserted.](Images/lets_1212.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![重命名 `log` 函数的框，插入了 `logData`。](Images/lets_1212.png)'
- en: Figure 12-12\. Box for renaming a `log` function, with `logData` inserted
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-12\. 重命名 `log` 函数的框，插入了 `logData`
- en: If you’d like to see what would happen before you apply the new name, press
    Shift + Enter to open a Refactor Preview pane that lists all the text changes
    that would happen ([Figure 12-13](#rename_function_preview)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在应用新名称之前查看会发生什么，按 Shift + Enter 打开重构预览窗格，其中列出了将发生的所有文本更改（[图 12-13](#rename_function_preview)）。
- en: '![Refactor preview for renaming a `log` function, with `logData` previewed
    across two files.](Images/lets_1213.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![重命名 `log` 函数的重构预览，包括在两个文件中预览的 `logData`。](Images/lets_1213.png)'
- en: Figure 12-13\. Refactor preview for renaming a `log` function, with `logData`
    previewed across two files
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-13\. 重命名 `log` 函数的重构预览，包括在两个文件中预览的 `logData`
- en: Removing unused code
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除未使用的代码
- en: Many IDEs subtly change the visual appearance of code that is unused, such as
    imported values and variables that are never referenced. VS Code, for example,
    reduces their opacity by about a third.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 IDE 在视觉上微调未使用的代码的外观，例如导入的值和从未引用的变量。例如，VS Code 会将它们的不透明度降低约三分之一。
- en: TypeScript provides code actions to delete unused code. ([Figure 12-14](#import_auto_remove))
    shows the result of asking TypeScript to remove an unused `import` statement.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 提供了用于删除未使用代码的代码操作。([图 12-14](#import_auto_remove)) 展示了请求 TypeScript
    删除未使用的 `import` 语句的结果。
- en: '![Left: selecting an unused import and opening the refactors menu; right: the
    file after TypeScript deletes it.](Images/lets_1215.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![左：选择未使用的导入并打开重构菜单；右：TypeScript 删除后的文件。](Images/lets_1215.png)'
- en: 'Figure 12-14\. Left: selecting an unused import and opening the refactors menu;
    right: the file after TypeScript deletes it'
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-14\. 左：选择未使用的导入并打开重构菜单；右：TypeScript 删除后的文件
- en: Other quick fixes
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他快速修复
- en: 'Many TypeScript error messages are for code problems that can be quickly rectified,
    such as minor typos in keywords or variable names. Other commonly useful TypeScript
    quick fixes include:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 TypeScript 错误消息都是可以快速纠正的代码问题，例如关键字或变量名称中的小拼写错误。其他常用的 TypeScript 快速修复包括：
- en: Declaring a missing property on a class or interface
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类或接口上声明缺失的属性
- en: Correcting a mistyped field name
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更正拼写错误的字段名称
- en: Filling in missing properties of a variable declared as a type
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填写声明为类型的变量的缺失属性
- en: I recommend checking the list of quick fixes whenever you spot an error message
    you haven’t seen before. You never know what useful utilities TypeScript has made
    available to resolve it!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在发现之前未见过的错误消息时，检查快速修复列表。你永远不知道 TypeScript 提供了哪些有用的工具来解决它！
- en: Refactoring
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重构
- en: The TypeScript language service provides a plethora of handy code changes for
    different structures of code. Some are as simple as moving lines of code around,
    while others are as complex as creating new functions for you.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 语言服务为不同结构的代码提供了大量便捷的代码更改。有些简单到移动代码行，而其他一些则复杂到为您创建新函数。
- en: When you’ve selected an area of code, VS Code will display a lightbulb icon
    next to your selection. Click it to see the list of refactors available.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择了一段代码区域时，VS Code 会在选择旁边显示一个灯泡图标。点击它以查看可用的重构列表。
- en: Here’s a developer extracting an inline array literal to a `const` variable
    ([Figure 12-15](#extract_to_constant)).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个开发者将内联数组文本提取到常量变量的示例（[图 12-15](#extract_to_constant)）。
- en: '![Left: selecting an array literal and opening the refactors menu; right: extracting
    to a constant variable.](Images/lets_1214.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![左：选择数组文本并打开重构菜单；右：提取为常量变量。](Images/lets_1214.png)'
- en: 'Figure 12-15\. Left: selecting an array literal and opening the refactors menu;
    right: extracting to a constant variable'
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-15\. 左：选择数组文本并打开重构菜单；右：提取为常量变量
- en: Working Effectively with Errors
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效地处理错误
- en: Reading and taking action on error messages is a fact of life for working in
    any programming language. Every developer, regardless of proficiency with the
    TypeScript language, will trigger a plethora of TypeScript compiler errors each
    time they write TypeScript code. Using IDE features to enhance your ability to
    work effectively with TypeScript compiler errors will help you become much more
    productive in the language.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读和处理错误消息是在任何编程语言中工作的一个不可避免的事实。每个开发者，无论在 TypeScript 语言方面的熟练程度如何，每次编写 TypeScript
    代码时都会触发大量的 TypeScript 编译器错误。利用 IDE 功能增强您处理 TypeScript 编译器错误的能力，将帮助您在该语言中变得更加高效。
- en: Language Service Errors
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言服务错误
- en: Editors generally surface any errors reported by the TypeScript language service
    as red squigglies underneath the troublesome code. Hovering your mouse over underlined
    characters will show a hover box next to them with the text of the error ([Figure 12-16](#variable_does_not_exist)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器通常会在有问题的代码下方显示由 TypeScript 语言服务报告的红色波浪线。将鼠标悬停在下划线字符上将显示一个悬停框，其中包含错误的文本（详见[图12-16](#variable_does_not_exist)）。
- en: '![Hover information on a variable that does not exist.](Images/lets_1216.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![变量不存在的悬停信息。](Images/lets_1216.png)'
- en: Figure 12-16\. Hover information on a variable that does not exist
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-16\. 变量不存在的悬停信息
- en: VS Code also shows errors for any open files in a Problems tab in its Panels
    section. The bottom left View Problem link in the mouse hover box for an error
    will open an inline display of the message inserted after the problem’s line and
    before any subsequent lines ([Figure 12-17](#variable_does_not_exist_view_problem)).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 还会在“面板”部分的“问题”选项卡中显示任何打开文件的错误。悬停框中错误的底部左侧的“查看问题”链接将打开消息的内联显示，插入在问题行之后和后续行之前（详见[图12-17](#variable_does_not_exist_view_problem)）。
- en: '![View Problem inline display for a variable that does not exist.](Images/lets_1217.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![显示变量不存在的视图问题内联显示。](Images/lets_1217.png)'
- en: Figure 12-17\. View Problem inline display for a variable that does not exist
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-17\. 显示变量不存在的问题的视图问题内联显示
- en: When multiple problems exist in the same source file, their displays will include
    up and down arrows that you can use to switch between them. F8 and Shift + F8
    will work as shortcuts to go forward and backward through that list of problems,
    respectively ([Figure 12-18](#variable_does_not_exist_view_problems)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当同一源文件中存在多个问题时，它们的显示将包括向上和向下箭头，您可以使用它们在问题列表中前进和后退。快捷键 F8 和 Shift + F8 分别用于在列表中前进和后退（详见[图12-18](#variable_does_not_exist_view_problems)）。
- en: '![One of two View Problem inline displays for a variable that does not exist.](Images/lets_1218.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![两个显示变量不存在问题的视图问题内联显示之一。](Images/lets_1218.png)'
- en: Figure 12-18\. One of two View Problem inline displays for variables that do
    not exist
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-18\. 两个显示变量不存在的问题的视图问题内联显示之一
- en: Problems tab
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题标签
- en: VS Code includes a Problems tab in its panel that, as its name suggests, surfaces
    any problems in your workspace. That includes errors reported by the TypeScript
    language service.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 在其面板中包含一个“问题”选项卡，顾名思义，会显示工作区中的任何问题。这包括 TypeScript 语言服务报告的错误。
- en: This screenshot shows a Problems tab showing two problems in a TypeScript file
    ([Figure 12-19](#file_problems)).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了一个 TypeScript 文件中“问题”选项卡显示的两个问题（详见[图12-19](#file_problems)）。
- en: '![Problems tab showing two errors in a file.](Images/lets_1219.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![问题选项卡显示文件中的两个错误。](Images/lets_1219.png)'
- en: Figure 12-19\. Problems tab showing two errors in a file
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-19\. 问题选项卡显示文件中的两个错误
- en: Clicking any error within the Problems tab will bring your text cursor to the
    offending line and column in its file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在“问题”选项卡中点击任何错误将把您的文本光标移动到文件中相应的行和列。
- en: Note that VS Code will only list problems for files that are currently open.
    If you want a real-time updated list of all TypeScript compiler problems, you’ll
    need to run the TypeScript compiler in a terminal.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，VS Code 仅会列出当前打开的文件中的问题。如果您希望实时更新所有 TypeScript 编译器的问题列表，您需要在终端中运行 TypeScript
    编译器。
- en: Running a terminal compiler
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行终端编译器
- en: I recommending running the TypeScript compiler in watch mode (covered in [Chapter 13,
    “Configuration Options”](ch13.xhtml#configuration_options)) in a terminal while
    working in a TypeScript project. Doing so will give you a real-time updated list
    of all problems—not just those in files.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐在 TypeScript 项目中工作时，在终端中以观察模式运行 TypeScript 编译器（详见[第13章，“配置选项”](ch13.xhtml#configuration_options)）。这样做可以实时更新所有问题的列表，而不仅仅是文件中的问题。
- en: To do this in VS Code, open the Terminal panel and run `tsc -w` (or `tsc -b
    -w` if using project references, also covered in [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)).
    You should now see a terminal display showing all TypeScript issues in your project,
    as in this screenshot ([Figure 12-20](#terminal_tsc_watch)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VS Code 中执行此操作，打开终端面板并运行 `tsc -w`（或者如果使用项目引用，则运行 `tsc -b -w`，同时参见[第 13 章，“配置选项”](ch13.xhtml#configuration_options)）。现在你应该看到终端显示出项目中所有
    TypeScript 问题，如此屏幕截图所示（[图 12-20](#terminal_tsc_watch)）。
- en: '![Running `tsc -w` in a terminal to report a problem in a file.](Images/lets_1220.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![在终端中运行 `tsc -w` 报告文件中的问题。](Images/lets_1220.png)'
- en: Figure 12-20\. Running `tsc -w` in a terminal to report a problem in a file
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-20\. 在终端中运行 `tsc -w` 报告文件中的问题
- en: Cmd (Mac) / Ctrl (Windows) + clicking a file name will bring your text cursor
    to the offending line and column in its file as well.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上 Cmd / 在 Windows 上 Ctrl + 单击文件名将使文本光标移到其文件中的错误行和列。
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Some projects use VS Code launch.json configurations to start a terminal with
    TypeScript compiler in watch mode for you. See [code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)
    for a full reference on VS Code tasks.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目使用 VS Code 的 launch.json 配置启动 TypeScript 编译器的观察模式。请参阅[code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)了解
    VS Code 任务的完整参考。
- en: Understanding types
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解类型
- en: You will sometimes find that you need to learn the type of something that’s
    set up in a way that the type isn’t apparent. For any value, you can hover your
    mouse over its name to see a hover box showing its type.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会发现需要了解某个设定方式中类型并不明显的东西的类型。对于任何值，你可以将鼠标悬停在其名称上，以查看显示其类型的悬停框。
- en: This screenshot shows the hover box for a variable ([Figure 12-21](#hovering_variable)).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了一个变量的悬停框（[图 12-21](#hovering_variable)）。
- en: '![Hover information on a variable.](Images/lets_1221.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![变量的悬停信息。](Images/lets_1221.png)'
- en: Figure 12-21\. Hover information on a variable
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-21\. 变量的悬停信息
- en: Hold Ctrl while hovering to also show where the name is declared.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 悬停时按住 Ctrl 还可以显示名称声明的位置。
- en: This screenshot shows the Ctrl hover box for the same variable as before ([Figure 12-22](#hovering_variable_ctrl)).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示与之前相同变量的 Ctrl 悬停框（[图 12-22](#hovering_variable_ctrl)）。
- en: '![Expanded hover information on a variable.](Images/lets_1222.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![展开变量的悬停信息。](Images/lets_1222.png)'
- en: Figure 12-22\. Expanded hover information on a variable
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-22\. 展开变量的悬停信息
- en: Hover info boxes are also available on types, such as type aliases. This screenshot
    shows hovering over a `keyof typeof` type to see its equivalent union of string
    literals ([Figure 12-23](#hovering_type)).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 悬停信息框也适用于类型，比如类型别名。此屏幕截图显示悬停在 `keyof typeof` 类型上以查看其等效字符串文字联合（[图 12-23](#hovering_type)）。
- en: '![Expanded hover information on a type.](Images/lets_1223.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![展开类型的悬停信息。](Images/lets_1223.png)'
- en: Figure 12-23\. Expanded hover information on a type
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-23\. 展开类型的悬停信息
- en: One strategy I’ve found to be helpful when trying to understand components of
    complex types is to create a type alias that represents just one component of
    the type. You will then be able to hover your mouse over that type alias to see
    what its type result is.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现的一种策略在试图理解复杂类型的组成部分时非常有帮助，那就是创建一个代表类型的别名，仅表示类型的一个组件。然后你可以将鼠标悬停在该类型别名上，看看其类型结果。
- en: For the `FruitsType` type from before as an example, its `typeof fruits` portion
    could be extracted into a separate intermediary type with a refactor. That intermediary
    type can then be hovered to see type information ([Figure 12-24](#hovering_type_intermediary)).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于之前的 `FruitsType` 类型，其 `typeof fruits` 部分可以通过重构提取为一个单独的中介类型。然后可以悬停在该中介类型上查看类型信息（[图
    12-24](#hovering_type_intermediary)）。
- en: '![Left: extracting part of the FruitsType type; right: hovering over that extracted
    type.](Images/lets_1224.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![左：提取出 FruitsType 类型的一部分；右：悬停在提取的类型上。](Images/lets_1224.png)'
- en: 'Figure 12-24\. Left: extracting part of the `FruitsType` type; right: hovering
    over that extracted type'
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-24\. 左：提取 `FruitsType` 类型的一部分；右：悬停在提取的类型上
- en: The intermediary type alias strategy is particularly useful for debugging the
    type operations covered in [Chapter 15, “Type Operations”](ch15.xhtml#type_operations).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 中介类型别名策略特别适用于调试涵盖在[第 15 章，“类型操作”](ch15.xhtml#type_operations)中讨论的类型操作。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you explored using TypeScript’s IDE integrations to level
    up your ability to write TypeScript code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您探索了使用 TypeScript 的 IDE 集成来提升编写 TypeScript 代码的能力：
- en: Opening context menus on types and values to list their available commands
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类型和值上打开上下文菜单以列出其可用命令
- en: Navigating code by finding definitions, references, and implementations
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查找定义、引用和实现来导航代码
- en: Automating writing code with name completions and automatic imports
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用名称补全和自动导入自动化编写代码
- en: More code actions including renames and refactors
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括重命名和重构在内的更多代码操作
- en: Strategies for viewing and understanding language service errors
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看和理解语言服务错误的策略
- en: Strategies for understanding types
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解类型的策略
- en: Tip
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/using-ide-features*](https://learningtypescript.com/using-ide-features).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了本章的阅读，请在[*https://learningtypescript.com/using-ide-features*](https://learningtypescript.com/using-ide-features)上练习所学的内容。
- en: What do IDEs in love say to each other?
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: IDE 间相爱的告白？
- en: ''
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “You complete me!”
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “你完美地补全了我！”
