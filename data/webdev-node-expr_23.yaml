- en: Chapter 23\. Additional Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 23 章 附加资源
- en: In this book, I have given you a comprehensive overview of building websites
    with Express. And we have covered a remarkable amount of ground, but we’ve still
    only scratched the surface of the packages, techniques, and frameworks that are
    available to you. In this chapter, we’ll discuss where you can go for additional
    resources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我为您提供了使用 Express 构建网站的全面概述。我们已经涵盖了大量内容，但仍然只是初步接触了可用的包、技术和框架。在本章中，我们将讨论您可以获取额外资源的地方。
- en: Online Documentation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线文档
- en: 'For JavaScript, CSS, and HTML documentation, the [Mozilla Developer Network
    (MDN)](https://developer.mozilla.org) is without equal. If I need JavaScript documentation,
    I either search directly on MDN or append “mdn” to my search query. Otherwise,
    inevitably, w3schools appears in the search. Whoever is managing SEO for w3schools
    is a genius, but I recommend avoiding this site: I find the documentation is often
    severely lacking.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JavaScript、CSS 和 HTML 文档，[Mozilla 开发者网络（MDN）](https://developer.mozilla.org)是无与伦比的。如果我需要
    JavaScript 文档，我要么直接在 MDN 上搜索，要么将“mdn”附加到我的搜索查询中。否则，无可避免地，w3schools 会出现在搜索结果中。无论谁在管理
    w3schools 的 SEO，都是个天才，但我建议避免访问这个网站：我发现其文档通常严重缺失。
- en: Where MDN is a great HTML reference, if you’re new to HTML5 (or even if you’re
    not), you should read Mark Pilgrim’s [*Dive Into HTML5*](http://diveintohtml5.info).
    WHATWG maintains an excellent [“living standard” HTML5 specification](http://developers.whatwg.org);
    it is usually where I turn to first for really hard-to-answer HTML questions.
    Finally, the official specifications for HTML and CSS are located on the [W3C
    website](http://www.w3.org); they are dry, difficult-to-read documents, but sometimes
    it’s your only recourse for the very hardest problems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 MDN 是一个很好的 HTML 参考，如果您对 HTML5 还不熟悉（甚至已经很熟悉），您应该阅读 Mark Pilgrim 的 [*Dive Into
    HTML5*](http://diveintohtml5.info)。WHATWG 维护着一份优秀的 [“活标准” HTML5 规范](http://developers.whatwg.org)；这通常是我首先查阅的地方，用于那些难以回答的
    HTML 问题。最后，HTML 和 CSS 的官方规范位于 [W3C 网站](http://www.w3.org)；这些文档枯燥、难以阅读，但有时它们是您解决最难问题的唯一途径。
- en: JavaScript adheres to the [ECMA-262 ECMAScript language specification](http://bit.ly/ECMA-262_specs).
    To track the availability of JavaScript features in Node (and various browsers),
    see the excellent [guide maintained by @kangax](http://bit.ly/36SoK53).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 遵循 [ECMA-262 ECMAScript 语言规范](http://bit.ly/ECMA-262_specs)。要追踪 Node（以及各种浏览器）中
    JavaScript 特性的可用性，请参阅由 @kangax 维护的优秀 [指南](http://bit.ly/36SoK53)。
- en: The [Node documentation](https://nodejs.org/en/docs) is very good, and comprehensive,
    and it should be your first choice for authoritative documentation about Node
    modules (such as `http`, `https`, and `fs`). The [Express documentation](https://expressjs.com)
    is quite good, but not as comprehensive as one might like. The [npm documentation](https://docs.npmjs.com/)
    is comprehensive and useful.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Node 文档](https://nodejs.org/en/docs)非常好，内容全面，应该是关于 Node 模块（如 `http`、`https`
    和 `fs`）的权威文档的首选。[Express 文档](https://expressjs.com)也相当不错，但可能不如人们期望的那样全面。[npm 文档](https://docs.npmjs.com/)全面且实用。'
- en: Periodicals
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 期刊
- en: 'There are three free periodicals you should absolutely subscribe to and read
    dutifully every week:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您绝对应该订阅并认真阅读的三本免费期刊：
- en: '[JavaScript Weekly](http://javascriptweekly.com)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JavaScript 每周更新](http://javascriptweekly.com)'
- en: '[Node Weekly](http://nodeweekly.com)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Node 每周更新](http://nodeweekly.com)'
- en: '[HTML5 Weekly](http://html5weekly.com)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HTML5 每周更新](http://html5weekly.com)'
- en: These three periodicals will keep you informed of the latest news, services,
    blogs, and tutorials as they become available.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这三本期刊会在最新的新闻、服务、博客和教程发布时通知您。
- en: Stack Overflow
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stack Overflow
- en: 'Chances are good that you’ve already used Stack Overflow (SO): since its inception
    in 2008, it has become the dominant online Q&A site, and is your best resource
    to get your JavaScript, Node, and Express questions answered (and any other technology
    covered in this book). Stack Overflow is a community-maintained, reputation-based
    Q&A site. The reputation model is what’s responsible for the quality of the site
    and its continued success. Users can gain reputation by having their questions
    or answers “upvoted” or having an accepted answer. You don’t have to have any
    reputation to ask a question, and registration is free. However, there are things
    you can do to increase the chances of getting your question answered in a useful
    manner, which we’ll discuss in this section.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你已经使用过Stack Overflow (SO)：自2008年成立以来，它已成为主导的在线问答网站，是你获取JavaScript、Node和Express等问题答案的最佳资源（以及本书涵盖的任何其他技术）。Stack
    Overflow是一个由社区维护、基于声誉的问答网站。声誉模型是该网站质量和持续成功的关键。用户可以通过问题或回答被“赞同”或接受答案来获得声誉。你无需声誉即可提问，并且注册是免费的。然而，有些方法可以增加你的问题得到有用回答的机会，我们将在本节讨论。
- en: 'Reputation is the currency of Stack Overflow, and while there are people out
    there who genuinely want to help you, it’s the chance to gain reputation that’s
    the icing on the cake that motivates good answers. There are a lot of really smart
    people on SO, and they’re all competing to provide the first and/or best correct
    answer to your question (there’s a strong disincentive to provide a quick but
    bad answer, thankfully). Here are things you can do to increase the chances of
    getting a good answer for your question:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 声誉是Stack Overflow的货币，虽然有些人真的想帮助你，但是获得声誉的机会是促使良好答案的最佳动力。SO上有很多聪明的人，他们竞争提供你问题的第一个和/或最佳正确答案（幸运的是，提供快速但错误答案的强烈防止动机）。以下是增加你问题得到良好回答机会的方法：
- en: Be an informed SO user
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一个消息灵通的SO用户
- en: Take the [SO tour](http://bit.ly/2rFhSbb), and then read [“How do I ask a good
    question?”](http://bit.ly/2p7Qnpw) If you’re so inclined, you can go on to read
    all of the [help documentation](http://bit.ly/36UnyOp)—you’ll earn a badge if
    you read it all!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[SO导览](http://bit.ly/2rFhSbb)，然后阅读[“如何提出一个好问题？”](http://bit.ly/2p7Qnpw) 如果你愿意，可以继续阅读所有的[帮助文档](http://bit.ly/36UnyOp)——如果你全部阅读完，你将获得一个徽章！
- en: Don’t ask questions that have already been answered
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不要问已有答案的问题
- en: Do your due diligence, and try to find out if someone has already asked your
    question. If you ask a question that has an easily found answer already on SO,
    your question will quickly be closed as a duplicate, and people will often downvote
    you for this, negatively affecting your reputation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 做好尽职调查，尝试找出是否已经有人提出过你的问题。如果你提出一个在SO上已有明显答案的问题，你的问题很快会被关闭为重复，并且人们经常会因此给你负评，这会对你的声誉产生负面影响。
- en: Don’t ask people to write your code for you
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不要求别人为你编写代码
- en: You will quickly find your question downvoted and closed if you simply ask,
    “How do I do *X*?” The SO community expects you to make an effort to solve your
    own problem before resorting to SO. Describe in your question what you’ve tried
    and why it isn’t working.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仅仅问，“我该如何做*X*？”那么你的问题很快会被负评和关闭。SO社区希望你在求助SO之前努力解决自己的问题。描述在问题中你尝试过什么以及为什么没有奏效。
- en: Ask one question at a time
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一次只问一个问题
- en: Questions that are asking five things—“How do I do this, then that, then the
    other things, and what’s the best way to do this?”—are difficult to answer and
    are discouraged.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 提问五件事——“我该如何做这件事，然后是那个，然后是其他事情，以及做这件事的最佳方式是什么？”——是很难回答的，也是不被鼓励的。
- en: Craft a minimal example of your issue
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个简化的问题示例
- en: I answer a lot of SO questions, and the ones I almost automatically skip over
    are those where I see three pages of code (or more!). Just taking your 5,000-line
    file and pasting into an SO question is not a great way to get your question answered
    (but people do it all the time). It’s a lazy approach that isn’t often rewarded.
    Not only are you less likely to get a useful answer, but the very process of eliminating
    things that *aren’t* causing the problem can lead you to solving the problem yourself
    (then you don’t even need to ask a question on SO). Crafting a minimal example
    is good for your debugging skills and for your critical thinking ability, and
    makes you a good SO citizen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常回答很多 Stack Overflow 的问题，但我几乎自动跳过那些代码超过三页（或更多！）的问题。简单地把你的 5000 行代码文件粘贴到 Stack
    Overflow 问题中并不是一个获得答案的好方法（但人们却经常这样做）。这是一种懒惰的方式，通常不会得到回报。不仅你更难获得有用的答案，而且淘汰那些*不*导致问题的因素的过程本身可以帮助你解决问题（然后你甚至不需要在
    Stack Overflow 上提问）。创建一个最小化的示例对你的调试技能和批判性思维能力都有好处，并使你成为一个好的 Stack Overflow 社区成员。
- en: Learn Markdown
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Markdown
- en: Stack Overflow uses Markdown for formatting questions and answers. A well-formatted
    question has a better chance of being answered, so you should invest the time
    to learn this useful and increasingly ubiquitous [markup language](http://bit.ly/2CB1L0a).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Stack Overflow 使用 Markdown 来格式化问题和答案。一个格式良好的问题有更好的被回答的机会，因此你应该投入时间学习这种有用且日益普及的[标记语言](http://bit.ly/2CB1L0a)。
- en: Accept and upvote answers
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接受并赞同答案
- en: If someone answers your question satisfactorily, you should upvote and accept
    it; it boosts the reputation of the answerer, and reputation is what drives SO.
    If multiple people provide acceptable answers, you should pick the one you think
    is best and accept that, and upvote anyone else you feel offered a useful answer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人满意地回答了你的问题，你应该给予赞同并接受答案；这会增加回答者的声誉，而声誉是推动 Stack Overflow 运作的关键。如果有多人提供了可接受的答案，你应该选择你认为最好的一个并接受它，并给其他提供有用答案的人点赞。
- en: If you figure out your own problem before someone else does, answer your own
    question
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在别人之前解决了自己的问题，请回答自己的问题
- en: 'SO is a community resource: if you have a problem, chances are, someone else
    has it too. If you’ve figured it out, go ahead and answer your own question for
    the benefit of others.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Stack Overflow 是一个社区资源：如果你有一个问题，很可能其他人也有同样的问题。如果你解决了它，请为了他人的利益回答你自己的问题。
- en: 'If you enjoy helping the community, consider answering questions yourself:
    it’s fun and rewarding, and it can lead to benefits that are more tangible than
    an arbitrary reputation score. If you have a question for which you’ve received
    no useful answers for two days, you can start a *bounty* on the question, using
    your own reputation. The reputation is withdrawn from your account immediately,
    and it is nonrefundable. If someone answers the question to your satisfaction,
    and you accept their answer, they will receive the bounty. The catch is, of course,
    you have to have reputation to start a bounty: the minimum bounty is 50 reputation
    points. While you can get reputation from asking quality questions, it’s usually
    quicker to get reputation by providing quality answers.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢帮助社区，请考虑自己回答问题：这既有趣又有回报，可能会带来比单纯的声誉分更具体的好处。如果你有一个问题，在两天内没有得到有用的答案，你可以为这个问题设置*悬赏*，使用你自己的声誉。声誉会立即从你的账户中扣除，且不可退还。如果有人满意地回答了你的问题，并且你接受了他们的答案，他们将获得这个悬赏。当然，前提是你必须有足够的声誉来设置悬赏：最低悬赏是
    50 点声誉分。虽然你可以通过提问高质量的问题来获得声誉，但通常通过提供高质量的答案来获得声誉更快。
- en: Answering people’s questions also has the benefit of being a great way to learn.
    I generally feel that I learn more from answering other people’s questions than
    I do from having my questions answered. If you want to really thoroughly learn
    a technology, learn the basics and then start trying to tackle people’s questions
    on SO. At first you might be consistently beat out by people who are already experts,
    but before long, you’ll find that you *are* one of the experts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 回答别人的问题还有助于学习。我一般觉得从回答别人的问题中学到的比得到自己问题的答案更多。如果你真的想彻底学会一门技术，先学习基础知识，然后开始尝试解决
    Stack Overflow 上的问题。起初你可能会被那些已经是专家的人击败，但不久之后，你会发现你*也是*其中的一位专家。
- en: Lastly, you shouldn’t hesitate to use your reputation to further your career.
    A good reputation is absolutely worth putting on a résumé. It’s worked for me
    and, now that I’m in the position of interviewing developers myself, I’m always
    impressed to see a good SO reputation (I consider a “good” SO reputation anything
    over 3,000; five-digit reputations are *great*). A good SO reputation tells me
    that someone is not just competent in their field, but they are clear communicators
    and generally helpful.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你不应该犹豫利用你的声誉来促进你的职业生涯。一个良好的声誉绝对值得写在简历上。这对我有用，现在我自己也在面试开发者时，总是对一个好的Stack Overflow声誉印象深刻（我认为“好”的Stack
    Overflow声誉超过3,000；五位数字的声誉是*很棒*的）。一个好的Stack Overflow声誉告诉我，某人不仅在他们的领域内 kompetent，而且他们是清晰的沟通者，通常也是乐于助人的。
- en: Contributing to Express
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对Express的贡献
- en: 'Express and Connect are open source projects, so anyone can submit *pull requests*
    (GitHub lingo for changes you’ve made that you would like included in the project).
    This is not easy to do: the developers working on these projects are pros and
    the ultimate authority on their own projects. I’m not discouraging you from contributing,
    but I am saying you have to dedicate some significant effort to be a successful
    contributor, and you cannot take submissions lightly.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Express和Connect是开源项目，因此任何人都可以提交*拉取请求*（GitHub术语指你希望包含在项目中的更改）。这并不容易：这些项目的开发人员是专家，是对自己项目的最终权威。我并不是在阻止你做出贡献，但我是在说，你必须投入一些重要的努力才能成为一个成功的贡献者，你不能轻视提交。
- en: The actual process of contributing is well-documented on the [Express home page](http://bit.ly/2q7WD0X).
    The mechanics involve forking the project in your own GitHub account, cloning
    that fork, making your changes, pushing them back to GitHub, and creating a pull
    request (PR), which will be reviewed by one or more people on the project. If
    your submissions are small or are bug fixes, you may have luck simply submitting
    the pull request. If you’re trying to do something major, you should communicate
    with one of the main developers and discuss your contribution. You don’t want
    to waste hours or days on a complicated feature only to find that it doesn’t fit
    with the maintainer’s vision, or it’s already being worked on by someone else.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献的实际过程已在[Express首页](http://bit.ly/2q7WD0X)上有详细说明。这个过程包括在你自己的GitHub账户中分叉项目，克隆该分支，进行更改，将更改推送回GitHub，并创建一个拉取请求（PR），该请求将由项目中的一个或多个人员进行审查。如果你的提交很小或者是修复bug，你可能只需提交拉取请求就有可能成功。如果你试图做一些重要的事情，你应该与主要开发者之一沟通，讨论你的贡献。你不希望花费几个小时或几天在一个复杂的功能上，结果发现它与维护者的视觉不符，或者已经被其他人在处理。
- en: The other way to contribute (indirectly) to the development of Express and Connect
    is to publish npm packages—specifically, middleware. Publishing your own middleware
    requires approval from no one, but that doesn’t mean you should carelessly clutter
    the npm registry with low-quality middleware. Plan, test, implement, and document,
    and your middleware will enjoy more success.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 间接贡献（另一种）到Express和Connect的开发是发布npm包，特别是中间件。发布你自己的中间件不需要任何人的批准，但这并不意味着你应该随意地用低质量的中间件堆积npm注册表。计划、测试、实施和文档化，你的中间件将会更成功。
- en: 'If you do publish your own packages, here are the minimum things you should
    have:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实发布了自己的包，这里是你应该有的最低限度的事情：
- en: Package name
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 包名
- en: While package naming is up to you, you obviously have to pick something that
    isn’t already taken, which can sometimes be a challenge. npm packages now support
    namespacing by account, so you’re not competing globally for names. If you’re
    writing middleware, it’s customary to prefix your package name with `connect-`
    or `express-`. Catchy package names that don’t have any particular relation to
    what it does are fine, but even better is a package name that hints at what it
    does (a great example of a catchy but appropriate package name is `zombie`, for
    headless browser emulation).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然包命名由你决定，但显然你必须选择一个尚未被占用的名称，这有时可能是一个挑战。现在npm包支持按账户命名空间，因此你并不是在全球范围内竞争名称。如果你正在编写中间件，习惯上可以用`connect-`或`express-`作为包名的前缀。没有任何特定关系的引人入胜的包名是可以的，但更好的是一个包名能暗示它的功能（一个很好的例子是`zombie`，用于无头浏览器仿真的包名）。
- en: Package description
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 包描述
- en: Your package description should be short, concise, and descriptive. This is
    one of the primary fields that is indexed when people search for packages, so
    it’s best to be descriptive, not clever (there’s room for some cleverness and
    humor in your documentation, don’t worry).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您的包描述应该简短、简洁和描述性。当人们搜索包时，这是主要索引的字段之一，因此最好是描述性的，而不是聪明的（文档中还是可以有一些聪明和幽默的内容的，请放心）。
- en: Author/contributors
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作者/贡献者
- en: Take some credit. Go on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为自己争取一些功劳。继续。
- en: License(s)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证
- en: This is often neglected, and there is nothing more frustrating than encountering
    a package without a license (leaving you unsure of whether you can use it in your
    project). Don’t be that person. The [MIT license](http://bit.ly/mit_license) is
    an easy choice if you don’t want any restrictions on how your code is used. If
    you want it to be open source (and stay open source), another popular choice is
    the [GPL license](http://bit.ly/gpl_license). It’s also wise to include license
    files in the root directory of your project (they should start with *LICENSE*).
    For maximum coverage, dual-license with MIT and GPL. For an example of this in
    *package.json* and in *LICENSE* files, see my [`connect-bundle` package](http://bit.ly/connect-bundle).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这经常被忽视，没有许可证的包会让人非常沮丧（不确定是否可以在项目中使用）。不要成为那种人。如果您不希望代码受任何限制，[MIT 许可证](http://bit.ly/mit_license)是一个简单的选择。如果您希望它保持开源（并继续保持开源），另一个流行的选择是
    [GPL 许可证](http://bit.ly/gpl_license)。在项目的根目录中包括许可证文件是明智之举（它们应该以 *LICENSE* 开头）。为了最大限度的覆盖范围，可以同时使用
    MIT 和 GPL 进行双重许可。关于这一点的示例在 *package.json* 和 *LICENSE* 文件中，可以参考我的 [`connect-bundle`
    包](http://bit.ly/connect-bundle)。
- en: Version
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 版本
- en: 'For the versioning system to work, you need to version your packages. Note
    that npm versioning is separate from commit numbers in your repository: you can
    update your repository all you like, but it won’t change what people get when
    they use npm to install your package. You need to increment your version number
    and republish for changes to be reflected in the npm registry.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使版本控制系统正常工作，您需要对包进行版本控制。请注意，npm 的版本控制与存储库中的提交编号是分开的：您可以随意更新存储库，但这不会改变用户使用
    npm 安装您的包时获取的内容。您需要增加版本号并重新发布，才能在 npm 注册表中反映出变化。
- en: Dependencies
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项
- en: You should make an effort to be conservative about dependencies in your packages.
    I’m not suggesting constantly reinventing the wheel, but dependencies increase
    the size and licensing complexity of your package. At a minimum, you should make
    sure you aren’t listing dependencies that you don’t need.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该努力在包中保守地处理依赖项。我并不建议不断重新发明轮子，但是依赖项会增加包的大小和许可证复杂性。至少，您应确保没有列出您不需要的依赖项。
- en: Keywords
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词
- en: Along with description, keywords are the other major metadata used for people
    trying to find your package, so choose appropriate keywords.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了描述之外，关键词是人们查找您的包时使用的另一个主要元数据，因此请选择适当的关键词。
- en: Repository
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库
- en: You should have one. GitHub is the most common, but others are welcome.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个。GitHub 是最常见的选择，但其他选择也可以接受。
- en: README.md
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: README.md
- en: The standard documentation format for both GitHub and npm is [Markdown](http://bit.ly/33IxnwS).
    It’s an easy, wiki-like syntax that you can quickly learn. Quality documentation
    is vitally important if you want your package to be used. If I land on an npm
    page and there’s no documentation, I usually just skip it without further investigation.
    At a minimum, you should describe basic usage (with examples). Even better is
    to have all options documented. Describing how to run tests goes the extra mile.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 和 npm 的标准文档格式都是 [Markdown](http://bit.ly/33IxnwS)。这是一种类似 wiki 的简单语法，您可以快速学习。如果您希望您的包被使用，优质的文档至关重要。如果我访问一个
    npm 页面发现没有文档，我通常会直接跳过而不再深入调查。至少应该描述基本用法（包括示例）。更好的做法是将所有选项都文档化。描述如何运行测试更进一步。
- en: 'When you’re ready to publish your own package, the process is quite easy. Register
    for a free [npm account](https://npmjs.org/signup) and then follow these steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备发布自己的包时，这个过程非常简单。注册一个免费的 [npm 账号](https://npmjs.org/signup)，然后按照以下步骤操作：
- en: Type `npm adduser`, and log in with your npm credentials.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `npm adduser`，使用您的 npm 凭据登录。
- en: Type `npm publish` to publish your package.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `npm publish` 来发布您的包。
- en: That’s it! You’ll probably want to create a project from scratch, and test your
    package by using `npm install`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！您可能想要从头开始创建一个项目，并通过 `npm install` 测试您的包。
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: It is my sincere hope that this book has given you all the tools you need to
    get started with this exciting technology stack. At no time in my career have
    I felt so invigorated by a new technology (despite the odd main character that
    is JavaScript), and I hope I have managed to convey some of the elegance and promise
    of this stack. Though I have been building websites professionally for many years,
    I feel that, thanks to Node and Express, I understand the way the internet works
    at a deeper level than I ever have before. I believe that it’s a technology that
    truly enhances understanding, instead of trying to hide the details from you,
    all while still providing a framework for quickly and efficiently building websites.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我衷心希望这本书能为你提供开始使用这一激动人心的技术栈所需的所有工具。在我的职业生涯中，从未有过像JavaScript这样的新技术让我感到如此振奋，尽管它有些古怪的主角。我希望我已经成功传达了这一技术栈的一些优雅和承诺。尽管我多年来专业构建网站，但我感到，得益于Node和Express，我比以往任何时候都更深入地理解了互联网的运作方式。我相信，这是一项真正增强理解力的技术，而不是试图隐藏细节，同时仍提供一个快速高效构建网站的框架。
- en: Whether you are a newcomer to web development, or just to Node and Express,
    I welcome you to the ranks of JavaScript developers. I look forward to seeing
    you at user groups and conferences, and most important, seeing what you will build.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是网页开发的新手，还是刚接触Node和Express，我都欢迎你加入JavaScript开发者的行列。我期待在用户组和会议上见到你，最重要的是，期待看到你将会构建什么。
