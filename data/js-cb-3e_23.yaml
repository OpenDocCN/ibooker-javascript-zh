- en: Chapter 20\. Remote Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 20 章. 远程数据
- en: Data surrounds us. We create and interact with data throughout our daily lives,
    often in interesting and unexpected ways. When building Node applications, we
    often interact with data. At times, that data may be something that we’ve created
    for the application, or data that the user has entered into our system. However,
    it’s also common to need to interact with data that comes from outside of our
    applications. This chapter covers best practices and techniques for working with
    remote data in Node applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据围绕着我们。我们在日常生活中创建和交互的数据往往以有趣且意想不到的方式存在。在构建 Node 应用程序时，我们经常与数据交互。有时，这些数据可能是我们为应用程序创建的，或者是用户输入到我们系统中的数据。然而，通常需要与来自应用程序外部的数据进行交互。本章介绍了在
    Node 应用程序中处理远程数据的最佳实践和技术。
- en: Fetching Remote Data
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取远程数据
- en: Problem
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to make a request to a remote server within your Node application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在 Node 应用程序中向远程服务器发出请求。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use `node-fetch`, one of the most popular and widely used modules, which brings
    the browser’s `window.fetch` to Node. It’s installed with npm:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `node-fetch`，这是最受欢迎和广泛使用的模块之一，将浏览器的 `window.fetch` 带到 Node 中。它通过 npm 安装：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and can be used as simply as:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 并且可以简单地使用：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`node-fetch` provides an API that closely mirrors the browser’s `window.fetch`,
    allowing our Node programs to access remote resources. Like `window.fetch`, it
    offers support for the HTTP methods of GET, POST, DELETE, and PUT. In the case
    of GET, if the response indicates success (a status code of 200), you can then
    process the returned data (formatted as HTML in this instance) however you would
    like.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`node-fetch` 提供了一个 API，紧密模仿了浏览器的 `window.fetch`，允许我们的 Node 程序访问远程资源。与 `window.fetch`
    类似，它支持 GET、POST、DELETE 和 PUT 的 HTTP 方法。在 GET 的情况下，如果响应表示成功（状态码为 200），则可以按照您希望的方式处理返回的数据（在此示例中格式为
    HTML）。'
- en: 'You can make a request for a JSON resource:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以请求 JSON 资源：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It’s also possible to use the `async/await` syntax, including a `try/catch`
    block for error handling:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用 `async/await` 语法，包括 `try/catch` 块进行错误处理：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also stream a result to a file using the filesystem module:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用文件系统模块将结果流到文件中：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`node-fetch` can also handle POST, DELETE, and PUT methods, allowing you to
    send data to a server. In the following example, we make a `POST` request:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`node-fetch` 还可以处理 POST、DELETE 和 PUT 方法，允许您向服务器发送数据。在以下示例中，我们进行了 `POST` 请求：'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`node-fetch` is a common and useful library for fetching remote data, but it
    is not the only one. Popular alternatives include Request (which, though still
    popular, is no longer actively maintained), Got, Axios, and Superagent.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`node-fetch` 是用于获取远程数据的常见和有用的库，但不是唯一的选择。流行的替代方案包括 Request（虽然仍然流行，但不再活跃维护），Got，Axios
    和 Superagent。'
- en: Screen Scraping
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕抓取
- en: Problem
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to access specific content from a web resource from within your Node
    application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从 Node 应用程序内部访问 web 资源的特定内容。
- en: Solution
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `node-fetch` and Cheerio modules to *screen scrape* a website.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `node-fetch` 和 Cheerio 模块进行*屏幕抓取*网站。
- en: 'First install the required modules:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装所需的模块：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To scrape the page, make use of `node-fetch` to retrieve the content and then
    query the retrieved content with Cheerio:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要抓取页面，利用 `node-fetch` 检索内容，然后使用 Cheerio 查询检索到的内容：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'An interesting use of Node is to *scrape* a website or resource and then use
    other functionality to query for specific information within the returned material.
    A popular module to use for querying is Cheerio, which is a tiny implementation
    of jQuery core intended for use in the server. In the following example, a simple
    application is created to pull in all of the post titles on the O’Reilly Radar
    blog page. To select these titles, we use Cheerio to find links (`a`) contained
    within `h2` elements that are within the `main` content. We then list the text
    of the link to a separate output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的 Node 使用方法是*抓取*网站或资源，然后使用其他功能查询返回材料中的特定信息。用于查询的流行模块是 Cheerio，这是一个专为服务器使用的
    jQuery 核心的微型实现。在以下示例中，创建了一个简单的应用程序来提取 O’Reilly Radar 博客页面上的所有文章标题。为了选择这些标题，我们使用
    Cheerio 来查找位于 `main` 内容中的 `h2` 元素内部的链接 (`a`)。然后，将链接的文本列出到单独的输出中：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After the successful request is made, the HTML returned is passed to Cheerio
    via the `load()` method, and the result is assigned to a dollar sign variable
    (`$`), so we can select elements in the result in a manner similar to the jQuery
    library.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 成功请求后，通过`load()`方法将返回的 HTML 传递给 Cheerio，并将结果赋值给一个美元符号变量（`$`），以便我们可以类似于 jQuery
    库的方式选择结果中的元素。
- en: The element pattern of `main h2 a` is then used to query for all matches, and
    the result is processed using the `each` method, accessing the text for each heading.
    The output to the console should be the titles of all the articles on the main
    page of the blog.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`main h2 a`元素模式查询所有匹配项，并使用`each`方法处理结果，访问每个标题的文本。控制台的输出应该是博客主页上所有文章的标题。
- en: 'A common use case is to download data when an API is not provided. In the following
    example, we’re locating specific links on the page and piping the linked resource
    to a local file. I’m also using the `async/await` syntax to demonstrate how it
    may be used:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的用例是在没有提供 API 的情况下下载数据。在以下示例中，我们正在定位页面上的特定链接，并将链接的资源传输到本地文件。我还使用了`async/await`语法来演示如何使用它：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We first fetch the page at the specific URL, which in this instance is a United
    States government website containing several linked CSV files. We then use Cheerio
    to locate all links on the page that contain the word “state.” Finally, we fetch
    the linked-to file and pipe it to a local file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先获取特定 URL 上的页面，这个例子中是一个包含几个链接的美国政府网站的页面。然后我们使用 Cheerio 定位页面上所有包含“state”单词的链接。最后，我们获取链接的文件并将其传输到本地文件。
- en: Warning
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Screen scraping can be a useful tool to have in your toolbox, but proceed with
    caution. Before scraping a website for use in a production application, be sure
    to consult its Terms of Service (ToS) or seek out permission from the site owner.
    Also be careful not to accidentally perform a denial-of-service attack (DDoS)
    by overloading the host’s servers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕抓取可以是您工具箱中有用的工具，但请谨慎操作。在为生产应用程序抓取网站之前，请务必查阅其服务条款（ToS）或征得网站所有者的许可。同时，要小心不要通过过载主机的服务器而意外执行拒绝服务攻击（DDoS）。
- en: Accessing JSON-Formatted Data via a RESTful API
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 RESTful API 访问 JSON 格式化数据
- en: Problem
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to access data formatted as JSON from a service through its API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您想通过其 API 从服务中访问以 JSON 格式化的数据。
- en: Solution
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: In a Node application, the simplest technique for accessing JSON-formatted data
    from an API is to use an HTTP request library.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node 应用程序中，从 API 获取 JSON 格式化数据的最简单技术是使用 HTTP 请求库。
- en: 'In the following example, I’ll again use `node-fetch`, much like in [“Fetching
    Remote Data”](#fetching-remote):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我将再次使用`node-fetch`，就像在[“获取远程数据”](#fetching-remote)中一样：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The npm module `got` is a popular alternative to `node-fetch`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: npm 模块`got`是`node-fetch`的一种流行替代品：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Discussion
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'A RESTful API is one that is stateless, meaning that each client request contains
    everything necessary for the server to respond (doesn’t imply any stored state
    between requests); it uses HTTP methods explicitly. It supports a directory-like
    URI structure, and transfers data formatted a certain way (typically XML or JSON).
    The HTTP methods are:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API 是一种无状态的 API，意味着每个客户端请求都包含服务器响应所需的一切（不涉及请求之间的存储状态）；它显式地使用 HTTP 方法。它支持类似目录结构的
    URI，并以特定的方式传输数据（通常是 XML 或 JSON）。HTTP 方法包括：
- en: 'GET: To get resource data'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GET: 获取资源数据'
- en: 'PUT: To update a resource'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PUT: 更新资源'
- en: 'DELETE: To delete a resource'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DELETE: 删除资源'
- en: 'POST: To create a resource'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'POST: 创建资源'
- en: Because we’re focusing on getting data, the only method of interest at this
    time is GET. And because we’re focused on JSON, we’re using client methods that
    can access JSON-formatted data and convert the data into objects we can manipulate
    in our JavaScript applications.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们专注于获取数据，所以目前唯一感兴趣的方法是 GET。因为我们专注于 JSON，所以我们使用可以访问 JSON 格式数据并将其转换为我们可以在 JavaScript
    应用程序中操作的对象的客户端方法。
- en: Let’s look at another example.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子。
- en: The [Open Exchange Rate](https://openexchangerates.org) provides an API that
    we can use to get current exchange rates, name-to-acronym for the different types
    of currencies, and the exchange rates for a specific date. It has a [Forever Free
    plan](https://oreil.ly/TjhFo) that provides limited access to the API without
    cost.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Open Exchange Rate](https://openexchangerates.org) 提供了一个 API，我们可以用它来获取当前的汇率，将名称转换为不同类型的货币缩写，以及特定日期的汇率。它有一个[永久免费计划](https://oreil.ly/TjhFo)，可以免费访问有限的
    API。'
- en: 'It’s possible to make two queries of the system (for current currency rate
    and name-to-acronyms), and when both queries finish, to get the acronyms as keys,
    and use these to look up the long name and rate in the results, printing the pairs
    out to the console:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对系统进行两次查询（当前货币汇率和名称到缩写），当两个查询都完成时，将缩写作为键获取，并使用这些键在结果中查找长名称和汇率，然后将这些配对打印到控制台：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `id` value will need to be replaced with your unique ID, assigned
    by the API provider when you create an account. In the example, I’ve used the
    `dotenv` module to load the stored value from a *.env* file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`id` 值需要用您在创建账户时API提供商分配的唯一ID替换。在这个例子中，我使用 `dotenv` 模块从 *.env* 文件中加载存储的值。
- en: 'The base currency is “USD” or the US dollar, and a here’s a sampling of the
    results:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基础货币是“USD”或美元，以下是结果的样本：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the code snippet, I use `async/await` to make the queries, and then process
    the results when both queries are finished. In a production system, we’d most
    likely cache the results for however long our plan allows (hourly for the free
    API access).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码片段中，我使用 `async/await` 进行查询，并在两个查询都完成后处理结果。在生产系统中，我们很可能会根据我们的计划允许的时间（免费API访问每小时一次）缓存结果。
- en: See Also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The examples didn’t need to *escape* the values used as parameters in the API
    requests, but if you do need to escape values, you can use Node’s built-in `querystring.escape()`
    method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中不需要 *转义* 用作API请求参数的值，但如果需要转义值，可以使用Node的内置 `querystring.escape()` 方法。
