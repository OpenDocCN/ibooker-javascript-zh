- en: Chapter 6\. Setting Up for App Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章. 为应用程序开发进行设置
- en: Now that you know a lot about React, JSX, and state management in both class-based
    and function components, it’s time to move on to creating and deploying a real-world
    app. Chapter 7 will start this process, but there are a few requirements you need
    to take care of first.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 React、JSX 以及类组件和函数组件中的状态管理的许多知识，是时候开始创建和部署一个真实的应用程序了。第 7 章将开始这个过程，但首先有几个要求需要您处理。
- en: For any serious development and deployment outside of prototyping or testing
    JSX, you need to set up a build process. The goals are to use JSX and any other
    modern JavaScript without waiting on browsers to implement them. You need to set
    up a transformation that runs in the background as you’re developing. The transformation
    process should produce code that is as close to the code your end-users will run
    on the live site (meaning no more client-side transforms). The process should
    also be as unobtrusive as possible so you don’t need to switch between developing
    and building contexts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何严肃的开发和部署，除了原型或测试 JSX 外，您需要设置一个构建过程。目标是使用 JSX 和其他现代 JavaScript，而不必等待浏览器实现它们。您需要设置一个后台运行的转换过程，以便在开发时运行。转换过程应该生成尽可能接近最终用户在实时网站上运行的代码（意味着不再进行客户端转换）。此过程还应尽可能不显眼，以便您无需在开发和构建环境之间切换。
- en: The JavaScript community and ecosystem offers plenty of options when it comes
    to development and build processes. One of the easiest, most common approaches
    is to use the Create React App (CRA) utility (which has [great documentation](https://create-react-app.dev)),
    so let’s go with that.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 社区和生态系统在开发和构建过程中提供了丰富的选择。其中一种最简单、最常见的方法是使用 Create React App（CRA）实用程序（它有[很棒的文档](https://create-react-app.dev)），所以让我们选择这个。
- en: Create React App
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Create React App
- en: CRA is a set of Node.js scripts and their dependencies that take the burden
    of setting up everything you require to get off the ground. So first you need
    to install Node.js.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: CRA 是一组 Node.js 脚本及其依赖项，它们帮助您摆脱设置一切的负担。因此，您首先需要安装 Node.js。
- en: Node.js
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js
- en: To install Node.js, go to [*https://nodejs.org*](https://nodejs.org) and grab
    the installer for your operating system. Follow the instructions of the installer
    and it’s all done. Now you can avail yourself of the services provided by the
    command-line Node package manager (`npm`) utility.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Node.js，请访问[*https://nodejs.org*](https://nodejs.org)，并获取适合您操作系统的安装程序。按照安装程序的说明操作，就完成了。现在您可以使用命令行
    Node 包管理器（`npm`）实用程序提供的服务。
- en: Even if you have Node.js installed, it’s a good idea to make sure you have the
    latest version.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您已经安装了 Node.js，确保您拥有最新版本仍然是一个好主意。
- en: 'To verify, type this in your terminal:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证，请在您的终端中输入以下内容：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you don’t have experience using a terminal (a command prompt), now is a great
    time to start! On Mac OS X, click the Spotlight search (the magnifying glass icon
    at the top-right corner) and type **`Terminal`**. On Windows, find the Start menu
    (right-click the windows icon at the bottom left of the screen), select Run, and
    type **`powershell`**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用终端（命令提示符）的经验，现在是一个开始的好时机！在 Mac OS X 上，点击 Spotlight 搜索（位于右上角的放大镜图标），输入
    **`Terminal`**。在 Windows 上，找到开始菜单（右键单击屏幕左下角的 Windows 图标），选择运行，然后输入 **`powershell`**。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In this book, all the commands you type in your terminal are prefixed with `$`
    as a cue to differentiate them from regular code. You omit the `$` when typing
    in your terminal.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您在终端中键入的所有命令都以 `$` 作为提示，以区分它们与普通代码。在终端中输入时，忽略 `$`。
- en: Hello CRA
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hello CRA
- en: 'You can install CRA and have it available locally for future projects. But
    that means updating it every once in a while. An even more convenient approach
    is to use the `npx` utility that comes with Node.js. It allows you to execute
    (hence the “x”) Node package scripts. You can run the CRA script once: it downloads
    and executes the last version, sets up your app, and it’s gone. Next time you
    need to start another project, you run it again without worrying about updates.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安装 CRA 并在将来的项目中使用它。但这意味着偶尔需要更新它。更方便的方法是使用随 Node.js 一起提供的 `npx` 实用程序。它允许您执行（因此称为“x”）Node
    包脚本。您可以运行 CRA 脚本一次：它会下载并执行最新版本，设置您的应用程序，然后就消失了。下次需要启动另一个项目时，再次运行它，无需担心更新。
- en: 'To get started, create a temporary directory and execute CRA:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请创建一个临时目录并执行 CRA：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Give it a minute or two to complete the process and you’ll be greeted with
    the success/welcome message:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 给它一两分钟的时间来完成这个过程，您将会看到成功/欢迎消息：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As the screen says, type:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如屏幕上所示，键入：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This opens your browser and points it to *http://localhost:3000/* where you
    can see a working React application (as shown in [Figure 6-1](#FIG0601)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开你的浏览器并指向 *http://localhost:3000/*，在那里你可以看到一个工作的 React 应用程序（如 [图 6-1](#FIG0601)
    所示）。
- en: '![rur2 0601](Images/rur2_0601.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0601](Images/rur2_0601.png)'
- en: Figure 6-1\. A new React app
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-1\. 一个新的 React 应用
- en: Now you can open *~/reactbook/test/hello/src/App.js* and make a small change.
    As soon as you save the changes, the browser will update with the new changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以打开 *~/reactbook/test/hello/src/App.js* 并做出一个小改变。只要你保存了更改，浏览器就会更新显示新的内容。
- en: Build and Deploy
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和部署
- en: 'Let’s say you’re happy with the changes and you’re ready to unleash the new
    app into the world. Go to the terminal/console window and press Ctrl + C. This
    kills the process and further changes will not auto-update in the browser. You’re
    ready. Type the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你对更改满意，并准备好将新应用发布到世界上。转到终端/控制台窗口并按下 Ctrl + C。这会终止进程，进一步的更改将不会自动更新到浏览器中。你已准备好了。键入以下内容：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the process of building and packaging the app, ready to be deployed.
    The build is found in a */build* folder (as shown in [Figure 6-2](#FIG0602)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构建和打包应用程序的过程，准备部署。构建结果位于 */build* 文件夹中（如 [图 6-2](#FIG0602) 所示）。
- en: '![rur2 0602](Images/rur2_0602.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0602](Images/rur2_0602.png)'
- en: Figure 6-2\. A new build of the React app
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-2\. React 应用程序的新构建
- en: 'Copy the contents of this folder to a web server—even a simple shared hosting
    will do—and you’re ready to announce the new app. When you want to make a change,
    repeat the process:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件夹的内容复制到 web 服务器上——即使是一个简单的共享主机也可以——你就可以宣布这个新应用了。当你想做出改变时，重复这个过程：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Mistakes Were Made
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 犯了错误
- en: When you save a file with an error in it (maybe you forgot to close a JSX tag),
    the ongoing build fails and you get an error message in both the console and the
    browser (see [Figure 6-3](#FIG0603) for an example).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存一个文件时，其中有错误（也许你忘记关闭一个 JSX 标签），持续的构建会失败，并且你会在控制台和浏览器中得到错误消息（参见 [图 6-3](#FIG0603)
    作为示例）。
- en: '![rur2 0603](Images/rur2_0603.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0603](Images/rur2_0603.png)'
- en: Figure 6-3\. An error
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 6-3\. 一个错误
- en: This is great! You get immediate feedback. To quote John C. Maxwell, “Fail early,
    fail often, but always fail forward.” Wise words to live by.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这太棒了！你可以立即获得反馈。引用约翰·C·麦克斯韦尔的话：“早失败，频繁失败，但始终向前失败。”这是生活的智慧之言。
- en: package.json and node_modules
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: package.json 和 node_modules
- en: The file *package.json* found in the root directory of the app contains various
    configurations for the app ([CRA](https://create-react-app.dev) has extensive
    documentation). One of the configuration pieces deals with dependencies, such
    as React and React-DOM. These dependencies are installed in the *node_modules*
    folder in the root of the app.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序根目录中的 *package.json* 文件包含应用程序的各种配置（[CRA](https://create-react-app.dev) 有广泛的文档）。其中一个配置部分涉及依赖项，例如
    React 和 React-DOM。这些依赖项安装在应用程序根目录中的 *node_modules* 文件夹中。
- en: The dependencies there are for developing and building the app, not for deployment.
    And they should not be included if you share the code of your app with friends,
    coworkers or the open-source community. For example, if you’re to share this app
    on GitHub, you do not include *node_modules*. When someone else wants to contribute
    or you want to contribute to another app, you install the dependencies locally.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那里的依赖项是用于开发和构建应用程序，而不是用于部署。如果你与朋友、同事或开源社区分享你的应用程序代码，它们不应包括在内。例如，如果你要在 GitHub
    上分享此应用程序，不要包括 *node_modules*。当其他人想要贡献或者你想要为另一个应用程序贡献时，可以在本地安装依赖项。
- en: 'Give this a try. Delete the whole *node_modules* folder. Then go to the root
    of the app and type:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试。删除整个 *node_modules* 文件夹。然后转到应用的根目录并键入：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `i` is for “install.” This way all the dependencies listed in your *package.json*
    (and their dependencies) are installed in a newly created *node_modules* directory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`i` 是“install”的意思。这样，*package.json* 中列出的所有依赖项（及其依赖项）都会安装到新创建的 *node_modules*
    目录中。'
- en: Poking Around the Code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览代码
- en: Let’s take a look around the code generated by CRA and note a few specifics
    regarding the app’s entry points (*index.html* and *index.js*) and its handling
    of JavaScript and CSS dependencies.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览一下 CRA 生成的代码，并注意一些关于应用程序入口点（*index.html* 和 *index.js*）以及它如何处理 JavaScript
    和 CSS 依赖项的具体信息。
- en: Indices
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引
- en: In *public/index.html* you’ll find the old school HTML index page, the root
    of everything rendered by the browser. This is where `<div id="root">` is defined
    and where React will render your top level component and all its children.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在*public/index.html*中，您将找到老式的HTML索引页面，这是浏览器渲染的一切的根源。这是定义`<div id="root">`的地方，也是React将渲染顶层组件及其所有子组件的地方。
- en: 'The file *src/index.js* is the main entry for the app as far as React is concerned.
    Note the top part:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*src/index.js*是就React而言应用程序的主要入口。请注意顶部部分：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'JavaScript: Modernized'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript：现代化
- en: The examples in the book so far worked only with simple components and made
    sure `React` and `ReactDOM` were available as *global variables*. As you move
    toward more complicated apps with multiple components, you need a plan for better
    organization. Sprinkling globals is dangerous (they tend to cause naming collisions)
    and relying on globals to always be present is flaky at best.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止书中的示例只使用了简单的组件，并确保`React`和`ReactDOM`作为*全局变量*可用。当您转向具有多个组件的更复杂的应用程序时，您需要一个更好的组织计划。随意散布全局变量是危险的（它们往往会导致命名冲突），并且依赖于全局变量始终存在是不可靠的。
- en: You need *modules*. Modules split up the different pieces of functionality that
    make up your app into small, manageable files. In general, you should have a separate
    module for each concern; modules and concerns have a one-to-one relationship.
    Some modules can be individual React components; some can simply be utilities
    related, or unrelated to React entirely—for example, a reducer, a custom hook,
    or a library that deals with formatting dates or currencies.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要*模块*。模块将构成应用程序的不同功能片段分割成小的、可管理的文件。一般来说，每个关注点应有一个单独的模块；模块和关注点具有一对一的关系。一些模块可以是单独的React组件；有些可能只是与React无关的实用程序，比如一个reducer、一个自定义hook或一个处理日期或货币格式化的库。
- en: 'The general template for a module is: declare requirements up top, export at
    the bottom, implement the “meat” in between. In other words, these three tasks:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模块的通用模板是：在顶部声明要求，在底部导出，在中间实现“核心”。换句话说，这三个任务：
- en: Require/import dependencies
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要/导入依赖项
- en: Provide an API in the form of a function/class/object
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个函数/类/对象形式的API
- en: Export the API
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出API
- en: 'For a React component, the template could look like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个React组件，模板可能如下所示：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Again, a convention that can prove helpful is: one module exports one React
    component.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，一个可能有帮助的约定是：一个模块只导出一个React组件。
- en: 'Did you notice the difference in importing React versus `MyOtherComponent`:
    `from ''react''` and `from ''./MyOtherComponent''`? The latter is a directory
    path—you’re telling the module to pull the dependency from a file location relative
    to the module, whereas the former is pulling a dependency from a shared place
    (*node_modules*).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否注意到了导入React与`MyOtherComponent`之间的区别：`from 'react'`和`from './MyOtherComponent'`？后者是一个目录路径——您告诉模块从相对于模块的文件位置拉取依赖项，而前者是从共享位置（*node_modules*）拉取依赖项。
- en: CSS
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS
- en: 'In `src/index.js` you can see how CSS is treated just like another module:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/index.js`中，您可以看到CSS被视为另一个模块一样处理：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The *src/index.css* should contain general styles, such as `body`, `html`, and
    so on, that are applicable to the whole page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/index.css*应包含通用样式，例如`body`、`html`等，适用于整个页面。'
- en: 'Other than the app-wide styles, you need specific styles for each component.
    Under the convention of having one CSS file (and one JS file) per React component,
    it’s a good idea to have *MyComponent.css* containing the styles related only
    to *MyComponent.js* and nothing else. Also a good idea could be to prefix all
    class names used in *MyComponent.js* with *MyComponent-*. For example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除了应用程序范围的样式之外，您还需要每个组件的特定样式。根据每个React组件只有一个CSS文件（和一个JS文件）的约定，将*MyComponent.css*中仅与*MyComponent.js*相关的样式放在这里是个好主意，不要有其他内容。另一个好主意可能是在*MyComponent.js*中使用的所有类名前缀都以*MyComponent-*开头。例如：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'While there are many other ways to author CSS, let’s keep it simple and old-school:
    anything that will run just in the browser without any transpilation.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多其他编写CSS的方法，但让我们保持简单和老派：任何在浏览器中运行而无需任何转译的东西。
- en: Moving On
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续进行
- en: 'Now you have an example of a simple writing, building, and deployment pipeline.
    With all this behind you it’s time to move on to more entertaining topics: building
    and testing a real app while taking advantage of the many features modern JavaScript
    has to offer.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个简单的写作、构建和部署流水线的示例。有了这些经验，现在是时候转向更有趣的话题了：利用现代JavaScript提供的许多功能来构建和测试一个真正的应用程序。
- en: At this point you can delete the `hello` app or keep it around for exploration
    and trying out ideas.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以删除`hello`应用程序，也可以保留它来进行探索和尝试想法。
