- en: Appendix A. Type Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 类型操作符
- en: TypeScript supports a rich set of type operators for working with types. Use
    [Table A-1](#type-operator-table) as a handy reference for when you want to learn
    more about an operator.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript支持丰富的类型操作符，用于处理类型。想要了解更多关于操作符的信息，请使用[表格 A-1](#type-operator-table)
    作为方便的参考。
- en: Table A-1\. Type operators
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 A-1. 类型操作符
- en: '| Type operator | Syntax | Use it on | Learn more |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 类型操作符 | 语法 | 在哪里使用 | 了解更多 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Type query | `typeof`, `instanceof` | Any type | [“Refinement”](ch06.html#refinement),
    [“Classes Declare Both Values and Types”](ch05.html#classes-declare-values-and-types)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 类型查询 | `typeof`, `instanceof` | 任何类型 | [“细化”](ch06.html#refinement), [“类声明值和类型”](ch05.html#classes-declare-values-and-types)
    |'
- en: '| Keys | `keyof` | Object types | [“The keyof operator”](ch06.html#keyof) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 键 | `keyof` | 对象类型 | [“keyof 操作符”](ch06.html#keyof) |'
- en: '| Property lookup | `O[K]` | Object types | [“The keying-in operator”](ch06.html#keying-in)
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 属性查找 | `O[K]` | 对象类型 | [“键入操作符”](ch06.html#keying-in) |'
- en: '| Mapped type | `[K in O]` | Object types | [“Mapped Types”](ch06.html#mapped-types)
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 映射类型 | `[K in O]` | 对象类型 | [“映射类型”](ch06.html#mapped-types) |'
- en: '| Modifier addition | `+` | Object types | [“Mapped Types”](ch06.html#mapped-types)
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 修饰符加法 | `+` | 对象类型 | [“映射类型”](ch06.html#mapped-types) |'
- en: '| Modifier subtraction | `-` | Object types | [“Mapped Types”](ch06.html#mapped-types)
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 修饰符减法 | `-` | 对象类型 | [“映射类型”](ch06.html#mapped-types) |'
- en: '| Read-only modifier | `readonly` | Object types, array types, tuple types
    | [“Objects”](ch03.html#object-type), [“Classes and Inheritance”](ch05.html#classes-and-inheritance),
    [“Read-only arrays and tuples”](ch03.html#readonly-array) |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 只读修饰符 | `readonly` | 对象类型，数组类型，元组类型 | [“对象”](ch03.html#object-type), [“类和继承”](ch05.html#classes-and-inheritance),
    [“只读数组和元组”](ch03.html#readonly-array) |'
- en: '| Optional modifier | `?` | Object types, tuple types, function parameter types
    | [“Objects”](ch03.html#object-type), [“Tuples”](ch03.html#tuple-type), [“Optional
    and Default Parameters”](ch04.html#optional-function-params) |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 可选修饰符 | `?` | 对象类型，元组类型，函数参数类型 | [“对象”](ch03.html#object-type), [“元组”](ch03.html#tuple-type),
    [“可选和默认参数”](ch04.html#optional-function-params) |'
- en: '| Conditional type | `?` | Generic types, type aliases, function parameter
    types | [“Conditional Types”](ch06.html#conditional-types) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 条件类型 | `?` | 泛型类型，类型别名，函数参数类型 | [“条件类型”](ch06.html#conditional-types) |'
- en: '| Non`null` assertion | `!` | Nullable types | [“Nonnull Assertions”](ch06.html#non-null-assertions),
    [“Definite Assignment Assertions”](ch06.html#definite-assignment-assertions) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 非`null`断言 | `!` | 可空类型 | [“非空断言”](ch06.html#non-null-assertions), [“明确赋值断言”](ch06.html#definite-assignment-assertions)
    |'
- en: '| Generic type parameter default | `=` | Generic types | [“Generic Type Defaults”](ch04.html#generic-type-defaults)
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 泛型类型参数默认值 | `=` | 泛型类型 | [“泛型类型默认值”](ch04.html#generic-type-defaults) |'
- en: '| Type assertion | `as`, `<>` | Any type | [“Type Assertions”](ch06.html#type-assertions),
    [“The const type”](ch06.html#const-types) |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 类型断言 | `as`, `<>` | 任何类型 | [“类型断言”](ch06.html#type-assertions), [“const 类型”](ch06.html#const-types)
    |'
- en: '| Type guard | `is` | Function return types | [“User-Defined Type Guards”](ch06.html#user-defined-type-guards)
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 类型守卫 | `is` | 函数返回类型 | [“用户定义的类型守卫”](ch06.html#user-defined-type-guards)
    |'
