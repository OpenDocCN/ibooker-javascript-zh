- en: Chapter 5\. Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。函数
- en: Function arguments
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 函数参数
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In one end, out the other
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从一端进，从另一端出
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As a return type
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为返回类型
- en: In [Chapter 2, “The Type System”](ch02.xhtml#the_type_system), you saw how to
    use type annotations to annotate values of variables. Now, you’ll see how to do
    the same with function parameters and return types—and why that can be useful.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 2 章，“类型系统”](ch02.xhtml#the_type_system) 中，你了解了如何使用类型注解注释变量的值。现在，你将看到如何对函数参数和返回类型进行相同操作——以及为什么这样做很有用。
- en: Function Parameters
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数参数
- en: 'Take the following `sing` function that takes in a `song` parameter and logs
    it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 看下面的 `sing` 函数，它接受一个 `song` 参数并将其记录下来：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What value type did the developer who wrote the `sing` function intend for the
    `song` parameter to be provided with?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 开发 `sing` 函数的开发者意图为 `song` 参数提供什么值类型？
- en: Is it a `string`? Is it an object with an overridden `toString()` method? Is
    this code buggy? *Who knows?!*
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `string` 吗？还是一个带有覆盖的 `toString()` 方法的对象？这段代码有 bug 吗？*谁知道呢？！*
- en: Without explicit type information declared, we may never know—TypeScript will
    consider it to be the `any` type, meaning the parameter’s type could be anything.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有显式声明类型信息，我们可能永远不会知道——TypeScript 将其视为 `any` 类型，这意味着参数的类型可以是任何东西。
- en: 'As with variables, TypeScript allows you to declare the type of function parameters
    with a type annotation. Now we can use a `: string` to tell TypeScript that the
    `song` parameter is of type `string`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '与变量类似，TypeScript 允许你使用类型注解声明函数参数的类型。现在我们可以使用 `: string` 告诉 TypeScript `song`
    参数是 `string` 类型：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Much better: now we know what type `song` is meant to be!'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更好：现在我们知道 `song` 是什么类型了！
- en: Note that you don’t need to add proper type annotations to function parameters
    for your code to be valid TypeScript syntax. TypeScript might yell at you with
    type errors, but the emitted JavaScript will still run. The previous code snippet
    missing a type declaration on the `song` parameter will still convert from TypeScript
    to JavaScript. [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)
    will cover how to configure TypeScript’s complaints about parameters that are
    implicitly of type `any` the way `song` is.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你不需要为函数参数添加正确的类型注解使代码成为有效的 TypeScript 语法。TypeScript 可能会报错，但生成的 JavaScript
    仍然会运行。前面的代码片段缺少对 `song` 参数的类型声明仍会从 TypeScript 转换为 JavaScript。[第 13 章，“配置选项”](ch13.xhtml#configuration_options)
    将讨论如何配置 TypeScript 对隐式为 `any` 类型的参数（如 `song`）的投诉方式。
- en: Required Parameters
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 必需参数
- en: Unlike JavaScript, which allows functions to be called with any number of arguments,
    TypeScript assumes that all parameters declared on a function are required. If
    a function is called with a wrong number of arguments, TypeScript will protest
    in the form of a type error. TypeScript’s argument counting will come into play
    if a function is called with either too few or too many arguments.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与 JavaScript 不同，它允许调用带有任意数量参数的函数，TypeScript 假定在函数上声明的所有参数都是必需的。如果使用错误数量的参数调用函数，TypeScript
    将以类型错误的形式抗议。TypeScript 的参数计数将在函数调用时出现参数数目不足或过多的情况。
- en: 'This `singTwo` function requires two parameters, so passing one argument and
    passing three arguments are both not allowed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `singTwo` 函数需要两个参数，因此传递一个参数和传递三个参数都是不允许的：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Enforcing that required parameters be provided to a function helps enforce type
    safety by making sure all expected argument values exist inside the function.
    Failing to ensure those values exist could result in unexpected behavior in code,
    such as the previous `singTwo` function logging `undefined` or ignoring an argument.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 强制要求函数提供必需的参数有助于通过确保所有预期的参数值存在于函数内部来强制执行类型安全性。未能确保这些值存在可能会导致代码中的意外行为，例如前面的 `singTwo`
    函数记录 `undefined` 或忽略参数。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*Parameter* refers to a function’s declaration of what it expects to receive
    as an argument. *Argument* refers to a value provided to a parameter in a function
    call. In the previous example, `first` and `second` are parameters, while strings
    such as `"Dreams"` are arguments.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*参数* 指的是函数声明期望接收的参数。*参数值* 是在函数调用中提供给参数的值。在前面的例子中，`first` 和 `second` 是参数，而像
    `"Dreams"` 这样的字符串是参数值。'
- en: Optional Parameters
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选参数
- en: Recall that in JavaScript, if a function parameter is not provided, its argument
    value inside the function defaults to `undefined`. Sometimes function parameters
    are not necessary to provide, and the intended use of the function is for that
    `undefined` value. We wouldn’t want TypeScript to report type errors for failing
    to provide arguments to those optional parameters. TypeScript allows annotating
    a parameter as optional by adding a `?` before the `:` in its type annotation—similar
    to optional object type properties.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在 JavaScript 中，如果未提供函数参数，则函数内部的参数值默认为 `undefined`。有时不需要提供函数参数，函数的预期用途是该
    `undefined` 值。我们不希望 TypeScript 报告未提供这些可选参数的参数错误。 TypeScript 允许通过在类型标注中的 `:` 前面添加
    `?` 将参数标注为可选，这与可选对象类型属性类似。
- en: Optional parameters don’t need to be provided to function calls. Their types
    therefore always have `| undefined` added as a union type.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数不需要在函数调用时提供。因此，它们的类型总是添加 `| undefined` 作为联合类型。
- en: 'In the following `announceSong` function, the `singer` parameter is marked
    optional. Its type is `string | undefined`, and it doesn’t need to be provided
    by callers of the function. If `singer` is provided, it may be a `string` value
    or `undefined`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的 `announceSong` 函数中，`singer` 参数被标记为可选。它的类型是 `string | undefined`，并且不需要由函数调用者提供。如果提供了
    `singer`，它可以是 `string` 类型或 `undefined`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These optional parameters are always implicitly able to be `undefined`. In the
    previous code, `singer` starts off as being of type `string | undefined`, then
    is narrowed to just `string` by the `if` statement.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可选参数始终隐式可以是 `undefined`。在前面的代码中，`singer` 最初被视为 `string | undefined` 类型，然后由
    `if` 语句缩小为仅 `string` 类型。
- en: Optional parameters are not the same as parameters with union types that happen
    to include `| undefined`. Parameters that aren’t marked as optional with a `?`
    must always be provided, even if the value is explicitly `undefined`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数与包括 `| undefined` 的联合类型的参数不同。没有用 `?` 标记为可选的参数必须始终提供，即使值明确为 `undefined`。
- en: 'The `singer` parameter in this `announceSongBy` function must be provided explicitly.
    It may be a `string` value or `undefined`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `announceSongBy` 函数中，`singer` 参数必须显式提供。它可以是 `string` 类型或 `undefined`：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Any optional parameters for a function must be the last parameters. Placing
    an optional parameter before a required parameter would trigger a TypeScript syntax
    error:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的任何可选参数必须是最后的参数。将可选参数放在必需参数之前会触发 TypeScript 语法错误：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Default Parameters
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认参数
- en: Optional parameters in JavaScript may be given a default value with an `=` and
    a value in their declaration. For these optional parameters, because a value is
    provided by default, their TypeScript type does not implicitly have the `| undefined`
    union added on inside the function. TypeScript will still allow the function to
    be called with missing or `undefined` arguments for those parameters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的可选参数可以在其声明中用 `=` 和一个值给出默认值。对于这些可选参数，因为默认情况下提供了一个值，它们的 TypeScript
    类型在函数内部不会隐式添加 `| undefined` 联合。 TypeScript 仍然允许以缺少或 `undefined` 参数调用这些参数的函数。
- en: TypeScript’s type inference works similarly for default function parameter values
    as it does for initial variable values. If a parameter has a default value and
    doesn’t have a type annotation, TypeScript will infer the parameter’s type based
    on that default value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的类型推断对默认函数参数值的工作方式与对初始变量值的工作方式类似。如果参数有默认值并且没有类型标注，TypeScript 将根据默认值推断参数的类型。
- en: 'In the following `rateSong` function, `rating` is inferred to be of type `number`,
    but is an optional `number | undefined` in the code that calls the function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的 `rateSong` 函数中，`rating` 被推断为 `number` 类型，但在调用函数的代码中是可选的 `number | undefined`：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Rest Parameters
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 剩余参数
- en: Some functions in JavaScript are made to be called with any number of arguments.
    The `...` spread operator may be placed on the last parameter in a function declaration
    to indicate any “rest” arguments passed to the function starting at that parameter
    should all be stored in a single array.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的某些函数可以用任意数量的参数调用。可以在函数声明的最后一个参数上放置 `...` 展开操作符，以指示从该参数开始传递给函数的所有“剩余”参数应该存储在一个单独的数组中。
- en: TypeScript allows declaring the types of these rest parameters similarly to
    regular parameters, except with a `[]` syntax added at the end to indicate it’s
    an array of arguments.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 允许声明这些剩余参数的类型方式与常规参数类似，只是在末尾添加了 `[]` 语法，以指示它是一个参数数组。
- en: 'Here, `singAllTheSongs` is allowed to take zero or more arguments of type `string`
    for its `songs` rest parameter:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`singAllTheSongs`可以接受零个或多个类型为`string`的参数作为它的`songs`剩余参数：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I’ll cover working with arrays in TypeScript in [Chapter 6, “Arrays”](ch06.xhtml#arrays_chapter).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第 6 章，“数组”](ch06.xhtml#arrays_chapter)中介绍在 TypeScript 中处理数组的方法。
- en: Return Types
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回类型
- en: 'TypeScript is perceptive: if it understands all the possible values returned
    by a function, it’ll know what type the function returns. In this example, `singSongs`
    is understood by TypeScript to return a `number`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是有洞察力的：如果它理解函数可能返回的所有可能值，它将知道函数的返回类型。在这个例子中，TypeScript 理解`singSongs`返回一个`number`：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If a function contains multiple `return` statements with different values, TypeScript
    will infer the return type to be a union of all the possible returned types.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数包含多个不同值的`return`语句，TypeScript 将推断返回类型为所有可能返回类型的联合。
- en: 'This `getSongAt` function would be inferred to return `string | undefined`
    because its two possible returned values are typed `string` and `undefined`, respectively:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`getSongAt`函数将被推断返回`string | undefined`，因为它的两个可能返回值分别是`string`和`undefined`：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Explicit Return Types
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式返回类型
- en: 'As with variables, I generally recommend not bothering to explicitly declare
    the return types of functions with type annotations. However, there are a few
    cases where it can be useful specifically for functions:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与变量一样，我通常建议不必为具有类型注释的函数显式声明返回类型。然而，有几种情况下这样做可能会有用：
- en: You might want to enforce functions with many possible returned values always
    return the same type of value.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能希望强制函数返回多种可能值时始终返回相同类型的值。
- en: TypeScript will refuse to try to reason through return types of recursive function.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 将拒绝尝试推理递归函数的返回类型。
- en: It can speed up TypeScript type checking in very large projects—i.e., those
    with hundreds of TypeScript files or more.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以加快在非常庞大的项目中 TypeScript 的类型检查速度——例如那些包含数百个 TypeScript 文件或更多的项目。
- en: Function declaration return type annotations are placed after the `)` following
    the list of parameters.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 函数声明的返回类型注释放置在参数列表后的`)`之后。
- en: 'For a function declaration, that falls just before the `{`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于函数声明，这是在`{`之前：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For arrow functions (also known as lambdas), that falls just before the `=>`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于箭头函数（也称为lambda函数），这是在`=>`之前：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If a `return` statement in a function returns a value not assignable to the
    function’s return type, TypeScript will give an assignability complaint.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数中的`return`语句返回一个不可分配给函数返回类型的值，TypeScript 将会给出一个可分配性的投诉。
- en: 'Here, the `getSongRecordingDate` function is explicitly declared as returning
    `Date | undefined`, but one of its return statements incorrectly provides a `string`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`getSongRecordingDate`函数明确声明为返回`Date | undefined`，但其中一个返回语句错误地提供了一个`string`：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Function Types
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数类型
- en: JavaScript allows us to pass functions around as values. That means we need
    a way to declare the type of a parameter or variable meant to hold a function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 允许我们将函数作为值传递。这意味着我们需要一种声明参数或变量类型的方式，以便保存函数。
- en: Function type syntax looks similar to an arrow function, but with a type instead
    of the body.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数类型的语法看起来类似于箭头函数，但其主体是一个类型而不是一个实现。
- en: 'This `nothingInGivesString` variable’s type describes a function with no parameters
    and a returned `string` value:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`nothingInGivesString`变量的类型描述了一个没有参数并返回`string`值的函数：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This `inputAndOutput` variable’s type describes a function with a `string[]`
    parameter, an optional `count` parameter, and a returned `number` value:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`inputAndOutput`变量的类型描述了一个带有`string[]`参数、可选的`count`参数以及返回`number`值的函数：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Function types are frequently used to describe callback parameters (parameters
    meant to be called as functions).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 函数类型经常用于描述回调参数（意味着将作为函数调用的参数）。
- en: 'For example, the following `runOnSongs` snippet declares the type of its `getSongAt`
    parameter to be a function that takes in an `index: number` and returns a `string`.
    Passing `getSongAt` matches that type, but `logSong` fails for taking in a `string`
    as its parameter instead of a `number`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，以下`runOnSongs`片段声明了它的`getSongAt`参数的类型为一个接受`index: number`并返回`string`的函数。传递`getSongAt`符合该类型，但`logSong`因为接受了一个`string`而不是`number`作为其参数而失败：'
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The error message for `runOnSongs(logSong)` is an example of an assignability
    error that includes a few levels of details. When complaining that two function
    types aren’t assignable to each other, TypeScript will typically give three levels
    of detail, with increasing levels of specificity:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`runOnSongs(logSong)`的错误消息是一个可赋值性错误的例子，其中包含几个层次的细节。当投诉两个函数类型不可分配给彼此时，TypeScript
    通常会给出三个层次的详细信息，具体性逐级增加：'
- en: The first indentation level prints out the two function types.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个缩进级别打印出这两种函数类型。
- en: The next indentation level specifies which part is mismatched.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个缩进级别指定了哪个部分不匹配。
- en: The last indentation level is the precise assignability complaint of the mismatched
    part.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个缩进级别是不匹配部分的精确可赋性投诉。
- en: 'In the previous code snippet, those levels are:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码片段中，这些层次是：
- en: '`logSong`s: `(strong: string) => string` is the provided type being assigned
    to the `getSongAt: (index: number) => string` recipient'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logSong`的`(strong: string) => string`是被赋予的类型，被分配给`getSongAt: (index: number)
    => string`的接收者'
- en: The `song` parameter of `logSong` being assigned to the `index` parameter of
    `getSongAt`
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logSong`的`song`参数被分配给`getSongAt`的`index`参数'
- en: '`song`’s `number` type is not assignable to `index`’s `string` type'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`song`的`number`类型不可赋给`index`的`string`类型'
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: TypeScript’s multiline errors can seem daunting at first. Reading through them
    line-by-line and understanding what each part is conveying goes a long way to
    comprehending the error.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的多行错误一开始可能看起来令人生畏。逐行阅读并理解每个部分所传达的内容对于理解错误有很大帮助。
- en: Function Type Parentheses
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数类型括号
- en: Function types may be placed anywhere that another type would be used. That
    includes union types.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 函数类型可以放置在其他任何类型可以使用的地方。这包括联合类型。
- en: 'In union types, parentheses may be used to indicate which part of an annotation
    is the function return or the surrounding union type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在联合类型中，括号可以用来指示注释的哪一部分是函数返回还是周围的联合类型：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Later chapters that introduce more type syntaxes will show other places where
    function types must be wrapped with parentheses.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 后续介绍更多类型语法的章节将展示函数类型必须用括号包裹的其他位置。
- en: Parameter Type Inferences
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数类型推断
- en: It would be cumbersome if we had to declare parameter types for every function
    we write, including inline functions used as parameters. Fortunately, TypeScript
    can infer the types of parameters in a function provided to a location with a
    declared type.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们必须为我们编写的每个函数声明参数类型，包括用作参数的内联函数，那将是很麻烦的。幸运的是，TypeScript 可以推断函数中参数的类型，前提是这些函数被提供给带有声明类型的位置。
- en: 'This `singer` variable is known to be a function that takes in a parameter
    of type `string`, so the `song` parameter in the function later assigned to `singer`
    is known to be a `string`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`singer`变量被知道是一个接受`string`类型参数的函数，所以后来分配给`singer`的函数中的`song`参数被知道是一个`string`：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Functions passed as arguments to parameters with function parameter types will
    have their parameter types inferred as well.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 函数作为具有函数参数类型的参数传递时，它们的参数类型也将被推断。
- en: 'For example, the `song` and `index` parameters here are inferred by TypeScript
    to be `string` and `number`, respectively:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这里，TypeScript 推断`song`和`index`参数分别为`string`和`number`：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Function Type Aliases
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数类型别名
- en: Remember type aliases from [Chapter 3, “Unions and Literals”](ch03.xhtml#unions_and_literals)?
    They can be used for function types as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 记得第三章“联合和字面值”中的类型别名吗？它们也可以用于函数类型。
- en: 'This `StringToNumber` type aliases a function that takes in a `string` and
    returns a `number`, which means it can be used later to describe the types of
    variables:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`StringToNumber`类型别名了一个接受`string`并返回`number`的函数，这意味着它可以用来描述变量的类型：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Similarly, function parameters can themselves be typed with aliases that happen
    to refer to a function type.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，函数参数本身可以用别名进行类型化，这些别名碰巧指向一个函数类型。
- en: 'This `usesNumberToString` function has a single parameter which is itself the
    `NumberToString` aliased function type:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`usesNumberToString`函数有一个参数，它本身是`NumberToString`别名的函数类型：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Type aliases are particularly useful for function types. They can save a lot
    of horizontal space in having to repeatedly write out parameters and/or return
    types.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 类型别名在函数类型中特别有用。它们可以节省大量水平空间，而无需重复编写参数和/或返回类型。
- en: More Return Types
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多返回类型
- en: 'Now, let’s look at two more return types: `void` and `never`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看两种更多的返回类型：`void`和`never`。
- en: Void Returns
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空返回
- en: Some functions aren’t meant to return any value. They either have no `return`
    statements or only have `return` statements that don’t return a value. TypeScript
    allows using a `void` keyword to refer to the return type of such a function that
    returns nothing.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数不打算返回任何值。它们要么没有`return`语句，要么只有不返回值的`return`语句。TypeScript 允许使用`void`关键字来指代返回什么都没有的函数的返回类型。
- en: 'Functions whose return type is `void` may not return a value. This `logSong`
    function is declared as returning `void`, so it’s not allowed to return a value:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型为`void`的函数可能不会返回值。这个`logSong`函数被声明为返回`void`，因此不允许返回值：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`void` can be useful as the return type in a function type declaration. When
    used in a function type declaration, `void` indicates that any returned value
    from the function would be ignored.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`void`可以作为函数类型声明中的返回类型很有用。在函数类型声明中使用时，`void`表示函数的任何返回值都将被忽略。'
- en: 'For example, this `songLogger` variable represents a function that takes in
    a `song: string` and doesn’t return a value:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，这个`songLogger`变量表示一个接受`song: string`并且不返回值的函数：'
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that although JavaScript functions all return `undefined` by default if
    no real value is returned, `void` is not the same as `undefined`. `void` means
    the return type of a function will be ignored, while `undefined` is a literal
    value to be returned. Trying to assign a value of type `void` to a value whose
    type instead includes `undefined` is a type error:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管 JavaScript 函数如果没有返回真正的值，默认都会返回`undefined`，但`void`并不等同于`undefined`。`void`表示函数的返回类型将被忽略，而`undefined`是要返回的字面值。试图将`void`类型的值分配给其类型包括`undefined`的值是一种类型错误：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The distinction between `undefined` and `void` returns is particularly useful
    for ignoring any returned value from a function passed to a location whose type
    is declared as returning `void`. For example, the built-in `forEach` method on
    arrays takes in a callback that returns `void`. Functions provided to `forEach`
    can return any value they want. `records.push(record)` in the following `saveRecords`
    function returns a `number` (the returned value from an array’s `.push()`), yet
    is still allowed to be the returned value for the arrow function passed to `newRecords.forEach`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`undefined`和`void`返回之间的区别对于忽略从传递给返回类型声明为`void`的位置的函数返回的任何值特别有用。例如，数组上的内置`forEach`方法接受一个返回`void`的回调。提供给`forEach`的函数可以返回任何值。以下`saveRecords`函数中的`records.push(record)`返回一个`number`（从数组的`.push()`返回的值），但仍然允许作为传递给`newRecords.forEach`的箭头函数的返回值：'
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `void` type is not JavaScript. It’s a TypeScript keyword used to declare
    return types of functions. Remember, it’s an indication that a function’s returned
    value isn’t meant to be used, not a value that can itself be returned.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`void`类型不是 JavaScript。它是 TypeScript 中用于声明函数返回类型的关键字。记住，它表示函数的返回值不打算被使用，而不是可以被返回的值。'
- en: Never Returns
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 永不返回
- en: Some functions not only don’t return a value, but aren’t meant to return at
    all. Never-returning functions are those that always throw an error or run an
    infinite loop (hopefully intentionally!).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数不仅不返回值，而且根本不打算返回。永不返回的函数是那些总是抛出错误或运行无限循环的函数（希望是有意的！）。
- en: 'If a function is meant to never return, adding an explicit `: never` type annotation
    indicates that any code after a call to that function won’t run. This `fail` function
    only ever throws an error, so it can help TypeScript’s control flow analysis with
    type narrowing `param` to `string`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '如果一个函数永远不会返回，添加显式的`: never`类型注释表示调用该函数后的任何代码都不会运行。这个`fail`函数只会抛出错误，因此它可以帮助
    TypeScript 的控制流分析将`param`缩小到`string`：'
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`never` is not the same as `void`. `void` is for a function that returns nothing.
    `never` is for a function that never returns.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`never`不同于`void`。`void`用于不返回任何内容的函数。`never`用于永远不返回的函数。'
- en: Function Overloads
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数重载
- en: 'Some JavaScript functions are able to be called with drastically different
    sets of parameters that can’t be represented just by optional and/or rest parameters.
    These functions can be described with a TypeScript syntax called *overload signatures*:
    declaring different versions of the function’s name, parameters, and return types
    multiple times before one final *implementation signature* and the body of the
    function.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 JavaScript 函数可以使用完全不同的参数集调用，这些参数集不能仅通过可选和/或剩余参数表示。这些函数可以用 TypeScript 语法描述为*重载签名*：在最终的*实现签名*和函数体之前多次声明函数名称、参数和返回类型的不同版本。
- en: When determining whether to emit a syntax error for a call to an overloaded
    function, TypeScript will only look at the function’s overload signatures. The
    implementation signature is only used by the function’s internal logic.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定是否为重载函数调用发出语法错误时，TypeScript 只会查看函数的重载签名。实现签名仅由函数的内部逻辑使用。
- en: 'This `createDate` function is meant to be called either with one `timestamp`
    parameter or with three parameters—`month`, `day`, and `year`. Calling with either
    of those numbers of arguments is allowed, but calling with two arguments would
    cause a type error because no overload signature allows for two arguments. In
    this example, the first two lines are the overload signatures, and the third line
    is the implementation signature:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `createDate` 函数旨在使用一个 `timestamp` 参数或三个参数 `month`、`day` 和 `year` 来调用。允许使用这些参数数量中的任何一个进行调用，但是如果使用两个参数进行调用，则会导致类型错误，因为没有重载签名允许两个参数。在此示例中，前两行是重载签名，第三行是实现签名：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Overload signatures, as with other type system syntaxes, are erased when compiling
    TypeScript to output JavaScript.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 重载签名与其他类型系统语法一样，在将 TypeScript 编译为输出 JavaScript 时会被擦除。
- en: 'The previous code snippet’s function would compile to roughly the following
    JavaScript:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的函数将编译为大致以下 JavaScript：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Warning
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告。
- en: Function overloads are generally used as a last resort for complex, difficult-to-describe
    function types. It’s generally better to keep functions simple and avoid using
    function overloads when possible.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 函数重载通常用作复杂、难以描述的函数类型的最后手段。通常最好保持函数简单，并在可能时避免使用函数重载。
- en: Call-Signature Compatibility
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用签名兼容性。
- en: The implementation signature used for an overloaded function’s implementation
    is what the function’s implementation uses for parameter types and return type.
    Thus, the return type and each parameter in a function’s overload signatures must
    be assignable to the parameter at the same index in its implementation signature.
    In other words, the implementation signature has to be compatible with all of
    the overload signatures.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 用于重载函数实现的实现签名是函数实现使用的参数类型和返回类型。因此，函数重载签名中的返回类型和每个参数必须可分配给其实现签名中相同索引处的参数。换句话说，实现签名必须与所有重载签名兼容。
- en: 'This `format` function’s implementation signature declares its first parameter
    to be a `string`. While the first two overload signatures are compatible for also
    being type `string`, the third overload signature’s `() => string` type is not
    compatible:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `format` 函数的实现签名声明其第一个参数为 `string`。虽然前两个重载签名也兼容于类型 `string`，但第三个重载签名的 `()
    => string` 类型是不兼容的：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结。
- en: 'In this chapter, you saw how a function’s parameters and return types can be
    inferred or explicitly declared in TypeScript:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您看到了如何在 TypeScript 中推断或显式声明函数的参数和返回类型：
- en: Declaring function parameter types with type annotations
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明函数参数类型时使用类型注解。
- en: Declaring optional parameters, default values, and rest parameters to change
    type system behavior
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可选参数、默认值和剩余参数来改变类型系统行为。
- en: Declaring function return types with type annotations
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类型注解声明函数返回类型。
- en: Describing functions that don’t return a usable value with the `void` type
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `void` 类型描述不返回可用值的函数。
- en: Describing functions that don’t return at all with the `never` type
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `never` 类型描述根本不返回的函数。
- en: Using function overloads to describe varying function call signatures
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数重载描述不同的函数调用签名。
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示。
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/functions*](https://learningtypescript.com/functions).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了本章的阅读，请在 [*https://learningtypescript.com/functions*](https://learningtypescript.com/functions)
    上练习您所学的内容。
- en: What makes a TypeScript project good?
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 什么使得 TypeScript 项目变得优秀？
- en: ''
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It functions well.
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它的功能良好。
