- en: Chapter 13\. Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章\. 结论
- en: We’re nearing the end of our journey together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程即将结束。
- en: We’ve covered what types are and why they’re useful; how TSC works; what types
    TypeScript supports; how TypeScript’s type system handles inference, assignability,
    refinement, widening, and totality; the rules of contextual typing; how variance
    works; and how to use type operators. We’ve covered functions and classes and
    interfaces, iterators and iterables and generators, overloads, polymorphic types,
    mixins, decorators, and the various escape hatches you can use once in a while
    to sacrifice safety to get your code out before your deadline. We explored the
    different ways to handle exceptions safely and their trade-offs, and how to use
    types to make concurrent, parallel, and asynchronous programs safe. We dove into
    using TypeScript with popular frameworks like Angular and React, and how namespaces
    and modules work. We looked at using, building, and deploying TypeScript on the
    frontend and on the backend, and talked about how to gradually migrate code to
    TypeScript, how to use type declarations, how to publish your code to NPM so others
    can use it, how to safely use third-party code, and how to build your TypeScript
    projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了什么是类型及其有用性；TSC 的工作原理；TypeScript 支持的类型；TypeScript 的类型系统如何处理推断、可赋值性、细化、扩展和完整性；上下文类型的规则；协变性的工作原理；以及如何使用类型操作符。我们还涉及了函数、类、接口、迭代器、可迭代对象和生成器、重载、多态类型、混入、装饰器，以及偶尔可以使用的各种逃生舱口，以牺牲安全性以在截止日期之前完成代码。我们探讨了安全处理异常的不同方法及其权衡，以及如何使用类型使并发、并行和异步程序变得安全。我们深入探讨了如何在流行框架如
    Angular 和 React 中使用 TypeScript，以及命名空间和模块的工作方式。我们还讨论了在前端和后端使用、构建和部署 TypeScript
    的方法，以及如何逐步迁移代码到 TypeScript，如何使用类型声明，如何将代码发布到 NPM 以供他人使用，如何安全地使用第三方代码，以及如何构建你的
    TypeScript 项目。
- en: I hope that I’ve infected you with the gospel of static types. I hope you now,
    at times, find yourself sketching out programs in types before implementing them,
    and I hope you’ve gained a deeply intuitive understanding of how you can use types
    to make your applications safer. I hope that I’ve changed your view of the world,
    at least a little bit, and that you now think in types when you write code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我已经用静态类型的福音感染了你。我希望你现在偶尔会在实现之前用类型勾勒出程序，希望你已经深刻直观地理解了如何利用类型使你的应用程序更安全。我希望我至少在某种程度上改变了你对世界的看法，希望你现在在编写代码时会思考类型。
- en: You’re now equipped to teach others about TypeScript. Advocate for safety, and
    help make your company’s and your friends’ code better and more fun to write.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经具备了向他人教授 TypeScript 的能力。倡导安全性，帮助提升你所在公司和你朋友们编写代码的乐趣和质量。
- en: Finally, keep exploring. TypeScript probably isn’t your first language, and
    it probably won’t be your last. Keep learning about new ways to program, new ways
    to think about types, and new ways to think about the trade-offs between safety
    and ease of use. Maybe you’ll create the next big thing after TypeScript, and
    maybe I’ll be the one to write about it someday…
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，继续探索吧。TypeScript 可能不是你的第一种语言，也可能不是你的最后一种。继续学习新的编程方式，新的类型思维方式，以及在安全性和易用性之间权衡的新方式。也许你会在
    TypeScript 之后创造下一个大事件，也许某天我会成为写下这一切的人…
