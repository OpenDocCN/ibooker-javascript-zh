- en: Chapter 16\. Working with the Console
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 16 章\. 使用控制台
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Despite your best intentions, things can and will go wrong with your code. There
    are several debugging tools available to you. Today’s browsers have powerful debuggers
    built in to them that let you step through code and inspect the values of variables
    and expressions. Sometimes, though, you might want to keep it simple and use the
    console.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您的意图良好，但您的代码可能出现问题。有几种调试工具可供使用。今天的浏览器内置了强大的调试器，可让您逐步执行代码并检查变量和表达式的值。但有时，您可能希望保持简单并使用控制台。
- en: In its most basic form, you interact with the console by calling `console.log`
    with a message. This message is printed to the browser’s JavaScript console. While
    more verbose than breakpoint-based debugging, sometimes it can still be useful
    to log and inspect values at runtime.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的形式是通过调用`console.log`与消息进行交互。此消息将打印到浏览器的 JavaScript 控制台。虽然比基于断点的调试更冗长，但有时仍然可以在运行时记录和检查值。
- en: Other than a simple `console.log`, there are other things you can do with the
    console such as group messages, use counters, display tables, and even style your
    output with CSS. There are also other log levels (error, warn, debug) that you
    can use to categorize and filter your console messages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的`console.log`外，您还可以执行其他操作，如分组消息、使用计数器、显示表格，甚至使用 CSS 样式化输出。还有其他日志级别（错误、警告、调试）可供分类和筛选控制台消息使用。
- en: Styling Console Output
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化控制台输出
- en: Problem
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to apply some CSS to your console log output. For example, maybe you
    want to make the font larger and change the color.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望对控制台日志输出应用一些 CSS 样式。例如，也许您想要增加字体大小并改变颜色。
- en: Solution
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `%c` *directive* in your log message to denote what text you want styled.
    For each usage of `%c`, add another argument to `console.log` containing CSS styles
    (see [Example 16-1](#example16-1)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的日志消息中使用`%c` *指令*来指示您想要样式化的文本。对于每个`%c`的使用，都要在`console.log`中添加另一个参数，其中包含 CSS
    样式（参见[示例 16-1](#example16-1)）。
- en: Example 16-1\. Styling console output
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-1\. 样式化控制台输出
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Figure 16-1](#img_styledConsole) shows what this styled text looks like in
    the console.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-1](#img_styledConsole)展示了控制台中样式文本的效果。'
- en: '![The styled console output](assets/wacb_1601.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![样式化的控制台输出](assets/wacb_1601.png)'
- en: Figure 16-1\. The styled console output
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-1\. 样式化的控制台输出
- en: Discussion
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`console.log` takes a variable number of arguments. For each use of the `%c`
    directive, there should be a corresponding extra argument containing the styles
    to apply for that section of text.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log`接受可变数量的参数。对于每个`%c`指令的使用，应有相应的额外参数，其中包含要应用于该文本部分的样式。'
- en: Notice in [Figure 16-1](#img_styledConsole) that the styles are reset between
    each `%c` section. The italic font from the first section does not carry over
    into the bold font from the second section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在[图 16-1](#img_styledConsole)中，每个`%c`部分之间的样式会被重置。第一部分的斜体字体不会延续到第二部分的粗体字体中。
- en: Using Log Levels
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志级别
- en: Problem
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to distinguish between informational, warning, and error messages in
    the console.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在控制台中区分信息、警告和错误消息。
- en: Solution
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Instead of `console.log`, use `console.info`, `console.warn`, and `console.error`,
    respectively (see [Example 16-2](#example16-2)). These messages are styled differently,
    and most browsers allow you to filter log messages by their level.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 分别使用`console.info`，`console.warn`和`console.error`代替`console.log`（参见[示例 16-2](#example16-2)）。这些消息的样式不同，并且大多数浏览器允许您按其级别筛选日志消息。
- en: Example 16-2\. Using different log levels
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-2\. 使用不同的日志级别
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The messages are styled differently, with icons, as shown in [Figure 16-2](#img_logLevels).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 消息显示不同的样式和图标，如[图 16-2](#img_logLevels)所示。
- en: '![The different log levels (shown in Chrome)](assets/wacb_1602.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![不同的日志级别（在 Chrome 中显示）](assets/wacb_1602.png)'
- en: Figure 16-2\. The different log levels (shown in Chrome)
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-2\. 不同的日志级别（在 Chrome 中显示）
- en: Discussion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Warning and error messages also present you with a stack trace that can be expanded
    and viewed in the console. This makes it easy to track down where an error occurred.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 警告和错误消息还会显示可以展开并在控制台中查看的堆栈跟踪。这使得跟踪错误发生的位置变得更加容易。
- en: Creating Named Loggers
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建命名记录器
- en: Problem
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to log messages from different modules of your app, prefixed with the
    module name in a given color.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望以给定颜色的模块名称为前缀记录来自应用程序不同模块的消息。
- en: Solution
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `Function.prototype.bind` on the `console.log` function, binding the module
    name prefix and color style (see [Example 16-3](#example16-3)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`console.log`函数上使用`Function.prototype.bind`，绑定模块名前缀和颜色样式（参见[示例 16-3](#example16-3)）。
- en: Example 16-3\. Creating a named logger
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-3\. 创建一个命名的日志记录器
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `createLogger` function returns a new log function that you can call just
    like `console.log`, but messages have a colored prefix (see [Example 16-4](#example16-4)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`createLogger`函数返回一个新的日志函数，你可以像调用`console.log`一样调用它，但消息有一个彩色前缀（参见[示例 16-4](#example16-4)）。'
- en: Example 16-4\. Using the named loggers
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-4\. 使用命名的日志记录器
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This renders log messages with colored prefixes, as shown in [Figure 16-3](#img_loggers).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这会按照彩色前缀渲染日志消息，如[图 16-3](#img_loggers)所示。
- en: '![Colored loggers (shown in Chrome)](assets/wacb_1603.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![彩色日志记录器（在Chrome中显示）](assets/wacb_1603.png)'
- en: Figure 16-3\. Colored loggers (shown in Chrome)
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-3\. 彩色日志记录器（在Chrome中显示）
- en: Discussion
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Calling `bind` in this way creates a *partially applied* version of the `console.log`
    function that automatically adds the prefix and color. Any further arguments you
    pass to it are added after the prefix and color style.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式调用`bind`会创建`console.log`函数的*部分应用*版本，它会自动添加前缀和颜色。你传递给它的任何其他参数都会在前缀和颜色样式之后添加。
- en: Displaying an Array of Objects in a Table
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表格中显示对象数组
- en: Problem
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have an array of objects that you want to log in an easily readable way.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个对象数组，想要以易读的方式记录它们。
- en: Solution
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Pass the array to `console.table` and it displays a table. There is a column
    for each object property, and a row for each object in the array (see [Example 16-5](#example16-5)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组传递给`console.table`，它会显示一个表格。每个对象属性对应一列，数组中每个对象对应一行（参见[示例 16-5](#example16-5)）。
- en: Example 16-5\. Logging a table
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-5\. 记录表格
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Figure 16-4](#img_table) shows how the data is logged in table form.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-4](#img_table)展示了数据以表格形式记录的方式。'
- en: '![The different log levels (shown in Chrome)](assets/wacb_1604.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![不同的日志级别（在Chrome中显示）](assets/wacb_1604.png)'
- en: Figure 16-4\. The logged table (shown in Chrome)
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-4\. 日志记录的表格（在Chrome中显示）
- en: Discussion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You can limit what object properties are shown by passing a second argument
    to `console.table`. This argument is an array of property names. If given, only
    those properties are shown in the table output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`console.table`传递第二个参数，可以限制显示的对象属性。这个参数是一个属性名的数组。如果提供了这个参数，则只会显示这些属性在表格输出中。
- en: '`console.table` can also be used with an object. In [Example 16-6](#code_objectTable),
    the `index` column contains the property names rather than array indices.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.table`也可以与对象一起使用。在[示例 16-6](#code_objectTable)中，`index`列包含属性名而不是数组索引。'
- en: Example 16-6\. Passing an object to `console.table`
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-6\. 向`console.table`传递一个对象
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 16-6](#code_objectTable) produces the table in [Figure 16-5](#img_objectTable).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 16-6](#code_objectTable)生成了[图 16-5](#img_objectTable)中的表格。'
- en: '![The different log levels (shown in Chrome)](assets/wacb_1605.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![不同的日志级别（在Chrome中显示）](assets/wacb_1605.png)'
- en: Figure 16-5\. The logged table (shown in Chrome)
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-5\. 记录的表格（在Chrome中显示）
- en: '[Example 16-7](#code_limitColumns) logs the users in a table, but only shows
    the firstName and lastName columns (see [Figure 16-6](#img_tableColumns)).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 16-7](#code_limitColumns)将用户记录在表格中，但只显示firstName和lastName列（参见[图 16-6](#img_tableColumns)）。'
- en: Example 16-7\. Limiting table columns
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-7\. 限制表格列
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Showing only the first and last name columns (shown in Chrome)](assets/wacb_1606.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![仅显示名字和姓氏列（在Chrome中显示）](assets/wacb_1606.png)'
- en: Figure 16-6\. Showing only the first and last name columns (shown in Chrome)
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-6\. 仅显示名字和姓氏列（在Chrome中显示）
- en: The rendered table is also sortable. You can click on a column name to sort
    the table by that column (see [Figure 16-7](#img_tableSorted)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的表格也是可排序的。你可以点击列名以按该列排序表格（参见[图 16-7](#img_tableSorted)）。
- en: '![Sorting the table by last name (shown in Chrome)](assets/wacb_1607.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![按姓氏排序表格（在Chrome中显示）](assets/wacb_1607.png)'
- en: Figure 16-7\. Sorting the table by last name (shown in Chrome)
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-7\. 按姓氏排序表格（在Chrome中显示）
- en: Using Console Timers
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制台计时器
- en: Problem
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to calculate the time taken by some code, for debugging purposes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要计算某段代码的执行时间，用于调试目的。
- en: Solution
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `console.time` and `console.timeEnd` methods (see [Example 16-8](#example16-8)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`console.time`和`console.timeEnd`方法（参见[示例 16-8](#example16-8)）。
- en: Example 16-8\. Using `console.time` and `console.timeEnd`
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-8\. 使用`console.time`和`console.timeEnd`
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you call `console.time` with a timer name, it starts the named timer. Go
    perform whatever work you want to profile and when you’re done, call `console.timeEnd`
    with the same timer name. The elapsed time, along with the timer name, is printed
    to the console.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`console.time`并指定一个计时器名称时，它会启动命名的计时器。进行要进行性能分析的工作，完成后，使用相同的计时器名称调用`console.timeEnd`。消耗的时间和计时器名称将被打印到控制台上。
- en: If you call `console.timeEnd` with a timer name that doesn’t match a previous
    call to `console.time`, no error is thrown, but a warning message is logged to
    the console that the timer does not exist.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用一个不存在的计时器名称调用 `console.timeEnd`，不会抛出错误，但会在控制台上记录一个警告消息，指示计时器不存在。
- en: Discussion
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This is different from using `window.performance.mark` and `window.perfor⁠mance​.measure`
    as described in [Chapter 15](ch15.html#ch_performance). `console.time` is used
    for ad hoc timing, usually during debugging. The notable difference is that `console.time`
    and `console.timeEnd` do *not* add entries to the performance timeline. Once you
    call `console.timeEnd` for a given timer, that timer is destroyed. If you want
    timing data that is persisted in memory, you might want to use the Performance
    API instead.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这与在 [第 15 章](ch15.html#ch_performance) 中描述的 `window.performance.mark` 和 `window.perfor⁠mance​.measure`
    不同。`console.time` 通常在调试期间用于临时计时。显著的区别在于，`console.time` 和 `console.timeEnd` 不会向性能时间线添加条目。一旦为给定计时器调用了
    `console.timeEnd`，该计时器就会被销毁。如果需要在内存中持久保存计时数据，你可能会想使用性能 API。
- en: Using Console Groups
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制台分组
- en: Problem
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to better organize groups of log messages.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 想要更好地组织日志消息的组。
- en: Solution
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `console.group` to create nested groups of messages that can be expanded
    and collapsed (see [Example 16-9](#example16-9)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `console.group` 创建可以展开和折叠的嵌套消息组（参见 [示例 16-9](#example16-9)）。
- en: Example 16-9\. Using console groups
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-9\. 使用控制台分组
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This prints grouped messages to the console. You can expand and collapse the
    groups so you can focus on the specific group you’re interested in, as shown in
    [Figure 16-8](#img_tableGroups).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在控制台中打印分组消息。你可以展开和折叠这些组，以便专注于你感兴趣的特定组，就像 [图 16-8](#img_tableGroups) 中所示。
- en: '![Grouped console messages (shown in Chrome)](assets/wacb_1608.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![分组的控制台消息（在 Chrome 中显示）](assets/wacb_1608.png)'
- en: Figure 16-8\. Grouped console messages (shown in Chrome)
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-8\. 分组的控制台消息（在 Chrome 中显示）
- en: Discussion
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You can also use console groups to trace complex algorithms. Groups can be nested
    several levels deep, making it much easier to follow your log messages during
    a complex calculation. This is particularly valuable when there are a lot of messages
    to sort through. If you want a group to be collapsed by default, you can call
    `console.groupCollapsed` instead of `console.group`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用控制台分组来追踪复杂算法。分组可以嵌套多层，这样在复杂计算过程中跟踪日志消息会更加轻松。当需要默认折叠一个组时，可以使用 `console.groupCollapsed`
    而不是 `console.group`。
- en: Using Counters
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用计数器
- en: Problem
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to count the number of times a part of your code is called.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 想要统计你的代码中某部分被调用的次数。
- en: Solution
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Call `console.count` with a counter name that is unique to your code. Every
    time the `console.count` statement is executed, it prints and increments the counter
    value. This lets you keep track of how many times the call to `console.count`
    was hit.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个在你的代码中唯一的计数器名称调用 `console.count`。每次执行 `console.count` 语句时，它都会打印并递增计数器的值。这样你可以跟踪
    `console.count` 被调用的次数。
- en: Example 16-10\. Using counters
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-10\. 使用计数器
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 16-10](#code_counters) prints out the output shown in [Example 16-11](#example16-11).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 16-10](#code_counters) 输出的结果如 [示例 16-11](#example16-11) 所示。'
- en: Example 16-11\. The counter output
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-11\. 计数器输出
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Discussion
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`console.count` is useful for tracing loop iterations or recursive function
    calls. Like other console methods, it is primarily intended for debugging purposes
    and isn’t meant for collecting usage metrics.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.count` 用于追踪循环迭代或递归函数调用。和其他控制台方法一样，它主要用于调试目的，而不是用于收集使用指标。'
- en: You can also call `console.count` without any arguments, in which case it uses
    a counter called `default`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以不带任何参数调用 `console.count`，这样它将使用一个名为 `default` 的计数器。
- en: Logging a Variable and Its Value
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录变量及其值
- en: Problem
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to log a variable name and its value without having to type the name
    twice.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 想要记录一个变量名及其值，而不必重复输入变量名。
- en: Solution
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use object shorthand notation to log an object containing the variable (see
    [Example 16-12](#example16-12)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对象简写符号来记录包含变量的对象（参见 [示例 16-12](#example16-12)）。
- en: Example 16-12\. Logging a variable and its value
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-12\. 记录变量及其值
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This creates an object whose name is `username`, and whose value is the value
    of the `username` variable, and logs it to the console, as shown in [Figure 16-9](#img_nameValue).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `username` 的对象，其值为 `username` 变量的值，并将其记录到控制台中，如 [图 16-9](#img_nameValue)
    所示。
- en: '![Object with the named value (shown in Chrome)](assets/wacb_1609.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![具有命名值的对象（在 Chrome 中显示）](assets/wacb_1609.png)'
- en: Figure 16-9\. Object with the named value (shown in Chrome)
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-9\. 具有命名值的对象（在 Chrome 中显示）
- en: Discussion
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Before object shorthand notation, you would need to type the variable name twice
    (see [Example 16-13](#example16-13)).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象简写符号出现之前，您需要两次输入变量名（参见 [示例 16-13](#example16-13)）。
- en: Example 16-13\. Logging a variable and its value without object shorthand
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-13\. 记录变量及其值（不使用对象简写）
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It’s not much of a change, but it’s a quick time-saving shortcut.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是很大的改变，但是它是一个快速省时的捷径。
- en: Logging a Stack Trace
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录堆栈跟踪
- en: Problem
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to see a stack trace of where the code is currently being executed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望查看代码当前执行时的堆栈跟踪。
- en: Solution
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `console.trace` to log a trace of the current call stack (see [Example 16-14](#example16-14)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `console.trace` 记录当前调用堆栈的跟踪（参见 [示例 16-14](#example16-14)）。
- en: Example 16-14\. Using `console.trace`
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-14\. 使用 `console.trace`
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This outputs the stack trace shown in [Figure 16-10](#img_trace).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出显示在 [图 16-10](#img_trace) 中的堆栈跟踪。
- en: '![Logging a stack trace (shown in Chrome)](assets/wacb_1610.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![记录堆栈跟踪（在 Chrome 中显示）](assets/wacb_1610.png)'
- en: Figure 16-10\. Logging a stack trace (shown in Chrome)
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-10\. 记录堆栈跟踪（在 Chrome 中显示）
- en: Discussion
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: A stack trace is a useful debugging tool. It shows the current state of the
    call stack. The first entry in the stack trace is the `console.trace` call itself.
    Then, the next entry is whatever function called the function containing the `console.trace`
    call, and so on. In most browsers, you can click on a stack trace element to jump
    to that line of code. You can use this to add log statements or set breakpoints.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈跟踪是一个有用的调试工具。它显示调用堆栈的当前状态。堆栈跟踪中的第一个条目是 `console.trace` 调用本身。然后，下一个条目是调用包含
    `console.trace` 调用的函数的函数，依此类推。在大多数浏览器中，您可以单击堆栈跟踪元素以跳转到代码的那一行。您可以使用此功能添加日志语句或设置断点。
- en: Validating Expected Values
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证预期值
- en: Problem
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: While debugging, you want to make sure an expression has an expected value.
    If it doesn’t, you want to see a console error.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试过程中，您希望确保表达式具有预期的值。如果没有，您希望看到控制台错误。
- en: Solution
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `console.assert` to print an error if the expression doesn’t match what
    you expect (see [Example 16-15](#code_assertUser)).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `console.assert` 来在表达式不匹配预期值时打印错误（参见 [示例 16-15](#code_assertUser)）。
- en: Example 16-15\. Using `console.assert`
  id: totrans-139
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-15\. 使用 `console.assert`
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If `updateUser` is called with a user object without an `id` property, the error
    is logged.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `updateUser` 被调用时使用没有 `id` 属性的用户对象，将记录错误。
- en: Discussion
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Assertions are not typically used in production, as it’s a debugging tool like
    the other console methods. It’s important to note that if an assertion fails,
    it prints an error but does not throw an error or otherwise stop execution of
    the rest of the function. In [Example 16-15](#code_assertUser), if the user ID
    assertion fails, it still attempts to make the PUT request to update the user.
    This likely results in a 404 error because `null` is in the URL.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 断言通常不用于生产环境，因为它是像其他控制台方法一样的调试工具。需要注意的是，如果断言失败，它会打印一个错误消息，但不会抛出错误或者停止函数的执行。在
    [示例 16-15](#code_assertUser) 中，如果用户 ID 的断言失败，它仍然尝试进行 PUT 请求来更新用户。这可能会导致 404 错误，因为
    URL 中为 `null`。
- en: Examining an Object’s Properties
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查对象的属性
- en: Problem
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to inspect the properties of an object, including deeply nested ones
    and the prototype chain.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要检查对象的属性，包括深度嵌套的属性和原型链。
- en: Solution
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `console.dir` to log the object.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `console.dir` 来记录对象。
- en: '[Example 16-16](#example16-16) shows how to use `console.dir` to inspect the
    `console` object itself.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 16-16](#example16-16) 展示了如何使用 `console.dir` 来检查 `console` 对象本身。'
- en: Example 16-16\. Using `console.dir`
  id: totrans-150
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 16-16\. 使用 `console.dir`
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Figure 16-11](#img_consoleDir) shows the expandable tree structure that is
    logged to the console. Each function and property in the object is expandable.
    It also includes the prototype chain, which can be expanded and inspected as well.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-11](#img_consoleDir) 显示了可展开的树状结构，该结构被记录到控制台中。对象中的每个函数和属性都是可展开的。它还包括原型链，也可以展开并检查。'
- en: '![Using console.dir on the console object (shown in Chrome)](assets/wacb_1611.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![在 Chrome 上显示的使用 console.dir 的控制台对象](assets/wacb_1611.png)'
- en: Figure 16-11\. Using `console.dir` on the console object (shown in Chrome)
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 16-11\. 在控制台对象上使用 `console.dir`（在 Chrome 中显示）
- en: Discussion
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: On some browser versions, `console.log` also presents an interactive structure
    to inspect an object. While this behavior is browser dependent, `console.dir`
    always inspects the object, as shown in [Figure 16-11](#img_consoleDir).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些浏览器版本中，`console.log` 也提供了一个交互式结构来检查对象。虽然这种行为依赖于浏览器，`console.dir` 总是检查对象，如[图 16-11](#img_consoleDir)所示。
- en: For more information, you can look at the [official console specification](https://oreil.ly/osZhg).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查看[官方控制台规范](https://oreil.ly/osZhg)。
