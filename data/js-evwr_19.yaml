- en: Chapter 18\. Desktop Applications with Electron
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章 桌面应用程序与Electron
- en: My introduction to personal computers was in a school lab full of Apple II machines.
    Once a week, my classmates and I were ushered into the room, handed some floppy
    disks, and given a rough set of instructions on how to load an application (typically
    *Oregon Trail*). I don’t remember much from these sessions other than feeling
    completely *locked in* to the little world I was now able to control. Personal
    computers have come a long way since the mid-1980s, but we still rely on desktop
    applications to perform many tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我对个人计算机的初次接触是在一个装满Apple II机器的学校实验室里。每周一次，我和我的同学们被引导进入这个房间，拿到一些软盘，并被给予一系列大致的加载应用程序（通常是*Oregon
    Trail*）的指导。我对这些会话的记忆不多，只记得感觉完全*被锁定*在我现在能够控制的小世界里。自1980年代中期以来，个人计算机已经发展了很长一段路程，但我们仍然依赖桌面应用程序来执行许多任务。
- en: On a typical day, I may access an email client, a text editor, a chat client,
    spreadsheet software, a music streaming service, and several more desktop applications.
    Oftentimes, these have a web application equivalent, but the convenience and integration
    of a desktop application can provide several user experience benefits. However,
    for years the ability to create these applications felt out of reach. Thankfully,
    today we are able to use web technologies to build fully featured desktop applications
    with a small learning curve.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个典型的工作日中，我可能会访问电子邮件客户端、文本编辑器、聊天客户端、电子表格软件、音乐流媒体服务等多个桌面应用程序。通常，这些应用程序都有对应的Web应用程序，但桌面应用程序的便利性和集成性可以为用户体验提供几个好处。然而，多年来创建这些应用程序的能力一直觉得遥不可及。幸运的是，今天我们能够利用Web技术来构建具有小学习曲线的全功能桌面应用程序。
- en: What We’re Building
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们要构建什么
- en: Over the next few chapters we’ll build a desktop client for our social note
    application, Notedly. Our goal is to use JavaScript and web technologies to develop
    a desktop application that a user can download and install on their computer.
    For now, this application will be a simple implementation that wraps our web application
    within a desktop application shell. Developing our app in this way will allow
    us to quickly ship a desktop app to those users who are interested, while providing
    us the flexibility to introduce a custom application for desktop users at a later
    date.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将为我们的社交笔记应用程序Notedly构建一个桌面客户端。我们的目标是使用JavaScript和Web技术开发一个用户可以下载并安装到他们的计算机上的桌面应用程序。目前，这个应用程序将是一个简单的实现，它将我们的Web应用程序包装在一个桌面应用程序外壳中。以这种方式开发我们的应用程序将使我们能够快速为感兴趣的用户发布一个桌面应用程序，同时为我们提供灵活性，在以后可以为桌面用户引入定制应用程序。
- en: How We’re Going To Build This
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将如何构建这个应用程序
- en: To build our application, we’ll be using [Electron](https://electronjs.org),
    an open source framework for building cross-platform desktop applications with
    web technologies. It works by utilizing Node.js and Chrome’s underlying browser
    engine, Chromium. This means that as developers we have access to the world of
    the browser, Node.js, and operating system–specific abilities, which are typically
    unavailable in a web environment. Electron was originally developed by GitHub
    for the [Atom text editor](https://atom.io), but has since been used as a platform
    for applications both big and small, including Slack, VS Code, Discord, and WordPress
    Desktop.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建我们的应用程序，我们将使用[Electron](https://electronjs.org)，这是一个使用Web技术构建跨平台桌面应用程序的开源框架。它通过利用Node.js和Chrome的底层浏览器引擎Chromium工作。这意味着作为开发人员，我们可以访问浏览器、Node.js和操作系统特定的功能，这些功能通常在Web环境中不可用。Electron最初由GitHub为[Atom文本编辑器](https://atom.io)开发，但后来被用作包括Slack、VS
    Code、Discord和WordPress桌面在内的各种大小应用程序的平台。
- en: Getting Started
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'Before we can start development, we need to make a copy of the project starter
    files to our machine. The [project’s source code](https://github.com/javascripteverywhere/desktop)
    contains all of the scripts and references to third-party libraries that we will
    need to develop your application. To clone the code to our local machine, open
    the terminal, navigate to the directory where you keep your projects, and **`git
    clone`** the project repository. If you’ve worked through the API and web chapters,
    you may also have already created a *notedly* directory to keep the project code
    organized:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发之前，我们需要将项目的起始文件复制到我们的计算机上。[项目的源代码](https://github.com/javascripteverywhere/desktop)包含了我们开发应用程序所需的所有脚本和第三方库的引用。要将代码克隆到我们的本地计算机上，请打开终端，导航到您保存项目的目录，并**`git
    clone`**项目存储库。如果您已经完成了API和Web章节，您可能也已经创建了一个*notedly*目录来保持项目代码的组织。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing Third-Party Dependencies
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装第三方依赖项
- en: By making a copy of the book’s starter code and running `npm install` in the
    directory, you avoid having to again run `npm install` for any of the individual
    third-party dependencies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过   通过复制书中的启动代码并在目录中运行`npm install`，你可以避免为任何单独的第三方依赖项再次运行`npm install`。
- en: 'The code is structured as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代码结构如下：
- en: /src
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: /src
- en: This is the directory where you should perform your development as you follow
    along with the book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在跟随书籍的过程中进行开发的目录。
- en: /solutions
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: /solutions
- en: This directory contains the solutions for each chapter. If you get stuck, these
    are available for you to consult.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录包含每一章的解决方案。如果你卡住了，可以参考这些解决方案。
- en: /final
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: /final
- en: This directory contains the final working project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录包含最终的工作项目。
- en: With our project directory created and dependencies installed, we are ready
    to begin our development.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建好项目目录并安装依赖项后，我们已经准备好开始开发。
- en: Our First Electron App
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个 Electron 应用
- en: With our repository cloned to our machine, let’s develop our first Electron
    app. If you look within your *src* directory, you’ll see that there are a few
    files. The *index.html* file contains bare-bones HTML markup. For now, this file
    will serve as Electron’s “renderer process,” meaning that it will be the web page
    displayed as a window by our Electron application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的仓库克隆到机器上后，让我们开发我们的第一个 Electron 应用程序。如果你查看*src*目录，你会看到有几个文件。*index.html*
    文件包含基本的 HTML 标记。现在，这个文件将作为 Electron 的“渲染进程”，意味着它将作为我们 Electron 应用程序显示的网页。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The *index.js* file is where we will set up our Electron application. In our
    application, this file will contain what Electron calls the “main process,” which
    defines the application shell. The main process works by creating a `BrowserWindow`
    instance in Electron, which serves as the application shell.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*index.js* 文件是我们将设置 Electron 应用程序的地方。在我们的应用程序中，这个文件将包含 Electron 所称的“主进程”，它定义了应用程序的外壳。主进程通过在
    Electron 中创建一个 `BrowserWindow` 实例来工作，它作为应用程序的外壳。'
- en: index.js Versus main.js
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index.js 与 main.js
- en: Though I’ve named the file *index.js* to follow the pattern found in the rest
    of our sample applications, it is common in Electron development to name the “main
    process” file *main.js*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我将文件命名为 *index.js*，以遵循我们其余示例应用程序的模式，但在 Electron 开发中，通常将“主进程”文件命名为 *main.js*。
- en: 'Let’s set up our main process to display a browser window containing our HTML
    page. First, import Electron’s `app` and `browserWindow` functionality in *src/index.js*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置我们的主进程，以显示包含我们的 HTML 页面浏览器窗口。首先，在*src/index.js*中导入 Electron 的 `app` 和 `browserWindow`
    功能：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can define our application’s `browserWindow` and define the file that
    our application will load. In *src/index.js*, add the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义应用程序的`browserWindow`，并定义应用程序将加载的文件。在*src/index.js*中，添加以下内容：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With this in place, we are ready to run our desktop application locally. In
    your terminal application, from your project’s directory, run the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好这些后，我们可以在本地运行我们的桌面应用程序。在你的终端应用中，从项目的目录运行以下命令：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will run `electron src/index.js`, launching a development environment
    version of our application (see [Figure 18-1](#desktop_helloworld)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将运行`electron src/index.js`，启动我们应用程序的开发环境版本（见[图 18-1](#desktop_helloworld)）。
- en: '![An image of our ''Hello World'' Electron application](assets/jsev_1801.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![我们“Hello World” Electron 应用程序的图像](assets/jsev_1801.png)'
- en: Figure 18-1\. Running the start command will launch our “Hello World” Electron
    application
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-1。运行启动命令将启动我们的“Hello World” Electron 应用程序。
- en: macOS Application Window Details
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 应用程序窗口详情
- en: 'macOS handles application windows differently from Windows. When a user clicks
    the “close window” button, the application window closes, but the application
    itself does not quit. Clicking the application’s icon in the macOS dock will reopen
    the application window. Electron allows us to implement this functionality. Add
    the following to the bottom of the *src/index.js* file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 处理应用程序窗口的方式与 Windows 不同。当用户点击“关闭窗口”按钮时，应用程序窗口会关闭，但应用程序本身不会退出。点击 macOS
    dock 中的应用程序图标将重新打开应用程序窗口。Electron 允许我们实现这一功能。将以下内容添加到*src/index.js* 文件的底部：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this added, you can see these changes by quitting the application and rerunning
    it with the `npm start` command. Now, if a user is accessing our application with
    macOS, they will see the expected behavior when closing a window.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些内容后，你可以通过退出应用程序并使用`npm start`命令重新运行它来查看这些更改。现在，如果用户在 macOS 上访问我们的应用程序，当关闭窗口时，他们将看到预期的行为。
- en: Developer Tools
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者工具
- en: Since Electron is based on the Chromium browser engine (the engine behind Chrome,
    Microsoft Edge, Opera, and [many other browsers](https://oreil.ly/iz_GY)), it
    also gives us access to Chromium’s Developer Tools. This allows us to perform
    all of the same JavaScript debugging that we might do in a browser environment.
    Let’s check if our application is in development mode and, if so, automatically
    open dev tools when our app launches.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Electron 基于 Chromium 浏览器引擎（Chrome、Microsoft Edge、Opera 和 [许多其他浏览器](https://oreil.ly/iz_GY)
    的引擎），它还使我们能够访问 Chromium 的开发者工具。这使我们能够在浏览器环境中进行与 JavaScript 调试相关的所有操作。让我们检查一下我们的应用程序是否处于开发模式，如果是的话，自动在应用程序启动时打开开发工具。
- en: To perform this check, we’ll use the [`electron-util` library](https://oreil.ly/JAf2Q).
    This is a small collection of utilities that will allow us to easily check system
    conditions and simplifies boilerplate code for common Electron patterns. For now,
    we’ll be making use of the `is` module, which will allow us to check if our application
    is in development mode.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此检查，我们将使用 [`electron-util` 库](https://oreil.ly/JAf2Q)。这是一个小型实用工具集，它将允许我们轻松检查系统条件，并简化常见
    Electron 模式的样板代码。目前，我们将使用 `is` 模块，它将允许我们检查我们的应用程序是否处于开发模式。
- en: 'At the top of our *src/index.js* file, import the module:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 *src/index.js* 文件的顶部，导入模块：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, in our application code, we can add the following on the line below `window.``loadFile(*index.html*)`
    where we load our HTML file, which will open the development tools when the application
    is in a development environment ([Figure 18-2](#desktop_devtools)):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的应用程序代码中，我们可以在加载 HTML 文件的地方添加以下内容，在开发环境中（[图 18-2](#desktop_devtools)）应用程序启动时打开开发工具：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![A screenshot of our ''Hello World'' application with the browser''s dev tools
    open](assets/jsev_1802.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![我们的“Hello World”应用程序的屏幕截图，浏览器的开发工具已打开](assets/jsev_1802.png)'
- en: Figure 18-2\. Now when we open our application during development, the browser
    dev tools will automatically open
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-2\. 现在，当我们在开发过程中打开我们的应用程序时，浏览器开发工具将自动打开
- en: Electron Security Warning
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Electron 安全警告
- en: You may notice that our Electron app currently displays a security warning related
    to an insecure Content Security Policy (CSP). We will address this warning in
    the next chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，我们的 Electron 应用当前显示了与不安全的内容安全策略（CSP）相关的安全警告。我们将在下一章节解决这个问题。
- en: With easy access to the browser dev tools, we are well prepared to develop a
    client application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过方便使用浏览器开发工具，我们已经做好了开发客户端应用程序的准备。
- en: The Electron API
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Electron API
- en: 'One of the advantages of desktop development is that, through the Electron
    API, we gain access to operating system-level features that are rightfully unavailable
    in a web browser environment, including:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面开发的一个优势是，通过 Electron API，我们可以访问操作系统级别的功能，这些功能在 Web 浏览器环境中是无法获取的，包括：
- en: Notifications
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知
- en: Native file drag and drop
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生文件拖放
- en: macOS Dark Mode
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 暗模式
- en: Custom menus
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义菜单
- en: Robust keyboard shortcuts
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的键盘快捷键
- en: System dialogs
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统对话框
- en: The application tray
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序托盘
- en: System information
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统信息
- en: As you can imagine, these options allow us to add some unique features and improved
    user experiences to our desktop clients. We won’t be using these in our simple
    sample application, but it is worth familiarizing yourself with them. [Electron’s
    documentation](https://electronjs.org/docs) provides detailed examples of each
    of Electron’s APIs. Additionally, the Electron team has created [`electron-api-demos`](https://oreil.ly/Xo7NM),
    a fully functioning Electron application that demonstrates many of the unique
    features of the Electron API.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以想象的那样，这些选项允许我们为桌面客户端添加一些独特的功能和改进的用户体验。在我们的简单示例应用程序中，我们不会使用这些功能，但值得熟悉。[Electron
    的文档](https://electronjs.org/docs) 提供了 Electron API 的详细示例。此外，Electron 团队还创建了 [`electron-api-demos`](https://oreil.ly/Xo7NM)，一个完整的
    Electron 应用程序，展示了 Electron API 的许多独特功能。
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we’ve explored the basics of using Electron to build desktop
    applications with web technologies. The Electron environment offers us, as developers,
    an opportunity to provide a cross-platform desktop experience to users without
    learning the intricacies of multiple programming languages and operating systems.
    Armed with the simple setup we’ve explored in this chapter and knowledge of web
    development, we are well prepared to build robust desktop applications. In the
    next chapter, we’ll look at how we can incorporate an existing web app into an
    Electron shell.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经探讨了使用 Electron 构建基于 Web 技术的桌面应用程序的基础知识。作为开发者，Electron 环境为我们提供了一个机会，可以为用户提供跨平台的桌面体验，而无需学习多种编程语言和操作系统的复杂性。有了本章中探讨的简单设置和对
    Web 开发的了解，我们已经做好了构建强大桌面应用程序的准备。在下一章中，我们将探讨如何将现有的 Web 应用程序集成到 Electron 壳程序中。
