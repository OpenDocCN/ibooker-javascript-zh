- en: Appendix G. TSX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 G. TSX
- en: Under the hood, TypeScript exposes a few hooks for typing TSX in a pluggable
    way. These are special types on the `global.JSX` namespace that TypeScript looks
    at as the source of truth for TSX types throughout your program.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 在底层公开了几个钩子，用于以可插拔方式为 TSX 类型化。这些是 `global.JSX` 命名空间上的特殊类型，TypeScript
    在整个程序中将其视为 TSX 类型的真实来源。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re just using React, you don’t need to know about these low-level hooks,
    but if you’re writing a TypeScript library that uses TSX without React, this appendix
    provides a helpful reference for the hooks you can use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只使用 React，您无需了解这些底层钩子，但如果编写一个不使用 React 而使用 TSX 的 TypeScript 库，本附录为您提供了可以使用的钩子的有用参考。
- en: 'TSX supports two kinds of elements: built-in ones (*intrinsic elements*) and
    user-defined ones (*value-based elements*). Intrinsic elements always have lowercased
    names, and refer to built-in elements like `<li>`, `<h1>`, and `<div>`. Value-based
    elements have PascalCased names, and refer to those elements that you create with
    React (or whatever frontend framework you’re using TSX with); they can be defined
    either as functions or as classes. See [Figure G-1](#tsx-element-fig).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TSX 支持两种类型的元素：内置元素（*内置元素*）和用户定义元素（*值类型元素*）。内置元素始终使用小写名称，并指代内置元素如 `<li>`、`<h1>`
    和 `<div>`。值类型元素使用帕斯卡命名法，并指代使用 React（或使用 TSX 与其他前端框架）创建的元素；它们可以定义为函数或类。请参见 [图 G-1](#tsx-element-fig)。
- en: '![prts ag01](assets/prts_ag01.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![prts ag01](assets/prts_ag01.png)'
- en: Figure G-1\. The kinds of TSX elements
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 G-1. TSX 元素的种类
- en: 'Using [React’s type declarations](http://bit.ly/2CNzeW2) as an example, we’ll
    walk through the hooks TypeScript uses to safely type TSX. Here’s how React hooks
    into TSX to type JSX safely:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [React 的类型声明](http://bit.ly/2CNzeW2) 作为示例，我们将详细介绍 TypeScript 用于安全地为 TSX 类型化的钩子。以下是
    React 如何将钩子插入 TSX 以安全地为 JSX 类型化的步骤：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_tsx_CO1-1)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_tsx_CO1-1)'
- en: '`JSX.Element` is the type of a value-based TSX element.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.Element` 是值类型 TSX 元素的类型。'
- en: '[![2](assets/2.png)](#co_tsx_CO1-2)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_tsx_CO1-2)'
- en: '`JSX.ElementClass` is the type of an instance of a value-based class component.
    Whenever you declare a class component that you plan to instantiate with TSX’s
    `<MyComponent />` syntax, its class must satisfy this interface.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.ElementClass` 是值类型类组件实例的类型。每当声明一个类组件，并计划使用 TSX 的 `<MyComponent />` 语法实例化时，其类必须满足此接口。'
- en: '[![3](assets/3.png)](#co_tsx_CO1-3)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_tsx_CO1-3)'
- en: '`JSX.ElementAttributesProperty` is the name of the property TypeScript looks
    at to figure out what attributes a component supports. For React, that means the
    `props` property. TypeScript looks for this value on a class instance.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.ElementAttributesProperty` 是 TypeScript 查看以确定组件支持哪些属性的属性名称。对于 React，这意味着查看
    `props` 属性。TypeScript 在类实例上查找此值。'
- en: '[![4](assets/4.png)](#co_tsx_CO1-4)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_tsx_CO1-4)'
- en: '`JSX.ElementChildrenAttribute` is the name of the property that TypeScript
    looks at to figure out what types of children a component supports. For React,
    that means the `children` property.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.ElementChildrenAttribute` 是 TypeScript 查看以确定组件支持哪些类型子节点的属性名称。对于 React，这意味着查看
    `children` 属性。'
- en: '[![5](assets/5.png)](#co_tsx_CO1-5)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_tsx_CO1-5)'
- en: '`JSX.IntrinsicAttributes` is the set of attributes that all intrinsic elements
    support. For React, that means the `key` attribute.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.IntrinsicAttributes` 是所有内置元素支持的属性集。对于 React，这意味着支持 `key` 属性。'
- en: '[![6](assets/6.png)](#co_tsx_CO1-6)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_tsx_CO1-6)'
- en: '`JSX.IntrinsicClassAttributes` is the set of attributes that all class components
    (both intrinsic and value-based) support. For React, that means `ref`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.IntrinsicClassAttributes` 是所有类组件（包括内置和值类型）支持的属性集。对于 React，这意味着支持 `ref`。'
- en: '[![7](assets/7.png)](#co_tsx_CO1-7)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_tsx_CO1-7)'
- en: '`JSX.LibraryManagedAttributes` specifies other places where JSX elements can
    declare and initialize property types. For React, that means `propTypes` as another
    place to declare property types, and `defaultProps` as the place to declare default
    values for properties.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.LibraryManagedAttributes` 指定 JSX 元素可以声明和初始化属性类型的其他位置。对于 React，这意味着 `propTypes`
    可以作为声明属性类型的另一位置，而 `defaultProps` 是声明属性默认值的位置。'
- en: '[![8](assets/8.png)](#co_tsx_CO1-8)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_tsx_CO1-8)'
- en: '`JSX.IntrinsicElements` enumerates every type of HTML element that you can
    use in TSX, mapping each element’s tag name to its attribute and children types.
    Because JSX isn’t HTML, React’s type declarations have to tell TypeScript exactly
    what elements someone might use in a TSX expression, and because you can use any
    standard HTML element from TSX, the declarations have to manually enumerate each
    element along with its attribute types (for an `<a>` tag, for example, valid attributes
    include `href: string` and `rel: string`, but not `value`) and what types of children
    it might have.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSX.IntrinsicElements` 枚举了你可以在 TSX 中使用的每种 HTML 元素类型，将每个元素的标签名称映射到其属性和子元素的类型。因为
    JSX 不是 HTML，React 的类型声明必须告诉 TypeScript 究竟哪些元素可能会在 TSX 表达式中使用，并且因为你可以在 TSX 中使用任何标准的
    HTML 元素，这些声明必须手动枚举每个元素及其属性类型（例如，对于 `<a>` 标签，有效的属性包括 `href: string` 和 `rel: string`，但不包括
    `value`）以及它可能具有的子元素类型。'
- en: By declaring any of these types in the global JSX namespace, you can hook into
    TypeScript’s typechecking behavior for TSX and customize it however you want.
    Unless you’re writing a library that uses TSX (and doesn’t use React), you’ll
    probably never touch these hooks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 声明任何这些类型在全局的 JSX 命名空间中，你可以钩入 TypeScript 对 TSX 的类型检查行为，并按需自定义它。除非你正在编写一个使用 TSX（而不使用
    React）的库，否则你可能永远不会接触这些钩子。
