- en: Chapter 13\. UI Elements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章 UI 元素
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Modern browsers have a few powerful built-in UI elements that you can use in
    your app. These UI components previously required third-party libraries (or you
    could build your own).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器具有几个强大的内置 UI 元素，您可以在应用程序中使用这些 UI 组件。这些 UI 组件以前需要第三方库（或者您可以自行构建）。
- en: Dialogs
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对话框
- en: Pop-up dialogs are a mainstay of many apps, providing feedback and prompting
    for input. There are countless dialog libraries out there, and it’s possible to
    build your own. Modern browsers have already done this for you with the `<dialog>`
    element. This is a pop-up dialog and includes a backdrop that covers the rest
    of the page. You can apply styles to both the backdrop and the dialog with a little
    CSS. By default, the dialog is just a box that pops up with the backdrop behind
    it. It’s up to you to add a title, buttons, and other content.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出对话框是许多应用程序的重要部分，用于提供反馈和提示输入。有无数的对话框库可供选择，您也可以自己构建。现代浏览器已经为您准备好了`<dialog>`元素。这是一个带有覆盖整个页面背景的弹出对话框。您可以用少量的
    CSS 为背景和对话框应用样式。默认情况下，对话框只是一个弹出的框，背景后面是模糊的背景。您可以自行添加标题、按钮和其他内容。
- en: Some dialogs contain multiple buttons, and you want to run different code depending
    on which option they chose. For example, a confirmation modal might have Confirm
    and Cancel buttons. You’ll need to handle this yourself as well, adding click
    event listeners to the buttons. In each event listener, you can close the dialog
    by calling `close` on it. The `close` method is a built-in method on the dialog
    that takes an optional argument that lets you specify a “return value.” This can
    be checked later from the dialog’s `returnValue` property. This lets you pass
    data from the dialog back to the page that opened it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一些对话框包含多个按钮，您希望根据选择的选项运行不同的代码。例如，确认模态框可能有“确认”和“取消”按钮。您还需要自行处理此操作，向按钮添加点击事件侦听器。在每个事件侦听器中，您可以通过调用对话框上的`close`方法来关闭对话框。`close`方法是对话框上的内置方法，它接受一个可选参数，允许您指定一个“返回值”。稍后可以从对话框的`returnValue`属性中检查此返回值。这使您可以从对话框传递数据回到打开它的页面。
- en: Details
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细节
- en: A `<details>` element is a component whose content is collapsible. It has some
    summary content that is displayed in an interactive element. By clicking this
    element, you can show or hide the detailed content. Like with dialogs, you can
    style the component with CSS and toggle its visibility with JavaScript.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`<details>` 元素是一个可折叠内容的组件。它有一些摘要内容显示在交互元素中。通过点击该元素，您可以显示或隐藏详细内容。与对话框类似，您可以使用
    CSS 样式化组件，并使用 JavaScript 切换其可见性。'
- en: Popovers
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出框
- en: 'A popover is similar to a dialog. This is another type of pop-up element. There
    are a few differences between a popover and a dialog:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出框类似于对话框。这是另一种弹出元素类型。弹出框与对话框之间有一些区别：
- en: Clicking outside of the popover will close it.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击弹出框外部将关闭它。
- en: You can still interact with the rest of the page while a popover is visible.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在弹出框可见时，您仍然可以与页面的其余部分进行交互。
- en: You can turn any HTML element into a popover.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将任何 HTML 元素转换为弹出框。
- en: Notifications
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知
- en: Smartphones use notifications extensively, and newer operating systems also
    support notifications. Modern browsers have an API for showing native operating
    system notifications, triggered from JavaScript. The user must grant permission
    before these notifications can be sent. These notifications are created in your
    JavaScript code, on demand, while the app is running.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机广泛使用通知，而较新的操作系统也支持通知。现代浏览器提供了一个 API，用于通过 JavaScript 触发本地操作系统通知。用户必须在发送这些通知之前授予权限。这些通知是在应用程序运行时根据需要在您的
    JavaScript 代码中创建的。
- en: Creating an Alert Dialog
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建警报对话框
- en: Problem
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to show a dialog with a simple message, with an OK button to close
    it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望显示一个简单消息的对话框，并有一个“确定”按钮来关闭它。
- en: Solution
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a `<dialog>` element with an OK button.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有“确定”按钮的`<dialog>`元素。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by older browsers. See [CanIUse](https://oreil.ly/tk52g)
    for the latest compatibility data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该 API 可能不受较旧浏览器支持。请查看[CanIUse](https://oreil.ly/tk52g)获取最新的兼容性数据。
- en: First, define the HTML for your dialog, as shown in [Example 13-1](#example13-1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义您对话框的 HTML，如[示例 13-1](#example13-1)所示。
- en: Example 13-1\. The dialog markup
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-1\. 对话框标记
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You need two snippets of JavaScript. First, you’ll need a function to trigger
    the dialog to be displayed, and then you’ll need an event listener for the OK
    button to close the dialog (see [Example 13-2](#example13-2)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要两段 JavaScript 代码。首先，你需要一个函数来触发显示对话框，然后你需要一个监听器来监听 OK 按钮以关闭对话框（参见[示例 13-2](#example13-2)）。
- en: Example 13-2\. JavaScript for the dialog
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-2\. 对话框的 JavaScript
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This results in the dialog shown in [Figure 13-1](#img_alertScreenshot).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致显示在[图 13-1](#img_alertScreenshot)中的对话框。
- en: '![The alert dialog](assets/wacb_1301.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![提示对话框](assets/wacb_1301.png)'
- en: Figure 13-1\. The alert dialog
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. 提示对话框
- en: Discussion
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The dialog’s `showModal` method shows a *modal* dialog. A modal dialog blocks
    the rest of the page until it is closed. This means if you open a modal dialog,
    clicking on other elements on the page will have no effect. With a modal dialog,
    the focus is “trapped” inside the dialog. Using the Tab key will cycle focus through
    the focusable elements in the dialog only. If this isn’t what you want, you can
    also call the `show` method. This will show a *modeless* dialog, which still allows
    you to interact with the rest of the page while the dialog is open.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的`showModal`方法显示一个*模态*对话框。模态对话框会阻塞页面的其余部分，直到它关闭。这意味着如果你打开了一个模态对话框，点击页面上的其他元素将不会产生任何效果。在模态对话框中，焦点被“困住”在对话框内部。使用
    Tab 键只会在对话框内的可聚焦元素之间循环焦点。如果这不是你想要的效果，你也可以调用`show`方法。这将显示一个*非模态*对话框，允许你在对话框打开时与页面的其余部分交互。
- en: Clicking the OK button will close the dialog due to the click listener calling
    `dialog.close`, but you can also close the modal by pressing the Escape key. To
    capture this, you can listen for the dialog’s `cancel` event. Canceling the dialog
    with the Escape key will also trigger the dialog’s `close` event. Finally, closing
    the dialog manually by calling `close` on it will trigger the `close` event as
    well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 OK 按钮将关闭对话框，因为点击监听器调用了`dialog.close`，但你也可以通过按 Escape 键关闭模态。为了捕获这个操作，你可以监听对话框的`cancel`事件。使用
    Escape 键取消对话框也将触发对话框的`close`事件。最后，手动调用`close`来关闭对话框也会触发`close`事件。
- en: The `dialog` element also has some nice keyboard accessibility features. When
    you click the Show Dialog button and the dialog opens, the first focusable element
    button automatically receives focus. In this case, it’s the OK button. You can
    change this behavior by adding the `autofocus` attribute to the element that you
    want to receive the initial focus when the dialog is opened.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`<dialog>`元素还具有一些良好的键盘可访问性功能。当你点击“显示对话框”按钮并且对话框打开时，第一个可聚焦的按钮元素会自动获得焦点。在这种情况下，它是
    OK 按钮。你可以通过为你希望在打开对话框时获得初始焦点的元素添加`autofocus`属性来更改此行为。'
- en: When you close the dialog, either by pressing the Escape key or clicking the
    OK button, the keyboard focus will return to the Show Dialog button.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过按 Escape 键或点击 OK 按钮关闭对话框时，键盘焦点将返回到“显示对话框”按钮。
- en: You can style both the dialog itself and its semitransparent backdrop with CSS.
    For the dialog, you can add a CSS rule targeting the `<dialog>` element itself.
    To style the backdrop—for example, you might want it to be a more opaque black—you
    can use the `::backdrop` pseudo-element (see [Example 13-3](#example13-3)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 CSS 样式化对话框本身及其半透明背景。对于对话框，你可以添加一个 CSS 规则来针对`<dialog>`元素本身。要样式化背景——例如，你可能希望它是更不透明的黑色——你可以使用`::backdrop`伪元素（参见[示例 13-3](#example13-3)）。
- en: Example 13-3\. Styling the backdrop
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-3\. 设置背景样式
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a Confirmation Dialog
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建确认对话框
- en: Problem
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to prompt the user to confirm an operation. The prompt should show
    a question and have Confirm and Cancel buttons.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望提示用户确认一个操作。提示应该显示一个问题，并有确认和取消按钮。
- en: Solution
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: This is another great use case for a `<dialog>`. First, create your dialog content
    with the prompt and buttons, as shown in [Example 13-4](#example13-4).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个很好的使用场景，用于`<dialog>`。首先，使用提示和按钮创建你的对话框内容，如[示例 13-4](#example13-4)所示。
- en: Example 13-4\. The confirmation dialog markup
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-4\. 确认对话框的标记
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/tk52g)
    for the latest compatibility data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 API 可能还不被所有浏览器支持。请参考[CanIUse](https://oreil.ly/tk52g)获取最新的兼容性数据。
- en: You want both buttons to close the dialog, but to take different actions. To
    do this, you can pass a string argument to `dialog.close`. This will set the `returnValue`
    property on the dialog itself, which you can examine when you receive the `close`
    event (see [Example 13-3](#example13-3)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望两个按钮都关闭对话框，但执行不同的操作。为此，可以向`dialog.close`传递一个字符串参数。这将在对话框本身上设置`returnValue`属性，您可以在接收到`close`事件时检查它（参见[示例 13-3](#example13-3)）。
- en: Example 13-5\. Event listeners for the confirmation dialog
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-5\. 确认对话框的事件监听器
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The resulting confirmation dialog looks like [Figure 13-2](#img_screenshotConfirm).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的确认对话框如图 13-2所示。
- en: '![The confirmation dialog](assets/wacb_1302.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![确认对话框](assets/wacb_1302.png)'
- en: Figure 13-2\. The confirmation dialog
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. 确认对话框
- en: Discussion
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: If the user clicks one of the buttons, the dialog is closed with a return value
    that depends on which button was clicked. After the dialog closes, it will emit
    the `close` event where you can check the `returnValue` property. If the `returnValue`
    is `confirm`, you know the user clicked the Confirm button. Otherwise, the `returnValue`
    is `cancel` and you can cancel the operation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击其中一个按钮，则将使用取决于所点击按钮的返回值关闭对话框。对话框关闭后，将触发`close`事件，您可以在其中检查`returnValue`属性。如果`returnValue`是`confirm`，则知道用户点击了确认按钮。否则，`returnValue`是`cancel`，您可以取消操作。
- en: This example also listens for the `cancel` event. This event is triggered if
    the dialog is closed by pressing the Escape key. When the dialog is closed in
    this way, the dialog’s `returnValue` is not updated and will retain whatever previous
    value it had. To make sure the `returnValue` is correct, the `cancel` event handler
    sets it. This works because the `close` event is triggered *after* the `cancel`
    event. Because the Escape key triggers this event, you don’t need to actually
    listen for the Escape key to be pressed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例还监听`cancel`事件。如果通过按下Escape键关闭对话框，则触发此事件。当以这种方式关闭对话框时，对话框的`returnValue`不会更新，并将保留先前的任何值。为了确保`returnValue`正确，`cancel`事件处理程序将其设置。这是因为`close`事件在`cancel`事件之后触发。因为按Escape键会触发此事件，所以您实际上不需要监听Escape键是否被按下。
- en: Why do you need to handle this case? Well, if you close the dialog, it is not
    destroyed. It still exists in the DOM, just hidden, and still has the same `returnValue`
    set. Suppose you opened the dialog previously, and you clicked Confirm. The return
    value is now set to `confirm`. If you open the confirmation dialog again and cancel
    by pressing Escape, the return value will still be `confirm` when the `close`
    event is handled. To avoid this potential bug, you can use the `cancel` event
    handler to explicitly set the `returnValue` to `cancel`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么需要处理这种情况？如果关闭对话框，它并没有被销毁。它仍然存在于DOM中，只是隐藏了，并且仍然设置了相同的`returnValue`。假设您之前打开了对话框，并且点击了确认。现在返回值设置为`confirm`。如果您再次打开确认对话框并通过按Escape键取消，则在处理`close`事件时，返回值仍然是`confirm`。为了避免这种潜在的bug，您可以使用`cancel`事件处理程序将`returnValue`显式设置为`cancel`。
- en: Creating a Confirmation Dialog Web Component
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建确认对话框Web组件
- en: Problem
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a customizable confirmation dialog. When you show the dialog,
    you want to get a `Promise` that resolves to the return value rather than having
    to listen for multiple events.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望创建一个可定制的确认对话框。显示对话框时，您希望得到一个`Promise`，以便解决返回值，而不是必须监听多个事件。
- en: Solution
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Wrap the dialog in a web component, using a slot for the confirmation message.
    The component exposes a `showConfirmation` method that uses a `Promise`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将对话框包装在Web组件中，使用插槽来显示确认消息。该组件公开一个`showConfirmation`方法，使用一个`Promise`。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/tk52g)
    for the latest compatibility data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可能不是所有浏览器都支持此API。有关最新的兼容性数据，请参见[CanIUse](https://oreil.ly/tk52g)。
- en: As with most web components, start by defining the template, as shown in [Example 13-6](#example13-6).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数Web组件一样，首先定义模板，如[示例 13-6](#example13-6)所示。
- en: Example 13-6\. The template for the confirmation dialog component
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-6\. 确认对话框组件的模板
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The template contains a slot that will receive the component’s child content.
    Next, [Example 13-7](#example13-7) show the component implementation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包含一个插槽，将接收组件的子内容。接下来，[示例 13-7](#example13-7)展示了组件的实现。
- en: Example 13-7\. The confirmation component implementation
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-7\. 确认组件实现
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Suppose you want to use this component to confirm a delete operation. You can
    add the element to your page with the confirmation prompt as the child content
    (see [Example 13-8](#example13-8)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想使用此组件来确认删除操作。你可以将元素添加到你的页面，并将确认提示作为子内容（参见 [示例 13-8](#example13-8)）。
- en: Example 13-8\. The component markup
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-8\. 组件标记
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To show the dialog, select the DOM element and call its `showConfirmation` method.
    Await the returned `Promise` to get the return value (see [Example 13-9](#example13-9)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示对话框，选择 DOM 元素并调用它的 `showConfirmation` 方法。等待返回的 `Promise` 以获取返回值（参见 [示例 13-9](#example13-9)）。
- en: Example 13-9\. Using the confirmation dialog component
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-9\. 使用确认对话框组件
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As with [“Creating a Disclosure Component”](ch12.html#recipe_disclosure) from
    [Chapter 12](ch12.html#ch_webComponents), you need to add some CSS to hide the
    child content until it is placed within the slots to prevent a flicker of the
    dialog content (see [Example 13-10](#example13-10)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 [“创建披露组件”](ch12.html#recipe_disclosure) 来自 [第 12 章](ch12.html#ch_webComponents)
    一样，你需要添加一些 CSS 来隐藏子内容，直到它放置在插槽中，以防止对话内容的闪烁（参见 [示例 13-10](#example13-10)）。
- en: Example 13-10\. Fixing the flicker issue
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-10\. 修复闪烁问题
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Discussion
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This is a good example of the usefulness of web components to encapsulate custom
    behavior. In this case, you also added a custom method to be called from the outside.
    This method shows the dialog and abstracts away having to listen for multiple
    events. You just show the dialog and wait for the result.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是利用 Web 组件封装自定义行为的一个很好的例子。在这种情况下，你还添加了一个可以从外部调用的自定义方法。这个方法显示对话框并抽象了监听多个事件的需求。你只需要显示对话框并等待结果。
- en: Using a Disclosure Element
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用披露元素
- en: Problem
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have some content you want to show or hide using a toggle button.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一些内容想要使用切换按钮显示或隐藏时。
- en: Solution
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the built-in `<details>` element (see [Example 13-10](#example13-10)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的 `<details>` 元素（参见 [示例 13-10](#example13-10)）。
- en: Example 13-11\. Using the `details` element
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-11\. 使用 `details` 元素
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When the details are collapsed, you’ll just see the More Info trigger button,
    as shown in [Figure 13-3](#figure13-3).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当详情折叠时，你只会看到更多信息触发按钮，如 [图 13-3](#figure13-3) 所示。
- en: '![The collapsed details element](assets/wacb_1303.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![折叠的详情元素](assets/wacb_1303.png)'
- en: Figure 13-3\. The collapsed details element
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-3\. 折叠的详情元素
- en: When you click the summary, the details open and the arrow changes to indicate
    that the content is expanded, as shown in [Figure 13-4](#figure13-4).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击摘要时，详情打开，箭头变化指示内容已展开，如 [图 13-4](#figure13-4) 所示。
- en: '![The expanded details element](assets/wacb_1304.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![展开的详情元素](assets/wacb_1304.png)'
- en: Figure 13-4\. The expanded details element
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-4\. 展开的详情元素
- en: Discussion
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: By default, the inner content is hidden, and you’ll just see a disclosure element
    with the contents of the `<summary>` element. In this case, the button will read
    More Info. When you click the More Info button, the hidden content will appear.
    If you click it again, the content again becomes hidden.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，内部内容是隐藏的，你只会看到一个包含 `<summary>` 元素内容的披露元素。在这种情况下，按钮将显示更多信息。当你点击更多信息按钮时，隐藏内容将显示出来。如果再次点击它，内容将再次隐藏。
- en: You can change this default behavior with the `open` attribute. If you add this
    attribute, the content will start out visible (see [Example 13-12](#example13-12)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `open` 属性改变这种默认行为。如果你添加了这个属性，内容将初始可见（参见 [示例 13-12](#example13-12)）。
- en: Example 13-12\. Controlling the default state with the `open` attribute
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-12\. 使用 `open` 属性控制默认状态
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, you can also toggle the content with JavaScript. You can change the
    value of the element’s `open` attribute directly, as shown in [Example 13-13](#example13-13).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你还可以使用 JavaScript 切换内容。你可以直接改变元素的 `open` 属性的值，就像 [示例 13-13](#example13-13)
    中展示的那样。
- en: Example 13-13\. Toggling the visibility with JavaScript
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-13\. 使用 JavaScript 切换可见性
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Most browsers have good accessibility support for this element, identifying
    the trigger element to screen readers and indicating its expanded or collapsed
    state.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器对该元素有良好的辅助功能支持，识别触发元素给屏幕阅读器，并指示其展开或折叠状态。
- en: Showing a Popover
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示弹出窗口
- en: Problem
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to show pop-up content by clicking a button, but still allow the user
    to interact with the rest of the page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你想通过点击按钮显示弹出内容，但仍允许用户与页面的其余部分交互。
- en: Solution
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Give the element a `popover` attribute, and add the `popovertarget` attribute
    to the trigger button (see [Example 13-14](#example13-14)).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 给元素添加 `popover` 属性，并在触发按钮上添加 `popovertarget` 属性（参见 [示例 13-14](#example13-14)）。
- en: Example 13-14\. Automatically wiring a popover
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-14\. 自动连接弹出框
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 可能尚未被所有浏览器支持。请参见 [CanIUse](https://oreil.ly/YFjQX) 获取最新的兼容性数据。
- en: Discussion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'A popover differs from a dialog in a few ways:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出框与对话框在几个方面有所不同：
- en: You can open it without any JavaScript.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在没有任何 JavaScript 的情况下打开它。
- en: There is no backdrop like there is with a dialog.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与对话框不同，弹出框没有背景。
- en: Unlike a dialog, you aren’t blocked from interacting with the underlying page
    while the popover is displayed.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与对话框不同，您在显示弹出框时不会被阻止与底层页面的交互。
- en: When you click outside of a popover, it will close.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击弹出框外部将关闭它。
- en: To make an element into a popover, you give it the `popover` attribute. The
    popover element also needs an `id` attribute. To link a trigger button to the
    popover, the button is given a `popovertarget` attribute. The value of this attribute
    should correspond to the `id` of the popover.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要将元素变成弹出框，请给它添加 `popover` 属性。弹出框元素还需要一个 `id` 属性。为了将触发按钮链接到弹出框，该按钮被赋予一个 `popovertarget`
    属性。此属性的值应与弹出框的 `id` 对应。
- en: One drawback of the popover API in its current state is that there is no mechanism
    to position the popover relative to its trigger. By default, the popover always
    appears centered on screen. If you want to change its position, you’ll need to
    manually do that with CSS.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出框 API 当前的一个缺点是没有机制可以将弹出框相对于其触发器定位。默认情况下，弹出框始终出现在屏幕中心。如果您想更改其位置，则需要手动使用 CSS
    进行调整。
- en: In the future, you will be able to use CSS anchor positioning to position the
    popover relative to its trigger. In the meantime, there are third-party libraries
    such as Floating UI that you can use to augment this solution in order to position
    the element.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，您将能够使用 CSS 锚点定位来将弹出框相对于其触发器定位。与此同时，还有第三方库，如 Floating UI，您可以使用它来增强此解决方案以定位元素。
- en: Manually Controlling a Popover
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动控制弹出框
- en: Problem
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use the `popover` attribute but programmatically use JavaScript
    to have control over when the popover is shown and hidden.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用 `popover` 属性，但希望使用 JavaScript 以编程方式控制何时显示和隐藏弹出框。
- en: Solution
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Set the `popover` attribute to `manual` and call its `showPopover`, `hidePopover`,
    or `togglePopover` methods (see [Example 13-15](#example13-15)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `popover` 属性设置为 `manual` 并调用其 `showPopover`、`hidePopover` 或 `togglePopover`
    方法（参见 [示例 13-15](#example13-15)）。
- en: Example 13-15\. The popover and trigger markup
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-15\. 弹出框和触发器标记
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 可能尚未被所有浏览器支持。请参见 [CanIUse](https://oreil.ly/YFjQX) 获取最新的兼容性数据。
- en: The `popover="manual"` attribute tells the browser that the popover will be
    manually controlled (see [Example 13-16](#example13-16)). To show the popover,
    select the popover element and call its `togglePopover` method. This will show
    the popover when it is hidden and hide the popover when it is shown.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`popover="manual"` 属性告诉浏览器弹出框将由手动控制（参见 [示例 13-16](#example13-16)）。要显示弹出框，请选择弹出框元素并调用其
    `togglePopover` 方法。这将在弹出框隐藏时显示它，并在显示时隐藏弹出框。'
- en: Example 13-16\. The toggle button code
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-16\. 切换按钮代码
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Discussion
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: If you want to manually control the popover’s visibility, make sure that you
    set the `popover` attribute to `manual`. When the popover element is set to manual
    control, clicking outside of the popover will *not* close it. To close the popover,
    you’ll need to call either its `hidePopover` or `togglePopover` methods.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想手动控制弹出框的可见性，请确保将 `popover` 属性设置为 `manual`。当弹出框元素设置为手动控制时，单击弹出框外部将 *不* 关闭它。要关闭弹出框，您需要调用其
    `hidePopover` 或 `togglePopover` 方法之一。
- en: Positioning a Popover Relative to an Element
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将弹出框相对于一个元素进行定位
- en: Problem
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to show a popover, but you don’t want it in the middle of the screen.
    You want to position it relative to another element, such as the button that triggered
    it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您想显示一个弹出框，但不希望它出现在屏幕中间。您希望将其相对于另一个元素定位，例如触发它的按钮。
- en: Solution
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Calculate the bounding rectangle of the element, then adjust the popover’s position
    accordingly. This example will cover positioning the tooltip just below the element.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 计算元素的边界矩形，然后相应调整弹出窗口的位置。此示例将覆盖将工具提示定位在元素正下方的情况。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 API 可能尚未被所有浏览器支持。参见[CanIUse](https://oreil.ly/YFjQX)获取最新的兼容性数据。
- en: First, you’ll need to apply some styles to the popover element, as shown in
    [Example 13-17](#example13-17).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要对弹出窗口元素应用一些样式，如[示例 13-17](#example13-17)所示。
- en: Example 13-17\. The popover styles
  id: totrans-144
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-17\. 弹出窗口样式
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, the browser uses margin to center the popover within the viewport.
    To position the popover relative to another element, you need to remove this margin.
    Since you are positioning the tooltip below the other element, you can set a `margin-top`
    so that there’s a small amount of space between the element and the popover. Finally,
    to make the popover scroll along with the element, you need to set `position:
    fixed`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下，浏览器使用边距来将弹出窗口居中显示在视口内。要相对于另一个元素定位弹出窗口，您需要移除此边距。由于您将工具提示定位在其他元素的下方，因此可以设置`margin-top`以在元素和弹出窗口之间留出一小段空间。最后，为了使弹出窗口随元素滚动，您需要设置`position:
    fixed`。'
- en: Next, you can use the `popovertarget` attribute on the trigger to automatically
    show the popover on click (see [Example 13-18](#example13-18)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以在触发器上使用`popovertarget`属性，以便在单击时自动显示弹出窗口（参见[示例 13-18](#example13-18)）。
- en: Example 13-18\. The popover and trigger markup
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-18\. 弹出窗口和触发器标记
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The last step is to update the popover’s position whenever it is shown. You
    can listen for the popover element’s `toggle` event, which is triggered when the
    popover is either shown or hidden. When handling this event, you can calculate
    the trigger element’s position and use it to update the popover’s position (see
    [Example 13-19](#example13-19)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在弹出窗口显示时更新其位置。您可以侦听弹出窗口元素的`toggle`事件，该事件在弹出窗口显示或隐藏时触发。处理此事件时，可以计算触发器元素的位置，并用其来更新弹出窗口的位置（参见[示例 13-19](#example13-19)）。
- en: Example 13-19\. Setting the popover’s position
  id: totrans-151
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-19\. 设置弹出窗口的位置
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Discussion
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'If you are familiar with CSS positioning, you might be a little confused about
    the behavior of `position: absolute` here. Normally, `position: absolute` will
    position the element relative to its closest positioned ancestor element. In this
    case, though, the popover will always be positioned relative to the viewport.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您熟悉 CSS 定位，可能会对此处`position: absolute`的行为感到有些困惑。通常情况下，`position: absolute`会将元素相对于其最近的已定位祖先元素定位。但在这种情况下，弹出窗口始终相对于视口定位。'
- en: 'This is because popovers are positioned inside the browser’s *top layer*. This
    is a special layer that is on top of all other layers in the document. Regardless
    of where in the DOM your popover element exists, the popover content is placed
    in the top layer. Since it’s in this special top layer, `position: absolute` will
    position the element relative to the viewport.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '这是因为弹出窗口位于浏览器的*顶层*内。这是一个特殊的层，位于文档中所有其他层的顶部。无论您的弹出窗口元素在 DOM 中的位置如何，弹出窗口内容都放置在顶层中。由于它位于这个特殊的顶层中，`position:
    absolute`将使元素相对于视口定位。'
- en: The position of the popover is calculated by calling `getBoundingClientRect`
    on the trigger element. As you scroll the page, the top and bottom positions of
    this rectangle will change. To make sure the popover is positioned correctly underneath
    the trigger, you also need to include `window.scrollY` in the calculation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口的位置是通过调用触发器元素上的`getBoundingClientRect`计算的。随着页面滚动，此矩形的顶部和底部位置将发生变化。为了确保弹出窗口正确地位于触发器下方，还需在计算中包括`window.scrollY`。
- en: There are a few limitations to note of this implementation. First, if the trigger
    element is at the bottom of the document, there may not be enough room underneath
    the element to show the popover. You may want to check for this and, when there
    isn’t enough room, position the popover *above* the trigger instead.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些限制需要注意。首先，如果触发器元素位于文档底部，则可能没有足够的空间在元素下方显示弹出窗口。您可以检查这一点，并在空间不足时将弹出窗口定位*在*触发器上方。
- en: Another thing you might want to handle is if the window is resized while the
    popover is visible, the position may not be updated correctly. You could use a
    `ResizeObserver` or the window’s `resize` event to handle this case.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件你可能想要处理的事情是，如果在弹出窗口可见时调整窗口大小，则位置可能不会正确更新。你可以使用 `ResizeObserver` 或窗口的 `resize`
    事件来处理这种情况。
- en: Showing a Tooltip
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示工具提示
- en: Problem
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to show a tooltip when hovering over, or focusing, an element.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望在悬停或焦点在一个元素上时显示工具提示。
- en: Solution
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a manually controlled popover, showing and hiding it with the corresponding
    mouse events. This will use the same positioning approach as in [“Positioning
    a Popover Relative to an Element”](#recipe_positioning), so first you’ll need
    to define the custom styles for the popover (see [Example 13-20](#example13-20)).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用手动控制的弹出窗口，在相应的鼠标事件中显示和隐藏它。这将使用与 [“相对于元素定位弹出窗口的位置”](#recipe_positioning) 相同的定位方法，因此首先需要为弹出窗口定义自定义样式（参见
    [示例 13-20](#example13-20)）。
- en: Example 13-20\. The tooltip styles
  id: totrans-164
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-20。工具提示样式
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This API may not be supported by all browsers yet. See [CanIUse](https://oreil.ly/YFjQX)
    for the latest compatibility data.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 API 可能还不被所有浏览器支持。查看 [CanIUse](https://oreil.ly/YFjQX) 获取最新的兼容性数据。
- en: Implement the tooltip as a popover with the `popover` attribute set to `manual`,
    as shown in [Example 13-21](#example13-21).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 将工具提示实现为一个带有 `popover` 属性设置为 `manual` 的弹出窗口，如 [示例 13-21](#example13-21) 所示。
- en: Example 13-21\. The tooltip markup
  id: totrans-169
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-21。工具提示标记
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When the mouse hovers over the trigger, calculate the position and show the
    popover element on the `mouseover` event. On the `mouseout` event, hide the popover
    element (see [Example 13-22](#example13-22)).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在触发器上时，计算位置并在 `mouseover` 事件上显示弹出窗口元素。在 `mouseout` 事件上隐藏弹出窗口元素（参见 [示例 13-22](#example13-22)）。
- en: Example 13-22\. Showing and hiding the tooltip
  id: totrans-172
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-22。显示和隐藏工具提示
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Discussion
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Since this uses the same positioning technique as [“Positioning a Popover Relative
    to an Element”](#recipe_positioning), it has the same limitations:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这使用与 [“相对于元素定位弹出窗口的位置”](#recipe_positioning) 相同的定位技术，因此它具有相同的限制：
- en: It doesn’t account for the case where there’s not enough room to show the tooltip
    below it.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有考虑到如果下方没有足够的空间来显示工具提示的情况。
- en: It doesn’t account for resizing the window.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有考虑调整窗口大小的情况。
- en: Showing a Notification
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示通知
- en: Problem
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to notify the user when something occurs in your app.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序中发生某些事件时，你希望通知用户。
- en: Solution
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use a `Notification` object to show a native operating system notification.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Notification` 对象来显示原生操作系统通知。
- en: In order to show notifications, you must first ask the user for permission.
    This is done with the `Notification.requestPermission` method. To check if the
    user has already given permission, you can check the `Notification.permission`
    property.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示通知，必须首先请求用户的权限。这可以通过 `Notification.requestPermission` 方法来实现。要检查用户是否已经给予了权限，可以检查
    `Notification.permission` 属性。
- en: '[Example 13-23](#example13-23) shows a helper function that checks the permission,
    asks the user for permission if necessary, and returns a boolean indicating whether
    or not notifications can be shown.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 13-23](#example13-23) 展示了一个检查权限的辅助函数，如果需要的话会请求用户的权限，并返回一个布尔值，指示是否可以显示通知。'
- en: Example 13-23\. Checking notification permissions
  id: totrans-185
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-23。检查通知权限
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once you have checked for permission, you can send a new notification by creating
    a new `Notification` instance. Use the `getPermission` helper to determine if
    a notification should be shown (see [Example 13-24](#example13-24)).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦检查了权限，你可以通过创建一个新的 `Notification` 实例来发送新通知。使用 `getPermission` 辅助函数来确定是否应该显示通知（参见
    [示例 13-24](#example13-24)）。
- en: Example 13-24\. Showing a notification
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 13-24。显示通知
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you try to show a notification when permission hasn’t been granted, the `Notification`
    object will trigger an `error` event.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试在未获得权限的情况下显示通知，则 `Notification` 对象将触发一个 `error` 事件。
- en: '[Figure 13-5](#figure_notification) shows what this notification might look
    like on a desktop computer.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-5](#figure_notification) 展示了桌面电脑上此通知可能的样子。'
- en: '![A screenshot of a notification rendered on macOS 14](assets/wacb_1305.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![macOS 14 上渲染的通知截图](assets/wacb_1305.png)'
- en: Figure 13-5\. A notification rendered on macOS 14
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 第 13-5 图。在 macOS 14 上渲染的通知
- en: Discussion
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Notifications can only be shown from apps running in a *secure context*. Typically,
    this means it must be served with HTTPS or from a `localhost` URL.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通知只能从运行在*安全上下文*中的应用程序中显示。通常，这意味着它必须通过 HTTPS 或者 `localhost` URL 提供。
- en: 'The `Notification.permission` property has one of three values:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`Notification.permission` 属性有三个可能的值之一：'
- en: '`granted`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`granted`'
- en: The user has expressly granted permissions to show notifications.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 用户已明确授予显示通知的权限。
- en: '`denied`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`denied`'
- en: The user has expressly denied permission to show notifications when prompted.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 用户明确拒绝在提示时显示通知。
- en: '`default`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`default`'
- en: The user hasn’t responded to a notification permission request. Browsers will
    treat this the same as the `denied` case.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 用户未响应通知权限请求。浏览器将其视为与 `denied` 情况相同。
- en: 'A `Notification` can trigger some other events as well:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Notification` 也可以触发其他一些事件：
- en: '`show`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`'
- en: Triggered when the notification is shown
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在通知显示时触发
- en: '`close`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`close`'
- en: Triggered when the notification closes
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在通知关闭时触发
- en: '`click`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`click`'
- en: Triggered when the notification is clicked
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在通知被点击时触发
