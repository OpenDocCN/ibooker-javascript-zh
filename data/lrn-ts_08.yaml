- en: Chapter 6\. Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。数组
- en: Arrays and tuples
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数组和元组
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One flexible and one fixed
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个灵活一个固定
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Choose your adventure
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 选择您的冒险
- en: 'JavaScript arrays are wildly flexible and can hold any mixture of values inside:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 数组非常灵活，可以容纳任意混合的值：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In most cases, though, individual JavaScript arrays are intended to hold only
    one specific type of value. Adding values of a different type may be confusing
    to readers, or worse, the result of an error that could cause problems in the
    program.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，单个 JavaScript 数组的目的是只存储特定类型的值。添加不同类型的值可能会令读者困惑，或者更糟糕的是，可能导致程序错误。
- en: TypeScript respects the best practice of keeping to one data type per array
    by remembering what type of data is initially inside an array, and only allowing
    the array to operate on that kind of data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 遵循保持每个数组一个数据类型的最佳实践，通过记住数组初始时包含的数据类型，并仅允许数组在该数据类型上操作来实现。
- en: 'In this example, TypeScript knows the `warriors` array initially contains `string`
    typed values, so while adding more `string` typed values is allowed, adding any
    other type of data is not:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，TypeScript 知道 `warriors` 数组最初包含 `string` 类型的值，因此允许添加更多的 `string` 类型的值，但不允许添加其他类型的数据：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can think of TypeScript’s inference of an array’s type from its initial
    members as similar to how it understands variable types from their initial values.
    TypeScript generally tries to understand the intended types of your code from
    how values are assigned, and arrays are no exception.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 TypeScript 对数组类型的推断视为类似于它如何从初始成员理解变量类型。TypeScript 通常尝试从分配值的方式理解代码的预期类型，数组也不例外。
- en: Array Types
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组类型
- en: As with other variable declarations, variables meant to store arrays don’t need
    to have an initial value. The variables can start off `undefined` and receive
    an array value later.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他变量声明一样，用于存储数组的变量不需要具有初始值。变量可以从 `undefined` 开始，并稍后接收数组值。
- en: 'TypeScript will want you to let it know what types of values are meant to go
    in the array by giving the variable a type annotation. The type annotation for
    an array requires the type of elements in the array followed by a `[]`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 希望您通过给变量添加类型注解来告知它应将什么类型的值放入数组中。数组的类型注解要求数组中元素的类型，后跟一个 `[]`：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Array types can also be written in a syntax like `Array<number>` called *class
    generics*. Most developers prefer the simpler `number[]`. Classes are covered
    in [Chapter 8, “Classes”](ch08.xhtml#classes), and generics are covered in [Chapter 9,
    “Type Modifiers”](ch09.xhtml#type_modifiers_chapter).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数组类型也可以像 `Array<number>` 这样的语法写成 *类泛型*。大多数开发者更喜欢简单的 `number[]`。类在 [第8章，“类”](ch08.xhtml#classes)
    中讨论，泛型在 [第9章，“类型修饰符”](ch09.xhtml#type_modifiers_chapter) 中讨论。
- en: Array and Function Types
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组和函数类型
- en: Array types are an example of a syntax container where function types may need
    parentheses to distinguish what’s in the function type or not. Parentheses may
    be used to indicate which part of an annotation is the function return or the
    surrounding array type.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数组类型是一个语法容器的示例，其中函数类型可能需要使用括号来区分函数类型中的内容。括号可以用来指示注解的哪一部分是函数返回或周围的数组类型。
- en: 'The `createStrings` type here, which is a function type, is not the same as
    `stringCreators`, which is an array type:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的 `createStrings` 类型是一个函数类型，与 `stringCreators`（数组类型）不同：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Union-Type Arrays
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 联合类型数组
- en: You can use a union type to indicate that each element of an array can be one
    of multiple select types.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用联合类型来表示数组的每个元素可以是多种选择类型中的一种。
- en: 'When using array types with unions, parentheses may need to be used to indicate
    which part of an annotation is the contents of the array or the surrounding union
    type. Using parentheses in array union types is important—the following two types
    are not the same:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用联合类型数组时，可能需要使用括号来指示注解的哪一部分是数组的内容或周围的联合类型。在数组联合类型中使用括号很重要——以下两种类型不同：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: TypeScript will understand from an array’s declaration that it is a union-type
    array if it contains more than one type of element. In other words, the type of
    an array’s elements is the union of all possible types for elements in the array.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 将从数组的声明中理解为联合类型数组，如果数组中包含多种类型的元素。换句话说，数组元素的类型是数组中所有可能元素类型的并集。
- en: 'Here, `namesMaybe` is `(string | undefined)[]` because it has both `string`
    values and an `undefined` value:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`namesMaybe` 是 `(string | undefined)[]`，因为它既有 `string` 值，也有 `undefined`
    值：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Evolving Any Arrays
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发展任意数组
- en: If you don’t include a type annotation on a variable initially set to an empty
    array, TypeScript will treat the array as evolving `any[]`, meaning it can receive
    any content. As with evolving `any` variables, we don’t like evolving `any[]`
    arrays. They partially negate the benefits of TypeScript’s type checker by allowing
    you to add potentially incorrect values.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在初始设置为空数组的变量上没有包含类型注解，TypeScript 将把该数组视为逐步演化为`any[]`，这意味着它可以接收任何内容。和逐步演化的`any`变量一样，我们不喜欢逐步演化的`any[]`数组。它们部分抵消了TypeScript类型检查器的好处，因为允许你添加潜在不正确的值。
- en: 'This `values` array starts off containing `any` elements, evolves to contain
    `string` elements, then again evolves to include `number | string` elements:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`values`数组最初包含`any`元素，然后演变为包含`string`元素，然后再次演变为包含`number | string`元素：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As with variables, allowing arrays to be evolving `any` typed—and using the
    `any` type in general—partially defeats the purpose of TypeScript’s type checking.
    TypeScript works best when it knows what types your values are meant to be.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 和变量一样，允许数组成为逐步演化的`any`类型——以及通常使用`any`类型——部分地削弱了TypeScript类型检查的目的。当TypeScript知道你的值应该是什么类型时，它的工作效果最佳。
- en: Multidimensional Arrays
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多维数组
- en: 'A 2D array, or an array of arrays, will have two “[]”s:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个2D数组，或者说是数组的数组，会有两个“[]”：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A 3D array, or an array of arrays of arrays, will have three “[]”s. 4D arrays
    have four “[]”s. 5D arrays have five “[]”s. You can guess where this is going
    for 6D arrays and beyond.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个3D数组，或者说是数组的数组的数组，会有三个“[]”。4D数组有四个“[]”。5D数组有五个“[]”。你可以猜想，对于6D数组及以上情况也是如此。
- en: These multidimensional array types don’t introduce any new concepts to array
    types. Think of a 2D array as taking in the original type, which just so happens
    to have `[]` at the end, and adding a `[]` after it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些多维数组类型并没有为数组类型引入任何新的概念。将2D数组视为接受原始类型，只是在末尾添加了`[]`。
- en: 'This `arrayOfArraysOfNumbers` array is of type `number[][]`, which is also
    representable by `(number[])[]`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`arrayOfArraysOfNumbers`数组的类型是`number[][]`，也可以表示为`(number[])[]`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Array Members
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组成员
- en: TypeScript understands typical index-based access for retrieving members of
    an array to give back an element of that array’s type.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript理解通过典型的基于索引的访问来检索数组成员，以返回该数组类型的元素。
- en: 'This `defenders` array is of type `string[]`, so `defender` is a `string`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`defenders`数组的类型是`string[]`，所以`defender`是一个`string`：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Members of union typed arrays are themselves that same union type.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 联合类型数组的成员本身是相同的联合类型。
- en: 'Here, `soldiersOrDates` is of type `(string | Date)[]`, so the `soldierOrDate`
    variable is of type `string | Date`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`soldiersOrDates`的类型是`(string | Date)[]`，因此`soldierOrDate`变量的类型是`string
    | Date`：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Caveat: Unsound Members'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意：不完备成员
- en: 'The TypeScript type system is known to be technically *unsound*: it can get
    types mostly right, but sometimes its understanding about the types of values
    may be incorrect. Arrays in particular are a source of unsoundness in the type
    system. By default, TypeScript assumes all array member accesses return a member
    of that array, even though in JavaScript, accessing an array element with an index
    greater than the array’s length gives `undefined`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript类型系统被认为在技术上是*不完备*的：它可以大部分时间得到正确的类型，但有时它对值的类型理解可能是错误的。特别是数组在类型系统中是不完备性的源头。默认情况下，TypeScript假设所有数组成员访问都会返回该数组的成员，即使在JavaScript中，使用大于数组长度的索引访问数组元素会返回`undefined`。
- en: 'This code gives no complaints with the default TypeScript compiler settings:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在默认的TypeScript编译器设置下没有任何投诉：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We as readers can deduce that it’ll crash at runtime with “`Cannot read property
    'length' of undefined`”, but TypeScript intentionally does not make sure retrieved
    array members exist. It sees `elements[9001]` in the code snippet as being type
    `string`, not `undefined`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为读者，我们可以推断它会在运行时崩溃，显示“`Cannot read property 'length' of undefined`”，但TypeScript故意不确保检索到的数组成员存在。它在代码片段中看到`elements[9001]`被视为`string`类型，而不是`undefined`类型。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: TypeScript does have a `--noUncheckedIndexedAccess` flag that makes array lookups
    more restricted and type safe, but it’s quite strict and most projects don’t use
    it. I don’t cover it in this book. [Chapter 12, “Using IDE Features”](ch12.xhtml#using_ide_features)
    links to resources that explain all of TypeScript’s configuration options in depth.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript确实有一个`--noUncheckedIndexedAccess`标志，使得数组查找更加受限和类型安全，但它相当严格，大多数项目不使用它。我在本书中没有涵盖它。[第12章，“使用IDE功能”](ch12.xhtml#using_ide_features)链接到解释TypeScript所有配置选项深入的资源。
- en: Spreads and Rests
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展开和剩余参数
- en: Remember `...` rest parameters for functions from [Chapter 5, “Functions”](ch05.xhtml#functions)?
    Rest parameters and array spreading, both with the `...` operator, are key ways
    to interact with arrays in JavaScript. TypeScript understands both of them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得来自[第 5 章，“函数”](ch05.xhtml#functions)的`...` rest 参数吗？`...`操作符的 rest 参数和数组展开是与
    JavaScript 中数组交互的关键方式。 TypeScript 理解这两者。
- en: Spreads
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spreads
- en: Arrays can be joined together using the `...` spread operator. TypeScript understands
    the result array will contain values that can be from either of the input arrays.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`...`展开操作符可以将数组连接在一起。TypeScript 理解结果数组将包含可以来自任一输入数组的值。
- en: If the input arrays are the same type, the output array will be that same type.
    If two arrays of different types are spread together to create a new array, the
    new array will be understood to be a union type array of elements that are either
    of the two original types.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入数组是相同类型，则输出数组将是相同类型。如果将两个不同类型的数组一起展开以创建新数组，则新数组将被理解为原始两种类型的并集数组。
- en: 'Here, the `conjoined` array is known to contain both values that are type `string`
    and values that are type `number`, so its type is inferred to be `(string | number)[]`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`conjoined`数组已知包含类型为`string`和`number`的值，因此其类型被推断为`(string | number)[]`：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Spreading Rest Parameters
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展开 rest 参数
- en: TypeScript recognizes and will perform type checking on the JavaScript practice
    of `...` spreading an array as a rest parameter. Arrays used as arguments for
    rest parameters must have the same array type as the rest parameter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 识别并将对 JavaScript 中`...`展开数组作为 rest 参数的做法进行类型检查。用作 rest 参数的数组必须具有与
    rest 参数相同的数组类型。
- en: 'The `logWarriors` function below takes in only `string` values for its `...names`
    rest parameter. Spreading an array of type `string[]` is allowed, but a `number[]`
    is not:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`logWarriors`函数仅接受其`...names` rest 参数的`string`值。允许展开`string[]`类型的数组，但不允许`number[]`：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tuples
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: Although JavaScript arrays may be any size in theory, it is sometimes useful
    to use an array of a fixed size—also known as a *tuple*. Tuple arrays have a specific
    known type at each index that may be more specific than a union type of all possible
    members of the array. The syntax to declare a tuple type looks like an array literal,
    but with types in place of element values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 JavaScript 数组在理论上可以是任意大小，但有时使用固定大小的数组也很有用，也称为*元组*。元组数组在每个索引处具有特定的已知类型，可能比数组所有可能成员的联合类型更具体。声明元组类型的语法类似于数组文字，但在元素值的位置上有类型。
- en: 'Here, the array `yearAndWarrior` is declared as being a tuple type with a `number`
    at index 0 and a `string` at index 1:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，数组`yearAndWarrior`被声明为具有索引 0 处为`number`，索引 1 处为`string`的元组类型：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tuples are often used in JavaScript alongside array destructuring to be able
    to assign multiple values at once, such as setting two variables to initial values
    based on a single condition.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 元组经常与数组解构一起在 JavaScript 中使用，以便根据单个条件设置两个变量的初始值。
- en: 'For example, TypeScript recognizes here that `year` is always going to be a
    `number` and `warrior` is always going to be a `string`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，TypeScript 在这里认识到`year`将始终是`number`，而`warrior`将始终是`string`：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tuple Assignability
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组可赋值性
- en: Tuple types are treated by TypeScript as more specific than variable length
    array types. That means variable length array types aren’t assignable to tuple
    types.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 将元组类型视为比可变长度数组类型更具体。这意味着可变长度数组类型不能赋值给元组类型。
- en: 'Here, although we as humans may see `pairLoose` as having `[boolean, number]`
    inside, TypeScript infers it to be the more general `(boolean | number)[]` type:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，虽然我们人类可能会认为`pairLoose`内部有`[boolean, number]`，但 TypeScript 推断它为更一般的`(boolean
    | number)[]`类型：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If `pairLoose` had been declared as a `[boolean, number]` itself, the assignment
    of its value to `pairTuple` would have been permitted.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`pairLoose`本身被声明为`[boolean, number]`，则允许将其值分配给`pairTuple`。
- en: Tuples of different lengths are also not assignable to each other, as TypeScript
    includes knowing how many members are in the tuple in tuple types.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 不同长度的元组也不能相互赋值，因为 TypeScript 在元组类型中包含了知道元组中有多少成员。
- en: 'Here, `tupleTwoExtra` must have exactly two members, so although `tupleThree`
    starts with the correct members, its third member prevents it from being assignable
    to `tupleTwoExtra`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`tupleTwoExtra`必须具有精确两个成员，因此虽然`tupleThree`以正确的成员开始，但其第三个成员阻止了其分配给`tupleTwoExtra`：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tuples as rest parameters
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tuples as rest parameters
- en: Because tuples are seen as arrays with more specific type information on length
    and element types, they can be particularly useful for storing arguments to be
    passed to a function. TypeScript is able to provide accurate type checking for
    tuples passed as `...` rest parameters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为元组被视为具有更多特定类型信息的数组，包括长度和元素类型，它们可以特别有用于存储要传递给函数的参数。对于作为 `...` 剩余参数传递的元组，TypeScript
    能够提供准确的类型检查。
- en: 'Here, the `logPair` function’s parameters are typed `string` and `number`.
    Trying to pass in a value of type `(string | number)[]` as arguments wouldn’t
    be type safe as the contents might not match up: they could both be the same type,
    or one of each type in the wrong order. However, if TypeScript knows the value
    to be a `[string, number]` tuple, it understands the values match up:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`logPair` 函数的参数被类型化为 `string` 和 `number`。尝试将类型为 `(string | number)[]` 的值作为参数传入是不安全的，因为内容可能不匹配：它们可能是相同类型，或者一个是每种类型的错误顺序。然而，如果
    TypeScript 知道该值是 `[string, number]` 元组，它就理解值是匹配的：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you really want to go wild with your rest parameters tuples, you can mix
    them with arrays to store a list of arguments for multiple function calls. Here,
    `trios` is an array of tuples, where each tuple also has a tuple for its second
    member. `trios.forEach(trio => logTrio(...trio))` is known to be safe because
    each `...trio` happens to match the parameter types of `logTrio`. `trios.forEach(logTrio)`,
    however, is not assignable because that is attempting to pass the entire `[string,
    [number, boolean]` as the first parameter, which is type `string`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实希望对剩余参数元组进行大胆尝试，您可以将它们与数组混合使用，以存储多个函数调用的参数列表。在这里，`trios` 是一个元组数组，其中每个元组的第二个成员也是一个元组。`trios.forEach(trio
    => logTrio(...trio))` 是安全的，因为每个 `...trio` 恰好匹配 `logTrio` 的参数类型。然而，`trios.forEach(logTrio)`
    是不可分配的，因为它试图将整个 `[string, [number, boolean]` 作为第一个参数传递，这是类型 `string`：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tuple Inferences
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组推断
- en: TypeScript generally treats created arrays as variable length arrays, not tuples.
    If it sees an array being used as a variable’s initial value or the returned value
    for a function, then it will assume a flexible size array rather than a fixed
    size tuple.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 通常将创建的数组视为可变长度数组，而不是元组。如果看到一个数组被用作变量的初始值或函数的返回值，那么它将假定为灵活大小的数组，而不是固定大小的元组。
- en: 'The following `firstCharAndSize` function is inferred as returning `(string
    |` `number)[]`, not `[string, number]`, because that’s the type inferred for its
    returned array literal:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 `firstCharAndSize` 函数被推断为返回 `(string | number)[]`，而不是 `[string, number]`，因为这是对其返回的数组文字推断的类型：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There are two common ways in TypeScript to indicate that a value should be
    a more specific tuple type instead of a general array type: explicit tuple types
    and `const` assertions.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中有两种常见的方法来指示一个值应该是一个更具体的元组类型而不是一般的数组类型：显式元组类型和 `const` 断言。
- en: Explicit tuple types
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式元组类型
- en: Tuple types may be used in type annotations, such as the return type annotation
    for a function. If the function is declared as returning a tuple type and returns
    an array literal, that array literal will be inferred to be a tuple instead of
    a more general variable-length array.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 元组类型可以在类型注释中使用，例如函数的返回类型注释。如果函数被声明为返回元组类型并返回数组文字，那么该数组文字将被推断为元组而不是更一般的可变长度数组。
- en: 'This `firstCharAndSizeExplicit` function version explicitly states that it
    returns a tuple of a `string` and `number`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `firstCharAndSizeExplicit` 函数版本明确声明它返回一个 `string` 和 `number` 的元组：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Const asserted tuples
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Const 断言元组
- en: Typing out tuple types in explicit type annotations can be a pain for the same
    reasons as typing out any explicit type annotations. It’s extra syntax for you
    to write and update as code changes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在显式类型注释中键入元组类型可能会因为与任何显式类型注释键入相同的原因而让人感到头疼。这是额外的语法需要您在代码更改时编写和更新。
- en: 'As an alternative, TypeScript provides an `as const` operator known as a *const
    assertion* that can be placed after a value. Const assertions tell TypeScript
    to use the most literal, read-only possible form of the value when inferring its
    type. If one is placed after an array literal, it will indicate that the array
    should be treated as a tuple:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方案，TypeScript 提供了一个称为 *const 断言* 的 `as const` 操作符，可以放置在一个值之后。Const 断言告诉
    TypeScript 在推断其类型时使用最字面、最只读的可能形式。如果在数组文字之后放置一个 const 断言，它将指示该数组应该被视为元组：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that `as const` assertions go beyond switching from flexible sized arrays
    to fixed size tuples: they also indicate to TypeScript that the tuple is read-only
    and cannot be used in a place that expects it should be allowed to modify the
    value.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`as const` 断言不仅仅是将灵活大小的数组转换为固定大小的元组：它们还指示 TypeScript 元组是只读的，不能在期望修改值的地方使用。
- en: 'In this example, `pairMutable` is allowed to be modified because it has a traditional
    explicit tuple type. However, the `as const` makes the value not assignable to
    the mutable `pairAlsoMutable`, and members of the constant `pairConst` are not
    allowed to be modified:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`pairMutable` 允许修改，因为它具有传统的显式元组类型。然而，`as const` 使得不可修改的值不能赋给可变的 `pairAlsoMutable`，并且常量
    `pairConst` 的成员也不允许修改：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In practice, read-only tuples are convenient for function returns. Returned
    values from functions that return a tuple are often destructured immediately anyway,
    so the tuple being read-only does not get in the way of using the function.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，只读元组对于函数返回值非常方便。从返回元组的函数中返回的值通常会立即解构，因此只读元组不会妨碍函数的使用。
- en: 'This `firstCharAndSizeAsConst` returns a `readonly [string, number]`, but the
    consuming code only cares about retrieving the values from that tuple:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `firstCharAndSizeAsConst` 返回一个 `readonly [string, number]`，但是消费代码只关心从元组中检索值：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Read-only objects and `as const` assertions are covered more deeply in [Chapter 9,
    “Type Modifiers”](ch09.xhtml#type_modifiers_chapter).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 只读对象和 `as const` 断言在[第9章，“类型修饰符”](ch09.xhtml#type_modifiers_chapter)中有更详细的介绍。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you worked with declaring arrays and retrieving their members:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何声明数组并检索其成员：
- en: Declaring array types with `[]`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `[]` 声明数组类型
- en: Using parentheses to declare arrays of functions or union types
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用括号声明函数数组或联合类型
- en: How TypeScript understands array elements as the type of the array
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 如何理解数组元素作为数组类型的一部分
- en: Working with `...` spreads and rests
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `...` 展开和剩余参数
- en: Declaring tuple types to represent fixed-size arrays
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明元组类型以表示固定大小的数组
- en: Using type annotations or `as const` assertions to create tuples
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类型注解或 `as const` 断言来创建元组
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/arrays*](https://learningtypescript.com/arrays).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了本章的阅读，请在[*https://learningtypescript.com/arrays*](https://learningtypescript.com/arrays)上实践所学内容。
- en: What’s a pirate’s favorite data structure?
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 海盗最喜欢的数据结构是什么？
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Arrrrr-ays!
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 阵列！
