- en: Chapter 10\. Namespaces.Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章\. 命名空间和模块
- en: When you write a program, you can express encapsulation at several levels. At
    the lowest level, functions encapsulate behaviors, and data structures like objects
    and lists encapsulate data. You might then group functions and data into classes,
    or keep them separate as namespaced utilities with a separate database or store
    for your data. A single class or a set of utilities per file is typical. Going
    up, you might group a few classes or utilities into a package, which you publish
    to NPM.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写程序时，可以在多个级别表达封装。在最低级别，函数封装行为，而像对象和列表这样的数据结构封装数据。然后，你可以将函数和数据组合成类，或者将它们作为具有单独数据库或存储的命名空间实用程序保持分离。每个文件通常包含一个类或一组实用程序。再上一层，你可能将几个类或实用程序组合成一个包，并将其发布到
    NPM。
- en: When we talk about modules, it’s important to make a distinction between how
    the compiler (TSC) resolves modules, how your build system (Webpack, Gulp, etc.)
    resolves modules, and how modules are actually loaded into your application at
    runtime (`<script />` tags, SystemJS, etc.). In the JavaScript world there is
    usually a separate program that does each of these jobs, which can make modules
    hard to reason about. The CommonJS and ES2015 module standards make it easier
    to interoperate the three programs, and powerful bundlers like Webpack help abstract
    away the three kinds of resolution happening under the hood.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论模块时，重要的是要区分编译器（TSC）如何解析模块，构建系统（Webpack、Gulp 等）如何解析模块，以及模块如何在运行时加载到应用程序中（`<script
    />` 标签、SystemJS 等）。在 JavaScript 的世界中，通常有一个单独的程序来执行每一项任务，这使得模块很难理解。CommonJS 和 ES2015
    模块标准使得这三个程序更容易互操作，而像 Webpack 这样的强大捆绑工具帮助抽象出底层的三种解析方式。
- en: 'In this chapter we’ll focus on the first of these three kinds of programs:
    how TypeScript resolves and compiles modules. We’ll leave a discussion of how
    the build system and runtime loaders work with modules to [Chapter 12](ch12.html#typescript-in-production)
    and talk here about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注这三种程序中的第一种：TypeScript 如何解析和编译模块。我们将把讨论构建系统和运行时加载器如何处理模块的工作留给[第 12
    章](ch12.html#typescript-in-production)，在这里我们讨论：
- en: The different ways to namespace and modularize your code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的命名空间和模块化代码的方式
- en: The different ways to import and export code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的导入和导出代码的方式
- en: Scaling these approaches as your codebase grows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着代码库的增长而扩展这些方法
- en: Module mode versus script mode
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块模式与脚本模式
- en: What declaration merging is, and what you can do with it
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是声明合并，以及你可以用它做什么
- en: But first, a bit of background.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不过首先，稍微了解一下背景。
- en: A Brief History of JavaScript Modules
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 模块的简要历史
- en: Because TypeScript compiles to and interoperates with JavaScript, it has to
    support the various module standards that JavaScript programmers use.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 TypeScript 编译成 JavaScript 并与之互操作，所以必须支持 JavaScript 程序员使用的各种模块标准。
- en: In the beginning (in 1995), JavaScript didn’t support any sort of module system.
    Without modules, everything was declared in a global namespace, which made it
    really hard to build and scale applications. You could quickly run out of variable
    names, and run into collisions between variable names; and without exposing explicit
    APIs for each module, it’s hard to know which parts of a module you’re supposed
    to use, and which parts are private implementation details.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最初（1995 年），JavaScript 不支持任何模块系统。没有模块，一切都声明在全局命名空间中，这使得构建和扩展应用程序非常困难。你很快就会用完变量名，并遇到变量名之间的冲突；没有为每个模块公开明确的
    API，很难知道哪些模块部分是应该使用的，哪些是私有实现细节。
- en: 'To help solve these problems, people simulated modules with either objects
    or *Immediately Invoked Function Expressions* (IIFEs), which they assigned to
    the global `window`, making them available to other modules in their application
    (and in other applications hosted on the same web page). It looked something like
    this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，人们用对象或*立即调用的函数表达式*（IIFE）模拟模块，并将它们分配给全局的 `window`，使它们可以在应用程序中的其他模块（以及同一网页上的其他应用程序）中使用。看起来像这样：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Because loading and running JavaScript blocks the browser’s UI, as a web application
    grows and includes more and more lines of code, the user’s browser gets slower
    and slower. For this reason, clever programmers started dynamically loading JavaScript
    after the page loaded, rather than loading it all in one shot. Nearly 10 years
    after JavaScript was first released, Dojo (Alex Russell, 2004), YUI (Thomas Sha,
    2005), and LABjs (Kyle Simpson, 2009) shipped module loaders—ways to lazily (and
    often asynchronously) load JavaScript code after the initial page load has happened.
    Lazy and asynchronous module loading meant three things:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因为加载和运行JavaScript会阻塞浏览器的UI，随着Web应用程序越来越多地包含更多行代码，用户的浏览器会变得越来越慢。因此，聪明的程序员开始在页面加载后动态加载JavaScript，而不是一次性加载它。在JavaScript首次发布近10年后，Dojo（Alex
    Russell，2004）、YUI（Thomas Sha，2005）和LABjs（Kyle Simpson，2009）发布了模块加载器——在初始页面加载后惰性（通常是异步地）加载JavaScript代码的方法。惰性和异步模块加载意味着三件事：
- en: Modules needed to be well encapsulated. Otherwise, a page might be broken while
    dependencies are streaming in.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块需要良好封装。否则，在依赖项流入时页面可能会崩溃。
- en: Dependencies between modules needed to be explicit. Otherwise, we don’t know
    which modules need to be loaded and in what order.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块之间的依赖关系需要是显式的。否则，我们不知道哪些模块需要被加载以及以什么顺序加载。
- en: Every module needed a unique identifier within the app. Otherwise, there’s no
    reliable way to specify what modules need to be loaded.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个模块在应用程序内部需要一个唯一的标识符。否则，无法可靠地指定需要加载哪些模块。
- en: 'Loading a module with LABjs looked like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LABjs加载一个模块看起来像这样：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Around the same time, NodeJS (Ryan Dahl, 2009) was being developed, and its
    creators took a lesson from JavaScript’s growing pains and from other languages
    and decided to build a module system right into the platform. Like any good module
    system, it needed to satisfy the same three criteria as LABjs and YUI’s loaders.
    NodeJS did that with the CommonJS module standard, which looked like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同一时期，NodeJS（Ryan Dahl，2009）正在开发中，其创造者从JavaScript的成长痛苦和其他语言中吸取教训，并决定在平台中构建一个模块系统。像任何良好的模块系统一样，它需要满足LABjs和YUI加载器的三个标准。NodeJS通过CommonJS模块标准实现了这一点，它看起来像这样：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the meantime, on the web the AMD module standard (James Burke, 2008)—pushed
    by Dojo and RequireJS—was taking off. It supported an equivalent set of functionality,
    and came with its own build system for bundling up JavaScript code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，在Web上，由Dojo和RequireJS推动的AMD模块标准（James Burke，2008）正在崛起。它支持一组等效功能，并配备了自己的构建系统用于打包JavaScript代码：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A few years after that, Browserify came out (James Halliday, 2011), giving frontend
    engineers the ability to use CommonJS on the frontend, too. CommonJS became the
    de facto standard for module bundling and import/export syntax.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，Browserify出现了（James Halliday，2011），使得前端工程师也能在前端使用CommonJS。CommonJS成为了模块捆绑和导入/导出语法的事实标准。
- en: There were a few problems with the CommonJS way of doing things. Among them,
    `require` calls are necessarily synchronous, and the CommonJS module resolution
    algorithm is not ideal for use on the web. On top of that, code that uses it isn’t
    statically analyzable in some cases (as a TypeScript programmer, this should perk
    your ears up), because `module.exports` can appear anywhere (even in dead code
    branches that are never actually reached) and `require` calls can appear anywhere
    and contain arbitrary strings and expressions, making it impossible to statically
    link a JavaScript program, and verify that all referenced files really exist and
    export what they say they export.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS做事情的方式存在一些问题。其中之一是，`require`调用是同步的，且CommonJS模块解析算法在Web上并不理想。除此之外，使用它的代码在某些情况下不能静态分析（作为TypeScript程序员，这应该引起您的注意），因为`module.exports`可以出现在任何地方（甚至在永远不会实际达到的死代码分支中），而`require`调用可以出现在任何地方并包含任意字符串和表达式，这使得静态链接JavaScript程序并验证所有引用的文件是否真实存在并导出它们说他们导出的内容成为不可能。
- en: 'Against this backdrop, ES2015—the sixth edition of the ECMAScript language—introduced
    a new standard for imports and exports that had a clean syntax and was statically
    analyzable. It looks like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种背景下，ES2015——ECMAScript语言的第六版——引入了一个新的标准，用于导入和导出，具有清晰的语法并且是静态分析可行的。它看起来像这样：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the standard we use in JavaScript and TypeScript code today. However,
    at the time of writing the standard isn’t yet natively supported in every JavaScript
    runtime, so we have to compile it down to a format that is supported (CommonJS
    for NodeJS environments, globals or a module-loadable format for browser environments).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们今天在JavaScript和TypeScript代码中使用的标准。然而，在撰写本文时，该标准尚未在每个JavaScript运行时原生支持，因此我们必须将其编译为受支持的格式（NodeJS环境下的CommonJS，浏览器环境中的全局或模块可加载格式）。
- en: 'TypeScript gives us a few ways to consume and export code in a module: with
    global declarations, with standard ES2015 `import`s and `export`s, and with backward-compatible
    `import`s from CommonJS modules. On top of that, TSC’s build system lets us compile
    modules for a variety of environments: globals, ES2015, CommonJS, AMD, SystemJS,
    or UMD (a mix of CommonJS, AMD, and globals—whichever happens to be available
    in the consumer’s environment).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript为我们提供了几种在模块中使用和导出代码的方式：使用全局声明、标准的ES2015的`import`和`export`，以及从CommonJS模块中向后兼容的`import`。此外，TSC的构建系统允许我们将模块编译为多种环境：全局、ES2015、CommonJS、AMD、SystemJS或UMD（CommonJS、AMD和全局的混合——以消费者环境中可用的为准）。
- en: import, export
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: import，export
- en: 'Unless you’re being chased by wolves, you should use ES2015 `import`s and `export`s
    in your TypeScript code, rather than using CommonJS, global, or namespaced modules.
    They look like this—the same as plain old JavaScript:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你被狼追赶，否则在你的TypeScript代码中应该使用ES2015的`import`和`export`，而不是使用CommonJS、全局或命名空间模块。它们看起来像这样——与普通的JavaScript一样：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The ES2015 module standard supports default exports:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ES2015模块标准支持默认导出：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It also supports importing everything from a module using a wildcard import
    (`*`):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它还支持使用通配符导入（`*`）从一个模块中导入所有内容：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And reexporting some (or all) exports from a module:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并重新导出一个模块的一些（或全部）导出：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Because we’re writing TypeScript, not JavaScript, we can of course export types
    and interfaces as well as values. And because types and values live in separate
    namespaces, it’s perfectly fine to export two things—one at the value level and
    one at the type level—that share the same name. Like for any other code, TypeScript
    will infer whether you meant the type or the value when you actually use it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们写的是TypeScript，而不是JavaScript，当然可以导出类型和接口以及值。而且因为类型和值存在于不同的命名空间中，所以当您实际使用它时，TypeScript会推断您是指类型还是值：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Module paths are filenames on the filesystem. This couples modules with the
    way they’re laid out in the filesystem, but is an important feature for module
    loaders that need to be aware of that layout so they can resolve modules names
    to files.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 模块路径是文件系统上的文件名。这将模块与它们在文件系统中的布局方式耦合在一起，但对于需要了解该布局以解析模块名称为文件的模块加载器来说，这是一个重要的特性。
- en: Dynamic Imports
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态导入
- en: As your application gets bigger, its time to initial render will get worse and
    worse. This is especially a problem for frontend applications where the network
    can be a bottleneck, but it also applies to backend applications that take more
    time to start up as you import more code at the top level—code that needs to be
    loaded from the filesystem, parsed, compiled, and evaluated, all while blocking
    other code from running.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序变得越来越庞大，其初始渲染的时间会变得越来越糟糕。这在前端应用程序中尤为严重，因为网络可能成为瓶颈，但它也适用于后端应用程序，随着在顶层导入更多代码，启动时间会更长——这些代码需要从文件系统加载、解析、编译和评估，同时阻塞其他代码的运行。
- en: 'On the frontend, one way to deal with this problem (besides writing less code!)
    is with *code splitting*: chunking your code up into a bunch of generated JavaScript
    files, instead of shipping everything in a single large file. With splitting you
    get the benefit of loading multiple chunks in parallel, which eases the toll of
    large network requests (see [Figure 10-1](#network-waterfall-fig)).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，解决这个问题的一种方法（除了写更少的代码之外！）是使用*代码分割*：将代码分成许多生成的JavaScript文件，而不是将所有内容打包到一个大文件中。使用分割，您可以并行加载多个块，从而减轻大型网络请求的负担（参见[图10-1](#network-waterfall-fig)）。
- en: '![prts 1001](assets/prts_1001.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![prts 1001](assets/prts_1001.png)'
- en: Figure 10-1\. Network waterfall for JavaScript loaded from facebook.com
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-1\. 从facebook.com加载的JavaScript的网络瀑布图
- en: A further optimization is to lazy-load chunks of code when they’re actually
    needed. Really large frontend applications—like those at Facebook and Google—use
    this type of optimization as a matter of course. Without it, clients might be
    loading gigabytes of JavaScript code on the initial page load, which could take
    minutes or hours (not to mention that people would probably stop using those services
    once they received their mobile bills).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的优化是在实际需要时延迟加载代码块。像 Facebook 和 Google 这样的非常大型前端应用程序通常使用这种优化。没有这个优化，客户端可能会在初始页面加载时加载数千兆字节的
    JavaScript 代码，这可能需要几分钟或几小时（更不用说一旦收到手机账单，人们可能会停止使用这些服务）。
- en: Lazy loading is also useful for other reasons. For example, the popular [Moment.js](https://momentjs.com)
    date manipulation library comes with packages to support every date format used
    around the world, split up by locale. Each packages weighs in at around 3 KB.
    Loading all of these locales for each user might be an unacceptable performance
    and bandwidth hit; instead, you might want to detect the user’s locale, then load
    just the relevant date package.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 惰性加载也因其他原因而有用。例如，流行的[Moment.js](https://momentjs.com)日期处理库提供了支持全球使用的每种日期格式的包，按区域划分。每个包大小约为
    3 KB。为每个用户加载所有这些区域设置可能会对性能和带宽造成不可接受的影响；相反，您可能希望检测用户的区域设置，然后仅加载相关的日期包。
- en: 'LABjs and its siblings introduced the concept of lazy-loading code when you
    actually need it, and the concept was formalized in *dynamic imports*. It looks
    like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: LABjs 及其衍生物介绍了在实际需要时延迟加载代码的概念，该概念在*动态导入*中得到了正式化。看起来像这样：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can use `import` either as a statement to statically pull in code (as we’ve
    used it up to this point), or as a function that returns a `Promise` for your
    module (as we did in this example).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`import`用作静态拉取代码的语句（就像我们到目前为止使用的那样），也可以将其用作返回您模块的`Promise`的函数（就像我们在此示例中所做的那样）。
- en: 'While you can pass an arbitrary expression that evaluates to a string to `import`,
    you lose type safety when you do. To safely use dynamic imports, be sure to either:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以将评估为字符串的任意表达式传递给`import`，但这样做会丢失类型安全性。要安全地使用动态导入，请确保要么
- en: Pass a string literal directly to `import`, without assigning the string to
    a variable first.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接将字符串文字传递给`import`，而不先将字符串分配给变量。
- en: Pass an expression to `import` and manually annotate the module’s signature.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表达式传递给`import`并手动注释模块的签名。
- en: 'If using the second option, a common pattern is to statically import the module,
    but use it only in a type position, so that TypeScript compiles away the static
    import (to learn more, see [“The types Directive”](ch12.html#import-elision)).
    For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用第二个选项，一个常见模式是静态导入模块，但仅在类型位置使用它，这样 TypeScript 将编译掉静态导入（要了解更多，请参见[“types 指令”](ch12.html#import-elision)）。例如：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We imported `locale` from *./locales/locale-us*, but we only used it for its
    type, which we retrieved with `typeof locale`. We needed to do that because TypeScript
    couldn’t statically look up the type of `import(path)`, because `path` is a computed
    variable and not a static string. Because we never used `locale` as a value, and
    instead just scavenged it for its type, TypeScript compiled away the static import
    (in this example, TypeScript doesn’t generate any top-level exports at all), leaving
    us with both excellent type safety and a dynamically computed import.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从*./locales/locale-us*导入了`locale`，但我们仅将其用于其类型，我们通过`typeof locale`检索了它的类型。我们之所以需要这样做，是因为
    TypeScript 不能静态查找`import(path)`的类型，因为`path`是一个计算的变量，而不是静态字符串。因为我们从未将`locale`用作值，而是只是为了获取其类型，所以在这个示例中，TypeScript
    没有生成任何顶级导出，这使我们既拥有出色的类型安全性，又具有动态计算的导入。
- en: 'TSC Setting: module'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TSC 设置：模块
- en: 'TypeScript supports dynamic imports in `esnext` module mode only. To use dynamic
    imports, set `{"module": "esnext"}` in your *tsconfig.json*’s `compilerOptions`.
    Jump ahead to [“Running TypeScript on the Server”](ch12.html#Running-TypeScript-on-the-Server)
    and [“Running TypeScript in the Browser”](ch12.html#Running-TypeScript-in-the-Browser)
    to learn more.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeScript 仅在`esnext`模块模式下支持动态导入。要使用动态导入，请在您的*tsconfig.json*的`compilerOptions`中设置`{"module":
    "esnext"}`。跳到[“在服务器上运行 TypeScript”](ch12.html#Running-TypeScript-on-the-Server)和[“在浏览器中运行
    TypeScript”](ch12.html#Running-TypeScript-in-the-Browser)了解更多信息。'
- en: Using CommonJS and AMD Code
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CommonJS 和 AMD 代码
- en: 'When consuming a JavaScript module that uses the CommonJS or AMD standard,
    you can simply import names from it, just like for ES2015 modules:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CommonJS 或 AMD 标准的 JavaScript 模块时，您可以像 ES2015 模块一样简单地从中导入名称：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By default, CommonJS default exports don’t interoperate with ES2015 default
    imports; to use a default export, you have to use a wildcard import:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CommonJS 默认导出与 ES2015 默认导入不兼容；要使用默认导出，必须使用通配符导入：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To interoperate more smoothly, set `{"esModuleInterop": true}` in your *tsconfig.json*’s
    `compilerOptions`. Now, you can leave out the wildcard:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '为了更顺畅地进行互操作性，可以在您的 *tsconfig.json* 的 `compilerOptions` 中设置 `{"esModuleInterop":
    true}`。现在，您可以省略通配符：'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As I mentioned at the top of the chapter, even though this code compiles, that
    doesn’t mean it’ll work at runtime. Whichever module standard you use—`import`/`export`,
    CommonJS, AMD, UMD, or browser globals—your module bundler and module loader have
    to be aware of that format so they can package up and split your code correctly
    at compile time, and load your code correctly at runtime. Head over to [Chapter 12](ch12.html#typescript-in-production)
    to learn more.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本章开头提到的，即使此代码编译通过，也不能保证在运行时能正常工作。无论您使用哪种模块标准——`import`/`export`、CommonJS、AMD、UMD
    或浏览器全局对象——您的模块捆绑器和模块加载器都必须了解该格式，以便在编译时正确打包和拆分您的代码，并在运行时正确加载您的代码。请前往[第12章](ch12.html#typescript-in-production)了解更多信息。
- en: Module Mode Versus Script Mode
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块模式与脚本模式的区别
- en: 'TypeScript parses each of your TypeScript files in one of two modes: *module
    mode* or *script mode*. It decides which mode to use based on a single heuristic:
    does your file have any `import`s or `export`s? If so, it uses module mode; otherwise,
    it uses script mode.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 在其中一种模式下解析每个 TypeScript 文件：*模块模式* 或 *脚本模式*。它根据一个简单的启发式算法决定使用哪种模式：您的文件是否有任何
    `import` 或 `export`？如果有，它将使用模块模式；否则，它将使用脚本模式。
- en: Module mode is what we’ve used up to this point, and what you’ll use most of
    the time. In module mode, you use `import` and `import()` to require code from
    other files, and `export` to make code available to other files. If you use any
    third-party UMD modules (as a reminder, UMD modules try to use CommonJS, RequireJS,
    or browser globals, whichever the environment supports), you have to `import`
    them first, and can’t use their global exports directly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 模块模式是我们到目前为止使用的模式，也是您大部分时间会使用的模式。在模块模式中，您使用 `import` 和 `import()` 来从其他文件中引入代码，并使用
    `export` 将代码提供给其他文件使用。如果您使用任何第三方 UMD 模块（提醒一下，UMD 模块尝试使用环境支持的 CommonJS、RequireJS
    或浏览器全局对象），您必须首先 `import` 它们，不能直接使用它们的全局导出。
- en: 'In script mode, any top-level variables you declare will be available to other
    files in your project without an explicit import, and you can safely consume global
    exports from third-party UMD modules without explicitly importing them first.
    A couple of use cases for script mode are:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本模式中，您声明的任何顶级变量将在项目中的其他文件中可用，无需显式导入，并且您可以安全地使用来自第三方 UMD 模块的全局导出，而无需先显式导入它们。脚本模式的几个用例包括：
- en: 'To quickly prototype browser code that you plan to compile to no module system
    at all (`{"module": "none"}` in your *tsconfig.json*) and include as raw `<script
    />` tags in your HTML file.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '为了快速原型化浏览器代码，您计划将其编译为完全不使用模块系统（在您的 *tsconfig.json* 中设置 `{"module": "none"}`），并将其作为原始
    `<script />` 标签包含在您的 HTML 文件中。'
- en: To create type declarations (see [“Type Declarations”](ch11.html#type-declarations))
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建类型声明（参见[“类型声明”](ch11.html#type-declarations)）
- en: You’ll almost always want to stick to module mode, which TypeScript will choose
    for you automatically as you write real-world code that `import`s other code and
    `export`s things for other files to use.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎总是希望坚持使用模块模式，TypeScript 会在您编写实际代码时自动选择这种模式，该模式通过 `import` 其他代码和 `export`
    供其他文件使用。
- en: Namespaces
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'TypeScript gives us another way to encapsulate code: the `namespace` keyword.
    Namespaces will feel familiar to a lot of Java, C#, C++, PHP, and Python programmers.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 为我们提供了另一种封装代码的方式：`namespace` 关键字。对于许多 Java、C#、C++、PHP 和 Python 程序员来说，命名空间会感觉很熟悉。
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you’re coming from a language with namespaces, note that although namespaces
    are supported by TypeScript, they’re not the preferred way to encapsulate code;
    if you’re not sure whether to use namespaces or modules, choose modules.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前使用过带命名空间的语言，请注意，尽管 TypeScript 支持命名空间，但它们不是封装代码的首选方式；如果不确定是使用命名空间还是模块，请选择模块。
- en: Namespaces abstract away the nitty-gritty details of how files are laid out
    in the filesystem; you don’t have to know that your `.mine` function lives in
    the `schemes/scams/bitcoin/apps` folder, and instead you can access it with a
    short, convenient namespace like `Schemes.Scams.Bitcoin.Apps.mine`.^([1](ch10.html#idm46304952683240))
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间抽象了文件系统中文件布局的细节；您不必知道您的 `.mine` 函数位于 `schemes/scams/bitcoin/apps` 文件夹中，而是可以通过简短方便的命名空间
    `Schemes.Scams.Bitcoin.Apps.mine` 来访问它。^([1](ch10.html#idm46304952683240))
- en: 'Say we have two files—a module to make HTTP GET requests, and a consumer that
    uses that module to make requests:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个文件——一个用于进行 HTTP GET 请求的模块，一个用于使用该模块进行请求的消费者：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A namespace must have a name (like `Network`), and it can export functions,
    variables, types, interfaces, or other namespaces. Any code in a `namespace` block
    that’s not explicitly exported is private to the block. Because namespaces can
    export namespaces, you can easily model nested namespaces. Let’s say our `Network`
    module is getting big, and we want to split it up into a few submodules. We can
    use namespaces to do that:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间必须有一个名称（比如 `Network`），它可以导出函数、变量、类型、接口或其他命名空间。在命名空间块中未显式导出的任何代码对该块是私有的。因为命名空间可以导出命名空间，所以你可以轻松地建模嵌套命名空间。假设我们的
    `Network` 模块变得很大，我们想将其拆分成几个子模块。我们可以使用命名空间来实现这一点：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, all of our network-related utilities are in subnamespaces under `Network`.
    For example, we can now call `Network.HTTP.get` and `Network.TCP.listenOn` from
    any file. Like interfaces, namespaces can be augmented, making it convenient to
    split them across files. TypeScript will recursively merge identically named namespaces
    for us:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们所有与网络相关的实用程序都在 `Network` 的子命名空间下。例如，我们现在可以从任何文件调用 `Network.HTTP.get` 和
    `Network.TCP.listenOn`。与接口一样，命名空间可以被扩展，使得跨文件拆分它们变得方便。TypeScript 将递归地为我们合并同名的命名空间：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you end up with long namespace hierarchies, you can use *aliases* to shorten
    them for convenience. Note that despite the similar syntax, destructuring (like
    you do when importing ES2015 modules) is not supported for aliases:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很长的命名空间层次结构，你可以使用*别名*来方便地缩短它们。请注意，尽管语法类似，但不支持别名的解构（就像导入 ES2015 模块时所做的那样）：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Collisions
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冲突
- en: 'Collisions between identically named exports are not allowed:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 相同名称导出之间的冲突是不允许的：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The exception to the no-collisions rule is overloaded ambient function declarations,
    which you can use to refine function types:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 不与不发生碰撞规则的例外是过载的环境函数声明，您可以使用它来细化函数类型：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Compiled Output
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译输出
- en: 'Unlike imports and exports, namespaces don’t respect your *tsconfig.json*’s
    `module` setting, and always compile to global variables. Let’s peek behind the
    veil to see what the generated output looks like. Say we have the following module:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与导入和导出不同，命名空间不尊重您的 *tsconfig.json* 的 `module` 设置，并始终编译为全局变量。让我们窥视幕后，看看生成的输出是什么样子的。假设我们有以下模块：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Running it through `TSC`, the generated JavaScript output looks like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `TSC` 运行，生成的 JavaScript 输出如下：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](assets/1.png)](#co_namespaces_modules_CO1-1)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_namespaces_modules_CO1-1)'
- en: '`Flowers` is declared within an IIFE—a function that calls itself immediately—to
    create a closure and prevent variables that weren’t explicitly exported from leaking
    out of the `Flowers` module.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Flowers` 在一个立即调用的函数表达式（IIFE）中声明，以创建闭包并防止未显式导出的变量泄漏出 `Flowers` 模块。'
- en: '[![2](assets/2.png)](#co_namespaces_modules_CO1-2)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_namespaces_modules_CO1-2)'
- en: TypeScript assigns the `give` function that we exported to the `Flowers` namespace.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 将我们导出的 `give` 函数分配给 `Flowers` 命名空间。
- en: '[![3](assets/3.png)](#co_namespaces_modules_CO1-3)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_namespaces_modules_CO1-3)'
- en: If the `Flowers` namespace is already globally defined, then TypeScript augments
    it (`Flowers`); otherwise, TypeScript creates and augments that newly created
    namespace (`Flowers = {}`).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `Flowers` 命名空间已经全局定义，则 TypeScript 会扩展它（`Flowers`）；否则，TypeScript 会创建并扩展新创建的命名空间（`Flowers
    = {}`）。
- en: Declaration Merging
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明合并
- en: 'So far we’ve touched on three types of merging that TypeScript does for us:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涉及 TypeScript 为我们做的三种合并类型：
- en: Merging values and types, so that the same name can refer to either a value
    or a type depending how we use it (see [“Companion Object Pattern”](ch06.html#companion-objects))
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并值和类型，使得相同的名称可以根据使用方式引用值或类型（见[“伴生对象模式”](ch06.html#companion-objects)）
- en: Merging multiple namespaces into one
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将多个命名空间合并为一个
- en: Merging multiple interfaces into one (see [“Declaration Merging”](ch05.html#interface-merging))
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将多个接口合并为一个（见[“声明合并”](ch05.html#interface-merging)）
- en: As you might have intuited, these are three special cases of a much more general
    TypeScript behavior. TypeScript has a rich set of behavior for merging different
    kinds of names, unlocking all sorts of patterns that can otherwise be difficult
    to express (see [Table 10-1](#declaration-merging-table)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能直觉到的那样，这些都是 TypeScript 更一般行为的三个特例。TypeScript 拥有丰富的名称合并行为，可以解锁各种模式，否则可能难以表达（详见[表10-1](#declaration-merging-table)）。
- en: Table 10-1\. Can the declaration be merged?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 表10-1\. 声明是否可以合并？
- en: '|  |  |  |  |  |  | To |  |  |  |  |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  |  |  |  | 到 |  |  |  |  |'
- en: '|  |  | Value | Class | Enum | Function | Types alias | Interface | Namespace
    | Module |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 值 | 类 | 枚举 | 函数 | 类型别名 | 接口 | 命名空间 | 模块 |'
- en: '|  | Value | No | No | No | No | Yes | Yes | No |  —  |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '|  | 值 | 否 | 否 | 否 | 否 | 是 | 是 | 否 |  —  |'
- en: '|  | Class |  —  | No | No | No | No | Yes | Yes |  —  |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '|  | 类 |  —  | 否 | 否 | 否 | 否 | 是 | 是 |  —  |'
- en: '|  | Enum |  —  |  —  | Yes | No | No | No | Yes |  —  |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '|  | 枚举 |  —  |  —  | 是 | 否 | 否 | 否 | 是 |  —  |'
- en: '| From | Function |  —  |  —  |  —  | No | Yes | Yes | Yes |  —  |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 来自 | 函数 |  —  |  —  |  —  | 否 | 是 | 是 | 是 |  —  |'
- en: '|  | Type alias |  —  |  —  |  —  |  —  | No | No | Yes |  —  |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '|  | 类型别名 |  —  |  —  |  —  |  —  | 否 | 否 | 是 |  —  |'
- en: '|  | Interface |  —  |  —  |  —  |  —  |  —  | Yes | Yes |  —  |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '|  | 接口 |  —  |  —  |  —  |  —  |  —  | 是 | 是 |  —  |'
- en: '|  | Namespace |  —  |  —  |  —  |  —  |  —  |  —  | Yes |  —  |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '|  | 命名空间 |  —  |  —  |  —  |  —  |  —  |  —  | 是 |  —  |'
- en: '|  | Module |  —  |  —  |  —  |  —  |  —  |  —  |  —  | Yes |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '|  | 模块 |  —  |  —  |  —  |  —  |  —  |  —  |  —  | 是 |'
- en: This means that if, for example, you declare a value and a type alias in the
    same scope, TypeScript will allow it, and infer which one you meant—the type or
    the value—from whether you use the name in a value or a type position. This is
    what lets us implement the pattern described in [“Companion Object Pattern”](ch06.html#companion-objects).
    It also means that you can use an interface and a namespace to implement companion
    objects—you’re not limited to just a value and a type alias. Or you can take advantage
    of module merging to augment a third-party module declaration (more on this in
    [“Extending a Module”](app04.html#extending-a-module)). Or you can add static
    methods to an enum by merging that enum with a namespace (try it!).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 意味着，例如，如果你在同一作用域中声明一个值和一个类型别名，TypeScript 将允许这样做，并且从你在值或类型位置使用名称来推断你所指的是类型还是值。这就是我们实现[“伴生对象模式”](ch06.html#companion-objects)中描述的模式的原因。这也意味着你可以使用接口和命名空间来实现伴生对象——你不仅限于值和类型别名。或者你可以利用模块合并来增强第三方模块声明（详见[“扩展模块”](app04.html#extending-a-module)）。或者你可以通过将命名空间与枚举合并来添加静态方法（试试看！）。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we covered TypeScript’s module system, starting with a brief
    history of JavaScript module systems, ES2015 modules and safely lazy-loading code
    with dynamic imports, interoperating with CommonJS and AMD modules, and module
    mode versus script mode. We then covered namespaces, namespace merging, and how
    TypeScript’s declaration merging works.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 TypeScript 的模块系统，从 JavaScript 模块系统的简要历史开始，ES2015 模块，以及使用动态导入安全地延迟加载代码，与
    CommonJS 和 AMD 模块的互操作，以及模块模式与脚本模式的比较。然后我们涵盖了命名空间、命名空间合并，以及 TypeScript 的声明合并工作原理。
- en: As you develop applications in TypeScript, try hard to stick to ES2015 modules.
    TypeScript doesn’t care which module system you use, but it will make it easier
    to integrate with build tooling (see [Chapter 12](ch12.html#typescript-in-production)
    to learn more).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 TypeScript 应用程序时，努力坚持使用 ES2015 模块。TypeScript 不关心你使用哪种模块系统，但它会使得与构建工具集成更容易（参见[第12章](ch12.html#typescript-in-production)了解更多）。
- en: Exercise
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Play around with declaration merging, to:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩转声明合并，以：
- en: Reimplement companion objects (from [“Companion Object Pattern”](ch06.html#companion-objects))
    using namespaces and interfaces, instead of values and types.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命名空间和接口重新实现伴生对象（来自[“伴生对象模式”](ch06.html#companion-objects)），而不是使用值和类型。
- en: Add static methods to an enum.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给枚举添加静态方法。
- en: ^([1](ch10.html#idm46304952683240-marker)) I really hope this joke ages well,
    and I don’t end up regretting not investing in Bitcoin.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.html#idm46304952683240-marker)) 我真的希望这个笑话会成为经典，并且我不会后悔没有投资比特币。
