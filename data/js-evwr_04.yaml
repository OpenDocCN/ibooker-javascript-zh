- en: Chapter 3\. A Web Application with Node and Express
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章\. 使用Node和Express构建Web应用程序
- en: Before implementing our API, we’re going to build a basic server-side web application
    to serve as the basis for the backend of our API. We’ll be using the [Express.js
    framework](https://expressjs.com), a “minimalist web framework for Node.js,” meaning
    that it does not ship with a lot of features, but is highly configurable. We’ll
    be using Express.js as the foundation of our API server, but Express can also
    be used to build fully featured server-side web applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现我们的API之前，我们将构建一个基本的服务器端Web应用程序，作为我们API后端的基础。我们将使用[Express.js框架](https://expressjs.com)，一个“Node.js的极简主义Web框架”，这意味着它不会预装很多功能，但是高度可配置。我们将使用Express.js作为我们API服务器的基础，但Express也可以用于构建功能完整的服务器端Web应用程序。
- en: User interfaces, such as websites and mobile applications, communicate with
    web servers when they need to access data. This data could be anything from the
    HTML required to render a page in a web browser to the results of a user’s search.
    The client interface communicates with the server using HTTP. The data request
    is sent from the client via HTTP to the web application that is running on the
    server. The web application then processes the request and returns the data to
    the client, again over HTTP.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面，如网站和移动应用程序，在需要访问数据时与Web服务器进行通信。这些数据可以是任何东西，从在Web浏览器中呈现页面所需的HTML，到用户搜索结果。客户端界面使用HTTP与服务器通信。数据请求通过HTTP从客户端发送到运行在服务器上的Web应用程序。然后，Web应用程序处理请求并再次通过HTTP将数据返回给客户端。
- en: In this chapter we’ll build a small server-side web application, which will
    be the basis for our API. To do this, we’ll use the Express.js framework to build
    a simple web application that sends a basic request.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个小型的服务器端Web应用程序，这将是我们API的基础。为此，我们将使用Express.js框架构建一个简单的Web应用程序，发送一个基本的请求。
- en: Hello World
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World
- en: 'Now that you understand the basics of server-side web applications, let’s jump
    in. Within the *src* directory of our API project, create a file named *index.js*
    and add the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了服务器端Web应用程序的基础知识，让我们开始吧。在我们API项目的*src*目录中，创建一个名为*index.js*的文件，并添加以下内容：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, first we require the `express` dependency and create the `app`
    object, using the imported Express.js module. We then use the `app` object’s `get`
    method to instruct our application to send a response of “Hello World” when a
    user accesses the root URL (`/`). Lastly, we instruct our application to run on
    port 4000\. This will allow us to view the application locally at the URL *http://localhost:4000*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，首先我们需要引入`express`依赖并创建`app`对象，使用导入的Express.js模块。然后，我们使用`app`对象的`get`方法来指示我们的应用程序，在用户访问根URL（`/`）时发送“Hello
    World”的响应。最后，我们指示应用程序在4000端口上运行。这样可以让我们在本地通过URL *http://localhost:4000* 查看应用程序。
- en: Now to run the application, type **`node src/index.js`** in your terminal. After
    doing so, you should see a log in your terminal that reads `Listening on port
    4000!`. If that’s the case, you should be able to open a browser window to *http://localhost:4000*
    and see the result in [Figure 3-1](#hello_world).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要运行该应用程序，在您的终端中键入 **`node src/index.js`**。完成后，您应该在终端中看到一个日志，内容为`Listening
    on port 4000!`。如果是这样，您应该能够在浏览器窗口中打开 *http://localhost:4000* 并在[图3-1](#hello_world)中看到结果。
- en: '![The results of our Hello World server code in the browser](assets/jsev_0301.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![在浏览器中查看我们Hello World服务器代码的结果](assets/jsev_0301.png)'
- en: Figure 3-1\. The results of our Hello World server code in the browser
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-1\. 在浏览器中查看我们Hello World服务器代码的结果
- en: Nodemon
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodemon
- en: 'Now, let’s say that the output of this example doesn’t properly express our
    excitement. We want to change our code so that it adds an exclamation mark to
    our response. Go ahead and do that, changing the `res.send` value to read `Hello
    World!!!`. The full line should now be:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设这个例子的输出不能完全表达我们的兴奋之情。我们希望改变我们的代码，以便在我们的响应中添加一个感叹号。继续操作，将`res.send`的值更改为`Hello
    World!!!`。完整的行应如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you go to your web browser and refresh the page, you’ll notice that the output
    hasn’t changed. This is because any changes we make to our web server require
    us to restart it. To do so, switch back to your terminal and press Ctrl + C to
    stop the server. Now restart it by again typing **`node index.js`**. Now, when
    you navigate back to your browser and refresh the page, you should see the updated
    response.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您转到Web浏览器并刷新页面，您会注意到输出没有改变。这是因为我们对Web服务器所做的任何更改都需要重新启动它。要这样做，请切换回终端并按Ctrl
    + C停止服务器。现在通过再次键入**`node index.js`**来重新启动它。现在，当您导航回浏览器并刷新页面时，您应该会看到更新后的响应。
- en: 'As you can imagine, stopping and restarting our server for every change can
    quickly become tedious. Thankfully, we can use the Node package `nodemon` to automatically
    restart the server on changes. If you take a look at the project’s *package.json*
    file, you’ll see a `dev` command within the `scripts` object, which instructs
    `nodemon` to watch our *index.js* file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以想象的那样，每次更改都要停止和重新启动服务器会很快变得乏味。幸运的是，我们可以使用Node包`nodemon`来在更改时自动重新启动服务器。如果您查看项目的*package.json*文件，您将看到`scripts`对象中有一个`dev`命令，该命令指示`nodemon`监视我们的*index.js*文件：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: package.json Scripts
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: package.json 脚本
- en: There are a handful of other helper commands within the `scripts` object. We
    will explore those in future chapters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`scripts`对象中还有几个其他辅助命令。我们将在未来的章节中探讨这些命令。'
- en: 'Now, to start the application from the terminal, type:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要从终端启动应用程序，请输入：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Navigating to your browser and refreshing the page, you’ll see that things
    are working as before. To confirm that `nodemon` automatically restarts the server,
    let’s once again update our `res.send` value so that it reads:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中导航并刷新页面，您会发现一切都像以前一样工作。为了确认`nodemon`自动重启服务器，让我们再次更新我们的`res.send`值，使其如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, you should be able to refresh the page in your browser and see the update
    without manually restarting the server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够在浏览器中刷新页面并查看更新内容，而无需手动重新启动服务器。
- en: Extending Port Options
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展端口选项
- en: 'Currently our application is served on port 4000\. This works great for local
    development, but we will need the flexibility to set this to a different port
    number when deploying the application. Let’s take the steps to update this now.
    We’ll start by adding a `port` variable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的应用程序在4000端口上提供服务。这对于本地开发非常好，但在部署应用程序时，我们将需要灵活设置到其他端口号。现在让我们采取步骤来更新这个。我们将首先添加一个`port`变量：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This change will allow us to dynamically set the port in the Node environment,
    but fall back to port 4000 when no port is specified. Now let’s adjust our `app.listen`
    code to work with this change and use a template literal to log the correct port:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改将允许我们在Node环境中动态设置端口，但当未指定端口时，则回退到4000端口。现在让我们调整我们的`app.listen`代码以适应这个更改，并使用模板文字来记录正确的端口：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our final code should now read:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的代码现在应该是：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this, we now have the basics of our web server code up and running. To
    test that everything is working, verify that no errors are present in your console
    and reload your web browser at *http://localhost:4000*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的Web服务器代码基础已经运行起来了。为了验证一切是否正常工作，请确保控制台中没有错误，并在*http://localhost:4000*处重新加载您的Web浏览器。
- en: Conclusion
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Server-side web applications are the foundation of API development. In this
    chapter, we built a basic web application using the Express.js framework. When
    developing Node-based web applications, you have a wide array of frameworks and
    tools to choose from. Express.js is a great choice due to its flexibility, community
    support, and maturity as a project. In the next chapter, we’ll turn our web application
    into an API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端Web应用程序是API开发的基础。在本章中，我们使用Express.js框架构建了一个基本的Web应用程序。在开发基于Node的Web应用程序时，您可以选择多种框架和工具。由于其灵活性、社区支持和作为项目的成熟度，Express.js是一个很好的选择。在下一章中，我们将把我们的Web应用程序转变为API。
