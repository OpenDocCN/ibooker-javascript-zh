- en: Chapter 4\. How React Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章\. React 的工作原理
- en: 'So far on your journey, you’ve brushed up on the latest syntax. You’ve reviewed
    the functional programming patterns that guided React’s creation. These steps
    have prepared you to take the next step, to do what you came here to do: to learn
    how React works. Let’s get into writing some real React code.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经温习了最新的语法。你已经复习了引导 React 创建的函数式编程模式。这些步骤已经为你迈出下一步，为你来这里所要做的事情做好了准备：学习
    React 的工作原理。让我们开始写一些真正的 React 代码。
- en: 'When you work with React, it’s more than likely that you’ll be creating your
    apps with JSX. JSX is a tag-based JavaScript syntax that looks a lot like HTML.
    It’s a syntax we’ll dive deep into in the next chapter and continue to use for
    the rest of the book. To truly understand React, though, we need to understand
    its most atomic units: React elements. From there, we’ll get into React elements.
    From there, we’ll get into React components by looking at how we can create custom
    components that compose other components and elements.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 React 时，很可能会使用 JSX 创建应用程序。JSX 是一种基于标签的 JavaScript 语法，看起来非常像 HTML。在接下来的章节中，我们将深入探讨这种语法，并在本书的其余部分继续使用它。然而，要真正理解
    React，我们需要了解它最基本的单元：React 元素。从那里开始，我们将通过查看如何创建组成其他组件和元素的自定义组件来深入了解 React 组件。
- en: Page Setup
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面设置
- en: 'In order to work with React in the browser, we need to include two libraries:
    React and ReactDOM. React is the library for creating views. ReactDOM is the library
    used to actually render the UI in the browser. Both libraries are available as
    scripts from the unpkg CDN (links are included in the following code). Let’s set
    up an HTML document:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要在浏览器中使用 React，我们需要包含两个库：React 和 ReactDOM。React 是用于创建视图的库。ReactDOM 是用于在浏览器中实际渲染
    UI 的库。这两个库都可以从 unpkg CDN 作为脚本获取（链接在下面的代码中）。让我们来设置一个 HTML 文档：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These are the minimum requirements for working with React in the browser. You
    can place your JavaScript in a separate file, but it must be loaded somewhere
    in the page after React has been loaded. We’re going to be using the development
    version of React to see all of the error messages and warnings in the browser
    console. You can choose to use the minified production version using *react.production.min.js*
    and *react-dom.production.min.js*, which will strip away those warnings.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在浏览器中使用 React 的最低要求。你可以将你的 JavaScript 放在一个单独的文件中，但它必须在加载 React 之后的页面某处加载。我们将使用开发版本的
    React，以便在浏览器控制台中看到所有的错误消息和警告。你可以选择使用被压缩的生产版本 *react.production.min.js* 和 *react-dom.production.min.js*，这样将剥离掉这些警告。
- en: React Elements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 元素
- en: HTML is simply a set of instructions that a browser follows when constructing
    the DOM. The elements that make up an HTML document become DOM elements when the
    browser loads HTML and renders the user interface.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 只是浏览器在构建 DOM 时遵循的一组指令。构成 HTML 文档的元素在浏览器加载 HTML 并渲染用户界面时成为 DOM 元素。
- en: 'Let’s say you have to construct an HTML hierarchy for a recipe. A possible
    solution for such a task might look something like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要为一个食谱构建一个 HTML 层次结构。这样一个任务的可能解决方案可能看起来像这样：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In HTML, elements relate to one another in a hierarchy that resembles a family
    tree. We could say that the root element (in this case, a section) has three children:
    a heading, an unordered list of ingredients, and a section for the instructions.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 中，元素之间以类似于家族树的层次结构相关联。我们可以说根元素（在本例中是一个部分）有三个子元素：一个标题，一个无序的配料列表，和一个用于说明的部分。
- en: In the past, websites consisted of independent HTML pages. When the user navigated
    these pages, the browser would request and load different HTML documents. The
    invention of AJAX (Asynchronous JavaScript and XML) brought us the single-page
    application, or [SPA](https://oreil.ly/z6Saj). Since browsers could request and
    load tiny bits of data using AJAX, entire web applications could now run out of
    a single page and rely on JavaScript to update the user interface.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，网站由独立的 HTML 页面组成。当用户导航这些页面时，浏览器会请求和加载不同的 HTML 文档。AJAX（异步 JavaScript 和 XML）的发明带来了单页应用程序或[SPA](https://oreil.ly/z6Saj)。由于浏览器可以使用
    AJAX 请求和加载小数据片段，整个 Web 应用程序现在可以在单个页面上运行，并依赖 JavaScript 更新用户界面。
- en: In an SPA, the browser initially loads one HTML document. As users navigate
    through the site, they actually stay on the same page. JavaScript destroys and
    creates a new user interface as the user interacts with the application. It may
    feel as though you’re jumping from page to page, but you’re actually still on
    the same HTML page, and JavaScript is doing the heavy lifting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在单页应用程序中，浏览器最初加载一个 HTML 文档。当用户通过站点导航时，他们实际上停留在同一个页面上。JavaScript 在用户与应用程序交互时销毁并创建新的用户界面。可能感觉好像你从页面跳转到页面，但实际上你仍然在同一个
    HTML 页面上，JavaScript 正在进行重量级的工作。
- en: The [DOM API](https://mzl.la/2m1oQDJ) is a collection of objects that JavaScript
    can use to interact with the browser to modify the DOM. If you’ve used `document.createElement`
    or `document.appendChild`, you’ve worked with the DOM API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[DOM API](https://mzl.la/2m1oQDJ) 是 JavaScript 可以用来与浏览器交互以修改 DOM 的一组对象。如果你使用过
    `document.createElement` 或 `document.appendChild`，你已经使用过 DOM API。'
- en: React is a library that’s designed to update the browser DOM for us. We no longer
    have to be concerned with the complexities associated with building high-performing
    SPAs because React can do that for us. With React, we do not interact with the
    DOM API directly. Instead, we provide instructions for what we want React to build,
    and React will take care of rendering and reconciling the elements we’ve instructed
    it to create.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: React 是一个设计用来为我们更新浏览器 DOM 的库。我们不再需要关注构建高性能单页应用程序所涉及的复杂性，因为 React 可以为我们完成这些工作。使用
    React，我们不直接与 DOM API 交互。相反，我们提供了关于我们希望 React 构建的指令，React 将负责渲染和协调我们指示它创建的元素。
- en: The browser DOM is made up of DOM elements. Similarly, the React DOM is made
    up of React elements. DOM elements and React elements may look the same, but they’re
    actually quite different. A React element is a description of what the actual
    DOM element should look like. In other words, React elements are the instructions
    for how the browser DOM should be created.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器 DOM 由 DOM 元素组成。类似地，React DOM 由 React 元素组成。DOM 元素和 React 元素看起来可能相同，但它们实际上是非常不同的。React
    元素描述了实际 DOM 元素应该如何看起来。换句话说，React 元素是构建浏览器 DOM 的指令。
- en: 'We can create a React element to represent an `h1` using `React.createElement`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `React.createElement` 创建一个表示 `h1` 的 React 元素：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first argument defines the type of element we want to create. In this case,
    we want to create an `h1` element. The second argument represents the element’s
    properties. This `h1` currently has an `id` of `recipe-0`. The third argument
    represents the element’s children: any nodes that are inserted between the opening
    and closing tag (in this case, just some text).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数定义了我们要创建的元素类型。在这种情况下，我们想创建一个 `h1` 元素。第二个参数表示元素的属性。这个 `h1` 当前有一个 `id` 为
    `recipe-0`。第三个参数表示元素的子节点：在开放和闭合标签之间插入的任何节点（在本例中只是一些文本）。
- en: 'During rendering, React will convert this element to an actual DOM element:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染过程中，React 将这个元素转换为一个实际的 DOM 元素：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The properties are similarly applied to the new DOM element: the properties
    are added to the tag as attributes, and the child text is added as text within
    the element. A React element is just a JavaScript literal that tells React how
    to construct the DOM element.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 属性同样适用于新的 DOM 元素：属性被添加到标签作为属性，子文本被添加为元素内的文本。React 元素只是一个告诉 React 如何构建 DOM 元素的
    JavaScript 字面量。
- en: 'If you were to log this element, it would look like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要记录这个元素，它会像这样：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is the structure of a React element. There are fields that are used by
    React: `_owner`, `_store`, and `$$typeof`. The `key` and `ref` fields are important
    to React elements, but we’ll introduce those later. For now, let’s take a closer
    look at the `type` and `props` fields.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 React 元素的结构。有些字段被 React 使用：`_owner`、`_store` 和 `$$typeof`。`key` 和 `ref`
    字段对于 React 元素很重要，但我们稍后会介绍它们。现在，让我们更仔细地看看 `type` 和 `props` 字段。
- en: The `type` property of the React element tells React what type of HTML or SVG
    element to create. The `props` property represents the data and child elements
    required to construct a DOM element. The `children` property is for displaying
    other nested elements as text.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: React 元素的 `type` 属性告诉 React 要创建哪种类型的 HTML 或 SVG 元素。`props` 属性表示构建 DOM 元素所需的数据和子元素。`children`
    属性用于将其他嵌套元素显示为文本。
- en: Creating Elements
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建元素
- en: We’re taking a peek at the object that `React.createElement` returns. You won’t
    actually create these elements by hand; instead, you’ll use the `React.createElement`
    function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看 `React.createElement` 返回的对象。你不会手动创建这些元素；相反，你会使用 `React.createElement`
    函数。
- en: ReactDOM
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReactDOM
- en: Once we’ve created a React element, we’ll want to see it in the browser. ReactDOM
    contains the tools necessary to render React elements in the browser. ReactDOM
    is where we’ll find the `render` method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建React元素后，我们希望在浏览器中看到它。ReactDOM包含在浏览器中渲染React元素所需的工具。ReactDOM是我们将找到`render`方法的地方。
- en: 'We can render a React element, including its children, to the DOM with `ReactDOM.render`.
    The element we want to render is passed as the first argument, and the second
    argument is the target node, where we should render the element:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ReactDOM.render`将React元素（包括其子元素）渲染到DOM中。要渲染的元素作为第一个参数传递，第二个参数是应该渲染元素的目标节点：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Rendering the title element to the DOM would add an `h1` element to the `div`
    with the `id` of `root`, which we would already have defined in our HTML. We build
    this `div` inside the `body` tag:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将标题元素渲染到DOM会将`h1`元素添加到具有`id`为`root`的`div`中，我们已经在HTML中定义了该`div`。我们在`body`标签中构建此`div`：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Anything related to rendering elements to the DOM is found in the `ReactDOM`
    package. In versions of React earlier than React 16, you could only render one
    element to the DOM. Today, it’s possible to render arrays as well. When the ability
    to do this was announced at ReactConf 2017, everyone clapped and screamed. It
    was a big deal. This is what that looks like:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与将元素渲染到DOM相关的任何内容都可以在`ReactDOM`包中找到。在React 16之前的版本中，只能将一个元素渲染到DOM中。今天，也可以渲染数组。当这一功能在2017年的ReactConf上宣布时，每个人都鼓掌欢呼。这是一件大事。具体效果如下：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will render both of these elements as siblings inside of the `root` container.
    We hope you just clapped and screamed!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`root`容器内将这两个元素呈现为同级。希望你刚才鼓掌欢呼！
- en: In the next section, we’ll get an understanding of how to use `props.children`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解如何使用`props.children`。
- en: Children
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子元素
- en: 'React renders child elements using `props.children`. In the previous section,
    we rendered a text element as a child of the `h1` element, and thus `props.children`
    was set to `Baked Salmon`. We could render other React elements as children, too,
    creating a tree of elements. This is why we use the term *element tree*: the tree
    has one root element from which many branches grow.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: React使用`props.children`渲染子元素。在前一节中，我们将文本元素作为`h1`元素的子元素呈现，因此`props.children`设置为`Baked
    Salmon`。我们也可以渲染其他React元素作为子元素，从而创建元素树。这就是为什么我们使用术语*元素树*：树有一个根元素，从它长出许多分支。
- en: 'Let’s consider the unordered list that contains ingredients:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑包含成分的无序列表：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this sample, the unordered list is the root element, and it has six children.
    We can represent this `ul` and its children with `React.createElement`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，无序列表是根元素，它有六个子元素。我们可以使用`React.createElement`表示此`ul`及其子元素：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Every additional argument sent to the `createElement` function is another child
    element. React creates an array of these child elements and sets the value of
    `props.children` to that array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个传递给`createElement`函数的额外参数都是另一个子元素。React 创建这些子元素的数组，并将`props.children`的值设置为该数组。
- en: 'If we were to inspect the resulting React element, we would see each list item
    represented by a React element and added to an array called `props.children`.
    If you console log this element:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查生成的React元素，我们将看到每个列表项由一个React元素表示，并添加到名为`props.children`的数组中。如果你控制台记录这个元素：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result will look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now see that each list item is a child. Earlier in this chapter, we
    introduced HTML for an entire recipe rooted in a `section` element. To create
    this using React, we’ll use a series of `createElement` calls:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到每个列表项都是一个子元素。在本章前面，我们介绍了一个以`section`元素为根的整个食谱的HTML。要使用React创建此内容，我们将使用一系列`createElement`调用：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: className in React
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React中的className
- en: Any element that has an HTML `class` attribute is using `className` for that
    property instead of `class`. Since `class` is a reserved word in JavaScript, we
    have to use `className` to define the `class` attribute of an HTML element. This
    sample is what pure React looks like. Pure React is ultimately what runs in the
    browser. A React app is a tree of React elements all stemming from a single root
    element. React elements are the instructions React will use to build a UI in the
    browser.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 任何具有HTML`class`属性的元素都使用`className`作为该属性的属性，而不是`class`。由于`class`是JavaScript中的保留字，我们必须使用`className`来定义HTML元素的`class`属性。这个示例展示了纯React的样子。纯React最终在浏览器中运行。React应用程序是从单个根元素衍生出的React元素树。React元素是React将用于在浏览器中构建UI的指令。
- en: Constructing elements with data
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数据构造元素
- en: The major advantage of using React is its ability to separate data from UI elements.
    Since React is just JavaScript, we can add JavaScript logic to help us build the
    React component tree. For example, ingredients can be stored in an array, and
    we can map that array to the React elements.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React的主要优势在于其将数据与UI元素分离的能力。由于React只是JavaScript，我们可以添加JavaScript逻辑来帮助我们构建React组件树。例如，成分可以存储在一个数组中，然后我们可以将该数组映射到React元素中。
- en: 'Let’s go back and think about the unordered list for a moment:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回过头来思考一下无序列表：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The data used in this list of ingredients can easily be represented using a
    JavaScript array:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此成分列表中使用的数据可以轻松地使用JavaScript数组表示：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We want to use this data to generate the correct number of list items without
    having to hard-code each one. We can map over the array and create list items
    for as many ingredients as there are:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望使用此数据生成正确数量的列表项，而无需硬编码每个列表项。我们可以映射数组，并为所需的成分创建列表项：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This syntax creates a React element for each ingredient in the array. Each string
    is displayed in the list item’s children as text. The value for each ingredient
    is displayed as the list item.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此语法为数组中的每个成分创建一个React元素。每个字符串作为文本显示在列表项的子元素中。每个成分的值显示为列表项。
- en: When running this code, you’ll see a console warning like the one shown in [Figure 4-1](#console_warning).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码时，您将看到一个类似于[图 4-1](#console_warning)中显示的控制台警告。
- en: '![image](assets/lrc2_0401.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/lrc2_0401.png)'
- en: Figure 4-1\. Console warning
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 控制台警告
- en: 'When we build a list of child elements by iterating through an array, React
    likes each of those elements to have a `key` property. The `key` property is used
    by React to help it update the DOM efficiently. You can make this warning go away
    by adding a unique `key` property to each of the list item elements. You can use
    the array index for each ingredient as that unique value:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过数组迭代构建子元素列表时，React 喜欢每个元素都有一个`key`属性。`key`属性被React用来帮助它高效更新DOM。通过为每个列表项元素添加一个唯一的`key`属性，可以消除这种警告。可以使用每个成分的数组索引作为该唯一值：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We’ll cover keys in more detail when we discuss JSX, but adding this to each
    list item will clear the console warning.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论JSX时，我们将更详细地讨论键，但在每个列表项中添加这个将清除控制台警告。
- en: React Components
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React组件
- en: No matter its size, its contents, or what technologies are used to create it,
    a user interface is made up of parts. Buttons. Lists. Headings. All of these parts,
    when put together, make up a user interface. Consider a recipe application with
    three different recipes. The data is different in each box, but the parts needed
    to create a recipe are the same (see [Figure 4-2](#recipes_app)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 无论其大小、内容或用于创建它的技术如何，用户界面都由部分组成。按钮。列表。标题。将这些部分放在一起，就组成了用户界面。考虑一个包含三个不同菜谱的食谱应用程序。每个盒子中的数据不同，但创建食谱所需的部分相同（参见[图 4-2](#recipes_app)）。
- en: '![image](assets/lrc2_0402.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/lrc2_0402.png)'
- en: Figure 4-2\. Recipes app
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 食谱应用程序
- en: In React, we describe each of these parts as a *component*. Components allow
    us to reuse the same structure, and then we can populate those structures with
    different sets of data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，我们将这些部分描述为*组件*。组件允许我们重用相同的结构，然后我们可以用不同的数据集填充这些结构。
- en: 'When considering a user interface you want to build with React, look for opportunities
    to break down your elements into reusable pieces. For example, the recipes in
    [Figure 4-3](#recipes_list) have a title, ingredients list, and instructions.
    All are part of a larger recipe or app component. We could create a component
    for each of the highlighted parts: ingredients, instructions, and so on.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑使用React构建用户界面时，寻找将元素分解为可重复使用部件的机会。例如，[图 4-3](#recipes_list)中的食谱具有标题、成分列表和说明。所有这些都是较大的食谱或应用程序组件的一部分。我们可以为每个突出显示的部分创建一个组件：成分、说明等。
- en: '![image](assets/lrc2_0403.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/lrc2_0403.png)'
- en: 'Figure 4-3\. Each component is outlined: `App`, `IngredientsList`, `Instructions`'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 每个组件都有轮廓：`App`、`IngredientsList`、`Instructions`
- en: Think about how scalable this is. If we want to display one recipe, our component
    structure will support this. If we want to display 10,000 recipes, we’ll just
    create 10,000 new instances of that component.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 想想这有多可扩展。如果我们想显示一个食谱，我们的组件结构将支持此操作。如果我们想显示10,000个食谱，我们只需创建10,000个该组件的新实例。
- en: 'We’ll create a component by writing a function. That function will return a
    reusable part of a user interface. Let’s create a function that returns an unordered
    list of ingredients. This time, we’ll make dessert with a function called `IngredientsList`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过编写一个函数来创建一个组件。该函数将返回用户界面的可重用部分。让我们创建一个返回无序食材列表的函数。这次，我们将使用名为`IngredientsList`的函数制作甜点：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The component’s name is `IngredientsList`, and the function outputs elements
    that look like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的名称是`IngredientsList`，函数输出的元素看起来像这样：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is pretty cool, but we’ve hardcoded this data into the component. What
    if we could build one component and then pass data into that component as properties?
    And then what if that component could render the data dynamically? Maybe someday
    that will happen!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，但我们已经将这些数据硬编码到组件中了。如果我们能够构建一个组件，然后将数据作为属性传递给该组件呢？然后，如果该组件能够动态呈现数据呢？也许有一天会发生！
- en: 'Just kidding—that day is now. Here’s an array of `secretIngredients` needed
    to put together a recipe:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 开玩笑的那一天就是现在。这里是组合食谱所需的`secretIngredients`数组：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then we’ll adjust the `IngredientsList` component to map over these `items`,
    constructing an `li` for however many items are in the `items` array:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将调整`IngredientsList`组件，对这些`items`进行映射，为`items`数组中的项目创建一个`li`：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then we’ll pass those `secretIngredients` as a property called `items`, which
    is the second argument used in `createElement`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将这些`secretIngredients`作为名为`items`的属性传递，这是在`createElement`中使用的第二个参数：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let’s look at the DOM. The data property `items` is an array with eight
    ingredients. Because we made the `li` tags using a loop, we were able to add a
    unique key using the index of the loop:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看DOM。数据属性`items`是一个包含八种食材的数组。因为我们使用循环创建了`li`标签，我们能够使用循环的索引添加一个唯一的键：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating our component this way will make the component more flexible. Whether
    the `items` array is one item or a hundred items long, the component will render
    each as a list item.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式创建我们的组件将使组件更加灵活。无论`items`数组是一个项目还是一百个项目长，组件都会将每个项目呈现为列表项。
- en: 'Another adjustment we can make here is to reference the `items` array from
    React props. Instead of mapping over the global `items`, we’ll make `items` available
    on the `props` object. Start by passing `props` to the function, then mapping
    over `props.items`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在这里做另一个调整，即从React props引用`items`数组。我们将`items`数组映射到全局`items`上，将`items`在`props`对象上可用。首先将`props`传递给函数，然后对`props.items`进行映射：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We could also clean up the code a bit by destructuring `items` from `props`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过从`props`中解构`items`来清理代码：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Everything that’s associated with the UI for `IngredientsList` is encapsulated
    into one component. Everything we need is right there.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与`IngredientsList`相关的所有UI都封装在一个组件中。我们需要的一切都在那里。
- en: 'React Components: A Historical Tour'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React组件：历史之旅
- en: Before there were function components, there were other ways to create components.
    While we won’t spend a great deal of time on these approaches, it’s important
    to understand the history of React components, particularly when dealing with
    these APIs in legacy codebases. Let’s take a little historical tour of React APIs
    of times gone by.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在有函数组件之前，还有其他创建组件的方式。虽然我们不会花费太多时间在这些方法上，但了解React组件的历史是很重要的，特别是在处理遗留代码库中的这些API时。让我们来一次React
    API的历史之旅。
- en: 'Tour stop 1: createClass'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旅行站1：createClass
- en: 'When React was first made open source in 2013, there was one way to create
    a component: `createClass`. The use of `React.createClass` to create a component
    looks like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当React在2013年首次开源时，创建组件的方法只有一种：`createClass`。使用`React.createClass`创建组件的方式如下：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Components that used `createClass` would have a `render()` method that described
    the React element(s) that should be returned and rendered. The idea of the component
    was the same: we’d describe a reusable bit of UI to render.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`createClass`的组件将具有描述应该返回和呈现的React元素的`render()`方法。组件的概念是相同的：我们将描述一个可重用的UI部分来呈现。
- en: In React 15.5 (April 2017), React started throwing warnings if `createClass`
    was used. In React 16 (September 2017), `React.createClass` was officially deprecated
    and was moved to its own package, `create-react-class`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 15.5（2017年4月）中，如果使用`createClass`，React开始抛出警告。在React 16（2017年9月）中，`React.createClass`被正式弃用，并移至自己的包`create-react-class`。
- en: 'Tour stop 2: class components'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旅行站2：类组件
- en: 'When class syntax was added to JavaScript with ES 2015, React introduced a
    new method for creating React components. The `React.Component` API allowed you
    to use class syntax to create a new component instance:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当 ES 2015 引入类语法到 JavaScript 中时，React 介绍了一种新的方法来创建 React 组件。`React.Component`
    API 允许您使用类语法来创建一个新的组件实例：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It’s still possible to create a React component using class syntax, but be forewarned
    that `React.Component` is on the path to deprecation as well. Although it’s still
    supported, you can expect this to go the way of `React.createClass`, another old
    friend who shaped you but who you won’t see as often because they moved away and
    you moved on. From now on, we’ll use functions to create components in this book
    and only briefly point out older patterns for reference.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以使用类语法来创建 React 组件，但请注意，`React.Component` 也在被弃用的路径上。虽然它仍然受支持，但可以预期它会像 `React.createClass`
    一样逐渐被淘汰，这是另一个曾经对你产生影响但现在已经不常见的老朋友。从现在开始，在本书中我们将使用函数来创建组件，并仅简要指出旧的模式以供参考。
