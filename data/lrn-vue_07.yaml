- en: Chapter 7\. Advanced Rendering, Dynamic Components, and Plugin Composition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章\. 高级渲染、动态组件和插件组合
- en: In the previous chapters, you learned how Vue works, how to compose components
    with Options API and Composition API, and how to incorporate data from an external
    resource into your Vue application using Axios.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，您已经了解了 Vue 的工作原理，如何使用选项 API 和组合 API 组合组件，以及如何使用 Axios 将外部资源数据整合到 Vue 应用程序中。
- en: This chapter will introduce a more advanced aspect of rendering in Vue. We will
    explore how to compute functional components using the rendering function and
    JSX and how to dynamically and conditionally render elements using Vue’s component
    tag. We will also learn how to register a custom plugin for use within the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍 Vue 渲染的更高级方面。我们将探讨如何使用渲染函数和 JSX 计算功能组件，以及如何使用 Vue 组件标记动态和条件渲染元素。我们还将学习如何注册自定义插件以在应用程序中使用。
- en: The Render Function and JSX
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染函数和 JSX
- en: With the Vue compiler API, Vue processes and compiles all the HTML templates
    used for a Vue component into the Virtual DOM upon rendering. When data of a Vue
    component are updated, Vue triggers the internal render function to send the latest
    value to the Virtual DOM.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue 编译器 API，Vue 在渲染时将所有用于 Vue 组件的 HTML 模板处理并编译成虚拟 DOM。当 Vue 组件的数据更新时，Vue
    触发内部渲染函数，将最新值发送到虚拟 DOM。
- en: Using `template` is the most common approach to creating a component. However,
    we need to bypass the HTML template parser process in specific scenarios, such
    as optimizing performance, working on a server-side rendering application, or
    working on a dynamic component library. By returning the rendered virtual node
    from the Virtual DOM directly and skipping the template compiling process, `render()`
    is the solution for such cases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定场景下，如优化性能、工作在服务器端渲染应用程序或工作在动态组件库中，我们需要绕过 HTML 模板解析器过程。通过直接返回虚拟 DOM 中的渲染虚拟节点，并跳过模板编译过程，`render()`
    是解决这类问题的解决方案。
- en: Using the Render Function
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用渲染函数
- en: In Vue 2, the `render()` function property receives a `createElement` callback
    parameter. It returns a valid VNode^([1](ch07.html#id1152)) by triggering `createElement`
    with the appropriate arguments. We usually denote `createElement` as an `h` function.^([2](ch07.html#id1153))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue 2 中，`render()` 函数属性接收一个 `createElement` 回调参数。通过适当的参数触发 `createElement`，它返回一个有效的
    VNode^([1](ch07.html#id1152))。我们通常将 `createElement` 表示为 `h` 函数。^([2](ch07.html#id1153))
- en: '[Example 7-1](#example_render_2) illustrates creating a component in Vue 2
    syntax.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-1](#example_render_2) 展示了在 Vue 2 语法中创建组件的方式。'
- en: Example 7-1\. Use the render function in Vue 2
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1\. 在 Vue 2 中使用渲染函数
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code equals writing the following template code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码等同于编写以下模板代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In Vue 3, the syntax of `render` changes significantly. It no longer accepts
    an `h` function as a parameter. Instead, the `vue` package exposes a global function,
    `h`, for creating VNodes. Hence, we can rewrite the code in [Example 7-1](#example_render_2)
    to that shown in [Example 7-2](#example_render_3).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue 3 中，`render` 的语法发生了显著变化。它不再接受 `h` 函数作为参数。相反，`vue` 包公开了一个全局函数 `h`，用于创建
    VNodes。因此，我们可以将 [示例 7-1](#example_render_2) 中的代码重写为 [示例 7-2](#example_render_3)
    中所示。
- en: Example 7-2\. Use the render function in Vue 3
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-2\. 在 Vue 3 中使用渲染函数
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output stays the same.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输出保持不变。
- en: Supporting Multi-Root Nodes with the Render Function
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用渲染函数支持多根节点
- en: Since Vue 3 supports multiple root nodes for a component template, `render()`
    can return an array of VNodes, each of which will be injected into the DOM at
    the same level as the others.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Vue 3 支持组件模板的多个根节点，`render()` 可以返回一个包含多个 VNode 的数组，每个节点将以同级方式插入到 DOM 中。
- en: Using the h Function to Create a VNode
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `h` 函数创建 VNode
- en: Vue designs the `h` function to be very flexible with three input parameters
    in different types, as shown in [Table 7-1](#table_param_render).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 设计 `h` 函数非常灵活，有三个不同类型的输入参数，详见 [表格 7-1](#table_param_render)。
- en: Table 7-1\. Different parameters for the h function
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 7-1\. `h` 函数的不同参数
- en: '| Parameter | Required? | Acceptable data type | Description |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 是否必需？ | 可接受的数据类型 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Component | Yes | String, object, or function | It accepts a string as a
    text or HTML tag element, a component function, or an options object. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 是 | 字符串、对象或函数 | 它接受字符串作为文本或 HTML 标签元素，组件函数或选项对象。 |'
- en: '| props | No | Object | This object contains all components’ `props`, attributes,
    and events received from its parent, similar to how we write in the `template`.
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| props | No | Object | 此对象包含从其父级接收的所有组件 `props`、属性和事件，与我们在 `template` 中编写的方式类似。
    |'
- en: '| Nested children | No | String, array, or object | This parameter includes
    a list of VNodes, or a string for a text-only component, or an object with different
    `slots` (see [Chapter 3](ch03.html#unique_chapter_id_03)) as children for the
    component. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 嵌套子节点 | No | String、array 或 object | 此参数包括一组 VNodes，或者仅包含文本的字符串组件，或者具有不同
    `slots`（参见[第三章](ch03.html#unique_chapter_id_03)）作为组件子节点的对象。 |'
- en: 'The syntax of the `h` function is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`h` 函数的语法如下：'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, we want to create a component that uses a `div` tag as a root
    element and has a `id`, an inline border style, and one input child element. We
    can call `h` as in this code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想创建一个组件，其根元素使用 `div` 标签，并具有 `id`、内联边框样式以及一个输入子元素。我们可以像这样调用 `h` 函数：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the actual DOM, the output of the component will be:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际 DOM 中，组件的输出将是：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can play with the following complete working code and experiment with different
    configurations for the `h` function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下完整的工作代码进行实验，并尝试不同的 `h` 函数配置：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Writing JavaScript XML in the Render Function
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在渲染函数中编写 JavaScript XML
- en: 'JavaScript XML (JSX) is a JavaScript extension introduced by the React framework
    to allow developers to write HTML code within JavaScript. HTML and JavaScript
    code in a JSX format looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript XML（JSX）是由 React 框架引入的 JavaScript 扩展，允许开发人员在 JavaScript 中编写 HTML
    代码。JSX 格式中的 HTML 和 JavaScript 代码如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous code outputs a component that renders a `div` tag with the text
    “This is a JSX component.” All that’s left to do is to return this component in
    the render function directly:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出一个渲染带有文本“这是一个 JSX 组件”的 `div` 标签的组件。剩下的工作就是在渲染函数中直接返回这个组件：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Vue 3.0 supports writing with JSX out of the box. The syntax for JSX is different
    from the Vue template. To bind a dynamic data, we use single curly braces `{}`,
    as in [Example 7-3](#jsx_ex).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 3.0 支持开箱即用的 JSX 编写。JSX 的语法与 Vue 模板不同。要绑定动态数据，我们使用单花括号 `{}`，如[示例 7-3](#jsx_ex)。
- en: Example 7-3\. Writing a simple Vue component using JSX
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-3\. 使用 JSX 编写简单的 Vue 组件
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We bind dynamic data with the same approach. There is no need to wrap the expression
    with `''''`. The following example shows how we attach a value to the `id` attribute
    of the `div`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相同的方法绑定动态数据。无需用 `''` 包裹表达式。以下示例显示了如何将值绑定到 `div` 的 `id` 属性上：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However, unlike JSX in React, we don’t transform attributes such as `class`
    to `className` with Vue. Instead, we keep these attributes’ original syntax. The
    same goes for elements’ event listeners (`onclick` instead of `onClick` in React,
    etc.).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与 React 中的 JSX 不同，我们在 Vue 中不会将诸如 `class` 之类的属性转换为 `className`。相反，我们保留这些属性的原始语法。对于元素的事件监听器（在
    React 中是 `onClick`，在 Vue 中仍然是 `onclick` 等）也是如此。
- en: You can also register a JSX component as part of `components` like other Vue
    components written in Options API. It can be handy in combining with the `render`
    function in writing dynamic components and offers better readability in many cases.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以像 Options API 中的其他 Vue 组件一样注册 JSX 组件作为 `components` 的一部分。在编写动态组件时结合 `render`
    函数使用非常方便，并在许多情况下提供更好的可读性。
- en: Next, we will discuss how we can write a functional component.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何编写函数组件。
- en: Functional Component
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组件
- en: A functional component is a stateless component and bypasses the typical component
    lifecycle. Unlike a standard component, which works with Options API, a functional
    component is a function, denoting the render function for that component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组件是一个无状态组件，绕过了典型的组件生命周期。与使用 Options API 的标准组件不同，函数组件是一个函数，用于表示该组件的渲染函数。
- en: 'Since it is a stateless component, there is no access to the `this` instance.
    Instead, Vue exposes the component’s external `props` and `context` as function
    arguments. The functional component must return a virtual node instance created
    using the global function `h()` from the `vue` package. Hence, the syntax will
    be:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个无状态组件，因此无法访问 `this` 实例。相反，Vue 将组件的外部 `props` 和 `context` 作为函数参数暴露出来。函数组件必须使用
    `vue` 包中的全局函数 `h()` 创建并返回一个虚拟节点实例。因此，语法将是：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`context` exposes the component’s context properties, including `emits` for
    the component’s event emitters, `attrs` for passed attributes to the component
    from the parent, and `slots` containing the component’s nested elements.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`context` 公开了组件的上下文属性，包括用于组件的事件发射器 `emits`，从父组件传递给组件的 `attrs`，以及包含组件嵌套元素的 `slots`。'
- en: 'For example, the functional component `myHeading` displays any text passed
    to it within a heading element. We give the heading’s level as `level` props.
    If we want to display the text “Hello World” as heading level 2 (`<h2>`), we use
    `myHeading` as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，功能组件 `myHeading` 会在标题元素内显示传递给它的任何文本。我们使用 `level` props 指定标题的级别。如果我们想要将文本
    “Hello World” 显示为级别 2 的标题（`<h2>`），则使用 `myHeading` 如下所示：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the output should be:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 并且输出应该是：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To do this, we use the render function `h` from the `vue` package and perform
    the code shown in [Example 7-4](#heading_two).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用 `vue` 包中的 `h` 渲染函数，并执行 [Example 7-4](#heading_two) 中显示的代码。
- en: Example 7-4\. Using the `h` function to create a custom heading component
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-4\. 使用 `h` 函数创建自定义标题组件
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Vue will skip the template render process for the functional component and add
    the virtual node declaration directly to its renderer pipeline. This mechanism
    results in no nested slots or attributes available for functional components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 将跳过功能组件的模板渲染过程，并将虚拟节点声明直接添加到其渲染器管道中。这种机制导致功能组件不可用嵌套插槽或属性。
- en: Defining Props and Emits for Functional Component
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为功能组件定义 Props 和 Emits
- en: 'You can explicitly define the functional component’s acceptable `props` and
    `emits` by following the syntax:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下语法明确定义功能组件的可接受 `props` 和 `emits`：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Without defining, `context.props` will have the same value as `context.attrs`,
    containing all the attributes passed to the component.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不定义，`context.props` 将与 `context.attrs` 具有相同的值，其中包含传递给组件的所有属性。
- en: A functional component is powerful when you want to control how to render your
    component programmatically, especially for component library authors who need
    to provide low-level flexibility for their components for users’ requirements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要以编程方式控制组件渲染时，功能组件非常强大，特别适用于组件库作者，他们需要为用户需求提供组件的低级别灵活性。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Vue 3 offers an additional way to write components using `<script setup>`. This
    is relevant only if you write components in *SFC* format, discussed in [“setup”](ch03.html#setup_hook_03).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 3 提供了一种额外的方式，使用 `<script setup>` 编写组件。只有在以*SFC*格式编写组件时才相关，详见 [“setup”](ch03.html#setup_hook_03)。
- en: Next, we will explore how to add external functionality to a Vue application
    using plugins.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何使用插件为Vue应用程序添加外部功能。
- en: Adding Custom Functionality Globally with Vue Plugins
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue 插件全局添加自定义功能
- en: 'We use plugins to add third-party libraries or extra custom functionality for
    global usage in our Vue application. A Vue plugin is an object that exposes a
    single method, `install()`, containing the logic code, and it is responsible for
    installing the plugin itself. Here is an example plugin:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用插件在Vue应用程序中全局添加第三方库或额外的自定义功能。Vue 插件是一个对象，公开一个名为 `install()` 的方法，其中包含逻辑代码，并负责安装插件本身。以下是一个示例插件：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this code, we define our sample plugin code within the `samplePlugin` file,
    located in the `plugins` directory. `install()` receives two argument: an `app`
    instance, and some `options` as the plugin’s configurations.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们在位于 `plugins` 目录中的 `samplePlugin` 文件中定义了我们的示例插件代码。`install()` 接收两个参数：一个
    `app` 实例和一些作为插件配置的 `options`。
- en: For example, let’s compose a `truncate` plugin that will add a new global function
    property, `$truncate`. `$truncate` will return a truncated string if its length
    is over `options.limit` characters, as shown in [Example 7-5](#truncate_code).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们编写一个 `truncate` 插件，它将添加一个新的全局函数属性 `$truncate`。如果字符串长度超过 `options.limit`
    字符，则 `$truncate` 将返回截断的字符串，如 [Example 7-5](#truncate_code) 所示。
- en: Example 7-5\. Compose a truncate plugin
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-5\. 编写截断插件
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To use this plugin in our application, we call the `app.use()` method on the
    created `app` instance in the `main.ts`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中使用此插件，我们在 `main.ts` 中创建的 `app` 实例上调用 `app.use()` 方法：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The Vue engine will install the `truncate` plugin and initialize it with a
    `limit` of 10 characters. The plugin will be available in every Vue component
    within the `app` instance. You can call this plugin using `this.$truncate` in
    the `script` section or just `$truncate` in the `template` section:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 引擎将安装 `truncate` 插件，并初始化为 10 个字符的 `limit`。该插件将在 `app` 实例中的每个 Vue 组件中可用。您可以在
    `script` 部分使用 `this.$truncate` 或在 `template` 部分直接使用 `$truncate` 来调用此插件：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The output should look like [Figure 7-1](#figure_15_1).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如 [图 7-1](#figure_15_1)。
- en: '![Display of two heading texts, both as truncated texts result from the call
    of the truncate plugin.](assets/lvue_0701.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![展示两个标题文本的显示，都作为截断文本的结果来自调用截断插件。](assets/lvue_0701.png)'
- en: Figure 7-1\. Component output texts are truncated
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 组件输出文本被截断
- en: 'However, `$truncate` is available only if you use it in the `<template>` section
    or as `this.$truncate` with Options API in the `script` section. Accessing `$truncate`
    inside `<script setup>` or `setup()` is *not* possible. To do so, we need the
    provide/inject pattern (see [“Communicate Between Components with provide/inject
    Pattern”](ch04.html#provide_inject_pattern)), starting with adding the following
    code to the plugin’s `install` function, located in the `plugins/truncate.ts`
    file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，只有在 `<template>` 部分使用时或在 `script` 部分的 Options API 中作为 `this.$truncate`，才能使用
    `$truncate`。在 `<script setup>` 或 `setup()` 中访问 `$truncate` 是*不可能*的。为此，我们需要使用提供/注入模式（见[“使用提供/注入模式在组件之间通信”](ch04.html#provide_inject_pattern)），从以下位置的插件
    `install` 函数开始，位于 `plugins/truncate.ts` 文件中：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Vue will pass `truncate` as part of the `plugins` object to all the application’s
    components. With that, we can use `inject` to receive our desired plugin `truncate`
    and move on to computing the `truncatedText`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 将 `truncate` 作为 `plugins` 对象的一部分传递给所有应用程序的组件。通过这样，我们可以使用 `inject` 接收我们想要的插件
    `truncate` 并继续计算 `truncatedText`：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Plugins are very helpful in organizing global methods and making them available
    for reuse in other applications. It is also beneficial in writing your logic during
    an installation of an external library, such as *axios* for fetching external
    data, *i18n* for localization, etc.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 插件在组织全局方法和在其他应用程序中重用时非常有帮助。在安装外部库时编写逻辑，例如*axios*用于获取外部数据，*i18n*用于本地化等，也是非常有益的。
- en: Registering Pinia and Vue Router in Our Application
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的应用程序中注册 Pinia 和 Vue Router
- en: During the scaffolding of our application, Vite adds Pinia and Vue Router as
    application plugins using the same approach reflected in the original generated
    code in `main.ts`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序脚手架期间，Vite 使用与在 `main.ts` 中生成的原始代码中反映的相同方法添加 Pinia 和 Vue Router 作为应用程序插件。
- en: The next section will look at rendering the dynamic component in run-time using
    the Vue `<component>` tag.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍如何使用 Vue `<component>` 标签在运行时渲染动态组件。
- en: Dynamic Rendering with the <component> Tag
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `<component>` 标签进行动态渲染
- en: 'The `<component>` tag acts as the placeholder for rendering a Vue component,
    according to the component reference name passed to its `is` props, following
    this syntax:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`<component>` 标签充当渲染 Vue 组件的占位符，根据传递给其 `is` props 的组件引用名称进行渲染，遵循此语法：'
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Suppose your target component is accessible from the Vue instance (registered
    as a component of the app or the parent component when `<component>` is nested);
    the Vue engine will know how to look up the target component based on the name
    string and replace the tag with the target component. The target component will
    also inherit all the extra props passed to `<component>`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的目标组件可以从 Vue 实例访问（注册为应用程序的组件或在嵌套 `<component>` 时作为父组件），Vue 引擎将根据名称字符串查找目标组件，并用目标组件替换标签。目标组件还将继承传递给
    `<component>` 的所有额外 props。
- en: 'Say we have a `HelloWorld` component that renders the text “Hello World”:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个 `HelloWorld` 组件，用于呈现文本“Hello World”：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We register this component to the `App`, then render it dynamically using the
    `<component>` tag, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将此组件注册到 `App`，然后使用 `<component>` 标签动态渲染，如下所示：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also bind the component as a reference to the `is` props using the
    `v-bind` directive (denoted by `:` short syntax). We can shorten the two previous
    code blocks into a single `App` component by rewriting the code as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `v-bind` 指令（简写为 `:`）将组件绑定为 `is` props 的引用。我们可以通过以下方式将前两个代码块缩短为单个 `App`
    组件：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note here the component reference `myComp` follows Options API syntax. You can
    also pass an imported SFC component instead. The output of both cases should be
    the same.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，组件引用`myComp`遵循Options API语法。你也可以传递导入的SFC组件。两种情况的输出应该是相同的。
- en: The `<component>` tag is powerful. For example, if you have a gallery component,
    you can choose to render each gallery item as a `Card` component or a `Row` component,
    using `<component>` to switch parts conditionally.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`<component>`标签非常强大。例如，如果你有一个画廊组件，可以选择将每个画廊项条件地渲染为一个`Card`组件或`Row`组件，使用`<component>`来进行部分切换。'
- en: However, switching components means Vue unmounts the current element completely
    and erases all the component’s current data states. Switching back to that component
    equals creating a new instance with a new data state. To prevent that behavior
    and maintain the states of a passive element for a future switch, we use the `<keep-alive>`
    component.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，切换组件意味着Vue完全卸载当前元素并删除所有组件的当前数据状态。切换回该组件相当于创建一个具有新数据状态的新实例。为了防止这种行为并为未来的切换维护一个被动元素的状态，我们使用`<keep-alive>`组件。
- en: Keeping Component Instance Alive with <keep-alive>
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用<keep-alive>保持组件实例的存活状态
- en: '`<keep-alive>` is a built-in Vue component for wrapping around a dynamic element
    and preserving the component’s states in inactive mode.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`<keep-alive>`是一个内置的Vue组件，用于包装动态元素，并在非活动模式下保留组件状态。'
- en: 'Assume we have two components, `StepOne` and `StepTwo`. In the `StepOne` component,
    there is a string `input` field that has two-way binding to a local data property
    `name` using `v-model`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个组件，`StepOne`和`StepTwo`。在`StepOne`组件中，有一个字符串`input`字段，使用`v-model`与本地数据属性`name`进行双向绑定：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'While the `StepTwo` component renders a static string:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 而`StepTwo`组件渲染一个静态字符串：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the main `App` template, we will use `component` tag to render a local data
    property: `activeComp` as a component reference. The initial value of `activeComp`
    is `StepOne`, and we have a button to move between `StepOne` to `StepTwo`, and
    vice versa:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在主`App`模板中，我们将使用`component`标签将本地数据属性`activeComp`作为组件引用进行渲染。`activeComp`的初始值是`StepOne`，我们有一个按钮可以在`StepOne`和`StepTwo`之间切换：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Whenever you switch between `StepOne` and `StepTwo`, Vue preserves any value
    of the `name` property received from the input field. When switching back to `StepOne`,
    you can continue with the previous value rather than starting from the initial
    value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你在`StepOne`和`StepTwo`之间切换时，Vue都会保留从输入字段接收的`name`属性的任何值。当切换回`StepOne`时，你可以继续使用先前的值，而不是从初始值开始。
- en: 'You can also define the maximum instances for `keep-alive` to the cache using
    its `max` props:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用其`max`属性为`keep-alive`定义最大缓存实例数量：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This code defines the maximum number of instances `keep-alive` should hold as
    two by setting `max="2"`. Once the number of cached instances exceeds the limit,
    Vue removes the least recently used (LRU) instance from the cached list, allowing
    for caching new instances.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码通过设置`max="2"`来定义`keep-alive`应保持的最大实例数。一旦缓存实例数超过限制，Vue将从缓存列表中移除最近最少使用（LRU）的实例，以便缓存新的实例。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: This chapter explored how to control the component rendering with JSX and functional
    components, register Vue custom plugins globally, and dynamically and conditionally
    render a component using the `<component>` tag.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了如何使用JSX和函数组件控制组件渲染，全局注册Vue自定义插件，并使用`<component>`标签动态和条件地渲染组件。
- en: The next chapter will introduce Vue Router, the official routing management
    library for Vue, and discuss how to handle the navigation between different routes
    in our application using Vue Router.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍Vue Router，Vue的官方路由管理库，并讨论如何使用Vue Router在应用程序中处理不同路由之间的导航。
- en: ^([1](ch07.html#id1152-marker)) Virtual node
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch07.html#id1152-marker)) 虚拟节点
- en: ^([2](ch07.html#id1153-marker)) Stands for hypescript, meaning using JavaScript
    code to create HTML
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch07.html#id1153-marker)) 代表超文本，意味着使用JavaScript代码创建HTML
