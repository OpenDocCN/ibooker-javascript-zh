- en: "\uFEFFForeword"
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: "\uFEFF前言"
- en: 'In the past decade, Node.js has gone from novelty to the de facto platform
    for new applications. During that period, I have had the opportunity to help thousands
    of Node.js developers from around the world orient themselves and find their paths
    to success. I have seen Node.js used for everything. Really: someone even built
    a low-level bootable operating system with Node.js.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，Node.js 已经从新奇变成了新应用的事实标准平台。在此期间，我有机会帮助来自世界各地的成千上万的 Node.js 开发者定位自己，找到成功的道路。我见过
    Node.js 用于各种用途。真的：有人甚至用 Node.js 构建了低级可引导操作系统。
- en: 'At the SFNode meetup I created in San Francisco, we have a star speaker who
    has spoken more than anyone else. You guessed it: Thomas Hunter II, the author
    of this book. While you may be able to do anything with Node.js, there are some
    really practical things that particularly benefit from being done with Node.js.
    In today’s cloud-first world, most systems have become distributed systems. In
    this book and in the countless talks I’ve had the pleasure to see Thomas give
    at SFNode and around the world, pragmatism reigns supreme. This book is filled
    with experience-tested, hands-on guidance to get you from where you are today
    to where you need to be tomorrow.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我在旧金山创建的 SFNode meetup 上，我们有一个超级演讲者，他比任何人都多发言。你猜对了：Thomas Hunter II，这本书的作者。虽然你可能可以用
    Node.js 做任何事情，但有些实际的事情特别适合用 Node.js 来完成。在今天的云优先世界中，大多数系统都变成了分布式系统。在这本书和我在 SFNode
    和全球各地看到 Thomas 进行的无数次演讲中，务实主义至上。这本书充满了经验测试过的、实用的指导，帮助你从今天的位置走向明天的目标。
- en: The JavaScript language enables us as developers to create at the speed of thought.
    It requires little ceremony, and the code we write is usually simple enough that
    writing it by hand is more efficient than generating it. This beautiful simplicity
    of JavaScript is perfectly matched with Node.js. Node, as we frequently refer
    to it, is intentionally minimal. Ryan Dahl, its creator, wrote Node to build an
    application server that was an order of magnitude easier and faster than what
    anyone was used to. The results have exceeded even our wildest dreams. The ease
    and simplicity of Node.js enables you to create, validate, and innovate in ways
    that simply weren’t possible 10 years ago.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 语言使我们作为开发者能够以思想的速度创造。它需要很少的仪式感，我们编写的代码通常足够简单，手工编写比生成更为高效。JavaScript
    的这种简单之美与 Node.js 完美契合。我们经常称之为 Node，它故意保持简约。Ryan Dahl，它的创造者，编写 Node 来构建比任何人习惯的应用服务器更简单和更快的应用。结果甚至超出了我们最疯狂的梦想。Node.js
    的简便和简单性使你能够以前所未有的方式创建、验证和创新，这在10年前根本不可能实现。
- en: Before I had Node.js, I was a full stack developer using JavaScript to build
    interactive web-based experiences and Java to provide APIs and backend services.
    I would revel in the creative flow of JavaScript, and then have to completely
    shift gears to translate all of it into an object model for Java. What a waste
    of time! When I found Node.js, I could finally iterate efficiently and effectively
    both on the client and the server. I literally dropped everything, sold my house,
    and moved to San Francisco to work with Node.js.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习 Node.js 之前，我是一个全栈开发者，使用 JavaScript 构建交互式的基于 Web 的体验，使用 Java 提供 API 和后端服务。我会沉浸在
    JavaScript 的创造性流程中，然后完全转向，将所有内容翻译成 Java 的对象模型。多么浪费时间啊！当我发现 Node.js 时，我终于能够在客户端和服务器上都有效率和有效地迭代。我真的放下一切，卖掉了房子，搬到旧金山与
    Node.js 一起工作。
- en: I built data aggregation systems, social media platforms, and video chat—all
    with Node.js. Then I helped Netflix, PayPal, Walmart, and even NASA learn how
    to use the platform effectively. The JavaScript APIs were rarely folks’ biggest
    challenge. What confused people most was the asynchronous programming model. If
    you don’t understand the tools you are using, how can you expect to achieve the
    best results with those tools? Asynchronous programming requires you to think
    a bit more like a computer system rather than a linear script of consecutive actions.
    This asynchrony is the heartbeat of a good distributed system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我用 Node.js 构建了数据聚合系统、社交媒体平台和视频聊天。然后我帮助 Netflix、PayPal、沃尔玛，甚至 NASA 学会如何有效地使用这个平台。JavaScript
    的 API 很少是人们最大的挑战。最让人困惑的是异步编程模型。如果你不理解你正在使用的工具，你如何能够期望以最佳的结果使用这些工具呢？异步编程要求你像计算机系统一样思考，而不是按顺序执行的线性脚本。这种异步性是一个良好分布式系统的核心。
- en: When Thomas asked me to review the table of contents of this book to make sure
    he’d covered everything, I noticed that the section on scaling starts with an
    overview of the cluster module. I immediately flagged it as an area of concern.
    Cluster was created to enable single instance concurrency that can be exposed
    to a single port on a system. I’ve seen folks new to Node.js take this and run
    with the assumption that since concurrency may be desirable, cluster is the right
    tool for their needs. In distributed systems, concurrency at the instance level
    is usually a waste of time. Luck had it that Thomas and I were on the same page,
    and this led to a delightful talk at SFNode by our top presenter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Thomas 要求我审阅这本书的目录以确保他已经涵盖了所有内容时，我注意到关于扩展性的部分以集群模块的概述开始。我立即将其标记为一个关注的重点。集群模块的创建是为了实现单实例并发，可以暴露到系统的单个端口上。我见过新手们使用这个功能并假设由于并发可能是可取的，集群模块就是他们需求的正确工具。在分布式系统中，实例级别的并发通常是浪费时间的。幸运的是，Thomas
    和我意见一致，这导致我们在 SFNode 的顶级演讲者的精彩对话。
- en: So, as you are building your aptitude as a Node.js developer and as a distributed
    systems developer, take time to understand the constraints and opportunities in
    your system. Node.js has incredibly performant I/O capabilities. I’ve seen downstream
    systems become overwhelmed when old services were removed and replaced with Node.js
    implementations. These systems acted as natural rate limiters that the downstream
    services had been built to accommodate. Adding a simple Node.js proxy can fix
    most issues until the downstream services are updated or replaced.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你作为一个 Node.js 开发者和分布式系统开发者建立你的能力时，请花时间了解你系统中的约束和机会。Node.js 拥有非常高效的 I/O 能力。我见过旧服务被移除并用
    Node.js 实现后，下游系统变得不堪重负的情况。这些系统原本可以承受这些服务，添加一个简单的 Node.js 代理可以解决大多数问题，直到下游服务被更新或替换。
- en: The ease of development with Node will enable you to try many things. Don’t
    be afraid to throw out code and start over. Node.js development thrives in iteration.
    Distributed systems let us isolate and encapsulate logic at a service level, which
    we then can load balance across to validate whole system performance. But don’t
    just take my word for it. The pages in this book show you how to do this most
    effectively.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Node 开发的便捷性可以让你尝试很多事情。不要害怕抛弃代码并重新开始。Node.js 的开发在迭代中茁壮成长。分布式系统让我们在服务级别隔离和封装逻辑，然后可以通过负载平衡来验证整个系统的性能。但不要仅仅听我的话。这本书的页面会向你展示如何做到这一点最有效。
- en: Have fun and share what you learn along the way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习的过程中享受乐趣，并分享你所学到的东西。
- en: Dan Shaw ([@dshaw](https://twitter.com/dshaw))
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Dan Shaw（[@dshaw](https://twitter.com/dshaw)）
- en: Founder and CTO, NodeSource
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创始人兼首席技术官，NodeSource
- en: The Node.js Company
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 公司
- en: Always bet on Node.js
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 始终相信 Node.js
