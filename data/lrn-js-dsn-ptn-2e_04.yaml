- en: Chapter 4\. Anti-Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。反模式
- en: As engineers, we may run into situations when we are on a deadline to deliver
    a solution or where code gets included as a series of patches without a code review.
    The code in such cases may not always be well thought out and may propagate what
    we call *anti-patterns*. This chapter describes what anti-patterns are and why
    it is essential to understand and identify them. We also look at some typical
    anti-patterns in JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为工程师，我们可能会遇到我们必须在最后期限前交付解决方案或者代码被连续打补丁而没有进行代码审查的情况。在这些情况下的代码可能不总是经过深思熟虑，并且可能会传播我们所称的
    *反模式* 。本章描述了什么是反模式以及理解和识别它们的重要性。我们还将看一些JavaScript中典型的反模式。
- en: What Are Anti-Patterns?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是反模式？
- en: 'If a pattern represents a best practice, an anti-pattern represents the lesson
    learned when a proposed pattern goes wrong. Inspired by the GoF’s book *Design
    Patterns*, Andrew Koenig first coined the term anti-pattern in 1995 in his article
    in the [*Journal of Object-Oriented Programming*, Volume 8](https://oreil.ly/Megyr).
    He described anti-patterns as:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个模式代表最佳实践，那么反模式则代表了当提议的模式走错路时所学到的教训。受GoF的书籍 *设计模式* 启发，安德鲁·科尼格于1995年在他在 [*面向对象编程杂志*，第8卷](https://oreil.ly/Megyr)
    中的文章中首次创造了反模式一词。他描述反模式如下：
- en: An antipattern is just like a pattern, except that instead of a solution, it
    gives something that looks superficially like a solution but isn’t one.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 反模式就像模式一样，只不过它不是解决方案，而是看似是解决方案但实际上不是解决方案。
- en: 'He presented two notions of anti-patterns. Anti-patterns:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 他提出了两种反模式的概念。反模式：
- en: Describe a *bad* solution to a particular problem that resulted in an unfavorable
    situation occurring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述一个 *糟糕的* 解决方案导致发生了不利情况
- en: Describe *how* to get out of the said situation and go to a good solution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 *如何* 从当前情况中脱身并找到一个好的解决方案。
- en: 'On this topic, Alexander writes about the difficulties in achieving a good
    balance between good design structure and good context:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个话题上，亚历山大写道在实现良好设计结构和良好上下文之间取得良好平衡方面的困难：
- en: 'These notes are about the process of design; the process of inventing physical
    things which display a new physical order, organization, form, in response to
    function. … Every design problem begins with an effort to achieve fitness between
    two entities: the form in question and its context. The form is the solution to
    the problem; the context defines the problem.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些笔记讨论的是设计的过程；是发明物理事物的过程，这些事物在响应功能时展示了新的物理秩序、组织、形式。...每个设计问题都始于努力实现两个实体之间的适配：问题中的形式和它的上下文。上下文定义了问题，形式是问题的解决方案。
- en: Understanding anti-patterns is as essential as being aware of design patterns.
    Let us qualify the reason behind this. When creating an application, a project’s
    lifecycle begins with construction. At this stage, you are likely to choose from
    the available *good* design patterns as you see fit. However, after the initial
    release, it needs to be maintained.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 理解反模式和了解设计模式一样重要。让我们分析其背后的原因。在创建应用程序时，项目的生命周期从构建开始。在这个阶段，您可能会根据需要选择可用的 *良好*
    设计模式。但是，在初始发布后，应用程序需要进行维护。
- en: Maintenance of an application already in production can be particularly challenging.
    Developers who haven’t worked on the application before may accidentally introduce
    a *bad* design into the project. If these *bad* practices have already been identified
    as anti-patterns, developers will recognize them in advance and avoid the known
    common mistakes. This is similar to how knowledge of design patterns allows us
    to recognize areas where we could apply *known* and *helpful* standard techniques.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 已经在生产中的应用程序的维护可能特别具有挑战性。之前没有参与过该应用程序开发的开发人员可能会在项目中意外引入一个 *糟糕的* 设计。如果这些 *糟糕的*
    实践已被确认为反模式，开发人员将能够提前识别并避免已知的常见错误。这类似于设计模式的知识使我们能够识别我们可以应用 *已知* 和 *有用* 的标准技术的领域。
- en: The quality of the solution as it evolves will either be *good* or *bad*, depending
    on the skill level and time the team has invested in it. Here, *good* and *bad*
    are considered in context—a “perfect” design may qualify as an anti-pattern if
    applied in the wrong context.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着解决方案的演变，其质量将取决于团队投入的技能水平和时间，可能是 *好的* 或 *坏的* 。在这里，*好的* 和 *坏的* 是根据上下文来考虑的——一个“完美”的设计如果在错误的上下文中应用，可能会被视为反模式。
- en: To summarize, an anti-pattern is a bad design that is worthy of documenting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，反模式是值得记录的糟糕设计。
- en: Anti-Patterns in JavaScript
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 中的反模式
- en: 'Developers sometimes knowingly opt for shortcuts and temporary solutions to
    expedite code deliveries. These tend to become permanent and accumulate as technical
    debt that is essentially made up of anti-patterns. JavaScript is a weakly typed
    or untyped language that makes taking certain shortcuts easier. Following are
    some examples of anti-patterns that you might come across in JavaScript:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员有时会明知故犯地选择捷径和临时解决方案以加快代码交付速度。这些往往会变成永久性问题，并积累为技术债务，其本质上由反模式组成。JavaScript是一种弱类型或无类型语言，这使得采取某些捷径更容易。以下是您可能在JavaScript中遇到的一些反模式示例：
- en: Polluting the global namespace by defining numerous variables in the global
    context.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在全局上下文中定义大量变量来污染全局命名空间。
- en: Passing strings rather than functions to either `setTimeout` or `setInterval`,
    as this triggers the use of `eval()` internally.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串而非函数传递给`setTimeout`或`setInterval`，因为这会在内部触发`eval()`的使用。
- en: Modifying the `Object` class prototype (this is a particularly bad anti-pattern).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`Object`类原型（这是一个特别糟糕的反模式）。
- en: Using JavaScript in an inline form, as this is inflexible.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行内形式中使用JavaScript是不灵活的。
- en: The use of `document.write` where native Document Object Model (DOM) alternatives
    such as `document.createElement` are more appropriate. `document.write` has been
    grossly misused over the years and has quite a few disadvantages. If it’s executed
    after the page has been loaded, it can overwrite the page we’re on, which makes
    `document.createElement` a far better choice. Visit [this link](https://oreil.ly/kc1c0)
    for a live example of this in action. It also doesn’t work with XHTML, which is
    another reason opting for more DOM-friendly methods such as `document.createElement`
    is favorable.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里使用`document.write`，而原生文档对象模型（DOM）的替代方法如`document.createElement`更合适。多年来`document.write`被严重误用，并有许多缺点。如果在页面加载后执行，它可能会覆盖当前页面，因此选择`document.createElement`要明智得多。访问[此链接](https://oreil.ly/kc1c0)查看其实际应用的实时示例。它也不适用于XHTML，这是选择更友好的DOM方法如`document.createElement`的另一个原因。
- en: Knowledge of anti-patterns is critical for success. Once we learn to recognize
    such anti-patterns, we can refactor our code to negate them so that the overall
    quality of our solutions improves instantly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉反模式对于成功至关重要。一旦我们学会识别这些反模式，就可以重构代码以消除它们，从而立即提高解决方案的整体质量。
- en: Summary
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered patterns that could cause problems known as anti-patterns
    and examples of JavaScript anti-patterns. Before we cover JavaScript design patterns
    in detail, we must touch upon some critical modern JavaScript concepts that will
    prove relevant to our discussion on patterns. This is the subject of the next
    chapter, which introduces modern JavaScript features and syntax.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了可能导致问题的模式，即反模式以及JavaScript反模式的示例。在详细讨论JavaScript设计模式之前，我们必须简要介绍一些关键的现代JavaScript概念，这些概念对我们关于模式讨论具有重要意义。这是下一章的主题，介绍了现代JavaScript的特性和语法。
