- en: Chapter 1\. Hello World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章\. Hello World
- en: Let’s get started on the journey to mastering application development using
    React. In this chapter, you will learn how to set up React and write your first
    “Hello World” web app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用React掌握应用程序开发之旅。在本章中，您将学习如何设置React并编写您的第一个“Hello World”Web应用程序。
- en: Setup
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'First things first: you need to get a copy of the React library. There are
    various ways to go about it. Let’s go with the simplest one that doesn’t require
    any special tools and can get you learning and hacking away in no time.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的事情是获取React库的副本。有多种方法可以做到这一点。让我们选择最简单的方法，它不需要任何特殊工具，可以让您很快地学习和进行开发。
- en: Create a folder for all the code in the book in a location where you’ll be able
    to find it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个您可以找到的位置为本书中的所有代码创建一个文件夹。
- en: 'For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a */react* folder to keep the React library code separate.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个*/react*文件夹来保留React库代码的分离。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, you need to add two files: one is React itself, the other is the ReactDOM
    add-on. You can grab the latest 17.* versions of the two from the [*unpkg.com*](https://unpkg.com)
    host, like so:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要添加两个文件：一个是React本身，另一个是ReactDOM插件。您可以从[*unpkg.com*](https://unpkg.com)主机获取最新的17.*版本，如下所示：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that React doesn’t impose any directory structure; you’re free to move
    to a different directory or rename *react.js* however you see fit.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，React不强制任何目录结构；您可以自由移动到不同的目录或根据需要重命名*react.js*。
- en: You don’t have to download the libraries; you can use them directly from [*unpkg.com*](https://unpkg.com).
    However, having them locally makes it possible to learn anywhere and without an
    internet connection.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必下载这些库；您可以直接从[*unpkg.com*](https://unpkg.com)使用它们。但是，将它们本地化使得可以在任何地方学习，而不需要互联网连接。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `@17` in the URLs shown in the preceding example gets you a copy of the
    latest React 17, which is current at the time of writing this book. Omit `@17`
    to get the latest available React version. Alternatively, you can explicitly specify
    the version you require, for example `@17.0.2`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面示例中显示的URL中的`@17`获取了当前写作本书时最新的React 17版本。省略`@17`以获取最新可用的React版本。或者，您可以显式指定所需的版本，例如`@17.0.2`。
- en: Hello React World
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello React World
- en: 'Let’s start with a simple page in your working directory (*~/reactbook/01.01.hello.html*):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从您工作目录中的一个简单页面开始（*~/reactbook/01.01.hello.html*）：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can find all the code from this book [in the accompanying repository](https://github.com/stoyan/reactbook2).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的[附带存储库中找到所有代码](https://github.com/stoyan/reactbook2)。
- en: 'Only two notable things are happening in this file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中仅发生了两件显著的事情：
- en: You include the React library and its Document Object Model (DOM) add-on (via
    `<script src>` tags)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您包含了React库及其文档对象模型（DOM）插件（通过`<script src>`标签）
- en: You define where your application should be placed on the page (`<div id="app">`)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您定义应用程序应放置在页面上的位置（`<div id="app">`）
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can always mix regular HTML content as well as other JavaScript libraries
    with a React app. You can also have several React apps on the same page. All you
    need is a place in the DOM where you can point React to and say “do your magic
    right here.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以混合常规HTML内容以及其他JavaScript库与React应用程序。您还可以在同一页上拥有几个React应用程序。您所需要的只是DOM中可以指向React并说“在这里施展你的魔法”的地方。
- en: 'Now let’s add the code that says “hello”—update *01.01.hello.html* and replace
    `// my app''s code` with:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加说“hello”的代码—更新 *01.01.hello.html* 并将 `// my app's code` 替换为：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Load *01.01.hello.html* in your browser and you’ll see your new app in action
    (as depicted in [Figure 1-1](#FIG0101)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中加载 *01.01.hello.html*，您将看到您的新应用程序正在运行（如[图 1-1](#FIG0101)所示）。
- en: '![rur2 0101](Images/rur2_0101.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0101](Images/rur2_0101.png)'
- en: Figure 1-1\. “Hello world!” in action
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. “Hello world!”在运行中
- en: Congratulations, you’ve just built your first React application!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您，您刚刚构建了您的第一个React应用程序！
- en: '[Figure 1-1](#FIG0101) also shows the *generated* code in Chrome DevTools where
    you can see that the contents of the `<div id="app">` placeholder was replaced
    with the contents generated by your React app.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-1](#FIG0101)还显示了在Chrome开发工具中生成的代码，您可以在其中看到`<div id="app">`占位符的内容被您的React应用程序生成的内容替换。
- en: What Just Happened?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: There are a few points of interest in the code that made your first app work.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有一些值得注意的地方，这些地方使您的第一个应用程序起作用。
- en: First, you see the use of the `React` object. All of the APIs available to you
    are accessible via this object. The API is intentionally minimal, so there are
    not a lot of method names to remember.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你看到了`React`对象的使用。所有可用的API都可以通过这个对象访问。API故意保持最小化，因此记住的方法名称并不多。
- en: You can also see the `ReactDOM` object. It has only a handful of methods, `render()`
    being the most useful. `ReactDOM` is responsible for rendering the app *in the
    browser*. You can, in fact, create React apps and render them in different environments
    outside the browser—for example in canvas, or natively in Android or iOS.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到`ReactDOM`对象。它只有少数几个方法，其中最有用的是`render()`。`ReactDOM`负责在*浏览器*中呈现应用程序。实际上，你可以创建React应用并在不同的环境中呈现它们，例如在画布中，或者在Android或iOS本地应用中。
- en: Next, there is the concept of *components*. You build your UI using components
    and you combine these components in any way you see fit. In your applications,
    you’ll end up creating your custom components, but to get you off the ground,
    React provides wrappers around HTML DOM elements. You use the wrappers via the
    `React.createElement` function. In this first example, you can see the use of
    the `h1` element. It corresponds to the `<h1>` in HTML and is available to you
    using a call to `React.createElement('h1')`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，有*组件*的概念。你可以使用组件构建你的UI，并以任何你认为合适的方式组合这些组件。在你的应用程序中，你将会创建自定义组件，但是为了让你入门，React提供了围绕HTML
    DOM元素的包装器。你可以通过`React.createElement`函数使用这些包装器。在这个第一个示例中，你可以看到使用了`h1`元素。它对应于HTML中的`<h1>`，并且可以通过调用`React.createElement('h1')`来使用。
- en: Finally, you see the good old `document.getElementById('app')` DOM access. You
    use this to tell React where the application should be located on the page. This
    is the bridge crossing over from the DOM manipulation as you know it to React-land.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你看到了老旧的`document.getElementById('app')` DOM访问方式。你可以使用这个方法告诉React应用程序在页面上的位置。这就是从你知道的DOM操作到React领域的桥梁。
- en: Once you cross the bridge from DOM to React, you don’t have to worry about DOM
    manipulation anymore, because React does the translation from components to the
    underlying platform (browser DOM, canvas, native app). In fact, not worrying about
    the DOM is one of the great things about React. You worry about composing the
    components and their data—the meat of the application—and let React take care
    of updating the DOM most efficiently. No more hunting for DOM nodes, `firstChild`,
    `appendChild()` and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你从DOM转向React，你就不必再担心DOM操作，因为React会将组件转换为底层平台（浏览器DOM、画布、本地应用）。事实上，不再担心DOM是React的伟大之处之一。你只需关心组件及其数据的组合——这是应用程序的核心部分——让React以最高效的方式更新DOM。不再寻找DOM节点、`firstChild`、`appendChild()`等。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You *don’t have to* worry about DOM, but that doesn’t mean you cannot. React
    gives you “escape hatches” if you want to go back to DOM-land for any reason you
    may need.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你*不必*担心DOM，但这并不意味着你不能。如果有必要，React为你提供了“逃生通道”，让你可以返回到DOM领域。
- en: 'Now that you know what each line does, let’s take a look at the big picture.
    What happened is this: you rendered one React component in a DOM location of your
    choice. You always render one top-level component, and it can have as many child
    (and grandchild, etc.) components as needed. Even in this simple example, the
    `h1` component has a child—the “Hello world!” text.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道每行代码的作用，让我们来看看整体。发生的事情是：你在你选择的DOM位置中渲染了一个React组件。你总是渲染一个顶级组件，它可以有任意多的子组件（和孙子组件等）。即使在这个简单的例子中，`h1`组件也有一个子组件——“Hello
    world!”文本。
- en: React.createElement()
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React.createElement()
- en: As you now know, you can use a number of HTML elements as React components via
    the `React.createElement()` method. Let’s take a close look at this API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在所知，你可以通过`React.createElement()`方法将多个HTML元素用作React组件。让我们仔细看看这个API。
- en: 'Remember, the “Hello world!” app looks like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，“Hello world!”应用程序看起来像这样：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first parameter to `createElement` is the type of element to be created.
    The second (which is `null` in this case) is an object that specifies any properties
    (think DOM attributes) that you want to pass to your element. For example, you
    can do:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`createElement`的第一个参数是要创建的元素类型。第二个参数（在本例中为`null`）是一个对象，用于指定要传递给元素的任何属性（类似于DOM属性）。例如，你可以这样做：'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The HTML generated by this example is shown in [Figure 1-2](#FIG0102).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例生成的HTML显示在[图 1-2](#FIG0102)中。
- en: '![rur2 0102](Images/rur2_0102.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0102](Images/rur2_0102.png)'
- en: Figure 1-2\. HTML generated by a `React.createElement()` call
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. 由`React.createElement()`调用生成的HTML
- en: 'The third parameter (`"Hello world!"` in this example) defines a child of the
    component. The simplest case is just a text child (a `Text` node in DOM-speak)
    as you see in the preceding code. But you can have as many nested children as
    you like and you pass them as additional parameters. For example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数（在这个例子中是 `"Hello world!"`）定义了组件的子元素。最简单的情况就是一个文本子元素（在 DOM 中叫做 `Text` 节点），就像你在前面的代码中看到的那样。但你可以有任意多个嵌套的子元素，并且将它们作为额外的参数传递。例如：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another example, this time with nested components (result shown in [Figure 1-3](#FIG0103))
    is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子，这次是带有嵌套组件的（结果显示在 [图 1-3](#FIG0103) 中）如下所示：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![rur2 0103](Images/rur2_0103.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0103](Images/rur2_0103.png)'
- en: Figure 1-3\. HTML generated by nesting `React.createElement()` calls
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. 由嵌套 `React.createElement()` 调用生成的 HTML
- en: You can see in [Figure 1-3](#FIG0103) that the DOM generated by React has the
    `<em>` element as a child of the `<span>` which is in turn a child of the `<h1>`
    element (and a sibling of the “world” text node).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [图 1-3](#FIG0103) 中看到，React 生成的 DOM 中 `<em>` 元素是 `<span>` 的子元素，而 `<span>`
    又是 `<h1>` 元素的子元素（也是 “world” 文本节点的同级节点）。
- en: JSX
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX
- en: 'When you start nesting components, you quickly end up with a lot of function
    calls and parentheses to keep track of. To make things easier, you can use the
    *JSX syntax*. JSX is a little controversial: people often find it repulsive at
    first sight (ugh, XML in my JavaScript!), but indispensable after.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始嵌套组件时，你很快会遇到许多函数调用和括号要跟踪。为了简化操作，你可以使用 *JSX 语法*。JSX 有点争议：人们经常一见面就觉得它不好看（啊，XML
    混在我的 JavaScript 里面！），但是在使用后却不可或缺。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s not quite clear what the acronym JSX stands for, but it’s most likely JavaScriptXML
    or JavaScript Syntax eXtension. The official home of the open-source project is
    [*https://facebook.github.io/jsx*](https://facebook.github.io/jsx).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 这个缩写具体代表什么并不十分清楚，但很可能是 JavaScriptXML 或 JavaScript 语法扩展。这个开源项目的官方主页是 [*https://facebook.github.io/jsx*](https://facebook.github.io/jsx)。
- en: 'Here’s the previous snippet but this time using JSX syntax:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是上面代码片段，这次使用 JSX 语法：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is much more readable. This syntax looks very much like HTML and you already
    know HTML. However it’s not valid JavaScript that browsers can understand. You
    need to *transpile* this code to make it work in the browser. Again, for learning
    purposes, you can do this without special tools. You need the Babel library which
    translates cutting-edge JavaScript (and JSX) to old school JavaScript that works
    in ancient browsers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这样更易读。这种语法看起来非常像 HTML，而且你已经熟悉 HTML。但它并不是浏览器能理解的有效 JavaScript。你需要 *转译* 这段代码以使其在浏览器中运行。同样地，出于学习目的，你可以在没有特殊工具的情况下完成这项工作。你需要
    Babel 库，它可以将前沿的 JavaScript（和 JSX）转换为老式浏览器可以运行的 JavaScript。
- en: Setup Babel
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Babel
- en: 'Just like with React, get a local copy of Babel:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用 React 一样，先获取 Babel 的本地副本：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you need to update your learning template to include Babel. Create a file
    *01.04.hellojsx.html* like so:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，你需要更新学习模板以包含 Babel。像这样创建一个名为 *01.04.hellojsx.html* 的文件：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Note how `<script>` becomes `<script type="text/babel">`. This is a trick where,
    by specifying an invalid `type`, the browser ignores the code. This gives Babel
    a chance to parse and transform the JSX syntax into something the browser can
    run.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `<script>` 如何变成 `<script type="text/babel">`。这是一个技巧，通过指定一个无效的 `type`，浏览器会忽略这段代码。这给了
    Babel 解析和转换 JSX 语法的机会，将其转换成浏览器可以运行的代码。
- en: Hello JSX World
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hello JSX 世界
- en: 'With this bit of setup out of the way, let’s try JSX. Replace the `// my app''s
    code` part in the preceding HTML with:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在设置完成，让我们尝试一下 JSX。将前面 HTML 中 `// my app's code` 部分替换为：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The result of running this in the browser is shown in [Figure 1-4](#FIG0104).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行的结果显示在 [图 1-4](#FIG0104) 中。
- en: '![rur2 0104](Images/rur2_0104.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![rur2 0104](Images/rur2_0104.png)'
- en: Figure 1-4\. Hello JSX world
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. 你好 JSX 世界
- en: On Transpilation
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于转译
- en: It’s great that you got the JSX and Babel to work, but maybe a few more words
    won’t hurt, especially if you’re new to Babel and the process of transpilation.
    If you’re already familiar, feel free to skip this part where we familiarize a
    bit with the terms *JSX*, *Babel*, and *transpilation*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴你已经让 JSX 和 Babel 正常工作了，但也许再多说几句也无妨，特别是如果你对 Babel 和转译过程还不太熟悉的话。如果你已经熟悉了，请随意跳过这部分，我们稍微了解一下
    *JSX*、*Babel* 和 *转译* 的术语。
- en: '*JSX* is a separate technology from React and is completely optional. As you
    see, the first examples in this chapter didn’t even use JSX. You can opt into
    never coming anywhere near JSX at all. But it’s very likely that once you try
    it, you won’t go back to function calls.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*JSX*是React的一项独立技术，完全是可选的。正如你所见，本章的第一个示例甚至没有使用JSX。你完全可以选择永远不接触JSX。但很可能一旦尝试过，你就不会再回到函数调用。'
- en: The process of *transpilation* is a process of taking source code and rewriting
    it to accomplish the same results but using syntax that’s understood by older
    browsers. It’s different than using *polyfills*. An example of a polyfill is adding
    a method to `Array.prototype` such as `map()`, which was introduced in ECMAScript5,
    and making it work in browsers that support only ECMAScript3\. A polyfill is a
    solution in pure JavaScript-land. It’s a good solution when adding new methods
    to existing objects or implementing new objects (such as `JSON`). But it’s not
    sufficient when new syntax is introduced into the language. Any new syntax in
    the eyes of a browser that does not support it is just invalid and throws a parse
    error. There’s no way to polyfill it. New syntax, therefore, requires a compilation
    (transpilation) step so it’s transformed *before* it’s served to the browser.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*转译*的过程是将源代码重写成使用旧版浏览器理解的语法来实现相同结果的过程。这与使用*垫片*不同。例如，向`Array.prototype`添加`map()`方法，该方法是在ECMAScript5中引入的，在仅支持ECMAScript3的浏览器中使其生效。垫片是JavaScript领域的一种解决方案。当向现有对象添加新方法或实现新对象（例如`JSON`）时，它是一个很好的解决方案。但是，当语言引入新的语法时，垫片是不够的。对于不支持它的浏览器，任何新语法都是无效的，并且会抛出解析错误。因此，新语法需要一个编译（转译）步骤，以便在提供给浏览器之前进行转换。'
- en: Transpiling JavaScript is getting more and more common as programmers want to
    use the latest JavaScript (ECMAScript) features without waiting for browsers to
    implement them. If you already have a build process set up (that does, for example,
    minification or any other code transformation), you can simply add the JSX step
    to it. Assuming you *don’t* have a build process, you’ll see later in the book
    the necessary steps of setting one up.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序员希望使用最新的JavaScript（ECMAScript）功能而不必等待浏览器实现它们，JavaScript的转译变得越来越普遍。如果您已经设置了构建流程（例如，缩小或任何其他代码转换），您可以简单地将JSX步骤添加到其中。假设您*没有*构建过程，您将在本书的后面看到设置一个所需步骤。
- en: For now, let’s leave the JSX transpilation on the client side (in the browser)
    and move on with learning React. Just be aware that this is only for education
    and experimentation purposes. Client-side transforms are not meant for live production
    sites as they are slower and more resource intensive than serving already transpiled
    code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，让我们将JSX转译留在客户端（在浏览器中），继续学习React。只需注意，这仅用于教育和实验目的。客户端转换不适用于实时生产站点，因为它们比提供已转译代码更慢且资源消耗更大。
- en: 'Next: Custom Components'
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来：自定义组件
- en: 'At this point, you’re done with the bare-bones “Hello world” app. Now you know
    how to:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经完成了基本的“Hello world”应用程序。现在你知道如何：
- en: Set up the React library for experimentation and learning (it’s really just
    a question of a few `<script>` tags)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了实验和学习，设置React库（实际上只需几个`<script>`标签）
- en: Render a React component in a DOM location of your choice (e.g., `ReactDOM.render(reactWhat,
    domWhere)`)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你选择的DOM位置中渲染一个React组件（例如，`ReactDOM.render(reactWhat, domWhere)`）
- en: Use built-in components, which are wrappers around regular DOM elements (e.g.,
    `React.createElement(element, attributes, content, children)`)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置组件，它们是常规DOM元素的包装器（例如，`React.createElement(element, attributes, content,
    children)`）
- en: The real power of React, though, comes when you start using custom components
    to build (and update!) the user interface (UI) of your app. Let’s learn how to
    do just that in the next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，React的真正强大之处在于当你开始使用自定义组件来构建（和更新！）你的应用程序用户界面（UI）时。让我们在下一章中学习如何做到这一点。
