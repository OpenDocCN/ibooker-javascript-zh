- en: Chapter 1\. Asynchronous APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章\. 异步 API
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: A lot of the APIs covered in this book are *asynchronous*. When you call one
    of these functions or methods, you might not get the result back right away. Different
    APIs have different mechanisms to get the result back to you when it’s ready.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖的许多 API 都是*异步*的。当你调用其中一个函数或方法时，可能不会立即得到结果。不同的 API 有不同的机制，在准备好结果时将结果返回给你。
- en: Callback Functions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调函数
- en: The most basic asynchronous pattern is a *callback function*. This is a function
    that you pass to an asynchronous API. When the work is complete, it calls your
    callback with the result. Callbacks can be used on their own or as part of other
    asynchronous patterns.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的异步模式是*回调函数*。这是一个你传递给异步 API 的函数。当工作完成时，它调用你的回调函数并传递结果。回调函数可以单独使用，也可以作为其他异步模式的一部分使用。
- en: Events
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'Many browser APIs are *event* based. An event is something that happens asynchronously.
    Some examples of events are:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多浏览器 API 是基于*事件*的。事件是异步发生的事情。一些事件的例子包括：
- en: A button was clicked.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮被点击了。
- en: The mouse was moved.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标移动了。
- en: A network request was completed.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络请求完成了。
- en: An error occurred.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生了错误。
- en: An event has a name, such as `click` or `mouseover`, and an object with data
    about the event that occurred. This might include information such as what element
    was clicked or an HTTP status code. When you listen for an event, you provide
    a callback function that receives the event object as an argument.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事件有一个名称，比如 `click` 或 `mouseover`，以及一个包含有关事件发生的数据的对象。这可能包括点击了哪个元素或者 HTTP 状态码等信息。当你监听事件时，你提供一个回调函数，该函数接收事件对象作为参数。
- en: Objects that emit events implement the `EventTarget` interface, which provides
    the `addEventListener` and `removeEventListener` methods. To listen for an event
    on an element or other object, you can call `addEventListener` on it, passing
    the name of the event and a handler function. The callback is called every time
    the event is triggered until it is removed. A listener can be removed manually
    by calling `removeEventListener`, or in many cases listeners are automatically
    removed by the browser when objects are destroyed or removed from the DOM.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实现事件的对象实现了 `EventTarget` 接口，该接口提供了 `addEventListener` 和 `removeEventListener`
    方法。要监听元素或其他对象上的事件，你可以在其上调用 `addEventListener`，传递事件名称和处理函数。每次触发事件时都会调用回调函数，直到它被移除。可以通过调用
    `removeEventListener` 手动移除侦听器，或者在许多情况下，当对象被销毁或从 DOM 中移除时，浏览器会自动移除侦听器。
- en: Promises
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Promises
- en: Many newer APIs use `Promise`s. A `Promise` is an object, returned from a function,
    that is a placeholder for the eventual result of the asynchronous action. Instead
    of listening for an event, you call `then` on a `Promise` object. You pass a callback
    function to `then` that is eventually called with the result as its argument.
    To handle errors, you pass another callback function to the `Promise`’s `catch`
    method.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多较新的 API 使用 `Promise`。`Promise` 是一个从函数返回的对象，它是异步操作最终结果的占位符。与监听事件不同，你在 `Promise`
    对象上调用 `then`。你将一个回调函数传递给 `then`，该函数最终将以结果作为其参数调用。为了处理错误，你可以将另一个回调函数传递给 `Promise`
    的 `catch` 方法。
- en: A `Promise` is *fulfilled* when the operation completes successfully, and it
    is *rejected* when there’s an error. The fulfilled value is passed as an argument
    to the `then` callback, or the rejected value is passed as an argument to the
    `catch` callback.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作成功完成时，`Promise` 将*完成*，当出现错误时，`Promise` 将*拒绝*。完成的值作为参数传递给 `then` 回调，拒绝的值作为参数传递给
    `catch` 回调。
- en: 'There are a few key differences between events and `Promise`s:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和 `Promise` 之间有一些关键区别：
- en: Event handlers are fired multiple times, whereas a `then` callback is executed
    only once. You can think of a `Promise` as a one-time operation.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理程序会多次触发，而 `then` 回调只会执行一次。你可以把 `Promise` 想象成一次性操作。
- en: If you call `then` on a `Promise`, you’ll always get the result (if there is
    one). This is different from events where, if an event occurs before you add a
    listener, the event is lost.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在 `Promise` 上调用 `then` 方法，你总会得到结果（如果有的话）。这与事件不同，如果事件在你添加监听器之前发生，那么该事件将会丢失。
- en: '`Promise`s have a built-in error-handling mechanism. With events, you typically
    need to listen for an error event to handle error conditions.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Promise` 具有内置的错误处理机制。在事件中，通常需要监听错误事件来处理错误情况。'
- en: Working with Promises
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Promises
- en: Problem
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to call an API that uses `Promise`s and retrieve the result.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你想调用一个使用 `Promise` 的 API，并获取结果。
- en: Solution
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Call `then` on the `Promise` object to handle the result in a callback function.
    To handle potential errors, add a call to `catch`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`Promise`对象的`then`方法来处理回调函数中的结果。为了处理可能的错误，添加一个调用`catch`。
- en: Imagine you have a function `getUsers` that makes a network request to load
    a list of users. This function returns a `Promise` that eventually resolves to
    the user list (see [Example 1-1](#promiseGetUsers)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个函数`getUsers`，它会发出网络请求来加载用户列表。此函数返回一个`Promise`，最终解析为用户列表（参见[示例 1-1](#promiseGetUsers)）。
- en: Example 1-1\. Using a `Promise`-based API
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-1\. 使用基于`Promise`的API
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `Promise` returned from `getUsers` is an object with a `then` method. When
    the user list is loaded, the callback passed to `then` is executed with the user
    list as its argument.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从`getUsers`返回的`Promise`是一个带有`then`方法的对象。当用户列表加载完成时，执行传递给`then`的回调函数，并将用户列表作为其参数。
- en: This `Promise` also has a `catch` method for handling errors. If an error occurs
    while loading the user list, the callback passed to `catch` is called with the
    error object. Only one of these callbacks is called, depending on the outcome.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Promise`还具有用于处理错误的`catch`方法。如果在加载用户列表时出现错误，则调用传递给`catch`的回调函数以处理错误对象。根据结果只调用其中一个回调函数。
- en: Loading an Image with a Fallback
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用备用加载图片
- en: Problem
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to load an image to display on the page. If there’s an error loading
    the image, you want to use a known good image URL as a fallback.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望加载一张图片以在页面上显示。如果加载图片时出现错误，您希望使用已知的良好图片URL作为备用。
- en: Solution
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create an `Image` element programmatically, and listen for its `load` and `error`
    events. If the `error` event triggers, replace it with the fallback image. Once
    either the requested image or the placeholder image loads, add it to the DOM when
    desired.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用编程方式创建`Image`元素，并监听其`load`和`error`事件。如果触发了`error`事件，则用备用图片替换它。一旦请求的图片或占位图片加载完成，根据需要将其添加到DOM中。
- en: For a cleaner API, you can wrap this in a `Promise`. The `Promise` either resolves
    with an `Image` to be added or rejects with an error if neither the image nor
    the fallback can be loaded (see [Example 1-2](#example1-2)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰的API，您可以将其封装在一个`Promise`中。该`Promise`要么解析为要添加的`Image`，要么由于无法加载图片或备用图片而拒绝（参见[示例 1-2](#example1-2)）。
- en: Example 1-2\. Loading an image with a fallback
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-2\. 使用备用加载图片
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `loadImage` function takes a URL and a fallback URL and returns a `Promise`.
    Then it creates a new `Image` and sets its `src` attribute to the given URL. The
    browser attempts to load the image.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadImage`函数接受一个URL和一个备用URL，并返回一个`Promise`。然后它创建一个新的`Image`，并将其`src`属性设置为给定的URL。浏览器尝试加载图片。'
- en: 'There are three possible outcomes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种可能的结果：
- en: Success case
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 成功情况
- en: If the image loads successfully, the `load` event is triggered. The event handler
    resolves the `Promise` with the `Image`, which can then be inserted into the DOM.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图片成功加载，则触发`load`事件。事件处理程序使用该图片解析`Promise`，然后可以将其插入到DOM中。
- en: Fallback case
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 备用情况
- en: If the image fails to load, the `error` event is triggered. The error handler
    sets the `src` attribute to the fallback URL, and the browser attempts to load
    the fallback image. If *that* is successful, the `load` event fires and resolves
    the `Promise` with the fallback `Image`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图片加载失败，则触发`error`事件。错误处理程序将`src`属性设置为备用URL，并尝试加载备用图片。如果*成功*，则`load`事件触发并使用备用`Image`解析`Promise`。
- en: Failure case
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 失败情况
- en: If neither the image nor the fallback image could be loaded, the error handler
    rejects the `Promise` with the `error` event.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法加载图片或备用图片，则错误处理程序拒绝带有`error`事件的`Promise`。
- en: The `error` event is triggered every time there’s a load error. The handler
    first checks if it’s the fallback URL that failed. If so, this means that the
    original URL and fallback URL both failed to load. This is the failure case, so
    the `Promise` is rejected.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每次加载错误时都会触发`error`事件。处理程序首先检查是否是备用URL加载失败。如果是，则表示原始URL和备用URL都无法加载。这是失败的情况，因此拒绝`Promise`。
- en: If it’s not the fallback URL, this means the requested URL failed to load. Now
    it sets the fallback URL and tries to load that.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是备用URL，则表示请求的URL加载失败。现在设置备用URL并尝试加载它。
- en: The order of checks here is important. Without that first check, if the fallback
    fails to load, the error handler would trigger an infinite loop of setting the
    (invalid) fallback URL, requesting it, and firing the `error` event again.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里检查的顺序很重要。如果缺少第一次检查，如果后备加载失败，错误处理程序将触发设置（无效）后备URL、请求它并再次触发`error`事件的无限循环。
- en: '[Example 1-3](#example1-3) shows how to use this `loadImage` function.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-3](#example1-3)展示了如何使用`loadImage`函数。'
- en: Example 1-3\. Using the `loadImage` function
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-3\. 使用`loadImage`函数
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Chaining Promises
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接`Promise`
- en: Problem
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to call several `Promise`-based APIs in sequence. Each operation depends
    on the result of the previous one.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望按顺序调用多个基于`Promise`的API。每个操作都依赖于前一个操作的结果。
- en: Solution
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use a chain of `Promise`s to run the asynchronous tasks in sequence. Imagine
    a blog application with two APIs, both of which return `Promise`s:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Promise`链来顺序执行异步任务。想象一个博客应用程序，其中有两个API，都返回`Promise`：
- en: '`getUser(id)`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`getUser(id)`'
- en: Loads a user with the given user ID
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的用户ID加载用户
- en: '`getPosts(user)`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`getPosts(user)`'
- en: Loads all the blog posts for a given user
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 加载给定用户的所有博客帖子
- en: If you want to load the posts for a user, you first need to load the `user`
    object—you can’t call `getPosts` until the user details are loaded. You can do
    this by chaining the two `Promise`s together, as shown in [Example 1-4](#promiseChain).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要加载用户的帖子，首先需要加载`user`对象——在加载用户详细信息之前无法调用`getPosts`。您可以通过将这两个`Promise`链在一起来实现，如[示例 1-4](#promiseChain)所示。
- en: Example 1-4\. Using a `Promise` chain
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-4\. 使用`Promise`链
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The value returned from a `Promise`’s `then` handler is wrapped in a new `Promise`.
    This `Promise` is returned from the `then` method itself. This means the return
    value of `then` is also a `Promise`, so you can chain another `then` onto it.
    This is how you create a chain of `Promise`s.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`的`then`处理程序返回的值被包装在一个新的`Promise`中。这个`Promise`从`then`方法本身返回。这意味着`then`的返回值也是一个`Promise`，因此您可以链式调用另一个`then`。这就是如何创建`Promise`链的方式。'
- en: '`getUser` returns a `Promise` that resolves to the `user` object. The `then`
    handler calls `getPosts` and returns the resulting `Promise`, which is returned
    again from `then`, so you can call `then` once more to get the final result, the
    array of posts.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`getUser`返回一个解析为`user`对象的`Promise`。`then`处理程序调用`getPosts`并返回结果的`Promise`，然后再次从`then`返回，因此您可以再次调用`then`来获取最终结果，即帖子数组。'
- en: At the end of the chain is a call to `catch` to handle any errors. This works
    like a `try`/`catch` block. If an error occurs at any point within the chain,
    the `catch` handler is called with that error and the rest of the chain does not
    get executed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 链的末尾调用`catch`来处理任何错误。这类似于`try`/`catch`块。如果链中的任何地方发生错误，`catch`处理程序将被调用，并且不会执行链的其余部分。
- en: Using the async and await Keywords
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`async`和`await`关键字
- en: Problem
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You are working with an API that returns a `Promise`, but you want the code
    to read in a more linear, or synchronous, fashion.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在使用返回`Promise`的API，但希望代码以更线性或同步的方式阅读。
- en: Solution
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `await` keyword with the `Promise` instead of calling `then` on it (see
    [Example 1-5](#example1-5)). Consider again the `getUsers` function from [“Working
    with Promises”](#recipePromises). This function returns a `Promise` that resolves
    to a list of users.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`await`关键字与`Promise`一起，而不是在其上调用`then`（参见[示例 1-5](#example1-5)）。再次考虑来自[“使用Promise”](#recipePromises)的`getUsers`函数。此函数返回一个解析为用户列表的`Promise`。
- en: Example 1-5\. Using the `await` keyword
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-5\. 使用`await`关键字
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '`await` is an alternative syntax for working with `Promise`s. Instead of calling
    `then` with a callback that takes the result as its argument, the expression effectively
    “pauses” execution of the rest of the function and returns the result when the
    `Promise` is fulfilled.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`await`是使用`Promise`的另一种语法。与使用接受结果作为其参数的回调函数调用`then`不同，表达式实际上“暂停”了函数余下的执行，并在`Promise`被履行时返回结果。'
- en: If the `Promise` is rejected, the `await` expression throws the rejected value.
    This is handled with a standard `try`/`catch` block.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Promise`被拒绝，`await`表达式会抛出被拒绝的值。这可以通过标准的`try`/`catch`块来处理。
- en: Using Promises in Parallel
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行使用`Promise`
- en: Problem
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to execute a series of asynchronous tasks in parallel using `Promise`s.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用`Promise`在并行执行一系列异步任务。
- en: Solution
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Collect all the `Promise`s, and pass them to `Promise.all`. This function takes
    an array of `Promise`s and waits for them all to complete. It returns a new `Promise`
    that is fulfilled once all the given `Promise`s are fulfilled, or rejects if any
    of the given `Promise`s are rejected (see [Example 1-6](#loadMultipleUsers)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 收集所有`Promise`，并将它们传递给`Promise.all`。这个函数接受一个`Promise`数组，并等待它们全部完成。它返回一个新的`Promise`，一旦所有给定的`Promise`都完成，就会被实现；如果任何给定的`Promise`被拒绝，它就会被拒绝（参见[示例 1-6](#loadMultipleUsers)）。
- en: Example 1-6\. Loading multiple users with `Promise.all`
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-6\. 使用`Promise.all`加载多个用户
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Discussion
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: If you have multiple tasks that don’t depend on one another, `Promise.all` is
    a good choice. [Example 1-6](#loadMultipleUsers) calls `getUser` three times,
    passing a different user ID each time. It collects these `Promise`s into an array
    that is passed to `Promise.all`. All three requests run in parallel.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个不依赖于彼此的任务，`Promise.all`是一个很好的选择。[示例 1-6](#loadMultipleUsers)调用了三次`getUser`，每次传递不同的用户ID。它将这些`Promise`收集到一个数组中，并将其传递给`Promise.all`。所有三个请求并行运行。
- en: '`Promise.all` returns another `Promise`. Once all three users have loaded successfully,
    this new `Promise` becomes fulfilled with an array containing the loaded users.
    The index of each result corresponds to the index of the `Promise` in the input
    array. In this case, it returns an array with users `1`, `2`, and `3`, in that
    order.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise.all`返回另一个`Promise`。一旦所有三个用户成功加载，这个新的`Promise`将会被实现，其包含一个包含已加载用户的数组。每个结果的索引对应于输入数组中`Promise`的索引。在这种情况下，它按顺序返回用户`1`、`2`和`3`的数组。'
- en: What if one or more of these users failed to load? Maybe one of the user IDs
    doesn’t exist or there was a temporary network error. If *any* of the `Promise`s
    passed to `Promise.all` are rejected, the new `Promise` immediately rejects as
    well. The rejection value is the same as that of the rejected `Promise`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个用户未能加载怎么办？也许其中一个用户ID不存在或者存在临时网络错误。如果`Promise.all`传递的*任何*`Promise`被拒绝，那么新的`Promise`将立即被拒绝。拒绝值与被拒绝的`Promise`的拒绝值相同。
- en: If one of the users fails to load, the `Promise` returned by `Promise.all` is
    rejected with the error that occurred. The results of the other `Promise`s are
    lost.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个用户加载失败，由`Promise.all`返回的`Promise`将被拒绝，并且会带有出错的错误。其他`Promise`的结果将会丢失。
- en: If you still want to get the results of any resolved `Promises` (or errors from
    other rejected ones), you can instead use `Promise.allSettled`. With `Promise.allSettled`,
    a new `Promise` is returned just like with `Promise.all`. However, this `Promise`
    is always fulfilled, once all of the `Promise`s are settled (either fulfilled
    *or* rejected).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然希望获取任何已解决`Promise`的结果（或来自其他被拒绝`Promise`的错误），可以改用`Promise.allSettled`。使用`Promise.allSettled`，会返回一个新的`Promise`，与`Promise.all`类似。但是，这个`Promise`始终会在所有`Promise`都已处理完毕（无论是已解决还是*已拒绝*）后被实现。
- en: As shown in [Example 1-7](#example1-7), the resolved value is an array whose
    elements each have a `status` property. This is either `fulfilled` or `rejected`,
    depending on the result of that `Promise`. If the status is `fulfilled`, the object
    also has a `value` property that is the resolved value. On the other hand, if
    the status is `rejected`, it instead has a `reason` property, which is the rejected
    value.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如[示例 1-7](#example1-7)所示，解决的值是一个数组，其中每个元素都有一个`status`属性。这个属性可以是`fulfilled`或`rejected`，具体取决于该`Promise`的结果。如果状态是`fulfilled`，则对象还具有一个`value`属性，即解决的值。另一方面，如果状态是`rejected`，则对象有一个`reason`属性，即被拒绝的值。
- en: Example 1-7\. Using `Promise.allSettled`
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-7\. 使用`Promise.allSettled`
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Animating an Element with requestAnimationFrame
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`requestAnimationFrame`来为元素添加动画效果
- en: Problem
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to animate an element in a performant way using JavaScript.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要使用JavaScript以高效的方式对元素进行动画处理。
- en: Solution
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `requestAnimationFrame` function to schedule your animation updates
    to run at regular intervals.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`requestAnimationFrame`函数来安排动画更新以在规律的间隔运行。
- en: Imagine you have a `div` element that you want to hide with a fade animation.
    This is done by adjusting the opacity at regular intervals, using a callback passed
    to `request​A⁠nimationFrame` (see [Example 1-8](#fade_requestAnimationFrame)).
    The duration of each interval depends on the desired frames per second (FPS) of
    the animation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个要使用淡出动画隐藏的`div`元素。这通过调整不透明度，在`requestAnimationFrame`中使用的回调函数来完成（参见[示例 1-8](#fade_requestAnimationFrame)）。每个间隔的持续时间取决于动画的期望每秒帧数（FPS）。
- en: Example 1-8\. Fade-out animation using `requestAnimationFrame`
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-8\. 使用`requestAnimationFrame`进行淡出动画
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: This is a good, performant way to animate elements using JavaScript that has
    good browser support. Because it’s done asynchronously, this animation won’t block
    the browser’s main thread. If the user switches to another tab, the animation
    is paused and `requestAnimationFrame` isn’t called unnecessarily.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用JavaScript进行元素动画的一种良好且高效的方法，具有良好的浏览器支持。因为它是异步完成的，这种动画不会阻塞浏览器的主线程。如果用户切换到另一个标签页，动画会暂停，并且不会不必要地调用`requestAnimationFrame`。
- en: When you schedule a function to run with `requestAnimationFrame`, the function
    is called before the next repaint operation. How often this happens depends on
    the browser and screen refresh rate.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`requestAnimationFrame`调度函数运行时，该函数在下一次重绘操作之前被调用。这种情况发生的频率取决于浏览器和屏幕刷新率。
- en: Before animating, [Example 1-8](#fade_requestAnimationFrame) does some calculations
    based on a given animation duration (2 seconds) and frame rate (60 frames per
    second). It calculates the total number of frames, and uses the duration to calculate
    how long each frame runs. If you want a different frame rate that doesn’t match
    the system refresh rate, this keeps track of when the last animation update was
    performed to maintain your target frame rate.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在动画之前，[示例 1-8](#fade_requestAnimationFrame)根据给定的动画持续时间（2秒）和帧率（每秒60帧）进行一些计算。它计算出总帧数，并使用持续时间计算每帧的运行时间。如果您想要与系统刷新率不匹配的不同帧率，这将跟踪上次动画更新执行的时间，以维持目标帧率。
- en: Then, based on the number of frames, it calculates the opacity adjustment made
    in each frame.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，根据帧数，计算每一帧中的透明度调整。
- en: The `fade` function is scheduled by passing it to a `requestAnimationFrame`
    call. Each time the browser calls this function, it passes a timestamp. The `fade`
    function calculates how much time has elapsed since the last frame. If not enough
    time has passed yet, it doesn’t do anything and asks the browser to call again
    next time around.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将其传递给`requestAnimationFrame`调用，调度`fade`函数。每次浏览器调用此函数时，都会传递一个时间戳。`fade`函数计算自上一帧以来经过的时间。如果尚未经过足够的时间，则不执行任何操作，并要求浏览器在下次再次调用时执行。
- en: Once enough time has passed, it performs an animation step. It takes the calculated
    opacity adjustment and applies it to the element’s style. Depending on the exact
    timing, this could result in an opacity less than 0, which is invalid. This is
    fixed by using `Math.max` to set a minimum value of 0.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦经过足够的时间，它执行动画步骤。它获取计算的不透明度调整，并将其应用于元素的样式。根据确切的时机，这可能导致不透明度小于0，这是无效的。使用`Math.max`修复此问题，以设置最小值为0。
- en: If the opacity hasn’t reached 0 yet, more animation frames need to be performed.
    It calls `requestAnimationFrame` again to schedule the next execution.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不透明度尚未达到0，则需要执行更多的动画帧。它再次调用`requestAnimationFrame`来调度下一次执行。
- en: As an alternative to this method, newer browsers support the Web Animations
    API, which you’ll learn about in [Chapter 8](ch08.html#ch_webAnimationsApi). This
    API lets you specify keyframes with CSS properties, and the browser handles updating
    the intermediate values for you.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此方法的替代方案，较新的浏览器支持Web动画API，您将在[第8章](ch08.html#ch_webAnimationsApi)中了解它。该API允许您指定带有CSS属性的关键帧，并且浏览器会处理为您更新中间值。
- en: Wrapping an Event API in a Promise
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将事件API封装在Promise中
- en: Problem
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to wrap an event-based API to return a `Promise`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要封装一个基于事件的API以返回`Promise`。
- en: Solution
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create a new `Promise` object and register event listeners within its constructor.
    When you receive the event you’re waiting for, resolve the `Promise` with the
    value. Similarly, reject the `Promise` if an error event occurs.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的`Promise`对象，并在其构造函数中注册事件侦听器。当接收到等待的事件时，使用值解析`Promise`。类似地，如果发生错误事件，则拒绝`Promise`。
- en: Sometimes this is called “promisifying” a function. [Example 1-9](#example1-9)
    demonstrates promisifying the `XMLHttpRequest` API.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这被称为“将函数转换为Promise”。[示例 1-9](#example1-9)演示了如何将`XMLHttpRequest`API转换为Promise。
- en: Example 1-9\. Promisifying the `XMLHttpRequest` API
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-9\. 将`XMLHttpRequest`API转换为Promise
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 1-10](#example1-10) shows how to use the promisified `loadJSON` function.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 1-10](#example1-10)展示了如何使用转换为Promise的`loadJSON`函数。'
- en: Example 1-10\. Using the `loadJSON` helper
  id: totrans-122
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 1-10\. 使用`loadJSON`辅助函数
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Discussion
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You create a `Promise` by calling the `Promise` *constructor function* with
    the `new` operator. This function receives two arguments, a `resolve` and `reject`
    function.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`new`运算符调用`Promise` *构造函数* 来创建一个`Promise`。此函数接收两个参数，一个`resolve`函数和一个`reject`函数。
- en: The `resolve` and `reject` functions are supplied by the JavaScript engine.
    Within the `Promise` constructor, you do your asynchronous work and listen for
    events. When the `resolve` function is called, the `Promise` immediately resolves
    to that value. Calling `reject` works the same way—it rejects the `Promise` with
    the error.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolve` 和 `reject` 函数是由 JavaScript 引擎提供的。在`Promise`构造函数内部，你可以执行异步工作并监听事件。当调用`resolve`函数时，`Promise`立即以该值解析。调用`reject`也同样工作——它会用错误拒绝`Promise`。'
- en: Creating your own `Promise` can help these types of situations, but in general
    you usually don’t need to create them manually like this. If an API already returns
    a `Promise`, you don’t need to wrap that in your own `Promise`—just use it directly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的`Promise`可以帮助处理这类情况，但通常情况下，你不需要像这样手动创建它们。如果一个 API 已经返回了`Promise`，你不需要再将其包装在自己的`Promise`中，直接使用即可。
