- en: Chapter 6\. Categories of Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章。设计模式的类别
- en: This chapter documents the three main categories of design patterns and the
    different patterns that fall under them. While every design pattern addresses
    a specific object-oriented design problem or issue, we can draw parallels between
    the solutions based on how they solve these issues. This forms the basis for the
    categorization of design patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章记录了三大主要设计模式类别及其下属的不同模式。虽然每个设计模式都解决了特定的面向对象设计问题或问题，但我们可以根据它们解决这些问题的方式之间的相似性来划分类别。这形成了设计模式分类的基础。
- en: Background
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: 'Gamma, Helm, Johnson, and Vlissides (1995), in their book, [*Design Patterns:
    Elements of Reusable Object-Oriented Software*](https://oreil.ly/viJe6), describe
    a design pattern as:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Gamma、Helm、Johnson 和 Vlissides（1995）在他们的书籍[*可重用面向对象软件的设计模式*](https://oreil.ly/viJe6)中将设计模式描述为：
- en: A design pattern names, abstracts, and identifies the key aspects of a common
    design structure that make it useful for creating a reusable object-oriented design.
    The design pattern identifies the participating classes and their instances, their
    roles and collaborations, and the distribution of responsibilities.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设计模式命名、抽象并确定了常见设计结构的关键方面，使其能够用于创建可重用的面向对象设计。设计模式确定参与类及其实例、它们的角色和协作，以及责任的分配。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Each design pattern focuses on a particular object-oriented design problem or
    issue. It describes when it applies, whether or not it can be applied in view
    of other design constraints, and the consequences and trade-offs of its use. Since
    we must eventually implement our designs, a design pattern also provides sample…​code
    to illustrate an implementation.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个设计模式专注于特定的面向对象设计问题或问题。它描述了何时适用，是否可以应用于其他设计约束条件，并且其使用的后果和权衡。由于我们最终必须实现我们的设计，设计模式还提供了示例…​代码来说明其实现。
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although design patterns describe object-oriented designs, they are based on
    practical solutions that have been implemented in mainstream object-oriented programming
    languages…​.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 虽然设计模式描述了面向对象的设计，但它们基于实际在主流面向对象编程语言中实现的解决方案…​。
- en: 'Design patterns can be categorized based on the type of problem they solve.
    The three principal categories of design patterns are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式可以根据它们解决的问题类型进行分类。设计模式的三个主要类别是：
- en: Creational design patterns
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建型设计模式
- en: Structural design patterns
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构设计模式
- en: Behavioral design patterns
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为设计模式
- en: In the following sections, we’ll review these three with a few examples of the
    patterns that fall into each category.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将回顾这三种类别中属于每种类别的模式的几个示例。
- en: Creational Design Patterns
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建型设计模式
- en: Creational design patterns focus on handling object-creation mechanisms where
    objects are created in a manner suitable for a given situation. The basic approach
    to object creation might otherwise lead to added complexity in a project, while
    these patterns aim to solve this problem by *controlling* the creation process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建型设计模式专注于处理对象创建机制，其中对象根据给定情况以合适的方式创建。在项目中，基本的对象创建方法可能会增加复杂性，而这些模式旨在通过*控制*创建过程来解决这个问题。
- en: Some patterns that fall under this category are Constructor, Factory, Abstract,
    Prototype, Singleton, and Builder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 属于这一类别的一些模式包括构造器（Constructor）、工厂（Factory）、抽象工厂（Abstract）、原型（Prototype）、单例（Singleton）和建造者（Builder）。
- en: Structural Design Patterns
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构设计模式
- en: Structural patterns are concerned with object composition and typically identify
    simple ways to realize relationships between different objects. They help ensure
    that when one part of a system changes, the entire structure of the system need
    not change. They also assist in recasting parts of the system that don’t fit a
    particular purpose into those that do.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 结构模式涉及对象组合，通常识别实现不同对象之间关系的简单方法。它们确保当系统的某一部分发生变化时，系统的整体结构无需改变。它们还有助于将系统中不适合特定目的的部分重塑为适合特定目的的部分。
- en: Patterns that fall under this category include Decorator, Facade, Flyweight,
    Adapter, and Proxy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 属于这一类别的模式包括装饰器（Decorator）、外观（Facade）、享元（Flyweight）、适配器（Adapter）和代理（Proxy）。
- en: Behavioral Design Patterns
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为设计模式
- en: Behavioral patterns focus on improving or streamlining the communication between
    disparate objects in a system. They identify common communication patterns among
    objects and provide solutions that distribute the responsibility of communication
    among different objects, thereby increasing communication flexibility. Essentially,
    behavioral patterns abstract actions from objects that take the action.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 行为模式专注于改进或简化系统中不同对象之间的通信。它们识别对象之间的常见通信模式，并提供将通信责任分配给不同对象的解决方案，从而增加通信的灵活性。基本上，行为模式将动作从执行动作的对象中抽象出来。
- en: Some behavioral patterns include Iterator, Mediator, Observer, and Visitor.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些行为模式包括迭代器、中介者、观察者和访问者。
- en: Design Pattern Classes
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式类
- en: Elyse Nielsen in 2004 created a “classes” table to summarize the 23 GoF design
    patterns. I found this table extremely useful in my early days of learning about
    design patterns. I’ve modified it where necessary to suit our discussion on design
    patterns.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2004年，Elyse Nielsen创建了一个“类”表格，总结了23种GoF设计模式。在我学习设计模式的早期阶段，我发现这个表格非常有用。我根据需要修改了它，以适应我们对设计模式的讨论。
- en: I recommend using this table as a reference, but remember that we will discuss
    several other patterns not mentioned here later in the book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议将此表作为参考，但请记住，我们将在本书的后续章节中讨论其他未提及的几种模式。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注释
- en: We discussed JavaScript ES2015+ classes in [Chapter 5](ch05.xhtml#modern-javascript-syntax).
    JavaScript classes and objects will be relevant when you review the following
    table.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](ch05.xhtml#modern-javascript-syntax)中讨论了JavaScript ES2015+类。当您审查以下表格时，JavaScript类和对象将会相关。
- en: 'Let us now proceed to review the table:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续审查表格：
- en: '| **Creational** | Based on the concept of creating an object |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **创建型** | 基于创建对象的概念 |'
- en: '| **Class** |   |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **类** |   |'
- en: '| *Factory method* | Makes an instance of several derived classes based on
    interfaced data or events |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| *工厂方法* | 根据接口数据或事件创建多个派生类的实例 |'
- en: '| **Object** |   |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **对象** |   |'
- en: '| *Abstract Factory* | Creates an instance of several families of classes without
    detailing concrete classes |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| *抽象工厂* | 创建多个类族的实例，而不详细说明具体类 |'
- en: '| *Builder* | Separates object construction from its representation; always
    creates the same type of object |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| *构建者* | 将对象构建与其表示分离；始终创建相同类型的对象 |'
- en: '| *Prototype* | A fully initialized instance used for copying or cloning |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| *原型* | 用于复制或克隆的完全初始化的实例 |'
- en: '| *Singleton* | A class with only a single instance with global access points
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| *单例* | 具有全局访问点的仅有单个实例的类 |'
- en: '|   |   |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   |   |'
- en: '| **Structural** | Based on the idea of building blocks of objects |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **结构型** | 基于对象的构建块的概念 |'
- en: '| **Class** |   |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **类** |   |'
- en: '| *Adapter* | Matches interfaces of different classes so that classes can work
    together despite incompatible interfaces |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| *适配器* | 匹配不同类的接口，使得类能够共同工作，尽管接口不兼容 |'
- en: '| **Object** |   |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **对象** |   |'
- en: '| *Bridge* | Separates an object’s interface from its implementation so that
    the two can vary independently |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| *桥接* | 将对象的接口与其实现分离，以便两者可以独立变化 |'
- en: '| *Composite* | A structure of simple and composite objects that makes the
    total object more than just the sum of its parts |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| *组合* | 由简单和复合对象构成的结构，使得总对象不仅仅是其部分的总和 |'
- en: '| *Decorator* | Dynamically adds alternate processing to objects |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| *装饰器* | 动态地为对象添加替代处理 |'
- en: '| *Facade* | A single class that hides the complexity of an entire subsystem
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| *外观* | 一个单一的类，隐藏了整个子系统的复杂性 |'
- en: '| *Flyweight* | A fine-grained instance used for efficient sharing of information
    that is contained elsewhere |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| *享元* | 用于有效共享信息的细粒度实例，信息实际上存储在其他地方 |'
- en: '| *Proxy* | A placeholder object representing the true object |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| *代理* | 表示真实对象的占位符对象 |'
- en: '|   |   |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   |   |'
- en: '| **Behavioral** | Based on the way objects play and work together |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **行为型** | 基于对象如何协同工作和互动的方式 |'
- en: '| **Class** |   |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **类** |   |'
- en: '| *Interpreter* | A way to include language elements in an application to match
    the grammar of the intended language |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| *解释器* | 将语言元素包含到应用程序中，以匹配预期语言的语法 |'
- en: '| *Template method* | Creates the shell of an algorithm in a method, then defers
    the exact steps to a subclass |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| *模板方法* | 在方法中创建算法的框架，然后将确切的步骤推迟到子类 |'
- en: '| **Object** |   |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **对象** |   |'
- en: '| *Chain of responsibility* | A way of passing a request between a chain of
    objects to find the object that can handle the request |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| *责任链* | 通过对象链传递请求，以找到能处理请求的对象 |'
- en: '| *Command* | A way to separate the execution of a command from its invoker
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| *命令模式* | 将命令的执行与调用者分离的方法 |'
- en: '| *Iterator* | Sequentially accesses the elements of a collection without knowing
    the inner workings of the collection |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| *迭代器模式* | 顺序访问集合的元素而不需了解集合的内部工作机制 |'
- en: '| *Mediator* | Defines simplified communication between classes to prevent
    a group of classes from referring explicitly to each other |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| *中介者模式* | 定义简化类之间通信的方式，以防止一组类显式地相互引用 |'
- en: '| *Memento* | Captures an object’s internal state to be able to restore it
    later |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| *备忘录模式* | 捕获对象的内部状态，以便稍后恢复 |'
- en: '| *Observer* | A way of notifying change to a number of classes to ensure consistency
    between the classes |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| *观察者模式* | 一种通知多个类进行变化以确保类之间一致性的方法 |'
- en: '| *State* | Alters an object’s behavior when its state changes |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| *状态模式* | 当对象状态改变时改变其行为 |'
- en: '| *Strategy* | Encapsulates an algorithm inside a class, separating the selection
    from the implementation |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| *策略模式* | 将算法封装在一个类中，将选择和实现分离 |'
- en: '| *Visitor* | Adds a new operation to a class without changing the class |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| *访问者模式* | 在不改变类本身的情况下为类添加新操作 |'
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: This chapter introduced categories of design patterns and explained the distinction
    between creational, structural, and behavioral patterns. We discussed the differences
    between these three categories and GoF patterns in each category. We also reviewed
    the “classes” table that shows how the GoF patterns relate to the concepts of
    classes and objects.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了设计模式的类别，并解释了创建型、结构型和行为型模式之间的区别。我们讨论了这三类模式及其GoF模式在每个类别中的差异。我们还回顾了显示GoF模式如何与类和对象的概念相关联的“类”表。
- en: These first few chapters have covered theoretical details about design patterns
    and some basics of JavaScript syntax. With this background, we are now in a position
    to jump into some practical examples of design patterns in JavaScript.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这几章详细讲解了设计模式的理论细节和JavaScript语法的基础知识。在这个基础上，我们现在可以开始进入JavaScript设计模式的一些实际例子。
