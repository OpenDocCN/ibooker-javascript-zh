- en: Chapter 1\. Introduction to Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。设计模式简介
- en: '*Good code is like a love letter to the next developer who will maintain it!*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*好的代码就像是给将来维护它的开发者的一封情书！*'
- en: Design patterns provide a common vocabulary to structure code, making it easier
    to understand. They help enhance the quality of this connection to other developers.
    Knowledge of design patterns helps us identify recurring themes in requirements
    and map them to definitive solutions. We can rely on the experience of others
    who have encountered a similar problem and devised an optimized method to address
    it. This knowledge is invaluable as it paves the way for writing or refactoring
    code to make it maintainable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式为结构化代码提供了一个共同的词汇，使其更容易理解。它们有助于增强与其他开发者的这种连接的质量。设计模式的知识帮助我们识别需求中的重复主题，并将其映射到明确的解决方案。我们可以依赖那些遇到过类似问题并设计了优化方法来解决它的人们的经验。这些知识是无价的，因为它为编写或重构代码铺平了道路，使其易于维护。
- en: Whether on the server or client, JavaScript is a cornerstone of modern web application
    development. The [previous edition of this book](https://oreil.ly/LJDP-1e) focused
    on several popular design patterns in the JavaScript context. Over the years,
    JavaScript has significantly evolved as a language in terms of features and syntax.
    It now supports modules, classes, arrow functions, and template literals that
    it did not previously. We also have advanced JavaScript libraries and frameworks
    that have made life easy for many web developers. How relevant, then, are design
    patterns in the modern JavaScript context?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在服务器端还是客户端，JavaScript都是现代Web应用程序开发的基石。[本书的上一版](https://oreil.ly/LJDP-1e)聚焦于JavaScript环境中的几种流行设计模式。多年来，JavaScript在功能和语法上显著发展。现在支持模块、类、箭头函数和模板字面量，这些之前没有。我们还有先进的JavaScript库和框架，这些极大地简化了许多Web开发者的生活。那么，在现代JavaScript环境中，设计模式还有多大的相关性呢？
- en: It’s important to note that traditionally, design patterns are neither prescriptive
    nor language-specific. You can apply them when you think they fit, but you don’t
    have to. Like data structures or algorithms, you can still apply classic design
    patterns using modern programming languages, including JavaScript. You may not
    need some of these design patterns in modern frameworks or libraries where they
    are already abstracted. Conversely, the use of specific patterns may even be encouraged
    by some frameworks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，需要注意的是设计模式既不是指导性的，也不是特定于某种语言的。当你认为它们适合时可以应用它们，但并非必须如此。就像数据结构或算法一样，你仍然可以使用现代编程语言（包括JavaScript）应用经典的设计模式。在已经抽象化的现代框架或库中，你可能不需要一些这些设计模式。相反，某些框架甚至可能鼓励使用特定的模式。
- en: In this edition, we are taking a pragmatic approach to patterns. We will explore
    why specific patterns may be the right fit for implementing certain features and
    if a pattern is still recommended in the modern JavaScript context.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，我们采用了一种实用主义的方法来讨论模式。我们将探讨为什么特定的模式可能适合实现某些功能，以及在现代JavaScript环境中是否仍然推荐使用某些模式。
- en: As applications got more interactive, requiring a large amount of JavaScript,
    the language came under constant criticism for its negative impact on performance.
    Developers are continuously looking for new patterns that can optimize JavaScript
    performance. This edition highlights such improvements wherever relevant. We will
    also discuss framework-specific patterns such as React Hooks and Higher-Order
    Components that have become increasingly popular in the age of React.js.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序变得更加交互，需要大量JavaScript，这门语言因其对性能的负面影响而不断受到批评。开发者们不断寻找可以优化JavaScript性能的新模式。本版书籍突出了这些改进的相关性。我们还将讨论特定框架模式，如React
    Hooks和高阶组件，在React.js时代日益流行。
- en: Going back a step, let us start by exploring the history and importance of design
    patterns. If you’re already familiar with this history, feel free to skip to [“What
    Is a Pattern?”](#what-is-a-pattern) to continue reading.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 再退一步，让我们从探索设计模式的历史和重要性开始。如果你已经熟悉这段历史，可以跳过到[“什么是模式？”](#what-is-a-pattern)继续阅读。
- en: History of Design Patterns
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式的历史
- en: Design patterns can be traced back to the early work of an architect named [Christopher
    Alexander](https://oreil.ly/LxYgk). He often wrote about his experiences in solving
    design issues and how they related to buildings and towns. One day, it occurred
    to Alexander that certain design constructs lead to a desired optimal effect when
    used repeatedly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式可以追溯到名为[克里斯托弗·亚历山大](https://oreil.ly/LxYgk)的建筑师早期工作。他经常写作他解决设计问题的经验以及它们与建筑和城镇的关系。有一天，亚历山大意识到，当重复使用某些设计构造时，会产生期望的最优效果。
- en: Alexander produced a pattern language in collaboration with two other architects,
    Sara Ishikawa and Murray Silverstein. This language would help empower anyone
    wishing to design and build at any scale. They published it in 1977 in a paper
    titled “A Pattern Language,” later released as a [complete hardcover book](https://oreil.ly/Cy0DR).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历山大与另外两位建筑师萨拉·石川和默里·西尔弗斯坦合作制定了一种模式语言。这种语言将帮助任何希望在任何规模上进行设计和建设的人。他们在1977年发表了一篇名为“模式语言”的论文，后来以[完整精装书](https://oreil.ly/Cy0DR)的形式发布。
- en: Around 1990, software engineers began to incorporate the principles Alexander
    had written about into the first documentation about design patterns to guide
    novice developers looking to improve their coding skills. It’s important to note
    that the concepts behind design patterns have been around in the programming industry
    since its inception, albeit in a less formalized form.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在1990年左右，软件工程师开始将亚历山大（Alexander）所写关于设计模式的原则纳入首次文档，以指导希望提高编码技能的初学者。重要的是要注意，设计模式背后的概念自编程行业诞生以来就一直存在，尽管形式不够正式。
- en: 'One of the first and arguably the most iconic formal works published on design
    patterns in software engineering was a book in 1995 called [*Design Patterns:
    Elements of Reusable Object-Oriented Software*](https://oreil.ly/viJe6)—written
    by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. Most engineers
    today recognize this group as the Gang of Four (GoF).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程中关于设计模式的首个和可能是最具代表性的正式作品之一是1995年出版的书籍[*设计模式：可复用面向对象软件的元素*](https://oreil.ly/viJe6)——由埃里希·伽马、理查德·赫尔姆、拉尔夫·约翰逊和约翰·弗里西德斯编写。今天，大多数工程师都将这个团体称为四人帮（GoF）。
- en: The [GoF publication](https://oreil.ly/xj66Y) was particularly instrumental
    in pushing the concept of design patterns further in our field. It describes several
    development techniques and pitfalls and provides 23 core object-oriented design
    patterns frequently used worldwide today. We will cover these patterns in more
    detail in [Chapter 6](ch06.xhtml#categories-of-design-pattern), and they also
    form the basis for our discussion in [Chapter 7](ch07.xhtml#javascript-design-patterns).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[GoF出版物](https://oreil.ly/xj66Y)在推动设计模式概念进一步发展方面发挥了特别重要作用。它描述了几种开发技术和陷阱，并提供了全球广泛使用的23种核心面向对象设计模式。我们将在[第6章](ch06.xhtml#categories-of-design-pattern)中更详细地讨论这些模式，它们也是我们在[第7章](ch07.xhtml#javascript-design-patterns)中讨论的基础。'
- en: What Is a Pattern?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是模式？
- en: A pattern is a reusable solution template that you can apply to recurring problems
    and themes in software design. Similar to other programming languages, when building
    a JavaScript web application, you can use the template to structure your JavaScript
    code in different situations where you think it will help.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模式是一种可重复使用的解决方案模板，您可以应用于软件设计中的重复问题和主题。类似于其他编程语言，在构建JavaScript Web应用程序时，您可以使用该模板来在不同情况下结构化JavaScript代码，从而帮助解决问题。
- en: 'Learning and using design patterns is mainly advantageous for developers because
    of the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 学习和使用设计模式对开发人员非常有利，原因如下：
- en: Patterns are proven solutions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模式是经过验证的解决方案。
- en: They are the result of the combined experience and insights of developers who
    helped define them. They are time-tested approaches known to work when solving
    specific issues in software development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是开发人员的结合经验和见解的结果，帮助定义它们。这些经过时间测试的方法是在解决软件开发中特定问题时确实有效的方法。
- en: Patterns can be easily reused.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以轻松重用。
- en: A pattern usually delivers an out-of-the-box solution you can adopt and adapt
    to suit your needs. This feature makes them quite robust.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模式通常提供一个即插即用的解决方案，您可以采用并根据需要进行调整。这一特性使它们非常强大。
- en: Patterns can be expressive.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以表达性强。
- en: Patterns can help express elegant solutions to extensive problems using a set
    structure and a shared *vocabulary*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以帮助以一套结构和共享的*词汇*表达对广泛问题的优雅解决方案。
- en: 'Additional advantages that patterns offer include the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模式提供的额外优势包括以下几点：
- en: Patterns assist in preventing minor issues that can cause significant problems
    in the application development process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模式有助于防止应用程序开发过程中可能导致重大问题的小问题。
- en: When you use established patterns to build code, you can relax about getting
    the structure wrong and focus on the quality of the overall solution. The pattern
    encourages you to write more structured and organized code naturally, avoiding
    the need to refactor it for cleanliness in the future.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用已建立的模式来构建代码时，你可以放心不会出错，而是专注于整体解决方案的质量。模式鼓励你自然地编写更有结构和组织的代码，避免将来需要重构以保持清洁。
- en: Patterns provide generalized solutions, documented in a fashion that doesn’t
    require them to be tied to a specific problem.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模式提供了泛化的解决方案，以一种不需要将其与特定问题联系起来的方式进行记录。
- en: This generalized approach means you can apply design patterns to improve code
    structure regardless of the application (and, in many cases, the programming language).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种泛化的方法意味着你可以应用设计模式来改进代码结构，而不受应用程序（以及在许多情况下是编程语言）的限制。
- en: Some patterns can decrease the overall code file-size footprint by avoiding
    repetition.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模式可以通过避免重复来减少整体代码文件大小的占用。
- en: Design patterns encourage developers to look more closely at their solutions
    for areas where they can achieve instant reductions in duplication. For example,
    you can reduce the number of functions performing similar processes in favor of
    a single generalized function to decrease the size of your codebase. This is also
    known as making code more *dry*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式鼓励开发人员更仔细地查看他们的解决方案，以找到可以实现即时减少重复的地方。例如，你可以减少执行类似过程的函数数量，而倾向于使用单一的通用函数来减少代码库的大小。这也被称为使代码更加
    *dry*。
- en: Patterns add to a developer’s vocabulary, which makes communication faster.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模式增加了开发人员的词汇量，使沟通更快速。
- en: Developers can reference the pattern when communicating with their team, when
    discussing it in the design patterns community, or indirectly when another developer
    later maintains the code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以在与团队沟通时参考模式，在设计模式社区讨论时参考模式，或者在另一位开发人员后续维护代码时间接地参考模式。
- en: Popular design patterns can be improvised further by harnessing the collective
    experiences of developers using those patterns and contributing back to the community.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的设计模式可以通过利用使用这些模式的开发人员的集体经验并回馈社区来进一步改进。
- en: In some cases, this leads to the creation of entirely new design patterns, while
    in others, it can lead to improved guidelines on the usage of specific patterns.
    This can ensure that pattern-based solutions continue to become more robust than
    ad hoc ones.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这会导致全新的设计模式的创建，而在其他情况下，它可能会导致对特定模式使用的改进指南。这可以确保基于模式的解决方案继续比临时解决方案更加健壮。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Patterns are *not* exact solutions. The role of a pattern is merely to provide
    us with a solution scheme. Patterns don’t solve all design problems, nor do they
    replace good software designers. You still need sound designers to choose the
    correct patterns that can enhance the overall design.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 模式并*不*是确切的解决方案。模式的作用仅仅是为我们提供解决方案方案。模式并不能解决所有设计问题，也不能取代优秀的软件设计师。你仍然需要优秀的设计师来选择可以增强整体设计的正确模式。
- en: An Everyday Use Case for Design Patterns
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式的日常使用案例
- en: If you have used React.js, you have probably come across the Provider pattern.
    If not, you may have experienced the following situation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过 React.js，你可能遇到过 Provider 模式。如果没有，你可能经历过以下情况。
- en: The component tree in web applications often needs access to shared data such
    as user information or user access permissions. The traditional way to do this
    in JavaScript is to set these properties for the root level component and then
    pass them down from parent to child components. As the component hierarchy deepens
    and becomes more nested, you drill down it with your data, resulting in the practice
    of prop drilling. This leads to unmaintainable code where the property setting
    and passing will get repeated in every child component, which relies on that data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用程序中的组件树通常需要访问共享数据，如用户信息或用户访问权限。在 JavaScript 中传统的做法是为根级组件设置这些属性，然后从父组件传递到子组件。随着组件层次结构的加深和嵌套的增加，你会随着数据向下钻取，导致了属性传递的实践。这会导致代码难以维护，其中属性设置和传递将在每个依赖于该数据的子组件中重复。
- en: React and a few other frameworks address this problem using the Provider pattern.
    With the Provider pattern, the React Context API can broadcast the state/data
    to multiple components via a context provider. Child components needing the shared
    data can tap into this provider as a context consumer or use the `useContext`
    Hook.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: React 和其他几个框架通过 Provider 模式解决了这个问题。使用 Provider 模式，React Context API 可以通过上下文提供器向多个组件广播状态/数据。需要共享数据的子组件可以作为上下文消费者连接到这个提供器，或者使用
    `useContext` Hook。
- en: This is an excellent example of a design pattern used to optimize the solution
    to a common problem. We will cover this and many such patterns in a lot of detail
    in this book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是优化解决常见问题方案的设计模式的一个极好示例。我们将在本书中详细讨论这个以及许多类似的模式。
- en: Summary
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With that introduction to the importance of design patterns and their relevance
    to modern JavaScript, we can now deep dive into learning JavaScript design patterns.
    The first few chapters in this book cover structuring and classifying patterns
    and identifying anti-patterns before we go into the specifics of design patterns
    for JavaScript. But first, let’s see what it takes for a proposed “proto-pattern”
    to be recognized as a pattern in the next chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过介绍设计模式的重要性及其在现代 JavaScript 中的相关性，我们现在可以深入学习 JavaScript 设计模式了。本书的前几章涵盖了模式的结构和分类以及识别反模式，然后再深入讨论
    JavaScript 的设计模式细节。但首先，让我们在下一章看看一个提议的“原型模式”被认可为模式需要什么条件。
