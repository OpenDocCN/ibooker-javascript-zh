- en: Chapter 17\. Static Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章 静态内容
- en: '*Static content* refers to the resources your app will be serving that don’t
    change on a per-request basis. Here are the usual suspects:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*静态内容* 指的是你的应用程序将提供的在每个请求基础上不会改变的资源。以下是通常的资源：'
- en: Multimedia
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多媒体
- en: Images, videos, and audio files. It’s quite possible to generate image files
    on the fly, of course (and video and audio, though that’s far less common), but
    most multimedia resources are static.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图像，视频和音频文件。当然，完全可以动态生成图像文件（以及视频和音频，虽然后两者较少见），但大多数多媒体资源是静态的。
- en: HTML
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: If our web application is using views to render dynamic HTML, it wouldn’t generally
    qualify as static HTML (though for performance reasons, you may dynamically generate
    HTML, cache it, and serve it as a static resource). SPA applications, as we’ve
    seen, commonly send a single, static HTML file to the client, which is the most
    common reason to treat HTML as a static resource. Note that requiring the client
    to use an *.html* extension is not very modern, so most servers now allow static
    HTML resources to be served without the extension (so `/foo` and `/foo.html` would
    return the same content).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的Web应用程序使用视图来渲染动态HTML，通常不会被视为静态HTML（尽管出于性能原因，您可以动态生成HTML，将其缓存并作为静态资源提供）。正如我们所见，SPA应用程序通常向客户端发送单个静态HTML文件，这是将HTML视为静态资源的最常见原因。请注意，要求客户端使用*.html*扩展名并不是很现代化，因此大多数服务器现在允许在不带扩展名的情况下提供静态HTML资源（因此`/foo`和`/foo.html`将返回相同的内容）。
- en: CSS
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CSS
- en: Even if you use an abstracted CSS language like LESS, Sass, or Stylus, at the
    end of the day, your browser needs plain CSS, which is a static resource.^([1](ch17.xhtml#idm45053577982616))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您使用像LESS，Sass或Stylus等抽象CSS语言，归根结底，您的浏览器需要普通的CSS，这是一种静态资源。^([1](ch17.xhtml#idm45053577982616))
- en: JavaScript
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: 'Just because the server is running JavaScript doesn’t mean there won’t be client-side
    JavaScript. Client-side JavaScript is considered a static resource. Of course,
    now the line is starting to get a bit hazy: what if there was common code that
    we wanted to use on the backend and client side? There are ways to solve this
    problem, but at the end of the day, the JavaScript that gets sent to the client
    is generally static.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 即使服务器正在运行JavaScript，也不意味着没有客户端JavaScript。客户端JavaScript被视为静态资源。当然，现在这条界限开始变得有些模糊：如果有我们想在后端和客户端使用的通用代码怎么办？有解决这个问题的方法，但归根结底，发送给客户端的JavaScript通常是静态的。
- en: Binary downloads
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制下载
- en: 'This is the catchall category: any PDFs, ZIP files, Word documents, installers,
    and the like.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个涵盖所有内容的类别：任何PDF文档，ZIP文件，Word文档，安装程序等。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you are building an API only, there may be no static resources. If that’s
    the case, you may skip this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是在构建一个API，可能没有静态资源。如果是这样的话，你可以跳过这一章节。
- en: Performance Considerations
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能考虑
- en: The way you handle static resources significantly impacts the real-world performance
    of your website, especially if your site is multimedia-heavy. The two primary
    performance considerations are *reducing the number of requests* and *reducing
    content size*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 处理静态资源的方式显著影响您网站的实际性能，特别是如果您的网站包含大量多媒体内容。两个主要的性能考虑因素是*减少请求数量* 和 *减少内容大小*。
- en: 'Of the two, reducing the number of (HTTP) requests is more critical, especially
    for mobile (the overhead of making an HTTP request is significantly higher over
    a cellular network). Reducing the number of requests can be accomplished in two
    ways: combining resources and browser caching.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两者之间，减少（HTTP）请求的数量更为关键，尤其是对于移动设备（在移动网络上进行HTTP请求的开销显著更高）。减少请求可以通过两种方式实现：资源合并和浏览器缓存。
- en: 'Combining resources is primarily an architectural and frontend concern: as
    much as possible, small images should be combined into a single sprite. Then use
    CSS to set the offset and size to display only the portion of the image you want.
    For creating sprites, I highly recommend the free service [SpritePad](http://bit.ly/33GYvwm).
    It makes generating sprites incredibly easy, and it generates the CSS for you
    as well. Nothing could be easier. SpritePad’s free functionality is probably all
    you’ll ever need, but if you find yourself creating a lot of sprites, you might
    find their premium offerings worth it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 结合资源主要是架构和前端关注的问题：尽可能将小图像合并为单个精灵。然后使用CSS设置偏移和大小，以仅显示您想要的图像部分。有关创建精灵，我强烈推荐免费服务[SpritePad](http://bit.ly/33GYvwm)。它使生成精灵非常简单，并为您生成CSS。再也没有比这更简单的事情了。SpritePad的免费功能可能是您所需的一切，但如果您发现自己经常创建大量的精灵图，您可能会发现他们的高级服务值得一试。
- en: 'Browser caching helps reduce HTTP requests by storing commonly used static
    resources in the client’s browser. Though browsers go to great lengths to make
    caching as automatic as possible, it’s not magic: there’s a lot you can and should
    do to enable browser caching of your static resources.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器缓存通过将常用的静态资源存储在客户端浏览器中来帮助减少HTTP请求。虽然浏览器尽可能使缓存自动化，但这并非魔法：您可以并且应该做很多事情来启用浏览器缓存您的静态资源。
- en: Lastly, we can increase performance by reducing the size of static resources.
    Some techniques are *lossless* (size reduction can be achieved without losing
    any data), and some techniques are *lossy* (size reduction is achieved by reducing
    the quality of static resources). Lossless techniques include minification of
    JavaScript and CSS, and optimizing PNG images. Lossy techniques include increasing
    JPEG and video compression levels. We’ll be discussing minification and bundling
    (which also reduces HTTP requests) in this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过减少静态资源的大小来提高性能。一些技术是*无损*的（可以在不丢失任何数据的情况下实现大小减小），而一些技术是*有损*的（通过降低静态资源的质量来实现大小减小）。无损技术包括JavaScript和CSS的缩小以及优化PNG图像。有损技术包括增加JPEG和视频压缩级别。在本章中，我们将讨论缩小和捆绑（这也减少了HTTP请求）。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The importance of reducing HTTP requests will diminish over time as HTTP/2 becomes
    more commonplace. One of the primary improvements in HTTP/2 is *request and response
    multiplexing*, which reduces the overhead of fetching multiple resources in parallel.
    See [“Introduction to HTTP/2”](http://bit.ly/34TXhxR) by Ilya Grigorikfor more
    information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 随着HTTP/2变得越来越普遍，减少HTTP请求的重要性将逐渐减弱。HTTP/2的主要改进之一是*请求和响应复用*，它减少了并行获取多个资源的开销。有关更多信息，请参见[Ilya
    Grigorik的《HTTP/2简介》](http://bit.ly/34TXhxR)。
- en: Content Delivery Networks
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容传递网络
- en: 'When you move your website into production, the static resources must be hosted
    on the internet *somewhere*. You may be used to hosting them on the same server
    where all your dynamic HTML is generated. Our example so far has also taken this
    approach: the Node/Express server we spin up when we type `node meadowlark.js`
    serves all of the HTML as well as static resources. However, if you want to maximize
    the performance of your site (or allow for doing so in the future), you will want
    to make it easy to host your static resources on a *content delivery network*
    (CDN). A CDN is a server that’s optimized for delivering static resources. It
    leverages special headers (that we’ll learn about soon) that enable browser caching.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将网站投入生产时，静态资源必须托管在互联网的某个地方。您可能习惯于将它们托管在生成所有动态HTML的同一服务器上。到目前为止，我们的示例也采用了这种方法：当我们输入`node
    meadowlark.js`时，我们启动的Node/Express服务器会提供所有HTML以及静态资源。然而，如果您希望最大化网站的性能（或为将来做好准备），您将希望轻松地将静态资源托管在*内容传递网络*（CDN）上。CDN是专为提供静态资源而优化的服务器。它利用特殊的标头（我们很快将学习到）来启用浏览器缓存。
- en: CDNs also can enable *geographic optimization* (often called *edge caching*);
    that is, they can deliver your static content from a server that is geographically
    closer to your client. While the internet is very fast indeed (not operating at
    the speed of light, exactly, but close enough), it is still faster to deliver
    data over a hundred miles than a thousand. Individual time savings may be small,
    but if you multiply across all of your users, requests, and resources, it adds
    up fast.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CDN 还可以实现*地理优化*（通常称为*边缘缓存*）；也就是说，它们可以从地理位置更靠近您的客户端的服务器提供您的静态内容。虽然互联网的速度确实非常快（虽然不是光速，但已经足够接近了），但将数据传输一百英里比一千英里要快得多。单个时间节省可能很小，但如果乘以所有用户、请求和资源，这些时间节省将迅速累积起来。
- en: Most of your static resources will be referenced in HTML views (`<link>` elements
    to CSS files, `<script>` references to JavaScript files, `<img>` tags referencing
    images, and multimedia embedding tags). It is also common to have static references
    in CSS, usually the `background-image` property. Lastly, static resources are
    sometimes referenced in JavaScript, such as JavaScript code that dynamically changes
    or inserts `<img>` tags or the `background-image` property.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您的大多数静态资源将在 HTML 视图中引用（`<link>` 元素用于 CSS 文件，`<script>` 引用用于 JavaScript 文件，`<img>`
    标签用于图像，以及多媒体嵌入标签）。通常还会在 CSS 中引用静态资源，通常是 `background-image` 属性。最后，有时也会在 JavaScript
    中引用静态资源，例如动态更改或插入 `<img>` 标签或 `background-image` 属性的 JavaScript 代码。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'You generally don’t have to worry about cross-domain resource sharing (CORS)
    when using a CDN. External resources loaded in HTML aren’t subject to CORS policy:
    you have to enable CORS only for resources that are loaded via Ajax (see [Chapter 15](ch15.xhtml#ch_rest_apis_and_json)).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CDN 时，通常无需担心跨域资源共享（CORS）。在 HTML 中加载的外部资源不受 CORS 策略限制：您只需为通过 Ajax 加载的资源启用
    CORS 即可（参见[第 15 章](ch15.xhtml#ch_rest_apis_and_json)）。
- en: Designing for CDNs
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向 CDN 的设计
- en: The architecture of your site will influence how you use a CDN. Most CDNs let
    you configure routing rules to determine where to send incoming requests. While
    you can get arbitrarily sophisticated with those routing rules, it usually boils
    down to sending requests for static assets to one location (usually provided by
    your CDN) and requests for dynamic endpoints (like dynamic pages or API endpoints)
    to another.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您站点的架构将影响您如何使用 CDN。大多数 CDN 允许您配置路由规则以确定从何处发送传入请求。虽然您可以通过这些路由规则变得非常复杂，但通常归结为将对静态资产的请求发送到一个位置（通常由您的
    CDN 提供），将对动态端点（如动态页面或 API 端点）的请求发送到另一个位置。
- en: Choosing and configuring a CDN is a big topic, which I won’t get into here,
    but I will arm you with background knowledge that will help you configure your
    CDN of choice.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 选择和配置 CDN 是一个大课题，我不会在这里详细介绍，但我会为您提供背景知识，以帮助您配置您选择的 CDN。
- en: 'The easiest approach to structuring your application is to make it easy to
    distinguish dynamic from static assets to make the CDN routing rules as simple
    as possible. While it’s possible to do this using subdomains (dynamic assets are
    served from `meadowlark.com`, and static assets are served from `static.meadowlark.com`,
    for example), this approach has extra complications and makes local development
    more difficult. The easier approach is to use the request paths: everything that
    starts with `/public/` is a static asset, and everything else is dynamic, for
    example. The approach may be different if you’re generating your content with
    Express or using Express to provide an API for a single-page application.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 构建您的应用程序的最简单方法是，使动态资产与静态资产易于区分，以使 CDN 路由规则尽可能简单。虽然可以使用子域（例如，动态资产由 `meadowlark.com`
    提供，静态资产由 `static.meadowlark.com` 提供），但这种方法会增加额外的复杂性，并使本地开发更加困难。更简单的方法是使用请求路径：以
    `/public/` 开头的所有内容都是静态资产，其他所有内容都是动态资产，例如。如果您是使用 Express 生成内容或者使用 Express 为单页面应用程序提供
    API，则可能需要采用不同的方法。
- en: Server-Rendered Website
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器渲染网站
- en: 'If you’re using Express to render your dynamic HTML, it’s easier to say, “Everything
    that starts with `/static/` is a static asset, and everything else is dynamic.”
    With this approach, all of your (dynamically generated) URLs would be whatever
    you want them to be (as long as they don’t start with `/static/`, of course!),
    and all of your static assets will be prefixed with `/static/`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Express 渲染动态 HTML，简单地说，“以 `/static/` 开头的所有内容都是静态资产，其他所有内容都是动态的。”通过这种方法，您的所有（动态生成的）URL
    将是您想要的任何内容（当然，前提是它们不以 `/static/` 开头！），而所有静态资产都将以 `/static/` 作为前缀：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So far in this book, we’ve been using the Express `static` middleware as if
    it were hosting all of the static assets at the root. That is, if we put a static
    asset *foo.png* in the *public* directory, we reference it with the URL path */foo.png*,
    not */static/foo.png*. We could, of course, create a subdirectory *static* inside
    our existing *public* directory, so */public/static/foo.png* would have the URL
    */static/foo.png* but that seems a little silly. Fortunately, the `static` middleware
    saves us from that silliness. All we have to do is specify a different path when
    we call `app.use`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们一直在使用Express的`static`中间件，就好像它在根目录托管了所有静态资产。也就是说，如果我们把静态资产*foo.png*放在*public*目录中，我们会使用URL路径*/foo.png*来引用它，而不是*/static/foo.png*。当然，我们可以在现有的*public*目录中创建一个子目录*static*，这样*/public/static/foo.png*就会有URL*/static/foo.png*，但这似乎有点愚蠢。幸运的是，`static`中间件帮我们避免了这种愚蠢。我们在调用`app.use`时只需指定不同的路径即可：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can use the same URL structure in our development environment that we
    will in production. If we’re careful about keeping our *public* directory in sync
    with what’s in our CDN, we can reference the same static assets in both places,
    and move seamlessly between development and production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在开发环境中使用与生产环境相同的URL结构。如果我们仔细保持*public*目录与CDN中的内容同步，我们可以在两个地方引用相同的静态资产，并在开发和生产环境之间无缝切换。
- en: 'When we configure routing for our CDN (you’ll have to consult your CDN’s documentation
    for this), your routing will look like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们配置CDN的路由时（您需要查阅CDN的文档），您的路由将如下所示：
- en: '| URL path | Routing destination / origin |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| URL路径 | 路由目的地 / 源 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| /static/* | Static CDN file store |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| /static/* | 静态CDN文件存储 |'
- en: '| /* (everything else) | Your Node/Express server, proxy, or load balancer
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| /*（所有其他内容） | 您的Node/Express服务器、代理或负载均衡器 |'
- en: Single-Page Applications
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单页面应用程序
- en: 'Single-page applications will typically be the opposite of a server-rendered
    website: only the API will be routed to your server (for example, any request
    prefixed with */api*), and everything else will be rerouted to your static file
    store.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单页面应用程序通常与服务器渲染的网站相反：只有API将被路由到您的服务器（例如，任何以*/api*前缀的请求），而其他所有内容将被重定向到您的静态文件存储。
- en: 'As we saw in [Chapter 16](ch16.xhtml#ch_single_page_applications), you will
    have some way to create a production bundle for your application, which will include
    all of the static resources, which you’ll upload to your CDN. Then all you have
    to do is make sure routing to your API is configured correctly. So your routing
    will look like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第16章](ch16.xhtml#ch_single_page_applications)中所看到的，您将有某种方式为您的应用程序创建一个生产捆绑包，其中将包含所有静态资源，然后您将上传到您的CDN。然后，您所需做的就是确保正确配置路由到您的API。因此，您的路由将如下所示：
- en: '| URL path | Routing destination / origin |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| URL路径 | 路由目的地 / 源 |'
- en: '| --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| /api/* | Your Node/Express server, proxy, or load balancer |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| /api/* | 您的Node/Express服务器、代理或负载均衡器 |'
- en: '| /* (everything else) | Static CDN file store |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| /*（所有其他内容） | 静态CDN文件存储 |'
- en: Now that we’ve seen how we might structure an application so we can seamlessly
    move from development to production, let’s turn our attention to what’s actually
    happening with caching and how it improves performance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何构建一个应用程序，以便我们可以在开发和生产环境之间无缝切换，让我们将注意力转向缓存的实际操作及其如何提升性能。
- en: Caching Static Assets
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存静态资产
- en: 'Whether you’re using Express to serve static assets or using a CDN, it’s helpful
    to understand the HTTP response headers your browser uses to determine when and
    how to cache static assets:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是使用Express来提供静态资产还是使用CDN，了解您的浏览器用来确定何时以及如何缓存静态资产的HTTP响应头是很有帮助的：
- en: '`Expires`/`Cache-Control`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Expires`/`Cache-Control`'
- en: 'These two headers tell your browser the maximum amount of time a resource can
    be cached. They are taken seriously by the browser: if they inform the browser
    to cache something for a month, it simply won’t re-download it for a month, as
    long as it stays in the cache. It’s important to understand that a browser may
    remove the image from the cache prematurely, for reasons you have no control over.
    For example, the user could clear the cache manually, or the browser could clear
    your resource to make room for other resources the user is visiting more frequently.
    You need one only of these headers, and `Expires` is more broadly supported, so
    it’s preferable to use that one. If the resource is in the cache, and it has not
    expired yet, the browser will not issue a `GET` request at all, which improves
    performance, especially on mobile.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个头部告诉浏览器资源可以被缓存的最长时间。浏览器会认真对待它们：如果它们告诉浏览器缓存某物一个月，只要它在缓存中，浏览器一个月内就不会重新下载。重要的是要理解，浏览器可能会因为你无法控制的原因提前清除图像缓存。例如，用户可能手动清除缓存，或者浏览器可能清除资源以为用户频繁访问的其他资源腾出空间。你只需要其中一个头部，而`Expires`更广泛支持，因此最好使用它。如果资源在缓存中且尚未过期，浏览器根本不会发出`GET`请求，这尤其在移动设备上提升了性能。
- en: '`Last-Modified`/`ETag`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Last-Modified`/`ETag`'
- en: 'These two tags provide a versioning of sorts: if the browser needs to fetch
    the resource, it will examine these tags *before* downloading the content. A `GET`
    request is still issued to the server, but if the values returned by these headers
    satisfy the browser that the resource hasn’t changed, it will not proceed to download
    the file. As the name indicates, `Last-Modified` allows you to specify the date
    the resource was last modified. `ETag` allows you to use an arbitrary string,
    which is usually a version string or a content hash.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个标签提供了一种类似版本控制的功能：如果浏览器需要获取资源，它会在下载内容之前检查这些标签。仍会向服务器发出`GET`请求，但如果这些标签的值满足浏览器资源未更改的条件，浏览器就不会继续下载文件。正如名称所示，`Last-Modified`允许你指定资源的最后修改日期。`ETag`允许你使用任意字符串，通常是版本字符串或内容哈希值。
- en: When serving static resources, you should use the `Expires` header *and* either
    `Last-Modified` or `ETag`. The Express built-in `static` middleware sets `Cache-Control`,
    but doesn’t handle either `Last-Modified` or `ETag`. So, while it’s suitable for
    development, it’s not a great solution for deployment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供静态资源时，应该使用`Expires`头部和`Last-Modified`或者`ETag`之一。Express内置的`static`中间件设置了`Cache-Control`，但并不处理`Last-Modified`或者`ETag`。因此，虽然适合开发时使用，但不是部署的理想解决方案。
- en: If you choose to host your static resources on a CDN, such as Amazon CloudFront,
    Microsoft Azure, Fastly, Cloudflare, Akamai, or StackPath, the advantage is that
    they will handle most of these details for you. You will be able to fine-tune
    the details, but the defaults provided by any of these services are usually good
    out of the box.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择在CDN上托管静态资源，比如Amazon CloudFront、Microsoft Azure、Fastly、Cloudflare、Akamai或StackPath，优势在于它们会为你处理大部分这些细节。你可以微调这些细节，但这些服务的默认设置通常是非常好的。
- en: Changing Your Static Content
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变你的静态内容
- en: 'Caching significantly improves the performance of your website, but it isn’t
    without its consequences. In particular, if you change any of your static resources,
    clients may not see them until the cached versions expire in your browser. Google
    recommends you cache for a month, preferably a year. Imagine a user who uses your
    website every day on the same browser: that person might not see your updates
    for a whole year!'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存显著提升了网站的性能，但也不是没有后果的。特别是，如果你改变了任何静态资源，客户端可能要等到浏览器中的缓存版本过期后才能看到变化。Google建议缓存一个月，最好一年。想象一下，一个用户每天都在同一个浏览器上使用你的网站：那个人可能整整一年都看不到你的更新！
- en: Clearly this is an undesirable situation, and you can’t just tell your users
    to clear their cache. The solution is cache busting. *Cache busting* is a technique
    for giving you control of when your user’s browser is forced to re-download an
    asset. Usually this amounts to versioning the asset (*main.2.css* or *main.css?version=2*)
    or adding some kind of hash (*main.e16b7e149dccfcc399e025e0c454bf77.css*). Whatever
    technique you use, when you update the asset, the resource name changes, and the
    browser knows it needs to download it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这是一个不愿看到的情况，你不能只告诉用户清除他们的缓存。解决方案是缓存破解。*缓存破解* 是一种技术，可以让你控制用户的浏览器何时被迫重新下载资产。通常这意味着给资产加上版本号（*main.2.css*
    或 *main.css?version=2*）或者添加某种哈希值（*main.e16b7e149dccfcc399e025e0c454bf77.css*）。无论使用什么技术，当你更新资产时，资源名称会改变，浏览器就知道需要重新下载它。
- en: We can do the same thing with our multimedia assets. Let’s take our logo, for
    example (*/static/img/meadowlark_logo.png*). If we host it on a CDN for maximum
    performance, specifying an expiration of one year, and then change the logo, your
    users may not see the updated logo for up to a year. However, if you rename your
    logo */static/img/meadowlark_logo-1.png* (and reflect that name change in your
    HTML), the browser will be forced to download it, because it looks like a new
    resource.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对我们的多媒体资产采取相同的方法。例如，让我们拿我们的标志来说（*/static/img/meadowlark_logo.png*）。如果我们将它托管在
    CDN 上以达到最佳性能，设置一年的过期时间，然后更改标志，那么用户可能需要一年才能看到更新后的标志。然而，如果你将标志重命名为 */static/img/meadowlark_logo-1.png*（并在
    HTML 中反映这个名称更改），浏览器将被迫重新下载它，因为它看起来像一个新资源。
- en: If you’re using a single-page application framework, such as `create-react-app`
    or similar, they will provide a build step that will create production-ready resource
    bundles that have hashes appended.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用单页应用框架，例如 `create-react-app` 或类似的，它们会提供一个构建步骤来创建生产就绪的资源包，并附加哈希值。
- en: 'If you’re starting from scratch, you’ll probably want to look into a *bundler*
    (which is what the SPA frameworks use under the hood). Bundlers combine your JavaScript,
    CSS, and some other types of static assets into as few as possible, and minify
    the result (making it as small as possible). Bundler configuration is a big topic,
    but fortunately there is a lot of good documentation out there. The most popular
    bundlers available right now are as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从头开始，你可能会想研究一下 *打包工具*（这是 SPA 框架在幕后使用的工具）。打包工具将你的 JavaScript、CSS 和其他某些静态资产尽可能地合并，并对结果进行缩小（使其尽可能小）。打包工具的配置是一个大话题，但幸运的是，有很多好的文档可以参考。目前最流行的打包工具如下：
- en: '[Webpack](https://webpack.js.org)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[Webpack](https://webpack.js.org)'
- en: 'Webpack was one of the first bundlers to really take off, and it still maintains
    a huge following. It’s very sophisticated, but that sophistication comes at a
    cost: the learning curve is steep. However, it’s good to at least know the basics.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 是第一个真正火起来的打包工具之一，至今仍保持着庞大的用户群。它非常复杂，但这种复杂性是有代价的：学习曲线很陡峭。然而，至少了解基础是很有好处的。
- en: '[Parcel](https://parceljs.org)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Parcel](https://parceljs.org)'
- en: Parcel is the newcomer, and it has made a big splash. It’s extremely well-documented,
    extremely fast, and, best of all, has the shortest learning curve. If you’re looking
    to get the job done quickly, without a lot of fuss, start here.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Parcel 是新进入者，并且引起了轰动。它有极其详细的文档，运行速度极快，最重要的是，学习曲线最短。如果你想快速完成任务，而不想烦扰太多，从这里开始。
- en: '[Rollup](https://rollupjs.org)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[Rollup](https://rollupjs.org)'
- en: Rollup sits somewhere between Webpack and Parcel. Like Webpack, it’s very robust
    and has a lot of features. However, it is easier to get started with than Webpack,
    and not as simple as Parcel.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Rollup 介于 Webpack 和 Parcel 之间。像 Webpack 一样，它非常强大并且具有许多功能。然而，它比 Webpack 更容易入门，但不像
    Parcel 那样简单。
- en: Conclusion
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: For what seems like such a simple thing, static resources can be a lot of trouble.
    However, they probably represent the bulk of the data actually being transferred
    to your visitors, so spending some time optimizing them will yield substantial
    payoff.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于看似如此简单的事情，静态资源可能会带来很多麻烦。然而，它们很可能代表着实际传输给访问者的大部分数据，因此花些时间来优化它们将会带来可观的回报。
- en: A viable solution to static assets not previously mentioned is to simply host
    your static resources on a CDN from the start, and always use the full URL to
    the resource in your views and CSS. This has the advantage of simplicity, but
    if you ever want to spend a weekend hackathon at that cabin in the woods without
    internet access, you’d be in trouble!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种未曾提及的静态资源的可行解决方案是从一开始就简单地将您的静态资源托管在CDN上，并始终在视图和CSS中使用资源的完整URL。这样做的好处在于简单性，但如果您想在没有互联网访问的树林小屋里度过周末编程马拉松，您可能会遇到麻烦！
- en: Elaborate bundling and minification is another area in which you can save time
    if the payoff isn’t worth it for your application. In particular, if your site
    includes only one or two JavaScript files, and all of your CSS lives in a single
    file, you could probably skip bundling altogether, but real-world applications
    have a tendency to grow over time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序不值得进行复杂的捆绑和最小化处理，您可以在这方面节省时间。特别是，如果您的网站只包含一两个JavaScript文件，并且所有的CSS都放在一个文件中，您可能完全可以跳过捆绑，但实际应用程序往往会随时间增长。
- en: Whatever technique you choose to use to serve your static resources, I highly
    recommend hosting them separately, preferably on a CDN. If it sounds like a hassle
    to you, let me assure that it’s not nearly as difficult as it sounds, especially
    if you spend a little time on your deployment system, so deploying static resources
    to one location and your application to another is automatic.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪种技术来提供您的静态资源，我强烈建议您将它们分开托管，最好是在CDN上。如果这听起来很麻烦，让我保证，这并不像听起来那么困难，特别是如果您在部署系统上花一点时间，使得将静态资源部署到一个位置，应用程序部署到另一个位置是自动的。
- en: If you’re concerned about the hosting costs of CDNs, I encourage you to take
    a look at what you’re paying now for hosting. Most hosting providers essentially
    charge for bandwidth, even if you don’t know it. However, if all of a sudden your
    site is mentioned on Slashdot, and you get “Slashdotted,” you may find yourself
    with a hosting bill you didn’t expect. CDN hosting is usually set up so that you
    pay for what you use. To give you an example, a website that I once managed for
    a medium-sized regional company, which used about 20 GB a month of bandwidth,
    paid only a few dollars per month to host static resources (and it was a very
    media-heavy site).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心CDN的托管成本，请查看一下您目前托管的费用。大多数托管提供商实际上会按照带宽收费，即使您不知道。然而，如果突然您的网站被Slashdot提到，并且您被“Slashdotted”，您可能会发现自己有一张意想不到的托管账单。CDN托管通常设置为按使用付费。举个例子，我曾经为一家中型地区公司管理的网站，每月带宽使用量约为20
    GB，只需每月支付几美元来托管静态资源（而且这是一个非常媒体密集的网站）。
- en: The performance gains you realize by hosting your static resources on a CDN
    are significant, and the cost and inconvenience of doing so is minimal, so I highly
    recommend going this route.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将您的静态资源托管在CDN上，您可以实现显著的性能提升，而且这样做的成本和不便是最小的，因此我强烈建议您选择这条路线。
- en: ^([1](ch17.xhtml#idm45053577982616-marker)) It is possible to use uncompiled
    LESS in a browser, with some JavaScript magic. There are performance consequences
    to this approach, so I don’t recommend it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch17.xhtml#idm45053577982616-marker)) 在浏览器中使用未编译的LESS是可能的，借助一些JavaScript魔法。这种方法会带来性能上的后果，因此我不建议这样做。
