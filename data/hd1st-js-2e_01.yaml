- en: 'Chapter 1\. A Quick Dip into Javascript: Getting your Feet Wet'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。快速了解 Javascript：踏入水中
- en: '![Image](assets/f0001-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0001-01.png)'
- en: '**JavaScript gives you superpowers**. The **true programming language** of
    the web, JavaScript lets you **add behavior** to your web pages. No more dry,
    boring, static pages that just sit there looking at you—with JavaScript, you’ll
    be able to reach out and touch your users, react to interesting events, grab data
    from the web to use in your pages, draw graphics right in your web pages and a
    lot more. And once you know JavaScript you’ll also be in a position to create
    **totally new** behaviors for your users.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript 赋予你超能力**。作为网页的**真正编程语言**，JavaScript 允许你**添加行为**到你的网页中。不再有干燥、无聊、静态的页面只是呆在那里看着你——使用
    JavaScript，你可以与用户互动，响应有趣的事件，从网络中获取数据以在你的页面中使用，直接在网页中绘制图形等等。一旦你掌握了 JavaScript，你还可以为用户创造**全新的**行为。'
- en: You’ll be in good company too. JavaScript’s not only one of the **most popular**
    programming languages, it’s also **supported** in all modern browsers and is used
    in many environments outside of the browser. More on that later; for now, let’s
    get started!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你也会处于很好的公司。JavaScript 不仅是**最受欢迎**的编程语言之一，而且在所有现代浏览器中**支持**，并且在浏览器之外的许多环境中使用。稍后会详细介绍；现在让我们开始吧！
- en: The way JavaScript works
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 的工作原理
- en: 'If you’re used to creating structure, content, layout and style in your web
    pages, isn’t it time you add a little behavior as well? After all, there’s no
    need for the page to just *sit there*. Great pages should be *interative* and
    *dynamic*. That’s where JavaScript comes in. Let’s start by taking a look at how
    JavaScript fits into the *web page ecosystem*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯在网页中创建结构、内容、布局和样式，那么是时候也加入一些行为了吧？毕竟，页面不应该只是*呆在那里*。优秀的页面应该是*交互式*和*动态*的。这就是
    JavaScript 的用武之地。让我们首先看看 JavaScript 如何融入*网页生态系统*：
- en: '![Image](assets/f0002-01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0002-01.png)'
- en: How you’re going to write JavaScript
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你将如何编写 JavaScript
- en: 'JavaScript is fairly unique in the programming world. With your typical programming
    language you have to write it, compile it, link it and deploy it. JavaScript is
    much more fluid and flexible. With JavaScript all you need to do is write JavaScript
    right into your page, and then load it into a browser. From there, the browser
    will happily begin executing your code. Let’s take a closer look at how this works:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 在编程世界中相当独特。对于典型的编程语言，你需要编写、编译、链接和部署。JavaScript 则更加流畅和灵活。使用 JavaScript，你只需将
    JavaScript 写入页面中，然后加载到浏览器中。从那时起，浏览器将愉快地开始执行你的代码。让我们更详细地看看它是如何工作的：
- en: '![Image](assets/f0003-01.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0003-01.png)'
- en: How to get JavaScript into your page
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将 JavaScript 加入到你的页面中
- en: First things first. You can’t get very far with JavaScript if you don’t know
    how to get it into a web page. So, how do you do that? Using the `<script>` element
    of course!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先得明确一件事。如果不知道如何将 JavaScript 加入到网页中，你将无法深入学习 JavaScript。那么，怎么做呢？当然是使用 `<script>`
    元素！
- en: Let’s take a boring old, garden-variety web page and add some dynamic behavior
    using a `<script>` element. Now, at this point, don’t worry too much about the
    details of what we’re putting into the `<script>` element—your goal right now
    is to get some JavaScript working.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拿一个枯燥乏味的普通网页，通过 `<script>` 元素添加一些动态行为。此时，不要太担心我们将在 `<script>` 元素中添加什么具体内容——你现在的目标是让
    JavaScript 开始起作用。
- en: '![Image](assets/f0004-01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0004-01.png)'
- en: A little test drive
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小测试驾驶
- en: '![Image](assets/f0004-02.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0004-02.png)'
- en: Go ahead and type this page into a file named “behavior.html”. Drag the file
    to your browser (or use File > Open) to load it. What does it do? Hint, you’ll
    need to wait five seconds to find out.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开一个名为“behavior.html”的文件，并将这个页面拖到你的浏览器中（或者使用“文件” > “打开”）。它会做什么？提示：你需要等待五秒钟才能找出答案。
- en: '![Image](assets/f0004-03.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0004-03.png)'
- en: JavaScript, you’ve come a long way...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript，你已经走了很远……
- en: '![Image](assets/f0006-01.png)![Image](assets/f0009-01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0006-01.png)![Image](assets/f0009-01.png)'
- en: With HTML and CSS you can create some great looking pages. But once you know
    JavaScript, you can really expand on the kinds of pages you can create.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML 和 CSS 你可以创建一些漂亮的页面。但一旦你掌握了 JavaScript，你可以真正扩展你可以创建的页面类型。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Knowing JavaScript might increase the size of your paycheck too!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 知道 JavaScript 可能也会增加你的薪水！
- en: So much so, in fact, you might actually start thinking of your pages as applications
    (or even experiences!) rather than mere pages.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你可能会开始将你的页面视为应用程序（甚至是体验！），而不仅仅是简单的页面。
- en: Now, you might be saying, “I already know that, why do you think I’m reading
    this book?” Well, we actually wanted to use this opportunity to have a little
    chat about learning JavaScript. If you already have a programming language or
    scripting language under your belt, then you have some idea of what lies ahead.
    However, if you’ve mostly been using HTML & CSS to date, you should know that
    there is something fundamentally different about learning a programming language.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会说，“我已经知道这些，你为什么认为我在读这本书？”嗯，我们实际上想利用这个机会谈谈学习JavaScript的事情。如果你已经掌握了一门编程语言或脚本语言，那么你对接下来的内容有一些了解。但是，如果迄今为止你主要使用的是HTML和CSS，你应该知道学习一门编程语言与学习编程语言有着根本上的不同。
- en: With HTML & CSS what you’re doing is largely declarative—for instance, you’re
    declaring, say, that some text is a paragraph or that all the HTML elements in
    the “sale” class should be colored red. With JavaScript you’re adding *behavior*
    to the page, and to do that you need to describe computation. You’ll need to be
    able to describe things like, “compute the user’s score by summing up all the
    correct answers” or “do this action ten times” or “when the user clicks on that
    button play the you-have-won sound” or even “go off and get my latest tweet, and
    put it in this page.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与HTML和CSS不同，你所做的主要是声明性的—例如，你声明某些文本是段落或者所有“sale”类中的HTML元素应该是红色的。而使用JavaScript，你要为页面添加*行为*，为此你需要描述计算。你需要能够描述诸如“通过总结所有正确答案来计算用户的得分”、“执行此操作十次”或者“当用户点击该按钮时播放获胜音效”甚至“去获取我的最新推文，并将其放在这个页面中”之类的事情。
- en: To do those things you need a language that is quite different from HTML or
    CSS. Let’s see how...
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这些操作，你需要一种与HTML或CSS非常不同的语言。让我们看看怎么做…
- en: How to make a statement
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做出语句
- en: 'When you create HTML you usually **mark upg** text to give it structure; to
    do that you add elements, attributes and values to the text:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建HTML时，通常会**标记**文本以赋予其结构；为此，你需要向文本添加元素、属性和值：
- en: '![Image](assets/f0010-01.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0010-01.png)'
- en: 'CSS is a bit different. With CSS you’re writing a set of **rules**, where each
    rule selects elements in the page, and then specifies a set of styles for those
    elements:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: CSS有点不同。使用CSS时，你编写一组**规则**，其中每个规则选择页面中的元素，然后为这些元素指定一组样式：
- en: '![Image](assets/f0010-02.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0010-02.png)'
- en: 'With JavaScript you write **statements**. Each statement specifies a small
    part of a computation, and together, all the statements create the behavior of
    the page:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript，你会编写**语句**。每个语句都指定了计算的一个小部分，所有这些语句共同创建了页面的行为：
- en: '![Image](assets/f0010-03.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0010-03.png)'
- en: Variables and values
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和值
- en: 'You might have noticed that JavaScript statements usually involve variables.
    Variables are used to store values. What kinds of values? Here are a few examples:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，JavaScript语句通常涉及变量。变量用于存储值。哪些值？以下是一些示例：
- en: '![Image](assets/f0011-01.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0011-01.png)'
- en: 'There are other values that variables can hold beyond numbers, strings and
    booleans, and we’ll get to those soon enough, but, no matter what a variable contains,
    we create all variables the same way. Let’s take a little closer look at how to
    declare a variable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 变量除了可以包含数字、字符串和布尔值外，还可以包含其他值，我们很快就会介绍这些，但无论变量包含什么，我们都是以相同的方式创建所有变量。让我们更仔细地看看如何声明变量：
- en: '![Image](assets/f0011-02.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0011-02.png)'
- en: 'We say optionally, because if you want, you can create a variable without an
    initial value, and then assign it a value later. To create a variable without
    an initial value, just leave off the assignment part, like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说“可选”，因为如果你愿意，你可以创建一个没有初始值的变量，然后稍后再为其赋值。要创建一个没有初始值的变量，只需省略赋值部分，像这样：
- en: '![Image](assets/f0011-03.png)![Image](assets/f0011-04.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0011-03.png)![图片](assets/f0011-04.png)'
- en: Constants, another kind of variable
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常量，另一种变量类型
- en: 'So far, we’ve used the keyword `**let**` to declare our variables. And that’s
    typically what we want to do with variables whose values can *vary,* or in other
    words, change their value over time. For instance, if we use `let` to declare
    the variable `**winners**`, assign it the value 2, we can change the value in
    `winners` later to be 3 if another winner comes along:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用关键字`**let**`来声明变量。对于那些值可以*变化*的变量，这通常是我们想要做的事情，换句话说，随着时间的推移可以改变它们的值。例如，如果我们使用`let`来声明变量`**winners**`，将其赋值为2，如果另一个赢家出现，我们可以稍后将`winners`的值更改为3：
- en: '![Image](assets/f0012-03.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0012-03.png)'
- en: 'Sometimes, however, we do not want the values in our variables to vary at all.
    There are situations in which we might want to give a name to a value that we’ll
    use in our code, but we don’t ever want that value to change. Here’s a good example:
    the radius of planet Earth. It might be handy to assign this value to a variable
    so we can use `**EARTH_RADIUS**` instead of the number in our code. We don’t want
    anyone to come along and change this value accidentally, so how can we make sure
    the value of `EARTH_RADIUS` never changes? We can use a *constant* instead of
    a variable, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时候我们不希望变量中的值变化。有些情况下，我们可能希望给一个我们将在代码中使用的值起个名字，但我们永远不希望那个值发生变化。比如，地球半径就是一个很好的例子。把这个值分配给一个变量可能会很方便，这样我们可以在代码中使用`**EARTH_RADIUS**`而不是这个数字。我们不希望有人无意中改变这个值，那么怎么确保`EARTH_RADIUS`的值永远不变呢？我们可以使用一个*常量*而不是变量，像这样：
- en: '![Image](assets/f0013-01.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0013-01.png)'
- en: Back away from that keyboard!
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离开那个键盘！
- en: You know variables have a name, and you know they have a value.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道变量有名字，也知道它们有一个值。
- en: You also know some of the things a variable can hold are numbers, strings and
    boolean values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你还知道变量可以保存数字、字符串和布尔值。
- en: '***But what can you call your variables? Is any name okay?*** Well no, but
    the rules around creating variable names are simple: just follow the two rules
    below to create valid variable names:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '***但你可以如何称呼你的变量？任何名字都可以吗？*** 嗯，不是的，但是关于创建变量名的规则很简单：只需遵循下面两条规则来创建有效的变量名：'
- en: '![Image](assets/f0014-00.png) **Start your variables with a letter, an underscore
    or a dollar sign.**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](assets/f0014-00.png) **变量名要以字母、下划线或美元符号开头。**'
- en: '![Image](assets/f0014-00a.png) **After that, use as many letters, numeric digits,
    underscores or dollar signs as you like.**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](assets/f0014-00a.png) **之后，可以使用任意数量的字母、数字、下划线或美元符号。**'
- en: 'Oh, and one more thing; we really don’t want to confuse JavaScript by using
    any of the built-in *keywords*, like **let** or **function** or **false**, so
    consider those off limits for your own variable names. We’ll get to some of these
    keywords and what they mean throughout the rest of the book, but here’s a list
    to take a quick look at:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，还有一件事；我们真的不希望通过使用任何内置的*关键字*来混淆JavaScript，比如**let**、**function**或**false**，所以请把它们视作你自己的变量名时的禁区。我们会在本书的其余部分介绍其中一些关键字及其含义，但这里是一个快速浏览的列表：
- en: break
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: break
- en: case
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: case
- en: catch
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: catch
- en: class
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: class
- en: const
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: const
- en: continue
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: continue
- en: debugger
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: debugger
- en: default
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: default
- en: delete
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: delete
- en: do
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: do
- en: else
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: else
- en: enum
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: enum
- en: export
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: export
- en: extends
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: extends
- en: 'false'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'false'
- en: finally
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: finally
- en: for
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for
- en: function
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: function
- en: if
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: if
- en: implements
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: implements
- en: import
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: import
- en: in
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: in
- en: instanceof
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: instanceof
- en: interface
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: interface
- en: let
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: let
- en: new
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: new
- en: package
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: package
- en: private
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: private
- en: protected
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: protected
- en: public
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: public
- en: return
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: return
- en: static
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: static
- en: super
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: super
- en: switch
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: switch
- en: this
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: this
- en: throw
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: throw
- en: 'true'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'true'
- en: try
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: try
- en: typeof
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: typeof
- en: var
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: var
- en: void
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: void
- en: while
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: while
- en: with
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: with
- en: yield
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: yield
- en: '![Image](assets/f0014-01.png)![Image](assets/f0015-01.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0014-01.png)![图片](assets/f0015-01.png)'
- en: Express yourself
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达自己
- en: 'To truly express yourself in JavaScript you need ***expressions***. Expressions
    evaluate to values. You’ve already seen a few in passing in our code examples.
    Take the expression in this statement for instance:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正地在JavaScript中表达自己，你需要***表达式***。表达式会评估出值。在我们的代码示例中，你已经偶尔看到了一些。例如，看看这个语句中的表达式：
- en: '![Image](assets/f0017-01.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0017-01.png)'
- en: If you’ve ever taken a math class, balanced your checkbook or done your taxes,
    we’re sure these kinds of numeric expressions are nothing new.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经上过数学课，做过银行对账或者报税，我们相信这些数值表达式对你来说并不陌生。
- en: 'There are also string expressions; here are a few:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里也有字符串表达式；以下是一些例子：
- en: '![Image](assets/f0017-02.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0017-02.png)'
- en: 'We also have expressions that evaluate to **true** or **false**, otherwise
    known as boolean expressions. Work through each of these to see how you get true
    or false from them:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也有表达式会评估为**true**或**false**，也就是所谓的布尔表达式。逐个来看这些表达式，看看它们是如何得出true或false的：
- en: '![Image](assets/f0017-03.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0017-03.png)'
- en: 'And expressions can evaluate to a few other types; we’ll get to these later
    in the book. For now, the important thing is to realize all these expressions
    evaluate to something: a value that is a number, a string or a boolean. Let’s
    keep moving and see what that gets you!'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 而且表达式还可以评估为其他几种类型；我们将在本书后面详细讨论这些。目前重要的是要意识到所有这些表达式都会评估出某个值：一个数字、一个字符串或一个布尔值。让我们继续前进，看看这给你带来了什么！
- en: '![Image](assets/f0019-01.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0019-01.png)'
- en: Doing things more than once
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做很多次的事情
- en: 'You do a lot of things more than once:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常要做很多事情不止一次：
- en: '*Lather, rinse, repeat*...'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*洗、涮、重复*...'
- en: '*Wax on, wax off*...'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*上蜡，下蜡*...'
- en: '*Eat candies from the bowl until they’re all gone.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*吃掉碗里的糖果，直到它们都没了。*'
- en: 'Of course you’ll often need to do things in code more than once, and JavaScript
    gives you a few ways to repeatedly execute code in a loop: **while**, **for**,
    **for in** and **forEach**. Eventually, we’ll look at all these ways of looping,
    but let’s focus on **while** for now.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你经常需要在代码中重复执行某些操作，而 JavaScript 给了你几种循环执行代码的方式：**while**、**for**、**for in**
    和 **forEach**。最终，我们会看看所有这些循环的方式，但现在让我们专注于 **while**。
- en: 'We just talked about expressions that evaluate to boolean values, like `scoops
    > 0`, and these kinds of expressions are the key to the while statement. Here’s
    how:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论了会产生布尔值的表达式，比如 `scoops > 0`，而这些类型的表达式是 while 语句的关键。这是如何实现的：
- en: '![Image](assets/f0019-02.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0019-02.png)'
- en: How the while loop works
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while 循环的工作原理
- en: Seeing as this is your first while loop, let’s trace through a round of its
    execution to see exactly how it works*. Notice we’ve added a declaration for scoops
    to declare it, and initialize it to the value 5.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是你的第一个 while 循环，让我们跟踪一轮其执行过程，看看它是如何工作的。请注意，我们添加了一个声明来声明 scoops 并将其初始化为值 5。
- en: '**Now let’s start executing this code. First we set scoops to five.**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在让我们开始执行这段代码。首先，我们将 scoops 设置为五。**'
- en: '![Image](assets/f0020-01.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0020-01.png)'
- en: '**After that we hit the while statement. When we evaluate a while statement
    the first thing we do is evaluate the conditional to see if it’s true or false.**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**然后我们遇到了 while 语句。当评估 while 语句时，我们首先评估条件以查看它是 true 还是 false。**'
- en: '![Image](assets/f0020-02.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0020-02.png)'
- en: '**Because the conditional is true, we start executing the block of code. The
    first statement in the body writes the string “Another scoop! <br>” to the browser.**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**因为条件为 true，我们开始执行代码块。体中的第一条语句将字符串“Another scoop! <br>”写入浏览器。**'
- en: '![Image](assets/f0020-03.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0020-03.png)'
- en: '* To follow along, grab the code for this chapter from [http://wickedlysmart.com/hfjs](http://wickedlysmart.com/hfjs)
    and drag the file icecream.html into your browser.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*要跟着一起做，请从 [http://wickedlysmart.com/hfjs](http://wickedlysmart.com/hfjs) 获取本章的代码，并将
    icecream.html 文件拖放到浏览器中。*'
- en: '**The next statement subtracts one from the number of scoops and then sets
    scoops to that new value, four.**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**接下来的语句从冰淇淋数目中减去一个，然后将 scoops 设置为新值，即四。**'
- en: '![Image](assets/f0021-01.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0021-01.png)'
- en: '**That’s the last statement in the block, so we loop back up to the conditional
    and start over again.**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是代码块中的最后一条语句，因此我们回到条件语句并重新开始。**'
- en: '![Image](assets/f0021-02.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0021-02.png)'
- en: '**Evaluating our conditional again, this time scoops is four. But that’s still
    more than zero.**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**再次评估我们的条件语句，这次 scoops 是四。但这仍然比零多。**'
- en: '![Image](assets/f0021-03.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0021-03.png)'
- en: '**Once again we write the string “Another scoop! <br>” to the browser.**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们再次向浏览器写入字符串“Another scoop! <br>”。**'
- en: '![Image](assets/f0021-04.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0021-04.png)'
- en: '**The next statement subtracts one from the number of scoops and sets scoops
    to that new value, which is three.**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**接下来的语句从冰淇淋数目中减去一个，并将 scoops 设置为该新值，即三。**'
- en: '![Image](assets/f0022-01.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0022-01.png)'
- en: '**That’s the last statement in the block, so we loop back up to the conditional
    and start over again.**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是代码块中的最后一条语句，因此我们回到条件语句并重新开始。**'
- en: '![Image](assets/f0022-02.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0022-02.png)'
- en: '**Evaluating our conditional again, this time scoops is three. But that’s still
    more than zero.**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**再次评估我们的条件语句，这次 scoops 是三。但这仍然比零多。**'
- en: '![Image](assets/f0022-03.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0022-03.png)'
- en: '**Once again we write the string “Another scoop! <br>” to the browser.**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们再次向浏览器写入字符串“Another scoop! <br>”。**'
- en: '![Image](assets/f0022-04.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0022-04.png)'
- en: '**And as you can see, this continues... each time we loop, we decrement (reduce
    scoops by 1), write another string to the browser, and keep going.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**正如你所看到的，这种情况会继续下去... 每次循环时，我们减少（减少 1），向浏览器写入另一个字符串，然后继续。**'
- en: '![Image](assets/f0023-01.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0023-01.png)'
- en: '**And continues...**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**然后继续...**'
- en: '![Image](assets/f0023-02.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0023-02.png)'
- en: '**Until the last time... this time something’s different. Scoops is zero, and
    so our conditional returns false. That’s it folks; we’re not going to go through
    the loop anymore, we’re not going to execute the block. This time, we bypass the
    block and execute the statement that follows it.**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**直到最后一次... 这次有些不同。Scoops 是零，所以我们的条件返回 false。就这样吧，我们不会再进入循环，不会执行代码块。这一次，我们跳过块并执行其后的语句。**'
- en: '![Image](assets/f0023-03.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0023-03.png)'
- en: '**Now we execute the other document.write, and write the string “Life without
    ice cream isn’t the same”. We’re done!**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在我们执行另一个document.write，并写入字符串“没有冰淇淋的生活不一样”。我们完成了！**'
- en: '![Image](assets/f0023-04.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0023-04.png)'
- en: '[PRE0]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Making decisions with JavaScript
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript做决策
- en: 'You’ve just seen how you use a conditional to decide whether to continue looping
    in a `while` statement. You can also use boolean expressions to make decisions
    in JavaScript with the `if` statement. The `if` statement executes its code block
    only if a conditional test is true. Here’s an example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚看到如何使用条件来决定是否继续在`while`语句中循环。您还可以使用布尔表达式在JavaScript中做决策，使用`if`语句。`if`语句仅在条件测试为真时执行其代码块。这里是一个例子：
- en: '![Image](assets/f0024-01.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0024-01.png)'
- en: 'With an `if` statement we can also string together multiple tests by adding
    on one or more `else if`’s, like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`语句，我们还可以通过添加一个或多个`else if`来串联多个测试，就像这样：
- en: '![Image](assets/f0024-02.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0024-02.png)'
- en: And, when you need to make LOTS of decisions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 而且，当您需要做很多决策时
- en: 'You can string together as many `if`/`else` statements as you need, and if
    you want one, even a final catch-all `else`, so that if all conditions fail, you
    can handle it. Like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以串联尽可能多的`if`/`else`语句，如果需要，甚至可以添加一个最终的全捕获`else`，以便在所有条件失败时进行处理。就像这样：
- en: '![Image](assets/f0025-01.png)![Image](assets/f0025-02.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0025-01.png)![图片](assets/f0025-02.png)'
- en: Reach out and communicate with your user
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与用户联系和沟通
- en: 'We’ve been talking about making your pages more interactive, and to do that
    you need to be able to communicate with your user. As it turns out there are a
    few ways to do that, and you’ve already seen some of them. Let’s get a quick overview
    and then we’ll dive into these in more detail throughout the book:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在讨论如何使您的页面更具交互性，为此您需要能够与用户进行通信。事实证明有几种方法可以做到这一点，而您已经看到了其中一些。让我们快速概述一下，然后我们将在整本书中更详细地介绍这些内容：
- en: Create an alert
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个警报
- en: 'As you’ve seen, the browser gives you a quick way to alert your users through
    the `alert` function. Just call `alert` with a string containing your alert message,
    and the browser will give your user the message in a nice dialog box. A small
    confession though: we’ve been overusing this because it’s easy; `alert` really
    should be used only when you truly want to stop everything and let the user know
    something.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，浏览器通过`alert`函数为您提供了一种快速警告用户的方法。只需调用带有包含警报消息的字符串的`alert`，浏览器将以一个漂亮的对话框向用户显示消息。不过，小小的坦白：我们一直在过度使用它，因为它很容易；`alert`真的应该只在您真正想要停止一切并让用户知道某事时使用。
- en: Write directly into your document
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接写入您的文档
- en: Think of your web page as a document (that’s what the browser calls it). You
    can use a function `document.write` to write arbitrary HTML and content into your
    page at any point. In general, this is considered bad form, although you’ll see
    it used here and there. We’ve used it a bit in this chapter too because it’s an
    easy way to get started.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的网页视为一个文档（这就是浏览器称呼它的方式）。您可以使用`document.write`函数在任何时候将任意HTML和内容写入您的页面。一般来说，这被认为是不好的做法，尽管您会在这里那里看到它的使用。我们在本章中也稍微使用了一点，因为这是一个开始的简单方式。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’re using these three methods in this chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中使用了这三种方法。
- en: Use the console
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用控制台
- en: Every JavaScript environment also has a console that can log messages from your
    code. To write a message to the console’s log you use the function `console.log`
    and hand it a string that you’d like printed to the log (more details on using
    console log in a second). You can view `console.log` as a great tool for troubleshooting
    your code, but typically your users will never see your console log, so it’s not
    a very effective way to communicate with them.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 每个JavaScript环境都有一个控制台，可以记录来自您代码的消息。要将消息写入控制台的日志，您可以使用`console.log`函数，并将要打印到日志中的字符串传递给它（有关如何使用控制台日志的更多详细信息稍后）。您可以将`console.log`视为调试代码的好工具，但通常您的用户不会看到您的控制台日志，因此这不是与他们沟通的非常有效的方式。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The console is a really handy way to help find errors in your code! If you’ve
    made a typing mistake, like missing a quote, JavaScript will usually give you
    an error in the console to help you track it down.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台是帮助您在代码中查找错误的非常方便的方法！如果您犯了一个打字错误，比如漏掉了引号，JavaScript通常会在控制台中给您一个错误，以帮助您追踪它。
- en: Directly manipulate your document
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接操作您的文档
- en: This is the big leagues; this is the way you want to be interacting with your
    page and users—using JavaScript you can access your actual web page, read & change
    its content, and even alter its structure and style! This all happens by making
    use of your browser’s *document object model* (more on that later). As you’ll
    see, this is the best way to communicate with your user. But, using the document
    object model requires knowledge of how your page is structured and of the programming
    interface that is used to read and write to the page. We’ll be getting there soon
    enough. But first, we’ve got some more JavaScript to learn.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大联盟；这是你希望与页面和用户交互的方式 —— 使用JavaScript，你可以访问你的实际网页，读取和更改其内容，甚至修改其结构和样式！这一切都是通过使用你浏览器的*文档对象模型*实现的（稍后会详细介绍）。正如你将看到的，这是与你的用户交流的最佳方式。但是，使用文档对象模型需要了解页面结构及用于读取和写入页面的编程接口的知识。我们很快就会到达那里。但首先，我们还有更多的JavaScript需要学习。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This is what we’re working towards. When you get there you’ll be able to read,
    alter and manipulate your page in any number of ways.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的工作目标。当你达到这个目标时，你将能够以各种方式阅读、修改和操作你的页面。
- en: A closer look at console.log
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更详细地看看`console.log`
- en: 'Let’s take a closer look at how `console.log` works so we can use it in this
    chapter to see the output from our code, and throughout the book to inspect the
    output of our code and debug it. Remember though, the console is not a browser
    feature most casual users of the web will encounter, so you won’t want to use
    it in the final version of your web page. Writing to the console log is typically
    done to troubleshoot as you develop your page. That said, it’s a great way to
    see what your code is doing while you’re learning the basics of JavaScript. Here’s
    how it works:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看`console.log`的工作原理，以便在本章中使用它来查看我们代码的输出，并在整本书中检查和调试我们代码的输出。但请记住，控制台不是大多数网页的普通用户会遇到的浏览器功能，因此你不会想在最终版本的网页中使用它。在开发页面时，写入控制台日志通常用于故障排除。也就是说，在学习JavaScript基础知识时，查看代码的运行情况是一个很好的方法。它的工作原理如下：
- en: '![Image](assets/f0029-01.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0029-01.png)'
- en: Opening the console
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开控制台
- en: Every browser has a slightly different implementation of the console. And, to
    make things even more complicated, the way that browsers implement the console
    changes fairly frequently—not in a huge way, but enough so that by the time you
    read this, your browser’s console might look a bit different from what we’re showing
    here.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 每个浏览器对控制台的实现略有不同。而且，更复杂的是，浏览器实现控制台的方式相对频繁地会有所更改 —— 变动不会很大，但足以让你读到这里时，你的浏览器控制台看起来可能与我们展示的有些不同。
- en: So, we’re going to show you how to access the console in the Chrome browser
    (version 120) on the Mac, and we’ll put instructions on how to access the console
    in all the major browsers online at [http://wickedlysmart.com/hfjsconsole](http://wickedlysmart.com/hfjsconsole).
    Once you get the hang of the console in one browser, it’s fairly easy to figure
    out how to use it in other browsers too, and we encourage you to try using the
    console in at least two browsers so you’re familiar with them.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将向您展示如何在Mac上的Chrome浏览器（版本120）中访问控制台，并在[http://wickedlysmart.com/hfjsconsole](http://wickedlysmart.com/hfjsconsole)上提供有关如何在所有主要浏览器中访问控制台的说明。一旦您掌握了一个浏览器中的控制台，就很容易弄清楚如何在其他浏览器中使用它，我们鼓励您尝试在至少两个浏览器中使用控制台，以便熟悉它们。
- en: Note
  id: totrans-180
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note: You don’t need to type the Howdy code in. We’re just learning where
    the console is. We’ll start typing in code in just a sec...**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：你不需要输入Howdy代码。我们只是在学习控制台的位置。过一会儿我们就会开始输入代码...**'
- en: '![Image](assets/f0030-02.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0030-02.png)'
- en: Coding a Serious JavaScript Application
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写严肃的JavaScript应用程序
- en: Let’s put all these new JavaScript skills and `console.log` to good use with
    something practical. We need some variables, a `while` statement, some `if` statements
    with `else`s. Add a little more polish and we’ll have a super-serious business
    application before you know it. But, before you look at the code, think to yourself
    how you’d code that classic favorite, “99 bottles of rootbeer.”
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有这些新的JavaScript技能和`console.log`技巧用于一些实际操作。我们需要一些变量，一个`while`语句，一些带有`else`的`if`语句。稍微加工一下，你会发现我们不知不觉中已经拥有了一个超级严肃的商业应用程序。但是，在你查看代码之前，请想想你如何编写那个经典的“99瓶根啤”的代码。
- en: '![Image](assets/f0031-01.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0031-01.png)'
- en: '[PRE1]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Image](assets/f0032-01.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/f0032-01.png)'
- en: '**Good point!** Yes, it’s time. Before we got there we wanted to make sure
    you had enough JavaScript under your belt to make it interesting. That said, you
    already saw in the beginning of this chapter that you add JavaScript to your HTML
    just like you add CSS; that is, you just add it inline with the appropriate `<script>`
    tags around it.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**好主意！** 是的，是时候了。在我们到达那里之前，我们希望确保你已经掌握了足够的 JavaScript，使它变得有趣。也就是说，你已经在本章的开头看到，你可以像添加
    CSS 一样添加 JavaScript 到你的 HTML 中；也就是说，你只需将它嵌入到适当的 `<script>` 标签中。'
- en: Now, like CSS, you can also place your JavaScript in files that are external
    to your HTML.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，就像 CSS 一样，你也可以把你的 JavaScript 放在外部文件中。
- en: Let’s first get this serious business application into a page, and then after
    we’ve thoroughly tested it, we’ll move the JavaScript out to an external file.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将这个严肃的业务应用程序放到一个页面上，然后在彻底测试后，我们将把 JavaScript 移到外部文件中。
- en: How do I add code to my page? (let me count the ways)
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我如何将代码添加到我的页面？（让我数数这些方法）
- en: 'You already know you can add the `<script>` element with your JavaScript code
    to the `<head>` or `<body>` of your page, but there are a couple of other ways
    to add your code to a page. Let’s check out all the places you can put JavaScript
    (and why you might want to put it one place over another):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道你可以将 `<script>` 元素与你的 JavaScript 代码添加到页面的 `<head>` 或 `<body>` 中，但是还有几种其他方法可以将你的代码添加到页面上。让我们看看可以放置
    JavaScript 的所有位置（以及为什么你可能想要把它放在一个地方而不是另一个地方）：
- en: '![Image](assets/f0034-01.png)![Image](assets/f0034-02.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0034-01.png)![图像](assets/f0034-02.png)'
- en: We’re going to have to separate you two
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们必须把你们分开
- en: Going separate ways hurts, but we know we have to do it. It’s time to take your
    JavaScript and move it into its own file. Here’s how you do that...
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 分开走也许会伤害，但我们知道我们必须这样做。是时候把你的 JavaScript 移到自己的文件中去了。这是你做到这一点的方法...
- en: '![Image](assets/f0035-01.png)![Image](assets/f0036-01.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0035-01.png)![图像](assets/f0036-01.png)'
- en: JavaScript cross
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 交叉
- en: '![Image](assets/f0040-01.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0040-01.png)'
- en: Time to stretch your dendrites with a puzzle to help it all sink in.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候通过一个谜题来拉伸你的树突，以帮助所有这些都深深地印在你的脑海中。
- en: '![Image](assets/f0040-02.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0040-02.png)'
- en: '**ACROSS**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 1\. Variables are used to store these.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 变量用于存储这些。
- en: 4\. Use _____________ to troubleshoot your code.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 使用 __调试器__ 来排除你的代码问题。
- en: 7\. Today’s JavaScript runs a lot ________________ than it used to.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 今天的 JavaScript 运行比以前 __快得多__ 。
- en: 8\. There are 99 _____________ of rootbeer on the wall.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 墙上有 99 瓶 __根啤__ 。
- en: 9\. To link to an external JavaScript file from HTML, you need the _______ attribute
    for your <script> element.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 要从 HTML 链接到外部 JavaScript 文件，你需要 `<script>` 元素的 __src__ 属性。
- en: 10\. Each time through a loop, we evaluate a ______________ expression.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 每次通过循环，我们评估一个 __条件__ 表达式。
- en: 13\. The if/else statement is used to make a ____________.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. if/else 语句用于制作一个 __选择__ 。
- en: 14\. All JavaScript statements end with a ___________.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. 所有 JavaScript 语句都以 __分号__ 结尾。
- en: 16\. You put your JavaScript inside a ______________ element.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 把你的 JavaScript 放在一个 __脚本__ 元素内。
- en: '**DOWN**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**纵向**'
- en: 2\. You can concatenate _______________ together with the + operator.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 你可以使用 + 运算符把 __字符串__ 连接在一起。
- en: 3\. Store values that don’t change in this.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 将不变的值存储在这个 __常量__ 中。
- en: 5\. 3 + 4 is an example of an _____________.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 3 + 4 是一个 __示例__ 。
- en: 6\. JavaScript adds _______________ to your web pages.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. JavaScript 为你的网页添加 __动态功能__ 。
- en: 9\. Each line of JavaScript code is called a _______________.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. JavaScript 代码的每一行称为 __语句__ 。
- en: 10\. To avoid embarrassing naming mistakes, use __________ case.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 为了避免尴尬的命名错误，请使用 __驼峰__ 样式。
- en: 11\. Do things more than once in a JavaScript program with the _________ loop.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 在 JavaScript 程序中多次执行某些操作，使用 __循环__ 。
- en: 12\. JavaScript variable names are _________ sensitive.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. JavaScript 变量名是 __大小写__ 敏感的。
- en: 15\. To declare a variable, use this keyword.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 要声明一个变量，请使用这个关键字。
- en: JavaScript cross Solution
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 交叉 解答
- en: '![Image](assets/f0045-01.png)![Image](assets/f0045-02.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0045-01.png)![图像](assets/f0045-02.png)'
