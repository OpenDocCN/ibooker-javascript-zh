- en: Chapter 4\. Our First GraphQL API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。我们的第一个 GraphQL API
- en: Presumably, if you are reading this, you are a human being. As a human you have
    a number of interests and passions. You also have family members, friends, acquaintances,
    classmates, and colleagues. Those people also have their own social relationships,
    interests, and passions. Some of these relationships and interests overlap, while
    others do not. All together, we each have a connected graph of the people in our
    lives.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 据推测，如果你在阅读这篇文章，你是一个人类。作为一个人类，你有许多兴趣和激情。你还有家庭成员、朋友、熟人、同学和同事。这些人也有他们自己的社交关系、兴趣和激情。有些关系和兴趣是重叠的，而有些则不是。总体来说，我们每个人都有一个连接的生活人物图。
- en: These types of interconnected data are exactly the challenge that GraphQL initially
    set out to solve in API development. By writing a GraphQL API we are able to efficiently
    connect data, which reduces the complexity and number of requests while allowing
    us to serve a client precisely the data they need.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的互连数据正是 GraphQL 最初在 API 开发中要解决的挑战。通过编写一个 GraphQL API，我们能够有效地连接数据，从而减少请求的复杂性和数量，同时允许我们向客户端提供他们确切需要的数据。
- en: Does that all sound like a bit of overkill for a notes application? Perhaps
    it does, but as you’ll see, the tools and techniques provided by the GraphQL JavaScript
    ecosystem both enable and simplify all types of API development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来是否有点过度投入于一个笔记应用程序？也许是这样，但正如您将看到的，GraphQL JavaScript 生态系统提供的工具和技术既能够实现，也能够简化所有类型的
    API 开发。
- en: In this chapter we’ll build a GraphQL API, using the `apollo-server-express`
    package. To do so, we’ll explore fundamental GraphQL topics, write a GraphQL schema,
    develop code to resolve our schema functions, and access our API using the GraphQL
    Playground user interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用`apollo-server-express`包构建一个 GraphQL API。为此，我们将探讨基本的 GraphQL 主题，编写
    GraphQL 模式，开发解析我们模式函数的代码，并使用 GraphQL Playground 用户界面访问我们的 API。
- en: Turning Our Server into an API (Sort Of)
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的服务器转变为一个 API（有点像）
- en: Let’s begin our API development by turning our Express server into a GraphQL
    server using the `apollo-server-express` package. [Apollo Server](https://oreil.ly/1fNt3)
    is an open source GraphQL server library that works with a large number of Node.js
    server frameworks, including Express, Connect, Hapi, and Koa. It enables us to
    serve data as a GraphQL API from a Node.js application and also provides helpful
    tooling such as the GraphQL Playground, a visual helper for working with our API
    in development.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用`apollo-server-express`包将我们的 Express 服务器转变为一个 GraphQL 服务器来开始我们的 API 开发。[Apollo
    Server](https://oreil.ly/1fNt3) 是一个开源的 GraphQL 服务器库，可与大量 Node.js 服务器框架一起使用，包括
    Express、Connect、Hapi 和 Koa。它使我们能够从 Node.js 应用程序中作为 GraphQL API 提供数据，并提供诸如 GraphQL
    Playground 这样的有用工具，用于在开发中使用我们的 API 的可视化帮助工具。
- en: 'To write our API we’ll be modifying the web application code we wrote in the
    previous chapter. Let’s start by including the `apollo-server-express` package.
    Add the following to the top of your *src/index.js* file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写我们的 API，我们将修改我们在上一章中编写的 Web 应用程序代码。让我们首先包含`apollo-server-express`包。将以下内容添加到您的*src/index.js*文件的顶部：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we’ve imported `apollo-server`, we’ll set up a basic GraphQL application.
    GraphQL applications consist of two primary components: a schema of type definitions
    and resolvers, which resolve the queries and mutations performed against the data.
    If that all sounds like nonsense, that’s OK. We’ll implement a “Hello World” API
    response and will further explore these GraphQL topics throughout the development
    of our API.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经导入了`apollo-server`，我们将设置一个基本的 GraphQL 应用程序。GraphQL 应用程序由两个主要组件组成：类型定义的模式和解析器，解析执行针对数据的查询和变异。如果这一切听起来像胡言乱语，没关系。我们将实现一个“Hello
    World”API 响应，并在整个 API 开发过程中进一步探讨这些 GraphQL 主题。
- en: 'To begin, let’s construct a basic schema, which we will store in a variable
    called `typeDefs`. This schema will describe a single `Query` named `hello` that
    will return a string:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们构建一个基本的模式，我们将存储在名为`typeDefs`的变量中。这个模式将描述一个名为`hello`的单个`Query`，它将返回一个字符串：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we’ve set up our schema, we can add a resolver that will return a
    value to the user. This will be a simple function that returns the string “Hello
    world!”:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了我们的模式，我们可以添加一个解析器，以向用户返回一个值。这将是一个简单的函数，返回字符串“Hello world！”：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Lastly, we’ll integrate Apollo Server to serve our GraphQL API. To do so, we’ll
    add some Apollo Server–specific settings and middleware and update our `app.listen`
    code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将集成 Apollo Server 来提供我们的 GraphQL API。为此，我们将添加一些 Apollo Server 特定的设置和中间件，并更新我们的`app.listen`代码：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Putting it all together, our *src/index.js* file should now look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 把所有内容放在一起，我们的 *src/index.js* 文件现在应该如下所示：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you’ve left the `nodemon` process running, you can head straight to your
    browser; otherwise, you must type `npm run dev` within the terminal application
    to start the server. Then visit *http://localhost:4000/api*, where you’ll be greeted
    with the GraphQL Playground ([Figure 4-1](#first-graphql-playground)). This web
    app, which comes bundled with Apollo Server, is one of the great benefits of working
    with GraphQL. From here, you can run GraphQL queries and mutations and see the
    results. You can also click the Schema tab to access automatically created documentation
    for the API.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您保留了 `nodemon` 进程正在运行，您可以直接转到您的浏览器；否则，您必须在终端应用程序中键入 `npm run dev` 来启动服务器。然后访问
    *http://localhost:4000/api*，您将会看到 GraphQL Playground（见[图 4-1](#first-graphql-playground)）。这个与
    Apollo Server 捆绑在一起的 Web 应用程序是使用 GraphQL 的一个巨大好处。从这里，您可以运行 GraphQL 查询和变异，并查看结果。您还可以点击“Schema”选项卡访问自动生成的
    API 文档。
- en: '![A screenshot of the GraphQL Playground](assets/jsev_0401.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![GraphQL Playground 的屏幕截图](assets/jsev_0401.png)'
- en: Figure 4-1\. The GraphQL Playground
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. GraphQL Playground
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: GraphQL Playground has a dark colored default syntax theme. Throughout the book,
    I’ll be using the “light” theme for its higher contrast. This is configurable
    in GraphQL Playground’s settings, which can be accessed by clicking the gear icon.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL Playground 具有深色默认语法主题。在本书中，我将使用“亮”主题，因为它具有更高的对比度。这可以在 GraphQL Playground
    的设置中配置，通过点击齿轮图标即可访问设置。
- en: 'We can now write our query against our GraphQL API. To do so, type the following
    into the GraphQL Playground:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以针对我们的 GraphQL API 编写查询。为此，请在 GraphQL Playground 中键入以下内容：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you click the Play button, the query should return the following ([Figure 4-2](#hello_query)):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击“运行”按钮时，查询应返回以下结果（见[图 4-2](#hello_query)）：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![The hello query in the GraphQL Playground](assets/jsev_0402.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![GraphQL Playground 中的 hello 查询](assets/jsev_0402.png)'
- en: Figure 4-2\. The hello query
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. hello 查询
- en: And that’s it! We now have a working GraphQL API that we’ve accessed via the
    GraphQL Playground. Our API takes a query of `hello` and returns the string `Hello
    world!`. More importantly, we now have the structure in place to build a fully
    featured API.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们有了一个可以通过 GraphQL Playground 访问的工作中的 GraphQL API。我们的 API 接受一个名为`hello`的查询并返回字符串`Hello
    world!`。更重要的是，我们现在已经有了建立全功能 API 的结构。
- en: GraphQL Basics
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphQL 基础知识
- en: In the previous section we dove right in and developed our first API, but let’s
    take a few moments to step back and look at the different pieces of a GraphQL
    API. The two primary building blocks of a GraphQL API are *schemas* and *resolvers*.
    By understanding these two components, you can apply them more effectively to
    your API design and development.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们立即开发了我们的第一个 API，但是让我们花几分钟回顾一下 GraphQL API 的不同部分。GraphQL API 的两个主要构建块是*架构*和*解析器*。通过理解这两个组件，您可以更有效地应用它们到您的
    API 设计和开发中。
- en: Schemas
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: A schema is a written representation of our data and interactions. By requiring
    a schema, GraphQL enforces a strict plan for our API. This is because your API
    can only return data and perform interactions that are defined within the schema.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 架构是我们数据和交互的书面表示。通过需要架构，GraphQL 强制执行了 API 的严格计划。这是因为您的 API 只能返回在架构中定义的数据并执行定义的交互。
- en: 'The fundamental component of GraphQL schemas are object types. In the previous
    example we created a GraphQL object type of `Query` with a field of `hello`, which
    returned a scalar type of `String`. GraphQL contains five built-in scalar types:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 架构的基本组件是对象类型。在前面的例子中，我们创建了一个名为`Query`的 GraphQL 对象类型，其包含一个名为`hello`的字段，返回一个标量类型`String`。GraphQL
    包含五种内置标量类型：
- en: '`String`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`'
- en: A string with UTF-8 character encoding
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UTF-8字符编码的字符串
- en: '`Boolean`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Boolean`'
- en: A true or false value
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真或假的值
- en: '`Int`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Int`'
- en: A 32-bit integer
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个32位整数
- en: '`Float`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Float`'
- en: A floating-point value
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个浮点数值
- en: '`ID`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`ID`'
- en: A unique identifier
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个唯一标识符
- en: 'With these basic components we can construct a schema for an API. We do so
    by first defining the type. Let’s imagine that we’re creating an API for a pizza
    menu. In doing so, we might define a GraphQL schema type of `Pizza` like so:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基本组件，我们可以为 API 构建一个架构。我们首先通过定义类型来做到这一点。让我们想象我们正在为一个披萨菜单创建一个 API。这样做时，我们可以定义一个名为`Pizza`的
    GraphQL 架构类型，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, each pizza has a unique ID, a size (such as small, medium, or large),
    a number of slices, and optional toppings. The `Pizza` schema might look something
    like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个披萨都有一个唯一的 ID，一个尺寸（如小、中或大）、一定数量的片数和可选的配料。`Pizza`架构可能看起来像这样：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this schema, some field values are required (such as ID, size, and slices),
    while others may be optional (such as toppings). We can express that a field must
    contain a value by using an exclamation mark. Let’s update our schema to represent
    the required values:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式中，一些字段值是必需的（如 ID、size 和 slices），而其他字段可能是可选的（如 toppings）。我们可以通过使用感叹号来表示字段必须包含一个值。让我们更新我们的模式以表示这些必需值：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this book, we’ll be writing a basic schema, which will enable us to perform
    the vast majority of operations found in a common API. If you’d like to explore
    all of the GraphQL schema options, I’d encourage you to read the [GraphQL schema
    documentation](https://oreil.ly/DPT8C).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将编写一个基本的模式，这将使我们能够执行常见 API 中找到的绝大多数操作。如果您想探索所有 GraphQL 模式选项，我建议您阅读 [GraphQL
    模式文档](https://oreil.ly/DPT8C)。
- en: Resolvers
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析器
- en: 'The second piece of our GraphQL API will be resolvers. Resolvers perform exactly
    the action their name implies; they *resolve* the data that the API user has requested.
    We will write these resolvers by first defining them in our schema and then implementing
    the logic within our JavaScript code. Our API will contain two types of resolvers:
    queries and mutations.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 GraphQL API 的第二部分是解析器（resolvers）。解析器正如它们的名称所示执行的动作一样；它们*解析*了 API 用户请求的数据。我们将首先在模式中定义这些解析器，然后在我们的
    JavaScript 代码中实现逻辑。我们的 API 将包含两种类型的解析器：查询（queries）和变更（mutations）。
- en: Queries
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询
- en: A query requests specific data from an API, in its desired format. In our hypothetical
    pizza API we may write a query that will return a full list of pizzas on the menu
    and another that will return detailed information about a single pizza. The query
    will then return an object, containing the data that the API user has requested.
    A query never modifies the data, only accesses it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 查询从 API 中请求特定数据，以其所需格式呈现。在我们的虚拟比萨 API 中，我们可以编写一个查询，它将返回菜单上所有比萨的完整列表，以及另一个将返回单个比萨的详细信息。然后查询将返回一个包含
    API 用户请求的数据的对象。查询永远不会修改数据，只是访问它。
- en: Mutations
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变更
- en: We use a mutation when we want to modify the data in our API. In our pizza example,
    we may write a mutation that changes the toppings for a given pizza and another
    that allows us to adjust the number of slices. Similar to a query, a mutation
    is also expected to return a result in the form of an object, typically the end
    result of the performed action.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要修改我们的 API 中的数据时，我们使用变更（mutation）。在我们的比萨示例中，我们可以编写一个变更，用于更改给定比萨的配料，另一个允许我们调整片数。类似于查询，变更也期望返回一个对象形式的结果，通常是执行操作的最终结果。
- en: Adapting Our API
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整我们的 API
- en: Now that you have a good understanding of the components of GraphQL, let’s adapt
    our initial API code for our notes application. To begin, we’ll write some code
    to read and create notes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对 GraphQL 组件有了很好的理解，让我们为我们的笔记应用程序调整我们最初的 API 代码。首先，我们将编写一些代码来读取和创建笔记。
- en: 'The first thing we’ll need is a little bit of data for our API to work with.
    Let’s create an array of “note” objects, which we’ll use as the basic data served
    by our API. As our project evolves, we’ll replace this in-memory data representation
    with a database. For now, we will store our data in a variable named `notes`.
    Each note in the array will be an object with three properties, `id`, `content`,
    and `author`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第一件事是一点数据让我们的 API 工作。让我们创建一个“note”对象数组，这将作为我们的 API 提供的基本数据。随着项目的发展，我们将用数据库替换这个内存数据表示。目前，我们将数据存储在一个名为
    `notes` 的变量中。数组中的每个笔记都将是一个带有三个属性 `id`、`content` 和 `author` 的对象。
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have some data, we’ll adapt our GraphQL API to work with it. Let’s
    begin by focusing on our schema. Our schema is GraphQL’s representation of our
    data and how it will be interacted with. We know that we will have notes, which
    will be queried and mutated. These notes will, for now, contain an ID, content,
    and an author field. Let’s create a corresponding note type within our `typeDefs`
    GraphQL schema. This will represent the properties of a note within our API:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些数据，我们将适应我们的 GraphQL API 使其与之一起工作。让我们首先关注我们的模式。我们的模式是 GraphQL 表示我们的数据及其交互方式。我们知道我们将有笔记，这些笔记将被查询和变更。目前，这些笔记将包含一个
    ID、内容和作者字段。让我们在我们的 `typeDefs` GraphQL 模式中创建一个相应的笔记类型。这将表示 API 中笔记的属性：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let’s add a query that will allow us to retrieve the list of all notes.
    Let’s update the `Query` type to include a `notes` query, which will return the
    array of note objects:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个查询，允许我们检索所有笔记的列表。让我们更新 `Query` 类型以包含一个 `notes` 查询，它将返回笔记对象数组：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we can update our resolver code to perform the work of returning the array
    of data. Let’s update our `Query` code to include the following `notes` resolver,
    which returns the raw data object:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更新我们的解析器代码，执行返回数据数组的操作。让我们更新我们的`Query`代码，包含以下`notes`解析器，返回原始数据对象：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we now go to the GraphQL playground, running at *http://localhost:4000/api*,
    we can test the `notes` query. To do so, type the following query:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在进入运行在*http://localhost:4000/api*的GraphQL playground，我们可以测试`notes`查询。为此，请输入以下查询：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then, when you click the Play button, you should see a `data` object returned,
    which contains the data array ([Figure 4-3](#first-notes-query)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当您点击播放按钮时，您应该看到返回的包含数据数组的`data`对象（[图 4-3](#first-notes-query)）。
- en: '![The notes query in the GraphQL Playground](assets/jsev_0403.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![在GraphQL Playground中的备注查询](assets/jsev_0403.png)'
- en: Figure 4-3\. The notes query
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 备注查询
- en: To try out one of the coolest aspects of GraphQL, we can remove any of our requested
    fields, such as `id` or `author`. When we do so, the API returns precisely the
    data that we’ve requested. This allows the client that consumes the data to control
    the amount of data sent within each request and limit that data to exactly what
    is required ([Figure 4-4](#first-notes-query2)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试GraphQL最酷的一个方面，我们可以移除我们请求的任何字段，比如`id`或`author`。这样做时，API会精确返回我们请求的数据。这使得消费数据的客户端能够控制每个请求发送的数据量，并将数据限制在确切所需的范围内（[图 4-4](#first-notes-query2)）。
- en: '![A note query with only content data requested in the GraphQL Playground](assets/jsev_0404.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![在GraphQL Playground中请求仅包含内容数据的一个备注查询](assets/jsev_0404.png)'
- en: Figure 4-4\. A notes query with only content data requested
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. 请求仅包含内容数据的备注查询
- en: 'Now that we can query our full list of notes, let’s write some code that will
    allow us to query for a single note. You can imagine the usefulness of this from
    a user interface perspective, for displaying a view that contains a single, specific
    note. To do so, we’ll want to request a note with a specific `id` value. This
    will require us to use an *argument* in our GraphQL schema. An argument allows
    the API consumer to pass specific values to the resolver function, providing the
    necessary information for it to resolve. Let’s add a `note` query, which will
    take an argument of `id`, with the type `ID`. We’ll update our `Query` object
    within our `typeDefs` to the following, which includes the new `note` query:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以查询我们的全部备注列表，让我们编写一些代码，允许我们查询单个备注。从用户界面的角度来看，显示包含单个特定备注的视图非常有用。为此，我们将要请求具有特定`id`值的备注。这将要求我们在我们的GraphQL模式中使用一个*参数*。参数允许API消费者向解析器函数传递特定值，提供解析所需的必要信息。让我们添加一个`note`查询，它将以`id`为参数，类型为`ID`。我们将更新我们的`typeDefs`中的`Query`对象如下，包括新的`note`查询：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With our schema updated, we can write a query resolver to return the requested
    note. To do this, we’ll need to be able to read the API user’s argument values.
    Helpfully, Apollo Server passes the following useful parameters to our resolver
    functions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 更新了我们的模式后，我们可以编写一个查询解析器来返回所请求的备注。为此，我们需要能够读取API用户的参数值。幸运的是，Apollo Server将以下有用的参数传递给我们的解析器函数：
- en: '`parent`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`parent`'
- en: The result of the parent query, which is useful when nesting queries.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 父查询的结果，在嵌套查询时非常有用。
- en: '`args`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`args`'
- en: These are the arguments passed by the user in the query.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用户在查询中传递的参数。
- en: '`context`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`'
- en: Information passed along from the server application to the resolver functions.
    This could include things such as the current user or database information.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器应用程序传递到解析器函数的信息。这可能包括当前用户或数据库信息等内容。
- en: '`info`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`info`'
- en: Information about the query itself.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 查询本身的信息。
- en: We’ll be exploring these further as needed within our code. If you’re curious,
    you can learn more about these parameters in [Apollo Server’s documentation](https://oreil.ly/l6mL4).
    For now, we’ll need only the information contained within the second parameter,
    `args`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中根据需要进一步探索这些内容。如果你好奇，你可以在[Apollo Server文档](https://oreil.ly/l6mL4)中了解更多关于这些参数的信息。目前，我们只需要第二个参数`args`中包含的信息。
- en: 'The `note` query will take the note `id` as an argument and find it within
    our array of `note` objects. Add the following to the query resolver code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`note`查询将接受备注`id`作为参数，并在我们的`note`对象数组中查找它。将以下内容添加到查询解析器代码中：'
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The resolver code should now look as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在解析器代码应如下所示：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To run our query, let’s go back to our web browser and visit the GraphQL Playground
    at *http://localhost:4000/api*. We can now query a note with a specific `id` as
    follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行我们的查询，让我们回到我们的网页浏览器，并访问 GraphQL Playground，网址是 *http://localhost:4000/api*。我们现在可以查询具有特定
    `id` 的笔记，如下所示：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When you run this query, you should receive the results of a note with the requested
    `id` value. If you attempt to query for a note that doesn’t exist, you should
    receive a result with a value of `null`. To test this, try changing the `id` value
    to return different results.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此查询时，您应该收到具有请求的 `id` 值的笔记结果。如果尝试查询不存在的笔记，则应收到值为 `null` 的结果。要测试这一点，请尝试更改
    `id` 值以返回不同的结果。
- en: 'Let’s wrap up our initial API code by introducing the ability to create a new
    note, using a GraphQL mutation. In that mutation, the user will pass in the note’s
    content. For now, we’ll hardcode the author of the note. Let’s begin by updating
    our `typeDefs` schema with a `Mutation` type, which we will call `newNote`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过引入使用 GraphQL 变更操作创建新笔记的能力来完成我们的初始 API 代码。在该变更操作中，用户将传递笔记的内容。目前，我们将硬编码笔记的作者。让我们从更新我们的
    `typeDefs` 模式开始，添加一个名为 `newNote` 的 `Mutation` 类型：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We’ll now write a mutation resolver, which will take in the note content as
    an argument, store the note as an object, and add it in memory to our `notes`
    array. To do this, we’ll add a `Mutation` object to our resolvers. Within the
    `Mutation` object, we’ll add a function called `newNote`, with `parent` and `args`
    parameters. Within this function, we’ll take the argument `content` and create
    an object with `id`, `content`, and `author` keys. As you may have noticed, this
    matches the current schema of a note. We will then push this object to our `notes`
    array and return the object. Returning the object allows the GraphQL mutation
    to receive a response in the intended format. Go ahead and write this code as
    follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将编写一个变更解析器，它将笔记内容作为参数接收，将笔记存储为一个对象，并将其添加到我们的 `notes` 数组中。为此，我们将在解析器中添加一个名为
    `Mutation` 的对象。在 `Mutation` 对象中，我们将添加一个名为 `newNote` 的函数，带有 `parent` 和 `args` 参数。在这个函数中，我们将获取
    `content` 参数，并创建一个包含 `id`、`content` 和 `author` 键的对象。正如你所注意到的，这与笔记的当前模式匹配。然后，我们将这个对象推送到我们的
    `notes` 数组中，并返回这个对象。返回对象允许 GraphQL 变更以预期格式接收响应。请继续按以下方式编写此代码：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our *src/index.js* file will now read like so:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 *src/index.js* 文件现在如下所示：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With the schema and resolver updated to accept a mutation, let’s try it out
    in GraphQL Playground at *http://localhost:4000/api*. In the playground, click
    the `+` sign to create a new tab and write the mutation as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 随着模式和解析器的更新以接受变更操作，让我们在 GraphQL Playground 中试验一下，网址是 *http://localhost:4000/api*。在
    playground 中，点击 `+` 号以创建一个新的标签页，并按以下方式编写变更操作：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When you click the Play button, you should receive a response containing the
    content, ID, and author of our new note. You can also see that the mutation worked
    by rerunning the `notes` query. To do so, either switch back to the GraphQL Playground
    tab containing that query, or type the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击播放按钮时，您应该收到包含我们新笔记的内容、ID 和作者的响应。您还可以通过重新运行 `notes` 查询来查看变更操作是否成功。要这样做，要么切换回包含该查询的
    GraphQL Playground 标签页，要么输入以下内容：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When this query runs, you should now see four notes, including the recently
    added one.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当此查询运行时，您现在应该看到包括最近添加的笔记在内的四个笔记。
- en: Data Storage
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据存储
- en: We are currently storing our data in memory. This means that anytime we restart
    our server, we will lose that data. We’ll be persisting our data using a database
    in the next chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前将我们的数据存储在内存中。这意味着每当我们重新启动服务器时，我们将丢失这些数据。在下一章中，我们将使用数据库来持久化我们的数据。
- en: We’ve now successfully implemented our query and mutation resolvers and tested
    them within the GraphQL Playground user interface.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在成功地实现了我们的查询和变更解析器，并在 GraphQL Playground 用户界面中对其进行了测试。
- en: Conclusion
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we’ve successfully built a GraphQL API, using the `apollo-server-express`
    module. We can now run queries and mutations against an in-memory data object.
    This setup provides us a solid foundation on which to build any API. In the next
    chapter we’ll explore the ability to persist data by using a database.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功地构建了一个 GraphQL API，使用了 `apollo-server-express` 模块。我们现在可以针对一个内存数据对象运行查询和变更操作。这种设置为我们构建任何
    API 提供了坚实的基础。在下一章中，我们将探讨通过使用数据库来持久化数据的能力。
