- en: Chapter 20\. Electron Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章 电子部署
- en: The first time I taught a programming course, I came up with the clever idea
    of introducing the course topics through a text adventure game. Students would
    come into the lab, sit down at a desk, and walk through a series of hilarious
    (to me) prompts and instructions. This was met with mixed reactions, not because
    of the jokes (well, maybe because of the jokes), but because students had not
    interacted with a “program” in this way. The students were accustomed to a GUI
    (graphic user interface), and interacting with a program through text prompts
    felt *wrong* to many of them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次教编程课时，想出了一个聪明的主意，通过一个文本冒险游戏介绍课程内容。学生们会进入实验室，坐在桌子前，按照一系列我认为很搞笑的提示和说明进行操作。这受到了不同的反响，不是因为笑话（也许也有笑话的原因），而是因为学生们以前没有以这种方式与“程序”进行互动。学生们习惯于图形用户界面（GUI），通过文本提示与程序进行互动对他们来说感觉*不对*。
- en: Presently, to run our application we need to type a prompt in our terminal application
    to start the Electron process. In this chapter, we’ll look at how we can bundle
    our application for distribution. To achieve this, we’ll be using the popular
    [Electron Builder](https://www.electron.build) library, which will help us package
    and distribute our application to our users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了运行我们的应用程序，我们需要在终端应用程序中键入一个提示符来启动 Electron 进程。在本章中，我们将看看如何将我们的应用程序打包以进行分发。为了实现这一目标，我们将使用流行的[Electron
    Builder](https://www.electron.build)库，该库将帮助我们将应用程序打包并分发给用户。
- en: Electron Builder
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Electron Builder
- en: 'Electron Builder is a library designed to simplify the packaging and distribution
    of Electron and [Proton Native](https://proton-native.js.org) applications. While
    there are other packaging solutions, Electron Builder simplifies a number of pain
    points associated with application distribution, including:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Electron Builder 是一个旨在简化 Electron 和[Proton Native](https://proton-native.js.org)
    应用程序打包和分发的库。虽然有其他打包解决方案，但 Electron Builder 简化了与应用程序分发相关的许多痛点，包括：
- en: Code signing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码签名
- en: Multiplatform distribution targets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多平台分发目标
- en: Autoupdates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动更新
- en: Distribution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发
- en: It offers a great balance between flexibility and features. Additionally, though
    we won’t be making use of them, there are several Electron Builder boilerplates
    for [Webpack](https://oreil.ly/faYta), [React](https://oreil.ly/qli_e), [Vue](https://oreil.ly/9QY2W),
    and [Vanilla JavaScript](https://oreil.ly/uJo7e).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它在灵活性和功能之间提供了很好的平衡。此外，虽然我们不会使用它们，但还有几个 Electron Builder 的样板文件适用于[Webpack](https://oreil.ly/faYta)、[React](https://oreil.ly/qli_e)、[Vue](https://oreil.ly/9QY2W)和[纯
    JavaScript](https://oreil.ly/uJo7e)。
- en: Electron Builder Versus Electron Forge
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Electron Builder 与 Electron Forge 的比较
- en: '[Electron Forge](https://www.electronforge.io) is another popular library that
    offers many similar features to Electron Builder. A primary advantage of Electron
    Forge is that it is based on official Electron libraries, while Electron Builder
    is an independent build tool. This means that users benefit from the growth of
    the Electron ecosystem. The downside is that Electron Forge is based on a much
    more rigid application setup. For the purposes of this book, Electron Builder
    provides the right balance of features and learning opportunities, but I encourage
    you to take a close look at Electron Forge as well.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Electron Forge](https://www.electronforge.io) 是另一个流行的库，提供许多与 Electron Builder
    类似的功能。Electron Forge 的一个主要优点是它基于官方 Electron 库，而 Electron Builder 是一个独立的构建工具。这意味着用户可以从
    Electron 生态系统的增长中受益。缺点是 Electron Forge 基于更加严格的应用程序设置。对于本书的目的，Electron Builder
    提供了功能和学习机会的良好平衡，但我鼓励你也仔细研究 Electron Forge。'
- en: Configuring Electron Builder
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Electron Builder
- en: 'All of the configuration of Electron Builder will take place in our application’s
    *package.json* file. In that file we can see that `electron-builder` is already
    listed as a development dependency. Within the *package.json* file we can include
    a key, called `"build"`, which will contain all of the instructions to Electron
    Builder for packaging our app. To begin, we will include two fields:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Electron Builder 的配置都将在我们应用程序的 *package.json* 文件中进行。在该文件中，我们可以看到 `electron-builder`
    已列为开发依赖项。在 *package.json* 文件中，我们可以包含一个名为 `"build"` 的键，其中将包含所有给 Electron Builder
    的打包应用程序的指令。首先，我们将包括两个字段：
- en: '`appId`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`appId`'
- en: This is a unique identifier for our application. macOS calls the concept [`CFBundle`​`Identifier`](https://oreil.ly/OOg1O)
    and Windows terms it the [`AppUser`​`ModelID`](https://oreil.ly/mr9si). The standard
    is to use the reverse DNS format. For example, if we run a company with a domain
    of *jseverywhere.io* and build an application named Notedly, the ID would be `io.jseverywhere.notedly`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们应用程序的唯一标识符。macOS 称之为[`CFBundle`​`Identifier`](https://oreil.ly/OOg1O)，Windows
    称之为[`AppUser`​`ModelID`](https://oreil.ly/mr9si)。标准是使用反向 DNS 格式。例如，如果我们经营一个域名为*jseverywhere.io*的公司，并构建一个名为
    Notedly 的应用程序，则该 ID 将是`io.jseverywhere.notedly`。
- en: '`productName`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`productName`'
- en: This is the human-readable version of our product’s name, as the `package.json`
    `name` field requires hyphenated or single-word names.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们产品名称的人类可读版本，因为`package.json`的`name`字段需要连字符或单词名称。
- en: 'All together, our beginning build configuration will appear as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在一起，我们的初始构建配置将如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Electron Builder provides us with many configuration options, several of which
    we’ll be exploring throughout this chapter. For the complete list, visit the [Electron
    Builder docs](https://oreil.ly/ESAx-).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Electron Builder 为我们提供了许多配置选项，我们将在本章中探讨其中的几个。完整列表，请访问[Electron Builder 文档](https://oreil.ly/ESAx-)。
- en: Build for Our Current Platform
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们当前的平台构建
- en: With our minimal configuration in place, we can create our first application
    build. By default, Electron Builder will produce a build for the system we are
    developing on. For example, since I am writing this on a MacBook, my build will
    default to macOS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成最小配置后，我们可以创建我们的第一个应用程序构建。默认情况下，Electron Builder 将生成适合我们开发的系统的构建。例如，我现在正在
    MacBook 上写作，我的构建将默认为 macOS。
- en: Let’s first add two scripts to our *package.json* file, which will be responsible
    for application builds. First, a `pack` script will generate a package directory,
    without fully packaging the app. This can be useful for testing purposes. Second,
    a `dist` script will package the application in distributable format, such as
    a macOS DMG, Windows installer, or DEB package.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的*package.json*文件中添加两个脚本，这些脚本将负责应用程序的构建。首先，`pack`脚本将生成一个包目录，而不会完全打包应用程序。这对于测试目的非常有用。其次，`dist`脚本将以可分发格式打包应用程序，例如
    macOS DMG、Windows 安装程序或 DEB 包。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this change, you can run `npm run dist` in your terminal application, which
    will package the application in the project’s *dist/* directory. Navigating to
    the *dist/* directory, you can see that Electron Builder has packaged the application
    for distribution for your operating system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些改变，您可以在终端应用程序中运行`npm run dist`，这将在项目的*dist/*目录中打包应用程序。导航到*dist/*目录，您可以看到
    Electron Builder 已经将应用程序打包为适合您操作系统的分发版本。
- en: App Icons
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序图标
- en: One thing that you have likely noticed is that our application is using the
    default Electron app icon. This is fine for local development, but for a production
    application we will want to use our own branding. In our project’s */resources*
    folder, I have included some application icons for both macOS and Windows. To
    generate these icons from a PNG file, I used the [iConvert Icons application](https://iconverticons.com),
    which is available for both macOS and Windows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到的一件事是，我们的应用程序正在使用默认的 Electron 应用程序图标。这在本地开发中是可以的，但对于生产应用程序，我们希望使用自己的品牌。在我们项目的*/resources*文件夹中，我包含了一些适用于
    macOS 和 Windows 的应用程序图标。为了从 PNG 文件生成这些图标，我使用了[iConvert Icons 应用程序](https://iconverticons.com)，它适用于
    macOS 和 Windows。
- en: 'In our */resources* folder you will see the following files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的*/resources*文件夹中，您将看到以下文件：
- en: '*icon.icns*, the macOS application icon'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*icon.icns*，macOS 应用程序图标'
- en: '*icon.ico*, the Windows application icon'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*icon.ico*，Windows 应用程序图标'
- en: An *icons* directory with a series of different-sized *.png* files, used by
    Linux
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含一系列不同大小的*.png*文件的*icons*目录，供 Linux 使用
- en: Optionally, we could also include background images for the macOS DMG by adding
    icons with the names of *background.png* and *background@2x.png*, for retina screens.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们还可以通过添加具有*background.png*和*background@2x.png*名称的图标来包含 macOS DMG 的背景图像，适用于视网膜屏幕。
- en: 'Now within our *package.json* file, we update the `build` object to specify
    the name of the build resource directory:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的*package.json*文件中，我们更新`build`对象以指定构建资源目录的名称：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, when we build the application, Electron Builder will package it with our
    custom application icons (see [Figure 20-1](#dock_icon)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们构建应用程序时，Electron Builder 将使用我们自定义的应用程序图标打包它（见[图20-1](#dock_icon)）。
- en: '![A screenshot of the macOS dock icon](assets/jsev_2001.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![macOS dock 图标的屏幕截图](assets/jsev_2001.png)'
- en: Figure 20-1\. Our custom application icon in the macOS dock
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-1\. 我们在 macOS dock 中的自定义应用程序图标
- en: Building for Multiple Platforms
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向多个平台构建
- en: Currently, we’re only building our application for the operating system that
    matches our development platform. One of the great advantages of Electron as a
    platform is that it allows us to use the same code to target multiple platforms,
    by updating our `dist` script. To achieve this, Electron Builder makes use of
    the free and open source [`electron-build-service`](https://oreil.ly/IEIfW). We’ll
    be using the public instance of this service, but it is possible to self-host
    it for organizations seeking additional security and privacy.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只为与我们开发平台匹配的操作系统构建我们的应用程序。作为平台的一个巨大优势之一，Electron 允许我们使用相同的代码来针对多个平台进行目标设置，通过更新我们的
    `dist` 脚本来实现这一点。为了实现这一点，Electron Builder 使用了自由开源的 [`electron-build-service`](https://oreil.ly/IEIfW)。我们将使用此服务的公共实例，但组织可以自行托管它，以寻求额外的安全性和隐私。
- en: 'In our `package.json` update the `dist` script to:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `package.json` 中更新 `dist` 脚本为：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will result in a build that targets macOS, Windows, and Linux. From here
    we can distribute our application by uploading it as a release to GitHub or anywhere
    that we can distribute files, such as Amazon S3 or our web server.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致一个面向 macOS、Windows 和 Linux 的构建。从这里，我们可以通过将其作为 GitHub 的发布来分发我们的应用程序，或者通过任何可以分发文件的地方，如
    Amazon S3 或我们的 Web 服务器。
- en: Code Signing
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码签名
- en: Both macOS and Windows include the concept of *code signing*. Code signing is
    a boost for the security and trust of users, as it helps signify the trustworthiness
    of the app. I won’t be walking through the code-signing process, as it is operating
    system specific and comes at a cost to developers. The Electron Builder documentation
    offers a [comprehensive article](https://oreil.ly/g6wEz) on code signing for various
    platforms. Additionally, the [Electron documentation](https://oreil.ly/Yb4JF)
    offers several resources and links. If you are building a production application,
    I encourage you to further research the code-signing options for macOS and Windows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 和 Windows 都包括 *代码签名* 的概念。代码签名有助于提升应用程序的安全性和用户的信任度，因为它有助于表明应用程序的可信度。我不会详细介绍代码签名过程，因为它是特定于操作系统的，并且对开发者来说是有成本的。Electron
    Builder 文档提供了一篇关于各种平台代码签名的[全面文章](https://oreil.ly/g6wEz)。此外，[Electron 文档](https://oreil.ly/Yb4JF)提供了多个资源和链接。如果您正在构建生产应用程序，我鼓励您进一步研究
    macOS 和 Windows 的代码签名选项。
- en: Conclusion
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve covered the tip of the iceberg for deploying an Electron application.
    In this chapter we used Electron Builder to build our applications. We can then
    easily upload and distribute them through any web host. Once we have outgrown
    these needs, we can use Electron Builder to integrate builds into a continuous
    delivery pipeline; automatically push releases to GitHub, S3, or other distribution
    platforms; and integrate automatic updates into the application. If you are interested
    in further exploring the topics of Electron development and app distribution,
    these are fantastic next steps to take.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅仅涉及了部署 Electron 应用程序的冰山一角。在本章中，我们使用 Electron Builder 来构建我们的应用程序。然后，我们可以轻松地通过任何
    Web 主机上传和分发它们。一旦我们超越了这些需求，我们可以使用 Electron Builder 将构建集成到持续交付流水线中；自动将发布推送到 GitHub、S3
    或其他分发平台；并将自动更新集成到应用程序中。如果您有兴趣进一步探索 Electron 开发和应用分发的主题，这些都是绝佳的下一步。
