- en: Chapter 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章\. 引言
- en: So, you decided to buy a book about TypeScript. Why?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你决定买一本关于TypeScript的书。为什么呢？
- en: Maybe it’s because you’re sick of those weird `cannot read property blah of`
    `undefined` JavaScript errors. Or maybe you heard TypeScript can help your code
    scale better, and wanted to see what all the fuss is about. Or you’re a C# person,
    and have been thinking of trying out this whole JavaScript thing. Or you’re a
    functional programmer, and decided it was time to take your chops to the next
    level. Or your boss was so fed up with your code causing production issues that
    they gave you this book as a Christmas present (stop me if I’m getting warm).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 或许是因为你受够了那些奇怪的`cannot read property blah of` `undefined` JavaScript错误。或者你听说过TypeScript能帮助你的代码更好地扩展，并想看看到底有什么了不起的地方。或者你是C#开发者，一直在考虑尝试一下这整个JavaScript的事情。或者你是函数式编程者，决定是时候把自己的技能提升到更高的水平。或者你的老板对你的代码在生产环境中引起问题感到非常厌烦，所以他们把这本书作为圣诞礼物送给了你（如果我说得不对，请告诉我）。
- en: Whatever your reasons are, what you’ve heard is true. TypeScript is the language
    that will power the next generation of web apps, mobile apps, NodeJS projects,
    and Internet of Things (IoT) devices. It will make your programs safer by checking
    for common mistakes, serve as documentation for yourself and future engineers,
    make refactoring painless, and make, like, half of your unit tests unnecessary
    (“What unit tests?”). TypeScript will double your productivity as a programmer,
    and it will land you a date with that cute barista across the street.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的理由是什么，你听到的都是真的。TypeScript是下一代Web应用程序、移动应用程序、NodeJS项目和物联网（IoT）设备的核心语言。它通过检查常见的错误使你的程序更加安全，为你自己和未来的工程师提供文档，使重构变得轻松，并使得，像，你一半的单元测试变得不必要（“什么是单元测试？”）。TypeScript将使你作为程序员的生产力翻倍，并让你和对面街上那个可爱的咖啡师有个约会。
- en: 'But before you go rushing across the street, let’s unpack all of that a little
    bit, starting with this: what exactly do I mean when I say “safer”? What I am
    talking about, of course, is *type safety*.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但在你匆忙穿过马路之前，让我们详细分析一下，首先从这里开始：当我说“更安全”时，我到底是什么意思？当然，我说的是*类型安全*。
- en: 'Here are a few examples of things that are invalid:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些无效的例子：
- en: Multiplying a number and a list
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个数字和一个列表相乘
- en: Calling a function with a list of strings when it actually needs a list of objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当实际需要一个对象列表时，却用一个字符串列表调用一个函数
- en: Calling a method on an object when that method doesn’t actually exist on that
    object
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在一个对象上调用一个方法，而该方法实际上并不存在于该对象上时
- en: Importing a module that was recently moved
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入最近移动的模块
- en: 'There are some programming languages that try to make the most of mistakes
    like these. They try to figure out what you really meant when you did something
    invalid, because hey, you do what you can, right? Take JavaScript, for example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有些编程语言试图充分利用这些错误。它们试图弄清楚当你做一些无效操作时，你实际上想做什么，因为嘿，你尽力而为，对吧？拿JavaScript来说：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that instead of throwing exceptions when you try to do things that are
    obviously invalid, JavaScript tries to make the best of it and avoids exceptions
    whenever it can. Is JavaScript being helpful? Certainly. Does it make it easier
    for you to catch bugs quickly? Probably not.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，JavaScript不会在尝试显然无效的操作时抛出异常，而是尽力做到最好，尽量避免异常。JavaScript这样做是有帮助的吗？当然。它能让你快速捕捉到bug吗？可能不会。
- en: 'Now imagine if JavaScript threw more exceptions instead of quietly making the
    best of what we gave it. We might get feedback like this instead:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，如果JavaScript抛出更多的异常，而不是悄悄地做到最好。我们可能会得到这样的反馈：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Don’t get me wrong: trying to fix our mistakes for us is a neat feature for
    a programming language to have (if only it worked for more than just programs!).
    But for JavaScript, this feature creates a disconnect between when you make a
    mistake in your code, and when you *find out* that you made a mistake in your
    code. Often, that means that the first time you hear about your mistake will be
    from someone else.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误会我的意思：为我们修复错误是一个很棒的编程语言功能（如果它可以用于更多的东西就好了！）。但对于JavaScript来说，这个特性会导致你在编写代码时犯了一个错误，而*发现*这个错误的时间有所延迟。通常情况下，你第一次听说自己的错误是从别人那里听到的。
- en: 'So here’s a question: when exactly does JavaScript tell you that you made a
    mistake?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里有一个问题：JavaScript究竟在什么时候告诉你你犯了一个错误呢？
- en: 'Right: when you actually *run* your program. Your program might get run when
    you test it in a browser, or when a user visits your website, or when you run
    a unit test. If you’re disciplined and write plenty of unit tests and end-to-end
    tests, smoke test your code before pushing it, and test it internally for a while
    before shipping it to users, you will hopefully find out about your error before
    your users do. But what if you don’t?'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Right：当你实际*运行*你的程序时。你的程序可能会在你在浏览器中测试它时运行，或者当用户访问你的网站时运行，或者当你运行单元测试时运行。如果你很有纪律性地编写大量的单元测试和端到端测试，在推送代码之前进行冒烟测试，并在向用户发布之前在内部进行测试，你有希望在用户之前发现你的错误。但如果你没有呢？
- en: 'That’s where TypeScript comes in. Even cooler than the fact that TypeScript
    gives you helpful error messages is *when* it gives them to you: TypeScript gives
    you error messages *in your text editor, as you type*. That means you don’t have
    to rely on unit tests or smoke tests or coworkers to catch these sorts of issues:
    TypeScript will catch them for you and warn you about them as you write your program.
    Let’s see what TypeScript says about our previous example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 TypeScript 的作用。比 TypeScript 给出有用的错误消息更酷的是*它给你的时间*：TypeScript 在你输入时会在你的文本编辑器中给出错误消息。这意味着你不必依赖单元测试、冒烟测试或同事来捕捉这些问题：TypeScript
    会在你编写程序时捕捉并警告你。让我们看看 TypeScript 对我们之前例子的看法：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In addition to eliminating entire classes of type-related bugs, this will actually
    change the way you write code. You will find yourself sketching out a program
    at the type level before you fill it in at the value level;^([2](ch01.html#idm46304995487608))
    you will think about edge cases as you design your program, not as an afterthought;
    and you will design programs that are simpler, faster, easier to understand, and
    easier to maintain.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了消除整类与类型相关的错误之外，这实际上会改变你编写代码的方式。你会发现自己在填写值级别之前，在类型级别上勾勒出程序；^([2](ch01.html#idm46304995487608))在设计程序时，你会考虑边缘情况，而不是事后的想法；而且你会设计更简单、更快速、更易于理解和维护的程序。
- en: Are you ready to begin the journey? Let’s go!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好开始这段旅程了吗？让我们开始吧！
- en: ^([1](ch01.html#idm46304996579624-marker)) Depending on which statically typed
    language you use, “invalid” can mean a range of things, from programs that will
    crash when you run them to things that won’t crash but are clearly nonsensical.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm46304996579624-marker))根据你使用的静态类型语言，“无效”可能意味着一系列不同的情况，从运行时会崩溃的程序到明显荒谬但不会崩溃的事物。
- en: ^([2](ch01.html#idm46304995487608-marker)) If you’re not sure what “type level”
    means here, don’t worry. We’ll go over it in depth in later chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm46304995487608-marker))如果你不确定这里的“类型级别”是什么意思，别担心。我们将在后面的章节中深入讨论它。
