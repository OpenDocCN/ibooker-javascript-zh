- en: Chapter 4\. Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。对象
- en: Object literals
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对象字面量
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A set of keys and values
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一组键和值
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Each with their own type
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个都有自己的类型
- en: '[Chapter 3, “Unions and Literals”](ch03.xhtml#unions_and_literals) fleshed
    out union and literal types: working with primitives such as `boolean` and literal
    values of them such as `true`. Those primitives only scratch the surface of the
    complex object shapes JavaScript code commonly uses. TypeScript would be pretty
    unusable if it weren’t able to represent those objects. This chapter will cover
    how to describe complex object shapes and how TypeScript checks their assignability.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三章，“联合类型和字面量”](ch03.xhtml#unions_and_literals)详细介绍了联合类型和字面量类型：处理诸如 `boolean`
    这样的原始类型及其值的字面量，例如 `true`。这些原始类型只是 JavaScript 代码中常用的复杂对象形状的冰山一角。如果 TypeScript 不能表示这些对象，它将显得相当无用。本章将介绍如何描述复杂的对象形状以及
    TypeScript 如何检查它们的可赋值性。'
- en: Object Types
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象类型
- en: When you create an object literal with `{...}` syntax, TypeScript will consider
    it to be a new object type, or type shape, based on its properties. That object
    type will have the same property names and primitive types as the object’s values.
    Accessing properties of the value can be done with either `value.member` or the
    equivalent `value['member']` syntax.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `{...}` 语法创建对象字面量时，TypeScript 将视其为一个新的对象类型或类型形状，基于其属性。该对象类型将具有与对象值相同的属性名称和原始类型。可以通过
    `value.member` 或等效的 `value['member']` 语法访问值的属性。
- en: 'TypeScript understands that the following `poet` variable’s type is that of
    an object with two properties: `born`, of type `number`, and `name`, of type `string`.
    Accessing those members would be allowed, but attempting to access any other member
    name would cause a type error for that name not existing:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 理解以下 `poet` 变量的类型是一个具有两个属性 `born`（类型为 `number`）和 `name`（类型为 `string`）的对象。允许访问这些成员，但尝试访问任何其他成员名称将导致该名称不存在的类型错误：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Object types are a core concept for how TypeScript understands JavaScript code.
    Every value other than `null` and `undefined` has a set of members in its backing
    type shape, and so TypeScript must understand the object type for every value
    in order to type check it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型是 TypeScript 理解 JavaScript 代码的核心概念。除了 `null` 和 `undefined` 外的每个值都具有其后台类型形状中的一组成员，因此
    TypeScript 必须理解每个值的对象类型以进行类型检查。
- en: Declaring Object Types
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明对象类型
- en: Inferring types directly from existing objects is all fine and good, but eventually
    you’ll want to be able to declare the type of an object explicitly. You’ll need
    a way to describe an object shape separately from objects that satisfy it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 直接从现有对象推断类型很好，但最终您会想要显式声明对象的类型。您需要一种方法来单独描述对象形状，而不是满足它的对象。
- en: Object types may be described using a syntax that looks similar to object literals
    but with types instead of values for fields. It’s the same syntax that TypeScript
    shows in error messages about type assignability.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似对象字面量但字段为类型的语法来描述对象类型。这是 TypeScript 在类型可赋值性错误消息中展示的相同语法。
- en: 'This `poetLater` variable is the same type from before with `name: string`
    and `born: number`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '此 `poetLater` 变量与之前的 `name: string` 和 `born: number` 相同类型：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Aliased Object Types
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 别名对象类型
- en: 'Constantly writing out object types like `{ born: number; name: string; }`
    would get tiresome rather quickly. It’s more common to use type aliases to assign
    each type shape a name.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '不断地像 `{ born: number; name: string; }` 这样写出对象类型会很快变得乏味。更常见的做法是使用类型别名为每个类型形状分配一个名称。'
- en: 'The previous code snippet could be rewritten with a `type Poet`, which comes
    with the added benefit of making TypeScript’s assignability error message a little
    more direct and readable:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段可以用 `type Poet` 重写，这样做的额外好处是使 TypeScript 的可赋值性错误消息更加直接和可读。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Most TypeScript projects prefer using the `interface` keyword to describe object
    types, which is a feature I won’t cover until [Chapter 7, “Interfaces”](ch07.xhtml#interfaces).
    Aliased object types and interfaces are almost identical: everything in this chapter
    applies to interfaces as well.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 TypeScript 项目更喜欢使用 `interface` 关键字来描述对象类型，这是一个我不会在 [第七章，“接口”](ch07.xhtml#interfaces)
    之前介绍的特性。别名对象类型和接口几乎是相同的：本章的所有内容同样适用于接口。
- en: I bring these object types up now because understanding how TypeScript interprets
    object literals is an important part of learning about TypeScript’s type system.
    These concepts will continue to be important once we switch over to features in
    the next section of this book.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在提到这些对象类型，因为理解TypeScript如何解释对象文字是学习TypeScript类型系统的重要部分。一旦我们转向本书下一节的功能，这些概念将继续非常重要。
- en: Structural Typing
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化类型
- en: 'TypeScript’s type system is *structurally typed*: meaning any value that happens
    to satisfy a type is allowed to be used as a value of that type. In other words,
    when you declare that a parameter or variable is of a particular object type,
    you’re telling TypeScript that whatever object(s) you use, they need to have those
    properties.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的类型系统是*结构化类型*的：意味着任何满足某个类型的值都允许用作该类型的值。换句话说，当您声明参数或变量为特定对象类型时，您告诉TypeScript，无论使用哪个对象（们），它们都必须具有这些属性。
- en: 'The following `WithFirstName` and `WithLastName` aliased object types both
    only declare a single member of type `string`. The `hasBoth` variable just so
    happens to have both of them—even though it wasn’t declared as such explicitly—so
    it can be provided to variables that are declared as either of the two aliased
    object types:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`WithFirstName`和`WithLastName`别名对象类型仅声明了一个名为`string`的成员。`hasBoth`变量恰好具有这两个成员，即使它没有明确声明为这样，因此可以提供给声明为两个别名对象类型之一的变量：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Structural typing not the same as *duck typing*, which comes from the phrase
    “If it looks like a duck and quacks like a duck, it’s probably a duck.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化类型并不等同于*鸭子类型*，后者源自短语“如果它看起来像鸭子，叫起来像鸭子，那么它可能是鸭子”。
- en: Structural typing is when there is a static system checking the type—in TypeScript’s
    case, the type checker.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化类型是静态系统检查类型的一种情况，在TypeScript的情况下是类型检查器。
- en: Duck typing is when nothing checks object types until they’re used at runtime.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸭子类型是指在运行时使用对象类型之前没有任何检查。
- en: 'In summary: *JavaScript* is *duck typed* whereas *TypeScript* is *structurally
    typed*.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：*JavaScript*是*鸭子类型*，而*TypeScript*是*结构化类型*。
- en: Usage Checking
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用检查
- en: When providing a value to a location annotated with an object type, TypeScript
    will check that the value is assignable to that object type. To start, the value
    must have the object type’s required properties. If any member required on the
    object type is missing in the object, TypeScript will issue a type error.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当向带有对象类型注释的位置提供值时，TypeScript会检查该值是否可以分配给该对象类型。首先，该值必须具有对象类型的必需属性。如果对象中缺少对象类型所需的任何成员，则TypeScript将发出类型错误。
- en: 'The following `FirstAndLastNames` aliased object type requires that both the
    `first` and `last` properties exist. An object containing both of those is allowed
    to be used in a variable declared to be of type `FirstAndLastNames`, but an object
    without them is not:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`FirstAndLastNames`别名对象类型要求`first`和`last`属性都存在。包含这两者的对象允许在声明为`FirstAndLastNames`类型的变量中使用，但没有它们的对象则不允许：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Mismatched types between the two are not allowed either. Object types specify
    both the names of required properties and the types those properties are expected
    to be. If an object’s property doesn’t match, TypeScript will report a type error.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间不允许类型不匹配。对象类型同时指定必需属性的名称和这些属性预期的类型。如果对象的属性不匹配，TypeScript将报告类型错误。
- en: 'The following `TimeRange` type expects the `start` member to be of type `Date`.
    The `hasStartString` object is causing a type error because its `start` is type
    `string` instead:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`TimeRange`类型期望`start`成员为`Date`类型。`hasStartString`对象引起类型错误，因为其`start`类型为`string`：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Excess Property Checking
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过量属性检查
- en: Typescript will report a type error if a variable is declared with an object
    type and its initial value has more fields than its type describes. Therefore,
    declaring a variable to be of an object type is a way of getting the type checker
    to make sure it has only the expected fields on that type.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript会在变量声明为对象类型并且其初始值的字段数超过其描述的类型时报告类型错误。因此，声明变量为对象类型是让类型检查器确保该类型仅具有预期字段的一种方式。
- en: 'The following `poetMatch` variable has exactly the fields described in the
    object type aliased by `Poet`, while `extraProperty` causes a type error for having
    an extra property:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`poetMatch`变量具有恰好与由`Poet`别名的对象类型描述的字段，而`extraProperty`因具有额外属性而导致类型错误：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that excess property checks only trigger for object literals being created
    in locations that are declared to be an object type. Providing an existing object
    literal bypasses excess property checks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，多余属性检查仅在被声明为对象类型的位置创建对象文字时触发。提供现有对象文字会绕过多余属性检查。
- en: 'This `extraPropertyButOk` variable does not trigger a type error with the previous
    example’s `Poet` type because its initial value happens to structurally match
    `Poet`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `extraPropertyButOk` 变量不会触发前面示例中的 `Poet` 类型的类型错误，因为其初始值恰好与 `Poet` 结构匹配：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Excess property checks will trigger anywhere a new object is being created in
    a location that expects it to match an object type—which as you’ll see in later
    chapters includes array members, class fields, and function parameters. Banning
    excess properties is another way TypeScript helps make sure your code is clean
    and does what you expect. Excess properties not declared in their object types
    are often either mistyped property names or unused code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 多余属性检查将在任何创建新对象的位置触发，该位置预期该对象与对象类型匹配——正如您将在后面的章节中看到的那样，包括数组成员、类字段和函数参数。禁止多余属性是
    TypeScript 帮助确保代码清洁且符合您期望的另一种方式。未在其对象类型中声明的多余属性通常是拼写错误的属性名称或未使用的代码。
- en: Nested Object Types
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套对象类型
- en: As JavaScript objects can be nested as members of other objects, TypeScript’s
    object types must be able to represent nested object types in the type system.
    The syntax to do so is the same as before but with a `{ ... }` object type instead
    of a primitive name.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 对象可以嵌套为其他对象的成员，因此 TypeScript 的对象类型必须能够在类型系统中表示嵌套对象类型。做到这一点的语法与之前相同，但使用
    `{ ... }` 对象类型而不是基本名称。
- en: '`Poem` type is declared to be an object whose `author` property has `firstName:
    string` and `lastName: string`. The `poemMatch` variable is assignable to `Poem`
    because it matches that structure, while `poemMismatch` is not because its `author`
    property includes `name` instead of `firstName` and `lastName`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Poem` 类型被声明为一个对象，其 `author` 属性具有 `firstName: string` 和 `lastName: string`。`poemMatch`
    变量可以分配给 `Poem`，因为它匹配该结构，而 `poemMismatch` 不行，因为其 `author` 属性包含 `name` 而不是 `firstName`
    和 `lastName`：'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another way of writing the `type Poem` would be to extract out the `author`
    property’s shape into its own aliased object type, `Author`. Extracting out nested
    types into their own type aliases also helps TypeScript give more informative
    type error messages. In this case, it can say `''Author''` instead of `''{ firstName:
    string; lastName: string; }''`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '另一种编写`type Poem`的方法是将`author`属性的形状提取为其自己的别名对象类型`Author`。将嵌套类型提取为它们自己的类型别名也有助于
    TypeScript 提供更具信息性的类型错误消息。在这种情况下，它可以说 `''Author''` 而不是 `''{ firstName: string;
    lastName: string; }''`：'
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: It is generally a good idea to move nested object types into their own type
    name like this, both for more readable code and for more readable TypeScript error
    messages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好像这样将嵌套对象类型移到它们自己的类型名称中，这样做不仅可以使代码更可读，还可以使 TypeScript 错误消息更易于理解。
- en: You’ll see in later chapters how object type members can be other types such
    as arrays and functions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在后面的章节中看到，对象类型成员可以是其他类型，如数组和函数。
- en: Optional Properties
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选属性
- en: Object type properties don’t all have to be required in the object. You can
    include a `?` before the `:` in a type property’s type annotation to indicate
    that it’s an optional property.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型属性并不都必须在对象中是必需的。您可以在类型属性的类型注释中的`:`之前包含`?`来指示它是一个可选属性。
- en: 'This `Book` type requires only a `pages` property and optionally allows an
    `author`. Objects adhering to it may provide `author` or leave it out as long
    as they provide `pages`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `Book` 类型仅需要一个 `pages` 属性，并可选允许一个 `author`。符合此类型的对象可以提供 `author` 或将其省略，只要它们提供
    `pages`：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Keep in mind there is a difference between optional properties and properties
    whose type happens to include `undefined` in a type union. A property declared
    as optional with `?` is allowed to not exist. A property declared as required
    and `| undefined` must exist, even if the value is `undefined`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，可选属性和类型联合中包含 `undefined` 的属性之间存在差异。用 `?` 声明的可选属性允许不存在。用 `| undefined` 声明为必需的属性必须存在，即使值为
    `undefined`。
- en: 'The `editor` property in the following `Writers` type may be skipped in declaring
    variables because it has a `?` in its declaration. The `author` property does
    not have a `?`, so it must exist, even if its value is just `undefined`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下 `Writers` 类型中，`editor` 属性可以在声明变量时被省略，因为在其声明中有 `?`。`author` 属性没有 `?`，因此它必须存在，即使其值只是
    `undefined`：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Chapter 7, “Interfaces”](ch07.xhtml#interfaces) will cover more on other kinds
    of properties, while [Chapter 13, “Configuration Options”](ch13.xhtml#configuration_options)
    will describe TypeScript’s strictness settings around optional properties.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 7 章，“接口”](ch07.xhtml#interfaces) 将进一步讨论其他类型属性，而[第 13 章，“配置选项”](ch13.xhtml#configuration_options)将描述
    TypeScript 关于可选属性的严格设置。'
- en: Unions of Object Types
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象类型的联合
- en: It is reasonable in TypeScript code to want to be able to describe a type that
    can be one or more different object types that have slightly different properties.
    Furthermore, your code might want to be able to type narrow between those object
    types based on the value of a property.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 代码中，希望能够描述一种类型，它可以是一个或多个具有稍有不同属性的不同对象类型是合理的。此外，你的代码可能希望能够基于属性值来在这些对象类型之间进行类型缩小。
- en: Inferred Object-Type Unions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推断的对象类型联合
- en: If a variable is given an initial value that could be one of multiple object
    types, TypeScript will infer its type to be a union of object types. That union
    type will have a constituent for each of the possible object shapes. Each of the
    possible properties on the type will be present in each of those constituents,
    though they’ll be `?` optional types on any type that doesn’t have an initial
    value for them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个变量被赋予一个可能是多种对象类型之一的初始值，TypeScript 将推断其类型为对象类型的联合。该联合类型将为每种可能的对象形状包含一个成员。类型上的每种可能属性在这些成员中都将存在，尽管它们在任何没有初始值的类型上将是
    `?` 可选类型。
- en: 'This `poem` value always has a `name` property of type `string`, and may or
    may not have `pages` and `rhymes` properties:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `poem` 值始终具有类型为 `string` 的 `name` 属性，并且可能具有 `pages` 和 `rhymes` 属性，也可能没有：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Explicit Object-Type Unions
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式对象类型联合
- en: Alternately, you can be more explicit about your object types by being explicit
    with your own union of object types. Doing so requires writing a bit more code
    but comes with the advantage of giving you more control over your object types.
    Most notably, if a value’s type is a union of object types, TypeScript’s type
    system will only allow access to properties that exist on all of those union types.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以通过显式地使用自己的对象类型联合更加明确地描述你的对象类型。这样做需要编写更多的代码，但带来的好处是更多地控制你的对象类型。尤其值得注意的是，如果一个值的类型是对象类型的联合，TypeScript
    的类型系统将只允许访问所有这些联合类型上存在的属性。
- en: 'This version of the previous `poem` variable is explicitly typed to be a union
    type that always has the `always` property along with either `pages` or `rhymes`.
    Accessing `names` is allowed because it always exists, but `pages` and `rhymes`
    aren’t guaranteed to exist:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 先前 `poem` 变量的这个版本显式地被类型化为一个联合类型，它总是具有 `always` 属性以及 `pages` 或 `rhymes` 中的一个。允许访问
    `names` 是因为它总是存在的，但不能保证 `pages` 和 `rhymes` 的存在：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Restricting access to potentially nonexistent members of objects can be a good
    thing for code safety. If a value might be one of multiple types, properties that
    don’t exist on all of those types aren’t guaranteed to exist on the object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 限制对对象可能不存在的成员的访问对于代码安全性来说是一件好事。如果一个值可能是多种类型之一，那么并非所有这些类型上都存在的属性在对象上并不保证存在。
- en: Just as how unions of literal and/or primitive types must be type narrowed to
    access properties that don’t exist on all type constituents, you’ll need to narrow
    those object type unions.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如文字和/或原始类型的联合必须被类型缩小以访问并非存在于所有类型成员上的属性一样，你需要缩小那些对象类型的联合。
- en: Narrowing Object Types
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩小对象类型
- en: If the type checker sees that an area of code can only be run if a union typed
    value contains a certain property, it will narrow the value’s type to only the
    constituents that contain that property. In other words, TypeScript’s type narrowing
    will apply to objects if you check their shape in code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类型检查器看到代码的某个区域只能在联合类型值包含某个属性时运行，它将缩小该值的类型，以仅包含包含该属性的成员。换句话说，如果在代码中检查它们的形状，TypeScript
    的类型缩小将适用于对象。
- en: 'Continuing the explicitly typed `poem` example, check whether `"pages" in poem`
    acts as a type guard for TypeScript to indicate that it is a `PoemWithPages`.
    If `poem` is not a `PoemWithPages`, then it must be a `PoemWithRhymes`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用显式类型化的 `poem` 示例，检查 `poem` 中的 `"pages" in poem` 是否作为 TypeScript 的类型守卫表明它是一个
    `PoemWithPages`。如果 `poem` 不是 `PoemWithPages`，那么它必须是 `PoemWithRhymes`：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that TypeScript won’t allow truthiness existence checks like `if (poem.pages)`.
    Attempting to access a property of an object that might not exist is considered
    a type error, even if used in a way that seems to behave like a type guard:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，TypeScript 不允许类似 `if (poem.pages)` 的真值存在检查。试图访问一个可能不存在的对象属性被视为类型错误，即使看起来像是类型保护的一种方式：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Discriminated Unions
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 辨别联合
- en: Another popular form of union typed objects in JavaScript and TypeScript is
    to have a property on the object indicate what shape the object is. This kind
    of type shape is called a *discriminated union*, and the property whose value
    indicates the object’s type is a *discriminant*. TypeScript is able to perform
    type narrowing for code that type guards on discriminant properties.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 和 TypeScript 中另一种流行的联合类型对象形式是在对象上有一个属性指示对象的形状。这种类型形状称为 *辨别联合*，其值指示对象类型的属性称为
    *辨别符*。TypeScript 能够对辨别属性进行类型缩小，从而进行类型收窄。
- en: 'For example, this `Poem` type describes an object that can be either a new
    `PoemWithPages` type or a new `PoemWithRhymes` type, and the `type` property indicates
    which one. If `poem.type` is `"pages"`, then TypeScript is able to infer that
    the type of `poem` must be `PoemWithPages`. Without that type narrowing, neither
    property is guaranteed to exist on the value:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个 `Poem` 类型描述了一个可以是 `PoemWithPages` 类型或 `PoemWithRhymes` 类型的对象，而 `type`
    属性指示其中一个。如果 `poem.type` 是 `"pages"`，那么 TypeScript 能够推断出 `poem` 的类型必须是 `PoemWithPages`。如果没有这种类型收窄，值上既不保证任何一个属性的存在：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Discriminated unions are my favorite feature in TypeScript because they beautifully
    combine a common elegant JavaScript pattern with TypeScript’s type narrowing.
    [Chapter 10, “Generics”](ch10.xhtml#generics_chapter) and its associated projects
    will show more around using discriminated unions for generic data operations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 辨别联合是我在 TypeScript 中最喜欢的功能，因为它们优雅地结合了 JavaScript 中常见的优雅模式与 TypeScript 的类型收窄。[第
    10 章，“泛型”](ch10.xhtml#generics_chapter) 及其相关项目将展示更多关于如何使用辨别联合进行通用数据操作。
- en: Intersection Types
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交集类型
- en: 'TypeScript’s `|` union types represent the type of a value that could be one
    of two or more different types. Just as JavaScript’s runtime `|` operator acts
    as a counterpart to its `&` operator, TypeScript allows representing a type that
    is multiple types at the same time: an `&` *intersection type*. Intersection types
    are typically used with aliased object types to create a new type that combines
    multiple existing object types.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 的 `|` 联合类型代表一个值可以是两种或多种不同类型中的一种。正如 JavaScript 的运行时 `|` 运算符是其 `&`
    运算符的对应物，TypeScript 允许表示一个同时为多种类型的类型：一个 `&` *交集类型*。交集类型通常与别名对象类型一起使用，以创建一个结合多个现有对象类型的新类型。
- en: 'The following `Artwork` and `Writing` types are used to form a combined `WrittenArt`
    type that has the properties `genre`, `name`, and `pages`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 `Artwork` 和 `Writing` 类型用于形成一个合并的 `WrittenArt` 类型，具有 `genre`、`name` 和 `pages`
    属性：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Intersection types can be combined with union types, which is sometimes useful
    to describe discriminated unions in one type.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 交集类型可以与联合类型结合使用，这在描述一个类型的辨别联合时有时是很有用的。
- en: 'This `ShortPoem` type always has an `author` property, then is also a discriminated
    union on a `type` property:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种 `ShortPoem` 类型始终具有 `author` 属性，并且还是一个基于 `type` 属性的辨别联合：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Dangers of Intersection Types
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交集类型的危险
- en: Intersection types are a useful concept, but it’s easy to use them in ways that
    confuse either yourself or the TypeScript compiler. I recommend trying to keep
    code as simple as possible when using them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 交集类型是一个有用的概念，但是在使用它们时很容易让自己或 TypeScript 编译器感到困惑。我建议在使用它们时尽量保持代码简单。
- en: Long assignability errors
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长的可赋值性错误
- en: 'Assignability error messages from TypeScript get much harder to read when you
    create complex intersection types, such as one combined with a union type. This
    will be a common theme with TypeScript’s type system (and typed programming languages
    in general): the more complex you get, the harder it will be to understand messages
    from the type checker.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建复杂的交集类型（例如与联合类型结合）时，TypeScript 给出的可赋值性错误消息会变得更难理解。这将是 TypeScript 类型系统（以及一般类型化编程语言）的一个常见主题：你的代码越复杂，理解类型检查器消息的难度就越大。
- en: 'In the case of the previous code snippet’s `ShortPoem`, it would be much more
    readable to split the type into a series of aliased object types to allow TypeScript
    to print those names:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面代码片段的 `ShortPoem` 情况下，将类型拆分成一系列别名对象类型将会更易读，允许 TypeScript 打印这些名称：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: never
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 永不
- en: 'Intersection types are also easy to misuse and create an impossible type with.
    Primitive types cannot be joined together as constituents in an intersection type
    because it’s impossible for a value to be multiple primitives at the same time.
    Trying to `&` two primitive types together will result in the *never* type, represented
    by the keyword `never`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉类型也很容易被误用，并创建一个不可能存在的类型。原始类型不能作为交叉类型中的组成部分，因为一个值不可能同时是多个原始类型。尝试将两个原始类型用`&`连接在一起将导致*never*类型，由关键字`never`表示：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `never` keyword and type is what programming languages refer to as a *bottom
    type*, or empty type. A bottom type is one that can have no possible values and
    can’t be reached. No types can be provided to a location whose type is a bottom
    type:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`never`关键字和类型是编程语言中所谓的*底部类型*或空类型。底部类型是一种没有可能值且无法到达的类型。不能为类型为底部类型的位置提供任何类型：'
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Most TypeScript projects rarely—if ever—use the `never` type. It comes up once
    in a while to represent impossible states in code. Most of the time, though, it’s
    likely to be a mistake from misusing intersection types. I’ll cover it more in
    [Chapter 15, “Type Operations”](ch15.xhtml#type_operations).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 TypeScript 项目很少——甚至从不——使用`never`类型。它偶尔会出现在代码中表示不可能的状态。不过，大部分时间，这可能是误用交叉类型的错误。我将在[第15章，“类型操作”](ch15.xhtml#type_operations)中更详细地介绍它。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you expanded your grasp of the TypeScript type system to be
    able to work with objects:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您扩展了对 TypeScript 类型系统的理解，以便能够处理对象：
- en: How TypeScript interprets types from object type literals
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 如何从对象类型字面量中解释类型
- en: Describing object literal types, including nested and optional properties
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述对象字面类型，包括嵌套和可选属性
- en: Declaring, inferring, and type narrowing with unions of object literal types
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对象字面类型的联合进行声明、推断和类型缩小
- en: Discriminated unions and discriminants
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分联合和鉴别联合
- en: Combining object types together with intersection types
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象类型与交叉类型结合在一起
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Now that you’ve finished reading this chapter, practice what you’ve learned
    on [*https://learningtypescript.com/objects*](https://learningtypescript.com/objects).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了本章的阅读，请在[*https://learningtypescript.com/objects*](https://learningtypescript.com/objects)上练习所学内容。
- en: How does a lawyer declare their TypeScript type?
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 律师如何声明他们的 TypeScript 类型？
- en: ''
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “I object!”
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我反对！”
