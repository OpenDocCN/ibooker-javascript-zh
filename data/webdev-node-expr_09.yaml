- en: Chapter 9\. Cookies and Sessions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Cookies 和会话
- en: In this chapter, you’ll learn how to use cookies and sessions to provide a better
    experience to your users by remembering their preferences from page to page, and
    even between browser sessions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您将学习如何使用 cookie 和会话，通过记住他们在页面之间以及甚至浏览器会话之间的偏好，为用户提供更好的体验。
- en: HTTP is a *stateless* protocol. That means that when you load a page in your
    browser and then you navigate to another page on the same website, neither the
    server nor the browser has any intrinsic way of knowing that it’s the same browser
    visiting the same site. Another way of saying this is that the way the web works
    is that *every HTTP request contains all the information necessary for the server
    to satisfy the request*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 是一个 *无状态* 协议。这意味着当您在浏览器中加载页面然后导航到同一个网站上的另一个页面时，无论是服务器还是浏览器都没有内在的方式知道它是同一个浏览器访问同一个站点。另一种说法是，网络工作的方式是
    *每个 HTTP 请求包含了服务器满足请求所需的所有信息* 。
- en: 'This is a problem, though: if the story ended there, we could never log in
    to anything. Streaming media wouldn’t work. Websites wouldn’t be able to remember
    your preferences from one page to the next. So there needs be a way to build state
    on top of HTTP, and that’s where cookies and sessions enter the picture.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是一个问题：如果故事就此结束，我们将永远无法登录任何东西。流媒体无法工作。网站将无法记住您在一个页面上的首选项。因此，需要一种方法在 HTTP
    之上构建状态，这就是 cookie 和会话进入画面的地方。
- en: Cookies, unfortunately, have gotten a bad name thanks to the nefarious things
    that people have done with them. This is unfortunate because cookies are really
    quite essential to the functioning of the “modern web” (although HTML5 has introduced
    some new features, like local storage, that could be used for the same purpose).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，由于人们对 cookie 所做的恶劣之事，cookie 不幸地名声扫地。这很不幸，因为 cookie 对于“现代网络”的运行非常重要（尽管 HTML5
    已经引入了一些新特性，比如本地存储，可以用于相同的目的）。
- en: 'The idea of a cookie is simple: the server sends a bit of information, and
    the browser stores it for some configurable period of time. It’s really up to
    the server what the particular bit of information is. Often it’s just a unique
    ID number that identifies a specific browser so that the illusion of state can
    be maintained.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: cookie 的想法很简单：服务器发送一些信息，浏览器在一定的时间内存储它。实际上，特定的信息取决于服务器。通常只是一个标识特定浏览器的唯一 ID 号码，以便保持状态的假象。
- en: 'There are some important things you need to know about cookies:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 cookie，有一些重要的事情需要知道：
- en: Cookies are not secret from the user
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用户能够看到 cookie，而不是保密的。
- en: All cookies that the server sends to the client are available for the client
    to look at. There’s no reason you can’t send something encrypted to protect its
    contents, but there’s seldom any need for this (at least if you’re not doing anything
    nefarious!). *Signed* cookies, which we’ll discuss in a bit, can obfuscate the
    contents of the cookie, but this is in no way cryptographically secure from prying
    eyes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器发送给客户端的所有 cookie 都可以供客户端查看。你当然可以发送一些加密内容以保护其内容，但很少有这样的必要（至少如果你没有做一些恶劣的事情的话！）。*签名*
    cookie（稍后我们会讨论）可以使 cookie 的内容变得模糊，但这绝对不能从密码窥视者的眼里得到有效的加密保护。
- en: The user can delete or disallow cookies
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以删除或不允许 cookie
- en: Users have full control over cookies, and browsers make it possible to delete
    cookies in bulk or individually. Unless you’re up to no good, there’s no real
    reason for users to do this, but it is useful during testing. Users can also disallow
    cookies, which is more problematic because only the simplest web applications
    can make do without cookies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用户对 cookie 拥有完全的控制权，浏览器使得批量或单独删除 cookie 成为可能。除非您没安好心，否则用户没有真正的理由这样做，但在测试过程中这是有用的。用户也可以拒绝
    cookie，这更为麻烦，因为只有最简单的 web 应用程序可以在没有 cookie 的情况下运行。
- en: Regular cookies can be tampered with
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 普通的 cookie 可以被篡改。
- en: Whenever a browser makes a request of your server that has an associated cookie
    and you blindly trust the contents of that cookie, you are opening yourself up
    for attack. The height of foolishness, for example, would be to execute code contained
    in a cookie. To ensure cookies aren’t tampered with, use signed cookies.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每当浏览器向您的服务器发出具有相关 cookie 的请求，并您盲目信任该 cookie 的内容时，您就会容易遭受攻击。例如，执行包含在 cookie 中的代码是极其愚蠢的。要确保
    cookie 不被篡改，可以使用签名 cookie。
- en: Cookies can be used for attacks
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: cookie 可以用于攻击。
- en: A category of attacks called *cross-site scripting* (XSS) attacks has sprung
    up in recent years. One technique of XSS attacks involves malicious JavaScript
    modifying the contents of cookies. This is an additional reason not to trust the
    contents of cookies that come back to your server. Using signed cookies helps
    (tampering will be evident in a signed cookie whether the user or malicious JavaScript
    modified it), and there’s also a setting that specifies that cookies are to be
    modified only by the server. These cookies can be limited in usefulness, but they
    are certainly safer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来出现了一类名为 *跨站脚本攻击*（XSS）的攻击。XSS 攻击的一种技术涉及恶意 JavaScript 修改 cookies 的内容。这是不信任回到服务器的
    cookie 内容的另一个原因。使用签名 cookies 有助于（篡改会在签名 cookie 中显示出来，无论是用户还是恶意 JavaScript 修改了它），还有一个设置指定只有服务器可以修改
    cookies。这些 cookies 的用处可能有限，但确实更安全。
- en: Users will notice if you abuse cookies
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用户会注意到如果你滥用 cookies。
- en: If you set a lot of cookies on your users’ computers or store a lot of data,
    it will irritate your users, which is something you should avoid. Try to keep
    your use of cookies to a minimum.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在用户计算机上设置了大量的 cookies 或存储了大量数据，会让用户感到恼火，这是你应该避免的事情。尽量将你对 cookies 的使用保持在最低限度。
- en: Prefer sessions over cookies
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 建议优先选择会话而非 cookies。
- en: For the most part, you can use *sessions* to maintain state, and it’s generally
    wise to do so. It’s easier, you don’t have to worry about abusing your users’
    storage, and it can be more secure. Sessions rely on cookies, of course, but with
    sessions, Express will be doing the heavy lifting for you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分情况下，你可以使用 *会话（sessions）* 来维护状态，这通常是明智的选择。这样做更容易，你不必担心滥用用户的存储空间，而且更安全。当然，会话依赖于
    cookies，但有了会话，Express 将为你做大部分繁重的工作。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Cookies are not magic: when the server wants the client to store a cookie,
    it sends a header called `Set-Cookie` containing name/value pairs, and when a
    client sends a request to a server for which it has cookies, it sends multiple
    `Cookie` request headers containing the value of the cookies.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Cookies 并非神奇：当服务器希望客户端存储一个 cookie 时，它发送一个名为 `Set-Cookie` 的头部，包含名称/值对；当客户端向服务器发送请求时，如果有
    cookie，它会发送多个 `Cookie` 请求头，包含 cookie 的值。
- en: Externalizing Credentials
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部化凭据
- en: To make cookies secure, a *cookie secret* is necessary. The cookie secret is
    a string that’s known to the server and used to encrypt secure cookies before
    they’re sent to the client. It’s not a password that has to be remembered, so
    it can just be a random string. I usually use [a random password generator inspired
    by xkcd](http://bit.ly/2QcjuDb) to generate the cookie secret or simply a random
    number.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 cookies 安全，需要一个 *cookie 密钥*。Cookie 密钥是服务器知道并用于在发送到客户端之前加密安全 cookies 的字符串。这不是必须记住的密码，因此可以只是一个随机字符串。我通常使用
    [受 xkcd 启发的随机密码生成器](http://bit.ly/2QcjuDb) 生成 cookie 密钥，或者仅仅使用一个随机数。
- en: It’s a common practice to externalize third-party credentials, such as the cookie
    secret, database passwords, and API tokens (Twitter, Facebook, etc.). This not
    only eases maintenance (by making it easy to locate and update credentials), but
    also allows you to omit the credentials file from your version control system.
    This is especially critical for open source repositories hosted on GitHub or other
    public source control repositories.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 外部化第三方凭据，如 cookie 密钥、数据库密码和 API 令牌（Twitter、Facebook 等），是一种常见做法。这不仅简化了维护（通过轻松定位和更新凭据），还允许你将凭据文件从版本控制系统中排除。对于托管在
    GitHub 或其他公共源代码控制库上的开源存储库尤为重要。
- en: 'To that end, we’re going to externalize our credentials in a JSON file. Create
    a file called *.credentials.development.json*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将在一个 JSON 文件中外部化我们的凭据。创建一个名为 *.credentials.development.json* 的文件：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will be the credentials file for our development work. In this way, you
    could have different credentials files for production, test, or other environments,
    which will come in handy.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们开发工作的凭据文件。通过这种方式，你可以为生产、测试或其他环境拥有不同的凭据文件，这将非常方便。
- en: 'We’re going to add a layer of abstraction on top of this credentials file to
    make it easier to manage our dependencies as our application grows. Our version
    will be very simple. Create a file called *config.js*:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在凭据文件的顶部添加一个抽象层，以便在应用程序扩展时更容易管理我们的依赖关系。我们的版本将非常简单。创建一个名为 *config.js* 的文件：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, to make sure we don’t accidentally add credentials to our repository,
    add *.credentials.** to your *.gitignore* file. To import your credentials into
    your application, all you need to do is this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确保我们不会意外地将凭据添加到我们的代码库中，请将`*.credentials.*`添加到您的`.gitignore`文件中。要将凭据导入到您的应用程序中，您只需要这样做：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We’ll be using this same file to store other credentials later, but for now,
    all we need is our cookie secret.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以后我们将使用同一文件存储其他凭据，但现在我们只需要我们的cookie密钥。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re following along by using the companion repository, you’ll have to
    create your own credentials file, as it is not included in the repository.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照伴随仓库的方式进行操作，则必须创建自己的凭据文件，因为它未包含在仓库中。
- en: Cookies in Express
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express中的Cookies
- en: 'Before you start setting and accessing cookies in your app, you need to include
    the `cookie-parser` middleware. First, use `npm install cookie-parser`, and then
    (*ch09/meadowlark.js* in the companion repo):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中设置和访问cookie之前，您需要包含`cookie-parser`中间件。首先，使用`npm install cookie-parser`，然后（在伴随仓库中的*ch09/meadowlark.js*中）：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you’ve done this, you can set a cookie or a signed cookie anywhere you
    have access to a response object:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以在任何可以访问响应对象的地方设置cookie或已签名的cookie：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Signed cookies take precedence over unsigned cookies. If you name your signed
    cookie `signed_monster`, you cannot have an unsigned cookie with the same name
    (it will come back as `undefined`).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 签名cookie优先于未签名cookie。如果您将签名cookie命名为`signed_monster`，则不能同时拥有同名的未签名cookie（它将返回`undefined`）。
- en: 'To retrieve the value of a cookie (if any) sent from the client, just access
    the `cookie` or `signedCookie` properties of the request object:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索从客户端发送的cookie的值（如果有），只需访问请求对象的`cookie`或`signedCookie`属性：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can use any string you want for a cookie name. For example, we could have
    used `\''signed monster''` instead of `\''signed_monster''`, but then we would
    have to use the bracket notation to retrieve the cookie: `req.signedCookies[\''signed
    monster'']`. For this reason, I recommend using cookie names without special characters.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为cookie名称使用任何字符串。例如，我们可以使用`\'signed monster'`而不是`\'signed_monster'`，但然后我们将不得不使用括号表示法来检索cookie：`req.signedCookies[\'signed
    monster']`。因此，建议使用不带特殊字符的cookie名称。
- en: 'To delete a cookie, use `req.clearCookie`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除cookie，请使用`req.clearCookie`：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you set a cookie, you can specify the following options:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 设置cookie时，可以指定以下选项：
- en: '`domain`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`domain`'
- en: Controls the domains the cookie is associated with; this allows you to assign
    cookies to specific subdomains. Note that you cannot set a cookie for a different
    domain than the server is running on; it will simply do nothing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 控制cookie关联的域；这允许您将cookie分配给特定的子域。请注意，您不能为与服务器运行的不同域设置cookie；它将简单地无效。
- en: '`path`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`path`'
- en: Controls the path this cookie applies to. Note that paths have an implicit wildcard
    after them; if you use a path of */* (the default), it will apply to all pages
    on your site. If you use a path of */foo*, it will apply to the paths */foo*,
    */foo/bar*, etc.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 控制此cookie适用的路径。请注意，路径后面隐含有通配符；如果使用路径`/*`（默认），它将适用于站点上的所有页面。如果使用路径`/foo*`，它将适用于路径`/foo*`、`/foo/bar*`等。
- en: '`maxAge`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`maxAge`'
- en: Specifies how long the client should keep the cookie before deleting it, in
    milliseconds. If you omit this, the cookie will be deleted when you close your
    browser. (You can also specify a date for expiration with the `expires` option,
    but the syntax is frustrating. I recommend using `maxAge`.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 指定客户端在删除cookie之前应保留该cookie的时间，单位为毫秒。如果您省略此项，则在关闭浏览器时将删除cookie（您还可以使用`expires`选项指定到期日期，但语法很令人沮丧。建议使用`maxAge`）。
- en: '`secure`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`secure`'
- en: Specifies that this cookie will be sent only over a secure (HTTPS) connection.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 指定此cookie仅在安全（HTTPS）连接上发送。
- en: '`httpOnly`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpOnly`'
- en: Setting this to `true` specifies the cookie will be modified only by the server.
    That is, client-side JavaScript cannot modify it. This helps prevent XSS attacks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将此设置为`true`指定该cookie仅由服务器修改。也就是说，客户端JavaScript无法修改它。这有助于防止XSS攻击。
- en: '`signed`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`signed`'
- en: Setting this to `true` signs this cookie, making it available in `res.signedCookies`
    instead of `res.cookies`. Signed cookies that have been tampered with will be
    rejected by the server, and the cookie value will be reset to its original value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将此设置为`true`将签名此cookie，使其可在`res.signedCookies`中而不是`res.cookies`中使用。已篡改的签名cookie将被服务器拒绝，并且cookie值将重置为其原始值。
- en: Examining Cookies
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查Cookie
- en: As part of your testing, you’ll probably want a way to examine the cookies on
    your system. Most browsers have a way to view individual cookies and the values
    they store. In Chrome, open the developer tools, and select the Application tab.
    In the tree on the left, you’ll see Cookies. Expand that, and you’ll see the site
    you’re currently visiting listed. Click that, and you will see all the cookies
    associated with this site. You can also right-click the domain to clear all cookies
    or right-click an individual cookie to remove it specifically.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为测试的一部分，您可能需要一种方法来检查系统上的 cookie。大多数浏览器都有查看单个 cookie 及其存储值的方法。在 Chrome 中，打开开发者工具，选择“应用程序”选项卡。在左侧的树状菜单中，您将看到“Cookie”。展开它，您将看到列出的当前访问站点。点击它，您将看到与该站点相关的所有
    cookie。您还可以右键单击域名以清除所有 cookie，或右键单击单个 cookie 以具体删除它。
- en: Sessions
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话
- en: '*Sessions* are really just a more convenient way to maintain state. To implement
    sessions, *something* has to be stored on the client; otherwise, the server wouldn’t
    be able to identify the client from one request to the next. The usual method
    of doing this is a cookie that contains a unique identifier. The server then uses
    that identifier to retrieve the appropriate session information.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*会话*实际上只是一种更方便的维护状态的方式。要实现会话，*必须*在客户端存储一些内容；否则，服务器将无法从一个请求识别客户端到下一个请求。通常的做法是使用包含唯一标识符的
    cookie。然后服务器使用该标识符检索相应的会话信息。'
- en: 'Cookies aren’t the only way to accomplish this: during the height of the “cookie
    scare” (when cookie abuse was rampant), many users were simply turning off cookies,
    and other ways to maintain state were devised, such as decorating URLs with session
    information. These techniques were messy, difficult, and inefficient, and they
    are best left in the past. HTML5 provides another option for sessions called *local
    storage*, which offers an advantage over cookies if you need to store larger amounts
    of data. See [the MDN documentation for `Window.localStorage`](https://mzl.la/2CDrGo4)
    for more information about this option.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 不是实现这一功能的唯一方式：在“cookie 恐慌”高峰期间（即 cookie 滥用时期），许多用户简单地禁用了 cookie，并且开发了其他维护状态的方法，比如将会话信息装饰在
    URL 中。这些技术混乱、困难且效率低下，最好留在过去。HTML5 提供了另一种称为*本地存储*的会话选项，如果需要存储大量数据则优于 cookie。有关此选项的更多信息，请参见[MDN
    文档中的 `Window.localStorage`](https://mzl.la/2CDrGo4)。
- en: 'Broadly speaking, there are two ways to implement sessions: store everything
    in the cookie or store only a unique identifier in the cookie and everything else
    on the server. The former are called *cookie-based sessions* and merely represent
    a convenience over using cookies. However, it still means that everything you
    add to the session will be stored on the client’s browser, which is an approach
    I don’t recommend. I recommend this approach only if you know that you will be
    storing just a small amount of information, that you don’t mind the user having
    access to the information, and that it won’t be growing out of control over time.
    If you want to take this approach, see the [`cookie-session` middleware](http://bit.ly/2qNv9h6).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上讲，有两种实现会话的方式：在 cookie 中存储所有信息或者仅在 cookie 中存储唯一标识符，其他信息存储在服务器上。前者被称为*基于 cookie
    的会话*，仅仅是相对于使用 cookie 更为便利的一种方式。然而，这仍意味着你添加到会话中的所有内容都将存储在客户端的浏览器中，这是我不推荐的一种做法。我只推荐在你知道将只存储少量信息、不介意用户访问这些信息以及信息不会随时间过多增长的情况下使用这种方式。如果你想采用这种方式，请参见[`cookie-session`
    中间件](http://bit.ly/2qNv9h6)。
- en: Memory Stores
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记忆存储
- en: 'If you would rather store session information on the server, which I recommend,
    you have to have somewhere to store it. The entry-level option is memory sessions.
    They are easy to set up, but they have a huge downside: when you restart the server
    (which you will be doing a lot of over the course of this book!), your session
    information disappears. Even worse, if you scale out by having multiple servers
    (see [Chapter 12](ch12.xhtml#ch_production_concerns)), a different server could
    service a request every time; session data would sometimes be there, and sometimes
    not. This is clearly an unacceptable user experience. However, for our development
    and testing needs, it will suffice. We’ll see how to permanently store session
    information in [Chapter 13](ch13.xhtml#ch_persistence).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更愿意将会话信息存储在服务器上，我建议您这样做，您必须有一个地方来存储它。入门级选项是内存会话。它们易于设置，但有一个巨大的缺点：当您重新启动服务器（在本书的过程中您将经常这样做！），您的会话信息会消失。更糟糕的是，如果您通过多个服务器进行扩展（参见[第12章](ch12.xhtml#ch_production_concerns)），不同的服务器可能会每次服务一个请求；会话数据有时会存在，有时会不存在。这显然是无法接受的用户体验。然而，对于我们的开发和测试需求，它是足够的。我们将看到如何在[第13章](ch13.xhtml#ch_persistence)中永久存储会话信息。
- en: 'First, install `express-session` (`npm install express-session`); then, after
    linking in the cookie parser, link in `express-session` (*ch09/meadowalrk.js*
    in the companion repo):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装`express-session`（`npm install express-session`）；然后，在链接cookie解析器之后，链接`express-session`（*ch09/meadowalrk.js*在伴随存储库中）：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `express-session` middleware accepts a configuration object with the following
    options:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`express-session` 中间件接受带有以下选项的配置对象：'
- en: '`resave`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`resave`'
- en: Forces the session to be saved back to the store even if the request wasn’t
    modified. Setting this to `false` is generally preferable; see the `express-session`
    documentation for more information.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 即使请求未被修改，也强制将会话保存回存储中。通常情况下，将其设置为`false`更可取；有关更多信息，请参阅`express-session`文档。
- en: '`saveUninitialized`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`saveUninitialized`'
- en: Setting this to `true` causes new (uninitialized) sessions to be saved to the
    store, even if they haven’t been modified. Setting this to `false` is generally
    preferable and is required when you need to get the user’s permission before setting
    a cookie. See the `express-session` documentation for more information.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为`true`会导致新的（未初始化的）会话保存到存储中，即使它们没有被修改。通常情况下，将其设置为`false`更可取，并且在需要在设置cookie之前获取用户许可时是必需的。有关更多信息，请参阅`express-session`文档。
- en: '`secret`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`secret`'
- en: The key (or keys) used to sign the session ID cookie. This can be the same key
    used for `cookie-parser`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用于签名会话ID cookie的密钥（或键）。这可以是用于`cookie-parser`的相同密钥。
- en: '`key`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`key`'
- en: The name of the cookie that will store the unique session identifier. Defaults
    to `connect.sid`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将存储唯一会话标识符的cookie的名称。默认为`connect.sid`。
- en: '`store`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`store`'
- en: An instance of a session store. Defaults to an instance of `MemoryStore`, which
    is fine for our current purposes. We’ll see how to use a database store in [Chapter 13](ch13.xhtml#ch_persistence).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个会话存储的实例。默认为`MemoryStore`的实例，对于我们当前的目的来说是可以的。我们将看到如何在[第13章](ch13.xhtml#ch_persistence)中使用数据库存储。
- en: '`cookie`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`cookie`'
- en: Cookie settings for the session cookie (`path`, `domain`, `secure`, etc.). Regular
    cookie defaults apply.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 会话cookie的cookie设置（`path`，`domain`，`secure`等）。常规cookie默认值适用。
- en: Using Sessions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用会话
- en: 'Once you’ve set up sessions, using them couldn’t be simpler; just use properties
    of the request object’s `session` variable:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了会话后，使用它们变得非常简单；只需使用请求对象的`session`变量的属性：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that with sessions, we don’t have to use the request object for retrieving
    the value and the response object for setting the value; it’s all performed on
    the request object. (The response object does not have a `session` property.)
    To delete a session, you can use JavaScript’s `delete` operator:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用会话时，我们无需使用请求对象来检索值，并使用响应对象来设置值；所有操作都在请求对象上执行。（响应对象没有`session`属性。）要删除会话，您可以使用JavaScript的`delete`操作符：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using Sessions to Implement Flash Messages
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用会话实现闪存消息
- en: '*Flash* messages (not to be confused with Adobe Flash) are simply a way to
    provide feedback to users in a way that’s not disruptive to their navigation.
    The easiest way to implement flash messages is to use sessions (you can also use
    the querystring, but in addition to those having uglier URLs, the flash messages
    will be included in a bookmark, which is probably not what you want). Let’s set
    up our HTML first. We’ll be using Bootstrap’s alert messages to display our flash
    messages, so make sure you have Bootstrap linked in (see Bootstrap’s [“getting
    started”](http://bit.ly/36YxeYf) documentation; you can link in the Bootstrap
    CSS and JavaScript files in your main template—there is an example in the companion
    repo). In your template file, somewhere prominent (usually directly below your
    site’s header), add the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*闪存*消息（不要与Adobe Flash混淆）只是一种为用户提供反馈的方式，不会干扰他们的导航。实施闪存消息的最简单方法是使用会话（也可以使用查询字符串，但除了这些会使URL更丑陋外，闪存消息还将包含在书签中，这可能不是您想要的）。现在让我们首先设置我们的HTML。我们将使用Bootstrap的警告消息来显示我们的闪存消息，所以确保您已经链接了Bootstrap（请参阅Bootstrap的[“入门”](http://bit.ly/36YxeYf)文档；您可以在主模板中链接Bootstrap的CSS和JavaScript文件——附录中有一个示例）。在您的模板文件中，通常是在站点标题直接下方的显著位置，添加以下内容：'
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that we use three curly brackets for `flash.message`; this will allow
    us to provide some simple HTML in our messages (we might want to emphasize words
    or include hyperlinks). Now let’s add some middleware to add the `flash` object
    to the context if there’s one in the session. After we’ve displayed a flash message
    once, we want to remove it from the session so it isn’t displayed on the next
    request. We’ll create some middleware to check the session to see whether there’s
    a flash message and, if there is, transfer it to the `res.locals` object, making
    it available to the views. We’ll put our middleware in a file called *lib/middleware/flash.js*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用三个大括号来表示`flash.message`；这将允许我们在消息中提供一些简单的HTML（我们可能想要强调单词或包含超链接）。现在让我们添加一些中间件来在会话中添加`flash`对象到上下文中。一旦我们显示了一条闪存消息，我们希望将其从会话中删除，以便在下一个请求中不显示它。我们将创建一些中间件来检查会话，看看是否有闪存消息，如果有，将其传输到`res.locals`对象中，使其在视图中可用。我们将把我们的中间件放在一个名为*lib/middleware/flash.js*的文件中：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And in our *meadowalrk.js* file, we’ll link in the flash message middleware,
    before any of our view routes:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 而在我们的*meadowalrk.js*文件中，在任何视图路由之前，我们将链接到闪存消息中间件：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now let’s see how to actually use the flash message. Imagine we’re signing
    up users for a newsletter and we want to redirect them to the newsletter archive
    after they sign up. This is what our form handler might look like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何实际使用闪存消息。想象一下，我们正在注册用户的通讯，我们希望在他们注册后将他们重定向到通讯存档。这是我们的表单处理程序可能看起来像这样：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that we’re careful to distinguish between input validation and database
    errors. Remember that even if we do input validation on the frontend (and you
    should), you should also perform it on the backend, because malicious users can
    circumvent frontend validation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们要仔细区分输入验证和数据库错误。请记住，即使我们在前端进行了输入验证（您应该这样做），您也应该在后端执行它，因为恶意用户可以绕过前端验证。
- en: Flash messages are a great mechanism to have available in your website, even
    if other methods are more appropriate in certain areas (for example, flash messages
    aren’t always appropriate for multiform “wizards” or shopping cart checkout flows).
    Flash messages are also great during development, because they are an easy way
    to provide feedback, even if you replace them with a different technique later.
    Adding support for flash messages is one of the first things I do when setting
    up a website, and we’ll be using this technique throughout the rest of the book.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 闪存消息是您网站中可以使用的一个很棒的机制，即使在某些领域中其他方法更合适（例如，闪存消息并不总是适合多表单“向导”或购物车结账流程）。在开发过程中，闪存消息也非常好用，因为它们是一种提供反馈的简单方法，即使稍后用不同的技术替换它们。在设置网站时，支持闪存消息是我做的第一件事情之一，本书的其余部分我们将继续使用这种技术。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Because the flash message is being transferred from the session to `res.locals.flash`
    in middleware, you have to perform a redirect for the flash message to be displayed.
    If you want to display a flash message without redirecting, set `res.locals.flash`
    instead of `req.session.flash`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于闪存消息是在中间件中从会话传输到`res.locals.flash`，因此您必须执行重定向才能显示闪存消息。如果要在不重定向的情况下显示闪存消息，请设置`res.locals.flash`而不是`req.session.flash`。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The example in this chapter used browser form submission with redirects because
    the use of sessions to control UI like this is typically not used in applications
    that use Ajax for form submission. In that event, you would want to indicate any
    errors in the JSON returned from the form handler and have the frontend modify
    the DOM to dynamically display error messages. That’s not to say that sessions
    aren’t useful for frontend rendered applications, but they are seldom used for
    this purpose.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例使用了浏览器表单提交和重定向，因为使用sessions来控制UI通常不适用于使用Ajax进行表单提交的应用程序。在这种情况下，您希望从表单处理程序返回的JSON中指示任何错误，并让前端修改DOM以动态显示错误消息。这并不意味着sessions在前端渲染应用程序中没有用处，但它们很少用于此目的。
- en: What to Use Sessions For
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用sessions
- en: 'Sessions are useful whenever you want to save a user preference that applies
    across pages. Most commonly, sessions are used to provide user authentication
    information: you log in, and a session is created. After that, you don’t have
    to log in again every time you reload the page. Sessions can be useful even without
    user accounts, though. It’s quite common for sites to remember how you like things
    sorted or what date format you prefer—all without your having to log in.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望保存跨页面适用的用户偏好时，sessions非常有用。最常见的用途是提供用户认证信息：您登录后，会话就会被创建。之后，每次重新加载页面时，您都不必再次登录。即使没有用户账户，sessions也可以很有用。网站通常会记住您喜欢的排序方式或日期格式偏好，所有这些都无需您登录。
- en: While I encourage you to prefer sessions over cookies, it’s important to understand
    how cookies work (especially because they enable sessions to work). It will help
    you with diagnosing issues and understanding the security and privacy considerations
    of your application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我鼓励您更喜欢sessions而不是cookies，但理解cookies的工作原理很重要（特别是因为它们使sessions能够工作）。这将帮助您诊断问题，并了解应用程序的安全性和隐私考虑。
- en: Conclusion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Understanding cookies and sessions gives us a better understanding of how web
    applications maintain the illusion of state when the underlying protocol (HTTP)
    is stateless. We learned techniques for handling cookies and sessions to control
    the user’s experience.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 理解**cookies**和**sessions**有助于我们更好地理解Web应用在底层协议（HTTP）无状态的情况下如何维持状态的错觉。我们学习了处理cookies和sessions的技术，以控制用户的体验。
- en: We’ve also been writing middleware as we went along without too much explanation
    of middleware. In the next chapter, we’re going to dive into middleware and learn
    everything there is to know about it!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们逐步进行中编写中间件时，我们一直没有太多解释中间件的内容。在下一章中，我们将深入探讨中间件，并学习有关它的一切！
