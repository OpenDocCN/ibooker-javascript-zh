- en: Chapter 11\. User Interfaces and React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。用户界面和React
- en: In 1979 Steve Jobs famously visited Xerox Parc, where he saw a demo of the Xerox
    Alto personal computer. While other computers at the time were controlled by typed
    commands, the Alto utilized a mouse and featured a graphic interface of windows,
    which could be opened and closed. Jobs went on to borrow these ideas in the creation
    of the original Apple Macintosh. The popularity of the original Mac led to the
    proliferation of computer UIs. Today, in a typical day we may interact with dozens
    of graphic user interfaces, which may include personal computers as well as smartphones,
    tablets, ATMs, game consoles, payment kiosks, and many more. UIs now surround
    us, working across all sorts of devices, content types, screen sizes, and interaction
    formats.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 1979年，史蒂夫·乔布斯著名地访问了施乐帕克（Xerox Parc），在那里他看到了施乐阿尔托个人电脑的演示。当时的其他计算机都是通过键入命令来控制的，而阿尔托使用了鼠标，并且具有可以打开和关闭的窗口的图形界面。乔布斯随后借鉴了这些想法创造了最初的苹果Macintosh。最初Mac的流行导致了计算机UI的大量普及。如今，在一个典型的日常中，我们可能会与数十个图形用户界面互动，这些界面可能包括个人计算机以及智能手机、平板电脑、ATM机、游戏机、支付自助服务机等等。UI现在围绕着我们，跨越各种设备、内容类型、屏幕尺寸和交互格式。
- en: As an example, I recently traveled to a different city for a meeting. That morning,
    I woke up and checked my flight status on my phone. I drove to the airport in
    my car, where a screen showed a map and allowed me to choose the music that I
    was listening to. On the way, I stopped at an ATM to retrieve some cash, punching
    in my PIN and tapping out instructions on a touchscreen. When I arrived at the
    airport, I checked in to my flight at a flight kiosk. As I waited at the gate,
    I responded to a few emails on my tablet. On the flight, I read a book on an e-ink
    display device. Once I landed, I summoned a ride through an application on my
    phone and stopped for lunch, tapping out my custom order on a display screen.
    In the meeting, a slide deck was projected onto the screen, while many of us took
    notes on our laptops. Back at my hotel, later that evening, I browsed the television
    and movie offerings found through the hotel’s television on-screen guide. My day
    was full of many UIs and screen sizes used to complete tasks related to core elements
    of life such as transportation, finance, and entertainment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，最近我为了开会去了一个不同的城市。那天早上，我醒来后在手机上查看了我的航班状态。我驾车去机场，在车上的屏幕显示了地图，并允许我选择正在听的音乐。在路上，我停在一个ATM机前取了些现金，输入我的PIN并在触摸屏上输入指令。到达机场后，我在一个飞行自助服务机上办理了登机手续。在候机门等待时，我在平板电脑上回复了几封电子邮件。在飞行中，我在一台电子墨水显示设备上读书。一旦我降落，我通过手机上的一个应用叫了一辆车，并在午餐时在显示屏上输入了我的定制订单。在会议中，幻灯片被投射到屏幕上，而我们中的许多人在笔记本电脑上做笔记。晚上回到酒店，我通过酒店电视屏幕上的指南浏览了电视和电影的选择。我的一天充满了许多UI和屏幕尺寸，用于完成与核心生活元素如交通、财务和娱乐相关的任务。
- en: In this chapter we’ll take a brief look at the history of JavaScript user interface
    development. With that background knowledge, we’ll then explore the basics of
    React, the JavaScript library that we’ll be using throughout the remainder of
    the book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要回顾JavaScript用户界面开发的历史。在了解了这些背景知识后，我们将深入探讨React的基础知识，这是本书剩余部分将使用的JavaScript库。
- en: JavaScript and UIs
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript和UI
- en: Originally designed in the mid-1990s (infamously, in [10 days](https://oreil.ly/BNhvL))
    to enhance web interfaces, JavaScript provided an embedded scripting language
    in the web browser. This allowed web designers and developers to add small interactions
    to a web page that weren’t possible with HTML alone. Unfortunately, browser vendors
    each had varying implementations of JavaScript, making it difficult to rely on.
    This is one of the factors that led to the proliferation of applications designed
    to work in a single browser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最初设计于1990年代中期（臭名昭著地，在[10 days](https://oreil.ly/BNhvL)内）以增强Web界面，JavaScript提供了一个嵌入式脚本语言在Web浏览器中。这使得Web设计师和开发者能够在Web页面上添加小的交互，这是单靠HTML无法实现的。不幸的是，各个浏览器供应商对JavaScript有不同的实现，这使得依赖它变得困难。这是导致应用程序大量设计成只能在单个浏览器中运行的因素之一。
- en: In the mid-2000s jQuery (as well as similar libraries, such as MooTools) took
    off in popularity. jQuery allowed developers to write JavaScript with a simple
    API that worked well across browsers. Soon we were all removing, adding, replacing,
    and animating things on our web pages. Around the same time, Ajax (short for “asynchronous
    JavaScript and XML”) allowed us to fetch data from a server and inject it into
    the page. The combination of these two technologies provided an ecosystem to create
    powerful interactive web applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代中期，jQuery（以及类似的库，如MooTools）开始流行起来。jQuery允许开发人员使用简单的API在各种浏览器上编写JavaScript。很快，我们在网页上都在删除、添加、替换和动画化各种元素。与此同时，Ajax（“异步JavaScript和XML”的缩写）允许我们从服务器获取数据并将其注入到页面中。这两种技术的结合为创建强大的交互式Web应用程序提供了生态系统。
- en: As the complexity of these applications grew, the need for organization and
    boilerplate code grew in parallel. By the early 2010s frameworks such as Backbone,
    Angular, and Ember came to dominate the JavaScript application landscape. These
    frameworks worked by imposing structure and implementing common application patterns
    into the framework code. These frameworks were often modeled after the Model,
    View, Controller (MVC) pattern of software design. Each framework was prescriptive
    about all of the layers of the web application, providing a structured way to
    handle templating, data, and user interactions. While this had many benefits,
    it also meant that the effort of integrating new or nonstandard technologies could
    be quite high.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这些应用程序的复杂性增长，组织和样板代码的需求也在相应增长。到了2010年代初，诸如Backbone、Angular和Ember等框架开始主导JavaScript应用程序的风景。这些框架通过在框架代码中施加结构并实现常见应用程序模式来工作。这些框架通常模仿软件设计中的模型-视图-控制器（MVC）模式。每个框架都对Web应用程序的所有层提出了具体要求，提供了处理模板、数据和用户交互的结构化方式。尽管这带来了许多好处，但也意味着整合新技术或非标准技术的努力可能会相当高。
- en: Meanwhile, desktop applications continued to be written in system-specific programming
    languages. This meant that developers and teams were often forced to make either/or
    style choices (either a Mac app or a Windows app, either a web app or a desktop
    app, etc.). Mobile applications were in a similar position. The rise of responsive
    web design meant that designers and developers could create truly incredible sites
    and applications for the mobile web browser, but choosing to build a web-only
    application locked them out of the mobile platform app stores. Apple’s iOS applications
    were written in Objective C (and more recently Swift), while Android relied upon
    the Java programming language (not to be confused with our friend JavaScript).
    This meant that the web, consisting of HTML, CSS, and JavaScript, was the only
    truly cross-platform user interface platform.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，桌面应用程序继续使用特定于系统的编程语言编写。这意味着开发人员和团队通常被迫做出一种选择（或者Mac应用程序，或者Windows应用程序，或者Web应用程序，或者桌面应用程序等）。移动应用程序处于类似的位置。响应式Web设计的兴起意味着设计师和开发人员可以为移动Web浏览器创建真正令人难以置信的站点和应用程序，但选择仅构建Web应用程序将使它们无法进入移动平台应用商店。Apple的iOS应用程序是用Objective
    C（最近是Swift）编写的，而Android依赖于Java编程语言（不要与我们的朋友JavaScript混淆）。这意味着HTML、CSS和JavaScript组成的Web是唯一真正的跨平台用户界面平台。
- en: Declarative Interfaces with JavaScript
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript的声明性界面
- en: In the early 2010s developers at Facebook began to face challenges in the organization
    and management of their JavaScript code. In response, the software engineer Jordan
    Walke wrote React, inspired by Facebook’s PHP library, XHP. React differed from
    other popular JavaSript frameworks in that it focused solely on the rendering
    of the UI. To do this, React took a “declarative” programming approach, meaning
    that it provides an abstraction that allows developers to focus on describing
    what the state of the UI should be.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在2010年代初，Facebook的开发人员开始面临JavaScript代码组织和管理方面的挑战。作为回应，软件工程师乔丹·沃尔克（Jordan Walke）编写了React，受Facebook的PHP库XHP启发。React与其他流行的JavaScript框架不同，它专注于UI的渲染。为了实现这一点，React采用了“声明性”编程方法，这意味着它提供了一个抽象，允许开发人员专注于描述UI的状态应该是什么样的。
- en: With the rise of React, and similar libraries such as Vue.js, we have seen a
    shift in the way that developers are writing UIs. These frameworks provide a means
    to manage the state of a UI at the component level. This allows applications to
    feel smooth and seamless to users, while providing an excellent development experience.
    With tooling such as Electron for building desktop apps and React Native for cross-platform
    native mobile applications, developers and teams are now able to leverage these
    paradigms in all of their applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 React 的兴起，以及类似 Vue.js 这样的库，我们看到开发人员在编写 UI 时发生了变化。这些框架提供了一种在组件级别管理 UI 状态的方式。这使得应用程序对用户来说感觉流畅和无缝，并提供了优秀的开发体验。借助诸如
    Electron 用于构建桌面应用程序和 React Native 用于跨平台本地移动应用程序的工具，开发人员和团队现在能够在所有应用程序中利用这些范例。
- en: Just Enough React
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刚刚够用的 React
- en: Throughout the remaining chapters, we’ll be relying on the React library to
    build our UIs. You do not need to have any prior experience with React to follow
    along, but it may help to get a sense of the syntax before jumping in. To do this,
    we’ll use [`create-react-app`](https://oreil.ly/dMQyk) to scaffold out a new project.
    `create-react-app` is a tool developed by the React team that allows us to quickly
    set up a new React project and helpfully abstracts away the underlying build tooling,
    such as Webpack and Babel.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将依赖于 React 库来构建我们的 UI。你不需要有任何 React 的先验经验来跟进，但在开始之前了解一下语法可能会有所帮助。为此，我们将使用
    [`create-react-app`](https://oreil.ly/dMQyk) 来快速搭建一个新项目。`create-react-app` 是由
    React 团队开发的工具，可以快速设置一个新的 React 项目，并巧妙地抽象了底层的构建工具，如 Webpack 和 Babel。
- en: 'In your terminal application `cd` into your projects directory and run the
    following commands, which will create a new React application in a folder named
    *just-enough-react*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端应用程序中 `cd` 到你的项目目录，并运行以下命令，将在名为 *just-enough-react* 的文件夹中创建一个新的 React 应用程序：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running these commands will output a directory in *just-enough-react*, which
    contains all of the project structure, code dependencies, and development scripts
    to build a full-featured application. Start the application by running:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令将在 *just-enough-react* 目录中输出一个目录，其中包含所有的项目结构、代码依赖和开发脚本，以构建一个功能齐全的应用程序。通过运行以下命令启动应用程序：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our React application will now be visible in our browser at *http://localhost:3000*
    ([Figure 11-1](#cra_npm_start)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 React 应用程序现在可以在浏览器中的 *http://localhost:3000* 上看到（[图 11-1](#cra_npm_start)）。
- en: '![A screenshot of create-react-app running locally in the browser](assets/jsev_1101.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![本地运行的 create-react-app 的屏幕截图](assets/jsev_1101.png)'
- en: Figure 11-1\. Typing npm start will launch the default create-react-app in the
    browser
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1\. 输入 npm start 将在浏览器中启动默认的 create-react-app
- en: 'We can now begin to edit our application by making changes to the *src/App.js*
    file. This file contains our primary React component. After requiring some dependencies,
    it consists of a function that returns some HTML-like markup:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过修改 *src/App.js* 文件来开始编辑我们的应用程序。这个文件包含了我们的主要 React 组件。在引入一些依赖之后，它包含一个返回类似
    HTML 标记的函数：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The markup used within the component is something called *JSX*. JSX is an XML-based
    syntax, similar to HTML, which allows us to precisely describe our UI and couple
    it with user actions within our JavaScript files. If you know HTML, picking up
    JSX is a matter of learning a few minor differences. The big difference in this
    example is that HTML’s `class` property is replaced by `className` to avoid collisions
    with JavaScript’s native class syntax.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 组件中使用的标记是一种叫做 *JSX* 的东西。JSX 是一种基于 XML 的语法，类似于 HTML，允许我们精确描述我们的 UI 并将其与用户操作耦合在我们的
    JavaScript 文件中。如果你了解 HTML，那么学习 JSX 就是学习一些小的差异。这个例子中的一个重大区别是，HTML 中的 `class` 属性被
    `className` 取代，以避免与 JavaScript 的原生类语法冲突。
- en: JSX? Yuck!
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX？呸！
- en: If, like me, you come from a background of web standards and a strict decoupling
    of concerns, this may feel very icky to you. I admit that the first time that
    I encountered JSX, I immediately took a strong disliking to it. However, the coupling
    of UI logic with the rendering output presents many compelling advantages that
    may grow on you over time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和我一样，来自于 web 标准和严格的关注点解耦背景，可能会对这感到很反感。我承认，当我第一次接触到 JSX 时，我立刻对它产生了强烈的反感。然而，UI逻辑与渲染输出的耦合提供了许多引人注目的优势，随着时间的推移，你可能会渐渐接受它。
- en: 'Let’s begin to customize our app by removing most of the boilerplate code and
    reducing it to a simple “Hello World!”:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始定制我们的应用程序，通过删除大部分样板代码，并将其简化为一个简单的“Hello World！”：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You may notice the enclosing `<div>` tag that wraps all of our JSX content.
    Each React UI component must be contained within a parent HTML element or use
    a React fragment, which represents a non-HTML element container, such as:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到包围所有 JSX 内容的封闭`<div>`标签。每个 React UI 组件必须包含在父 HTML 元素内或使用 React 片段，表示非
    HTML 元素容器，例如：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One of the most powerful things about React is that we can use JavaScript directly
    within our JSX by enclosing it within curly brackets, `{}`. Let’s update our `App`
    function to make use of some variables:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: React 最强大的一点是我们可以通过在花括号`{}`中包裹 JavaScript 来直接在 JSX 中使用它。让我们更新我们的`App`函数以利用一些变量：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, you can see that we’re making use of JavaScript directly
    in our interface. How cool is that?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，您可以看到我们在界面中直接使用 JavaScript。这是多么酷呀！
- en: 'Another useful feature of React is the ability to turn each UI feature into
    its own component. A good rule of thumb is if an aspect of the UI behaves in an
    independent manner, it should be separated out into its own component. Let’s create
    a new component. To begin, create a new file at *src/Sparkle.js* and declare a
    new function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: React 的另一个有用功能是能够将每个 UI 特性转换为自己的组件。一个好的经验法则是，如果 UI 的某个方面以独立的方式行为，那么它应该被分离成自己的组件。让我们创建一个新组件。首先，在*src/Sparkle.js*创建一个新文件并声明一个新函数：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now let’s add some functionality. Whenever a user clicks a button it will add
    a sparkle emoji to our page (critical functionality for any application). In order
    to do this, we’ll import React’s `useState` component and define some initial
    state for our component, which will be an empty string (in other words, no sparkle).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一些功能。每当用户点击按钮时，它将向我们的页面添加一个闪亮的表情符号（任何应用程序的关键功能）。为此，我们将导入 React 的`useState`组件，并为我们的组件定义一些初始状态，即空字符串（换句话说，没有闪光）。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What Is State?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是状态？
- en: We’ll cover state in more detail in [Chapter 15](ch15.html#web-authentication),
    but for now it may be helpful to know that the *state* of a component represents
    the current status of any information that may change within the component. For
    example, if a UI component has a checkbox, it has a state of `true` when checked
    and `false` when it is not checked.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 15 章](ch15.html#web-authentication)中更详细地讨论状态，但现在知道*状态*表示组件内可能会变化的任何信息的当前状态可能会有所帮助。例如，如果
    UI 组件有复选框，则当复选框选中时它具有`true`状态，而当未选中时则具有`false`状态。
- en: 'Now we can complete our component by adding a button with `onClick` functionality.
    Note the camel casing, which is required within JSX:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过添加具有`onClick`功能的按钮来完成我们的组件。请注意 JSX 中需要使用驼峰命名法：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To use our component we can import it into our *src/App.js* file and declare
    it as a JSX element as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们的组件，我们可以将其导入到*src/App.js*文件中，并将其声明为 JSX 元素，如下所示：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now if you visit our application in the browser, you should see our button and
    be able to click it to add sparkle emojis to the page! This represents one of
    the true superpowers of React. We’re able to re-render individual components,
    or elements of components, in isolation from the rest of our application ([Figure 11-2](#ui-intro-cra-component)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您在浏览器中访问我们的应用程序，您应该能看到我们的按钮，并能够单击它将闪光表情符号添加到页面上！这展示了 React 的真正超能力之一。我们能够独立于应用程序的其余部分重新渲染单个组件或组件的元素（[图 11-2](#ui-intro-cra-component)）。
- en: '![A screenshot of our React application rendering the Sparkle.js component](assets/jsev_1102.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![我们的 React 应用程序呈现 Sparkle.js 组件的截图](assets/jsev_1102.png)'
- en: Figure 11-2\. Clicking the button updates the component state and adds content
    to our page
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 单击按钮更新组件状态并向页面添加内容
- en: We have now created a new application using `create-react-app`, updated our
    `Application` component’s JSX, created a new component, declared a component state,
    and dynamically updated a component. With a basic understanding of these fundamentals,
    we are now prepared to develop declarative UIs in JavaScript using React.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用`create-react-app`创建了一个新应用程序，更新了`Application`组件的 JSX，创建了一个新组件，声明了一个组件状态，并动态更新了一个组件。通过对这些基础知识的基本理解，我们现在可以准备使用
    React 在 JavaScript 中开发声明式 UI。
- en: Conclusion
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We are surrounded by user interfaces across a wide variety of devices. JavaScript
    and web technologies present an unparalleled opportunity to develop these interfaces
    across the multitude of platforms, using a single set of technologies. Meanwhile,
    React and other declarative view libraries allow us to build powerful, dynamic
    applications. The combination of these technologies enables developers to build
    amazing things without requiring specialized knowledge for each platform. In the
    coming chapters we’ll put this into practice by utilizing a GraphQL API to build
    interfaces for web, desktop, and native mobile applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们被各种设备上的用户界面所包围。JavaScript 和 Web 技术提供了在多种平台上开发这些界面的无与伦比的机会，使用统一的技术组合。同时，React
    和其他声明式视图库使我们能够构建强大、动态的应用程序。这些技术的结合使开发人员能够在不需要为每个平台专门的知识的情况下构建令人惊叹的东西。在接下来的章节中，我们将通过利用
    GraphQL API 来为 Web、桌面和本机移动应用程序构建界面来实践这一点。
