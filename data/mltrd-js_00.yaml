- en: Foreword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: The book you’re holding now is a fun one. It’s a JavaScript book that opens
    with examples written in C, talks about multithreading with an explicitly single-threaded
    programming language, provides great examples of how and when to intentionally
    block the event loop after experts have been telling you for years to never do
    so, and closes with an excellent list of reasons and caveats about why you might
    not actually want to use the mechanisms the book describes. More importantly,
    it’s a book that I would consider essential reading for any JavaScript developer
    no matter where your code is expected to be deployed and run.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在手中的这本书非常有趣。它是一本JavaScript书籍，以C语言编写的示例开篇，使用显式单线程编程语言讨论多线程，并提供了何时以及如何有意地阻塞事件循环的绝佳示例，这与多年来专家一直告诉您绝不能这样做形成了鲜明对比，并以关于为什么您实际上可能不想使用本书描述的机制的优缺点的出色列表结束。更重要的是，这是一本我认为无论您的代码将被部署和运行在何处，都应该阅读的JavaScript开发者必读书籍。
- en: 'When I’ve worked with companies to help them build more efficient and more
    performant Node.js and JavaScript applications, I’ve often had to step back and
    take the time first to discuss many of the common misconceptions developers have
    about the programming language. For instance, I once had an engineer with a long
    history in Java and .NET development argue that creating a new promise in JavaScript
    was a lot like creating a new thread in Java (it’s not), and that promises allow
    JavaScript to run in parallel (they don’t). In a separate conversation someone
    had created a Node.js application that was spawning over a thousand simultaneous
    worker threads and wasn’t sure why they weren’t seeing an expected improvement
    in performance while testing on a machine that had only eight logical CPU cores.
    The lesson from these conversations is clear: multithreading, concurrency, and
    parallelism are still very unfamiliar and difficult topics for a very large percentage
    of JavaScript developers.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我与公司合作帮助它们构建更高效、性能更优的Node.js和JavaScript应用程序时，我经常不得不退后一步，首先讨论许多开发者在编程语言方面的常见误解。例如，我曾经与一位有着悠久Java和.NET开发经验的工程师辩论，他认为在JavaScript中创建一个新的Promise很像在Java中创建一个新线程（事实并非如此），并且Promise允许JavaScript并行执行（实际上并不允许）。在另一次对话中，有人创建了一个Node.js应用程序，同时产生了超过一千个并行的工作线程，但在仅有八个逻辑CPU核心的机器上测试时，并没有看到预期的性能改进。从这些对话中得到的教训很明显：多线程、并发和并行仍然对很大比例的JavaScript开发者来说是非常陌生和困难的主题。
- en: Dealing with these misconceptions is what led directly to me (working with my
    colleague and fellow Node.js Technical Steering Committee member, Matteo Collina)
    developing the Broken Promises workshop in which we would lay out the foundations
    of asynchronous programming in JavaScript—teaching engineering teams how to reason
    more effectively about the order in which their code would execute and the timing
    of various events. It also led directly to the development of the Piscina open
    source project (with fellow Node.js core contributor Anna Henningsen), which provides
    a best-practice implementation of a worker pool model on top of Node.js worker
    threads. But those only help with part of the challenge.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些误解直接导致我（与我的同事和Node.js技术指导委员会成员Matteo Collina合作）开发了“破碎的承诺”研讨会，我们在其中阐述了JavaScript异步编程的基础，教导工程团队如何更有效地推理他们的代码执行顺序和各种事件的时序。这也直接导致了与Node.js核心贡献者Anna
    Henningsen合作开发的Piscina开源项目，该项目提供了在Node.js worker线程之上的工作池模型的最佳实践实现。但这些只是帮助解决挑战的一部分。
- en: In this book, Bryan and Thomas expertly lay out the foundations of multithreaded
    development in general, and deftly illustrate how the various JavaScript runtimes
    like web browsers and Node.js enable parallel computing with a programming language
    that includes no built-in mechanisms to enable it. Because the responsibility
    for providing multithreading support has fallen on the runtimes, and because there
    are so many differences between those runtimes, browsers and platforms like Node.js
    implement multithreading in different ways. Although they share similar APIs,
    a worker thread in Node.js is really not the same thing as a web worker in a web
    browser. Support for shared workers, web workers, and service workers is nearly
    universal across browsers, and worker threads have been in Node.js for several
    years now, but they are all still a relatively new concept for JavaScript developers.
    No matter where your JavaScript runs, this book will provide important insight
    and information. Most importantly, however, the authors take the time to explain
    exactly why you should care at all about multithreading in your JavaScript applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，Bryan 和 Thomas 精心阐述了多线程开发的基础知识，巧妙地展示了各种 JavaScript 运行时（如 Web 浏览器和 Node.js）如何在不具备内置机制的编程语言中实现并行计算。因为多线程支持的责任已落在运行时上，并且这些运行时之间存在许多差异，因此浏览器和
    Node.js 等平台采用了不同的多线程实现方式。虽然它们共享类似的 API，但 Node.js 中的工作线程并不真正等同于 Web 浏览器中的 Web Worker。在浏览器中，对共享工作者、Web
    Worker 和 Service Worker 的支持几乎是普遍存在的，而 Node.js 中的工作线程已经存在了好几年，但对于 JavaScript 开发者来说，它们依然是一个相对较新的概念。无论你的
    JavaScript 运行在哪里，这本书都会提供重要的见解和信息。然而，最重要的是，作者们花时间详细解释为什么你应该关心在你的 JavaScript 应用程序中使用多线程。
- en: James Snell,
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: James Snell，
- en: Node.js Technical Steering Committee Member
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 技术指导委员会成员
