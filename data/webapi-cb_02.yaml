- en: Chapter 2\. Simple Persistence with the Web Storage API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。使用 Web Storage API 进行简单持久化
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The Web Storage API persists simple data locally, in the user’s browser. You
    can retrieve this data later, even after closing and reopening the browser.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Web Storage API 在用户的浏览器中本地持久化简单数据。即使在关闭并重新打开浏览器后，你仍然可以检索这些数据。
- en: 'This API has a `Storage` interface that provides data access and persistence.
    You don’t create instances of `Storage` directly; there are two global instances:
    `window.localStorage` and `window.sessionStorage`. The only difference between
    these is how long they retain the data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 具有提供数据访问和持久性的`Storage`接口。你不直接创建 `Storage` 实例；有两个全局实例：`window.localStorage`
    和 `window.sessionStorage`。它们唯一的区别在于数据保留的时长。
- en: '`sessionStorage` data is associated with a specific browser session. It retains
    the data if the page is reloaded, but closing the browser completely loses the
    data. Different tabs for the same origin do not share the same persisted data.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`sessionStorage` 数据与特定的浏览器会话相关联。如果页面重新加载，它会保留数据，但完全关闭浏览器会导致数据丢失。相同起源的不同标签页不共享相同的持久化数据。'
- en: On the other hand, `localStorage` shares the same storage space across all tabs
    and sessions for the same origin. The browser retains this data even after you
    close the browser. In general, session storage is a good choice if you want to
    store something ephemeral or sensitive that you want to be destroyed once the
    browser is closed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`localStorage` 在同一起源的所有标签页和会话中共享相同的存储空间。即使关闭浏览器后，浏览器仍保留这些数据。总体而言，如果你想存储一些暂时的或敏感的内容，并希望在关闭浏览器后销毁它们，会话存储是一个不错的选择。
- en: In both cases, storage space is specific to a given origin.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种情况下，存储空间都是特定于给定起源的。
- en: Getting and Setting Items
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取和设置项
- en: 'Web Storage can only store string values. Each value has a key that you can
    use to look it up. The API is simple:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Web Storage 只能存储字符串值。每个值都有一个键，可以用来查找它。API 很简单：
- en: '`getItem(key)`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`getItem(key)`'
- en: Returns the string bound to a key, or `null` if the key doesn’t exist.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与键绑定的字符串，如果键不存在则返回`null`。
- en: '`setItem(key, value)`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`setItem(key, value)`'
- en: Stores a string value under the given key. If the key already exists, you’ll
    overwrite it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定键下存储一个字符串值。如果键已存在，你将覆盖它。
- en: '`clear()`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear()`'
- en: Deletes all stored data for the current origin.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 删除当前起源的所有存储数据。
- en: Disadvantages
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: 'Web Storage can be really useful, but it does have a few disadvantages:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Web Storage 非常有用，但也有一些缺点：
- en: Data storage limitations
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储限制
- en: Web Storage can only store string data. You can store simple objects, but not
    directly—you’ll need to convert them to a JavaScript Object Notation (JSON) string
    first.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Web Storage 只能存储字符串数据。你可以存储简单对象，但不能直接存储 —— 需要先将其转换为 JavaScript 对象表示法（JSON）字符串。
- en: Size limitations
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大小限制
- en: Each origin has a limited amount of space available for storage. In most browsers
    this is 5 megabytes. If an origin’s storage becomes full, the browser will throw
    an exception if you attempt to add more data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个起源对于存储都有限定的空间。在大多数浏览器中，这是 5 兆字节。如果一个起源的存储空间已满，如果尝试添加更多数据，浏览器将抛出异常。
- en: Security concerns
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安全问题
- en: Even though the browser stores each origin’s data separately, it’s still vulnerable
    to cross-site scripting (XSS) attacks. An attacker can inject code via an XSS
    attack that steals locally persisted data. Be mindful of what sensitive data you
    store here.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 即使浏览器分别存储每个起源的数据，它仍然容易受到跨站点脚本（XSS）攻击的影响。攻击者可以通过 XSS 攻击注入代码，窃取本地持久化数据。注意存储敏感数据时的风险。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The recipes in this chapter all use *local* storage, but they all apply to *session*
    storage as well, since both objects implement the same `Storage` interface.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例都使用*本地*存储，但同样适用于*会话*存储，因为这两种对象都实现了相同的`Storage`接口。
- en: Checking for Web Storage Support
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 Web Storage 支持
- en: Problem
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to check if local storage is available before using it to avoid crashing
    your app. You also want to handle the situation where local storage is available
    but blocked by user settings.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在使用本地存储之前检查其是否可用，以避免应用程序崩溃。你还希望处理本地存储可用但被用户设置阻止的情况。
- en: Solution
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Check the global `window` object for the `localStorage` property to verify that
    the browser supports local storage. If the check passes, local storage is available
    (see [Example 2-1](#code_checkLocalStorage)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 检查全局 `window` 对象的 `localStorage` 属性，以验证浏览器是否支持本地存储。如果检查通过，则本地存储可用（见 [示例 2-1](#code_checkLocalStorage)）。
- en: Example 2-1\. Checking if local storage is available
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1。检查本地存储是否可用
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Discussion
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The function in [Example 2-1](#code_checkLocalStorage) handles both cases:
    if local storage is supported at all, and if it exists and is not blocked by user
    settings.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-1](#code_checkLocalStorage)中的函数处理了两种情况：如果本地存储根本不支持，以及如果它存在且没有被用户设置阻止。'
- en: It checks to see if the `window.localStorage` property is not `undefined`. If
    this check passes, this means the browser supports local storage. If the user
    has *blocked* local storage, just the act of referencing the `window.localStorage`
    property throws an exception with a message saying access is denied.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它检查`window.localStorage`属性是否不是`undefined`。如果这个检查通过，这意味着浏览器支持本地存储。如果用户*阻止*了本地存储，仅仅引用`window.localStorage`属性就会抛出一个异常，错误信息显示为访问被拒绝。
- en: By surrounding the property check with a `try`/`catch` block, you can also handle
    this case. When catching the exception, it considers local storage not available
    and returns `false`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用`try`/`catch`块包围属性检查，你还可以处理这种情况。当捕获到异常时，会考虑到本地存储不可用并返回`false`。
- en: Persisting String Data
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化字符串数据
- en: Problem
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to persist a string value to local storage and read it back later.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要将一个字符串值持久化到本地存储中，并在稍后读取它。
- en: Solution
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `localStorage.getItem` and `localStorage.setItem` to read and write the
    data. [Example 2-2](#example2-2) shows how we can use local storage to remember
    the value of a color picker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`localStorage.getItem`和`localStorage.setItem`来读取和写入数据。[示例 2-2](#example2-2)展示了如何使用本地存储来记住颜色选择器的值。
- en: Example 2-2\. Persisting data to local storage
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-2\. 将数据持久化到本地存储
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discussion
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When the page first loads, local storage is checked for a previously saved color.
    If you call `getItem` with a key that doesn’t exist, it returns `null`. The return
    value is only set in the color picker if it is not null or empty.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面首次加载时，会检查本地存储是否已经保存了以前的颜色。如果使用一个不存在的键调用`getItem`，它会返回`null`。只有当返回值不为null或空时，才会在颜色选择器中设置该值。
- en: When the color picker’s value changes, the event handler saves the new value
    to local storage. If there’s already a saved color, this overwrites it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当颜色选择器的值发生变化时，事件处理程序将新值保存到本地存储中。如果已经有一个保存的颜色，它会被覆盖。
- en: Persisting Simple Objects
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化简单对象
- en: Problem
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a JavaScript object, such as a user profile, that you want to persist
    to local storage. You can’t do this directly because local storage only supports
    string values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个 JavaScript 对象，比如用户配置文件，你想要将其持久化到本地存储中。由于本地存储仅支持字符串值，因此你不能直接这样做。
- en: Solution
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `JSON.stringify` to convert the object to a JSON string before saving it.
    When loading the value later, use `JSON.parse` to turn it back into an object,
    as shown in [Example 2-3](#example2-3).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`JSON.stringify`将对象转换为 JSON 字符串后再保存它。在稍后加载该值时，使用`JSON.parse`将其转回对象，如[示例 2-3](#example2-3)所示。
- en: Example 2-3\. Using `JSON.parse` and `JSON.stringify`
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-3\. 使用`JSON.parse`和`JSON.stringify`
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Discussion
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Passing the profile object directly to `localStorage.setItem` won’t have the
    desired effect, as shown in [Example 2-4](#example2-4).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 直接将配置文件对象传递给`localStorage.setItem`不会产生预期的效果，如[示例 2-4](#example2-4)所示。
- en: Example 2-4\. Attempting to persist an array
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-4\. 尝试持久化一个数组
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The saved value is `[object Object]`. This is the result of calling `toString`
    on the profile object.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的值是`[object Object]`。这是对配置文件对象调用`toString`的结果。
- en: '`JSON.stringify` takes an object and returns a JSON string representing the
    object. Passing the user profile object to `JSON.stringify` results in this JSON
    string (whitespace added for readability):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSON.stringify`接受一个对象，并返回表示该对象的 JSON 字符串。将用户配置文件对象传递给`JSON.stringify`将得到这个
    JSON 字符串（为了可读性添加了空格）：'
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This approach works for objects like the user profile, but the [JSON specification](https://www.json.org)
    limits what can be serialized to a string. Generally speaking, these are objects,
    arrays, strings, numbers, booleans, and `null`. Other values, like class instances
    or functions, can’t be serialized in this way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法适用于像用户配置文件这样的对象，但是[JSON 规范](https://www.json.org)限制了可以序列化为字符串的内容。一般来说，这些是对象、数组、字符串、数字、布尔值和`null`。其他值，比如类实例或函数，不能以这种方式序列化。
- en: Persisting Complex Objects
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化复杂对象
- en: Problem
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to persist an object that can’t be directly serialized to a JSON string,
    to local storage. For example, the user profile object might have a `Date` object
    in it specifying when it was last updated.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要将一个无法直接序列化为 JSON 字符串的对象，例如用户配置文件中可能包含一个指定最后更新时间的`Date`对象，持久化到本地存储中。
- en: Solution
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `replacer` and `reviver` functions with `JSON.stringify` and `JSON.parse`
    to provide custom serialization for the complex data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `JSON.stringify` 和 `JSON.parse` 的 `replacer` 和 `reviver` 函数，为复杂数据提供自定义序列化。
- en: 'Consider the following profile object:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下配置文件对象：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you serialize this object with `JSON.stringify`, the resulting string has
    the `lastUpdated` date as an ISO date string (see [Example 2-5](#example2-5)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `JSON.stringify` 序列化这个对象，生成的字符串将以 ISO 日期字符串形式包含 `lastUpdated` 日期（参见 [示例 2-5](#example2-5)）。
- en: Example 2-5\. Attempting to serialize an object with a `Date` object
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-5\. 尝试序列化带有 `Date` 对象的对象
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The resulting JSON string looks like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 JSON 字符串如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now you have a JSON string that you can save to local storage. However, if you
    call `JSON.parse` with this JSON string, the resulting object differs slightly
    from the original. The `lastUpdated` property is still a string, not a `Date`,
    because `JSON.parse` doesn’t know that this should be a `Date` object.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个可以保存到本地存储的 JSON 字符串。然而，如果你使用这个 JSON 字符串调用 `JSON.parse`，生成的对象与原始对象略有不同。`lastUpdated`
    属性仍然是一个字符串，而不是一个 `Date` 对象，因为 `JSON.parse` 不知道这应该是一个 `Date` 对象。
- en: To handle these situations, `JSON.stringify` and `JSON.parse` accept special
    functions called `replacer` and `reviver`, respectively. These functions provide
    custom logic to convert nonprimitive values to and from JSON.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这些情况，`JSON.stringify` 和 `JSON.parse` 接受名为 `replacer` 和 `reviver` 的特殊函数。这些函数提供自定义逻辑，用于将非基本类型值转换为
    JSON 以及从 JSON 转换回来。
- en: Serializing with a replacer function
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `replacer` 函数进行序列化
- en: The `replacer` argument to `JSON.stringify` can work in several different ways.
    MDN has some comprehensive [documentation on the `replacer` function](https://oreil.ly/H56TM).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSON.stringify` 的 `replacer` 参数可以以几种不同的方式工作。MDN 提供了关于 `replacer` 函数的详细 [文档](https://oreil.ly/H56TM)。'
- en: 'The `replacer` function takes two arguments: `key` and `value` (see [Example 2-6](#example2-6)).
    `JSON.stringify` first calls this function with an empty string as the key, and
    the object being stringified as the value. You can transform the `lastUpdated`
    field here to a serializable representation of the `Date` object by calling `getTime()`,
    which gives the date as the number of milliseconds since the epoch (midnight UTC
    on January 1, 1970).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`replacer` 函数接受两个参数：`key` 和 `value`（参见 [示例 2-6](#example2-6)）。`JSON.stringify`
    首先以空字符串作为键，被字符串化的对象作为值调用此函数。你可以在这里通过调用 `getTime()` 将 `lastUpdated` 字段转换为 `Date`
    对象的可序列化表示，`getTime()` 返回自纪元时（1970 年 1 月 1 日 UTC 午夜）以来的毫秒数。'
- en: Example 2-6\. The `replacer` function
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-6\. `replacer` 函数
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can pass this `replacer` function to `JSON.stringify` to serialize the object
    to JSON, as shown in [Example 2-7](#example2-7).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个 `replacer` 函数传递给 `JSON.stringify`，将对象序列化为 JSON，如 [示例 2-7](#example2-7)
    所示。
- en: Example 2-7\. Stringifying with the `replacer`
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-7\. 使用 `replacer` 进行字符串化
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This generates the following JSON string:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下 JSON 字符串：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The number in the `lastUpdated` property is the timestamp for June 2, 2025.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`lastUpdated` 属性中的数字是 2025 年 6 月 2 日的时间戳。'
- en: Deserializing with the reviver function
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `reviver` 函数进行反序列化
- en: Later, when you pass this JSON string to `JSON.parse`, the `lastUpdated` property
    remains as a number (the timestamp). You can use a `reviver` function to transform
    this serialized number value back into a `Date` object.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这个 JSON 字符串传递给 `JSON.parse` 时，`lastUpdated` 属性仍然保持为一个数字（时间戳）。你可以使用 `reviver`
    函数将这个序列化的数字值转换回一个 `Date` 对象。
- en: '`JSON.parse` calls the `reviver` function for each property in the JSON string.
    For each key, the value returned from the function is the value that is set in
    the final object (see [Example 2-8](#example2-8)).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSON.parse` 为 JSON 字符串中的每个属性调用 `reviver` 函数。对于每个键，函数返回的值是设置在最终对象中的值（参见 [示例 2-8](#example2-8)）。'
- en: Example 2-8\. The `reviver` function
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-8\. `reviver` 函数
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To use the `reviver`, pass it as the second argument to `JSON.parse`, as shown
    in [Example 2-9](#example2-9).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `reviver`，将其作为第二个参数传递给 `JSON.parse`，如 [示例 2-9](#example2-9) 所示。
- en: Example 2-9\. Parsing with the `reviver`
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-9\. 使用 `reviver` 进行解析
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This returns an object that is equal to the user profile object we started
    with:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个与我们最初的用户配置文件对象相等的对象：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Discussion
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: With this reliable method to convert this object to and from JSON, keeping the
    `Date` property intact, you can persist these values in local storage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种可靠的方法将对象转换为 JSON，并保持 `Date` 属性完整，你可以将这些值持久化到本地存储中。
- en: The approach shown here is just one way to work with a `replacer` function.
    Instead of a `replacer` function, you could also define a `toJSON` function on
    the object being stringified. Combined with a factory function, no `replacer`
    function is necessary.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此处展示的方法只是使用 `replacer` 函数处理的一种方式。除了 `replacer` 函数外，还可以在要序列化为字符串的对象上定义一个 `toJSON`
    函数。结合工厂函数，就不需要 `replacer` 函数。
- en: Example 2-10\. Using a factory that adds a `toJSON` function
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-10\. 使用添加了 `toJSON` 函数的工厂
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Calling `JSON.stringify` with the object in [Example 2-10](#factoryToJSON) returns
    the same JSON string as before, with `lastUpdated` properly converted to a timestamp.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [示例 2-10](#factoryToJSON) 中的对象调用 `JSON.stringify` 返回与之前相同的 JSON 字符串，`lastUpdated`
    已适当转换为时间戳。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There isn’t any mechanism like this for parsing a string back to an object with
    `JSON.parse`. If you use the `toJSON` approach shown here, you’ll still need to
    write a `reviver` function to properly deserialize a user profile string.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 `JSON.parse` 解析字符串为对象的操作，没有类似 `toJSON` 的机制。如果使用此处展示的 `toJSON` 方法，仍然需要编写一个
    `reviver` 函数，以正确反序列化用户配置文件字符串。
- en: Since functions can’t be serialized, the resulting JSON string won’t have a
    `toJSON` property. Whatever method you choose, the resulting JSON is the same.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于函数无法序列化，因此生成的 JSON 字符串不会有 `toJSON` 属性。无论你选择哪种方法，生成的 JSON 都是相同的。
- en: Listening for Storage Changes
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听存储更改
- en: Problem
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to receive a notification when another tab on the same origin makes
    changes to local storage.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当同源的另一个标签页更改本地存储时，你希望收到通知。
- en: Solution
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Listen for the `storage` event on the `window` object. This event fires when
    other tabs or sessions in the same browser, on the same origin, make changes to
    any data in local storage (see [Example 2-11](#example2-11)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `window` 对象上监听 `storage` 事件。当同一来源的其他标签页或会话对本地存储中的任何数据进行更改时，此事件会触发（参见 [示例 2-11](#example2-11)）。
- en: Example 2-11\. Listening for storage changes from another tab
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-11\. 监听来自另一个标签页的存储更改
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Consider the persistent color picker from [“Persisting String Data”](#recipe_persistStringData).
    If the user has multiple tabs open and changes the color in another tab, you can
    get notified and update the local in-memory copy of the data to keep everything
    in sync.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑来自[“持久化字符串数据”](#recipe_persistStringData)的持久性颜色选择器。如果用户同时打开了多个标签页，并在另一个标签页中更改颜色，您可以收到通知并更新本地内存中的数据副本，以保持所有内容同步。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `storage` event is *not* triggered on the tab or page that made the storage
    change. It’s meant to listen for changes that *other* pages have made to local
    storage.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage` 事件不会在进行存储更改的标签页或页面上触发。它用于监听其他页面对本地存储所做的更改。'
- en: A `storage` event specifies which key was changed and what the new value is.
    It also includes the old value, in case you need it for comparison.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage` 事件指定了哪个键发生了更改以及新值是什么。它还包括旧值，以便进行比较。'
- en: Discussion
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The main use case for the `storage` event is to keep multiple sessions in sync
    with each other in real time.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage` 事件的主要用例是实时保持多个会话之间的同步。'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `storage` event is only triggered for other tabs and sessions in the same
    browser on the same device.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage` 事件仅在同一设备上的同一浏览器中的其他标签页和会话中触发。'
- en: Even if you don’t listen for the `storage` event, all sessions on the same origin
    still share the same local storage data. If you call `localStorage.getItem` at
    any point, you’ll still get the latest value. The `storage` event just provides
    a real-time notification when such a change happens so the app can update the
    local data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不监听 `storage` 事件，同一来源的所有会话仍然共享同一本地存储数据。如果在任何时候调用 `localStorage.getItem`，你仍将获得最新的值。`storage`
    事件只是在此类更改发生时提供实时通知，以便应用程序可以更新本地数据。
- en: Finding All Known Keys
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找所有已知键
- en: Problem
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to know all the keys that are currently in local storage for the current
    origin.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你想知道当前原点的本地存储中目前存在的所有键。
- en: Solution
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the `length` property with the `key` function to build a list of all the
    known keys. `Storage` objects don’t have a function to return the list of keys
    directly, but you can build such a list by using the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `length` 属性与 `key` 函数构建所有已知键的列表。`Storage` 对象没有直接返回键列表的函数，但可以通过以下方式构建这样的列表：
- en: The `length` property returns the number of keys.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` 属性返回键的数量。'
- en: The `key` function, given an index, returns the key at that index.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定索引，`key` 函数返回该索引处的键。
- en: You can combine these with a `for` loop to build an array of all the keys, as
    shown [Example 2-12](#buildListKeys).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以结合 `for` 循环使用 [示例 2-12](#buildListKeys) 中显示的方法，构建所有键的数组。
- en: Example 2-12\. Building a list of keys
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-12\. 构建键列表
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Discussion
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You can combine the `length` property and the `key` function to perform other
    types of queries, too. This could be, for example, a function that takes an array
    of keys and returns an object containing just those key/value pairs (see [Example 2-13](#example2-13)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以结合 `length` 属性和 `key` 函数执行其他类型的查询。例如，这可能是一个函数，它接受一个键的数组并返回一个包含这些键/值对的对象（参见
    [示例 2-13](#example2-13)）。
- en: Example 2-13\. Querying for a subset of key/value pairs
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-13\. 查询一组键/值对的子集
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The ordering of the keys, as referenced with the `key` function, may not be
    the same across different browsers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `key` 函数引用的键的排序在不同浏览器中可能不同。
- en: Removing Data
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除数据
- en: Problem
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to remove some, or all, data from local storage.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您想从本地存储中删除一些或全部数据。
- en: Solution
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `removeItem` and `clear` methods as appropriate.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要使用 `removeItem` 和 `clear` 方法。
- en: To remove a particular key/value pair from local storage, call `localStorage.remove​I⁠tem`
    with the key (see [Example 2-14](#example2-14)).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要从本地存储中删除特定键值对，请调用 `localStorage.remove​I⁠tem` 并传入键（参见 [示例 2-14](#example2-14)）。
- en: Example 2-14\. Removing an item from local storage
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-14\. 从本地存储中移除一个项目
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Call `localStorage.clear` to remove *all* data from local storage for the current
    origin, as shown in [Example 2-15](#example2-15).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `localStorage.clear` 来移除当前来源（origin）的本地存储中的 *所有* 数据，如 [示例 2-15](#example2-15)
    中所示。
- en: Example 2-15\. Removing all items from local storage
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-15\. 从本地存储中移除所有项目
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Discussion
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Browsers limit the amount of data that you can store in Web Storage. Typically,
    the limit is about 5 MB. To avoid running out of space and throwing an error,
    you should remove items once they are no longer needed. Depending on what you’re
    using Web Storage for, you can also provide a way for your users to clear stored
    data. Consider an emoji picker that stores recently selected emojis in local storage.
    You might add a Clear Recents button that removes these items.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器限制可以存储在 Web 存储中的数据量。通常限制约为 5 MB。为了避免空间不足并引发错误，应在不再需要时删除项目。根据您使用 Web 存储的情况，您还可以提供一种方法让用户清除存储的数据。考虑一个表情选择器，它在本地存储中存储最近选择的表情。您可以添加一个“清除最近使用”按钮，以删除这些项目。
