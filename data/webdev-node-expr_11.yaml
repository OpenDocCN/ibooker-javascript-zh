- en: Chapter 11\. Sending Email
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。发送电子邮件
- en: One of the primary ways your application can communicate with the world is email.
    From user registration to password reset instructions to promotional emails, the
    ability to send email is an important feature. In this chapter, you’ll learn how
    to format and send email with Node and Express to help communicate with your users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序与世界沟通的主要方式之一是电子邮件。从用户注册到密码重置说明再到促销电子邮件，发送电子邮件是一个重要的功能。在本章中，你将学习如何使用 Node
    和 Express 格式化并发送电子邮件，以帮助与你的用户进行沟通。
- en: Neither Node nor Express has any built-in way of sending email, so we have to
    use a third-party module. The package I recommend is Andris Reinman’s excellent
    [*Nodemailer*](http://bit.ly/2Ked7vy). Before we dive into configuring Nodemailer,
    let’s get some email basics out of the way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Node 和 Express 都没有内置的发送电子邮件的方法，因此我们必须使用第三方模块。我推荐的包是 Andris Reinman 的优秀 [*Nodemailer*](http://bit.ly/2Ked7vy)。在我们深入配置
    Nodemailer 之前，让我们先了解一些电子邮件的基础知识。
- en: SMTP, MSAs, and MTAs
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SMTP、MSA 和 MTA
- en: 'The lingua franca for sending email is the Simple Mail Transfer Protocol (SMTP).
    While it is possible to use SMTP to send an email directly to the recipient’s
    mail server, this is generally a bad idea: unless you are a “trusted sender” like
    Google or Yahoo!, chances are your email will be tossed directly into the spam
    bin. It’s better to use a mail submission agent (MSA), which will deliver the
    email through trusted channels, reducing the chance that your email will be marked
    as spam. In addition to ensuring that your email arrives, MSAs handle nuisances
    like temporary outages and bounced emails. The final piece of the equation is
    the mail transfer agent (MTA), which is the service that actually sends the email
    to its final destination. For the purposes of this book, *MSA*, *MTA*, and *SMTP
    server* are essentially equivalent.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 发送电子邮件的通用语言是简单邮件传输协议（SMTP）。虽然可以使用 SMTP 直接将电子邮件发送到收件人的邮件服务器，但这通常不是一个好主意：除非你是像
    Google 或 Yahoo! 这样的“受信任发送者”，否则你的邮件很可能会直接被投入垃圾箱。最好使用邮件提交代理（MSA），它会通过可信任的渠道传递邮件，从而减少邮件被标记为垃圾邮件的机会。除了确保你的邮件能送达，MSA
    还处理像临时中断和退信等问题。整个过程的最后一部分是邮件传输代理（MTA），它是实际将邮件发送到最终目的地的服务。在本书中，*MSA*、*MTA* 和 *SMTP
    服务器* 本质上是等效的。
- en: 'So you’ll need access to an MSA. While it is possible to get started using
    a free consumer email service such as Gmail, Outlook, or Yahoo!, these services
    are no longer as friendly to automated emails as they once were (in an effort
    to cut down on abuse). Fortunately, there are a couple of excellent email services
    to choose from that have a free option for low-volume use: [Sendgrid](https://sendgrid.com)
    and [Mailgun](https://www.mailgun.com). I’ve used both services, and I like them
    both. The examples in this book will be using SendGrid.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你将需要访问一个 MSA。虽然可以使用像 Gmail、Outlook 或 Yahoo! 这样的免费消费者电子邮件服务开始工作，但这些服务不再像以前那样友好地支持自动化邮件（为了减少滥用）。幸运的是，有几个优秀的电子邮件服务可供选择，适合低频使用并提供免费选项：[Sendgrid](https://sendgrid.com)
    和 [Mailgun](https://www.mailgun.com)。我使用过这两个服务，都很喜欢。本书的示例将使用 SendGrid。
- en: If you’re working for an organization, the organization itself may have an MSA;
    you can contact your IT department and ask them if there’s an SMTP relay available
    for sending automated emails.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个组织工作，组织本身可能有一个 MSA；你可以联系你的 IT 部门询问是否有可用于发送自动化电子邮件的 SMTP 中继。
- en: If you’re using SendGrid or Mailgun, go ahead and set up your account now. For
    SendGrid, you’ll need to create an API key (which will be your SMTP password).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 SendGrid 或 Mailgun，请立即设置你的账户。对于 SendGrid，你需要创建一个 API 密钥（它将作为你的 SMTP 密码）。
- en: Receiving Email
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收电子邮件
- en: Most websites only need the ability to *send* email, like password reset instructions
    and promotional emails. However, some applications need to receive email as well.
    A good example is an issue-tracking system that sends out an email when someone
    updates an issue, and if you reply to that email, the issue is automatically updated
    with your response.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站只需要能够 *发送* 电子邮件，如密码重置说明和促销电子邮件。然而，有些应用程序也需要接收电子邮件。一个很好的例子是问题追踪系统，当有人更新问题时会发送电子邮件，如果你回复该邮件，则问题会自动更新为你的回复。
- en: Unfortunately, receiving email is much more involved and will not be covered
    in this book. If this is functionality you need, you should allow your mail provider
    to maintain the mailbox and have a periodic process to access it with an IMAP
    agent such as [imap-simple](http://bit.ly/2qQK0r5).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，接收电子邮件涉及的内容要多得多，这本书不会涉及这方面。 如果这是你需要的功能，你应该允许你的邮件提供商维护邮箱，并定期使用像[imap-simple](http://bit.ly/2qQK0r5)这样的IMAP代理来访问它。
- en: Email Headers
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件标题
- en: 'An email message consists of two parts: the header and the body (very much
    like an HTTP request). The *header* contains information about the email: who
    it’s from, who it’s addressed to, the date it was received, the subject, and more.
    Those are the headers that are normally displayed to the user in an email application,
    but there are many more headers. Most email clients allow you to look at the headers;
    if you’ve never done so, I recommend you take a look. The headers give you all
    the information about how the email got to you; every server and MTA that the
    email passed through will be listed in the header.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件消息由两部分组成：头部和正文（非常类似于HTTP请求）。 *头部* 包含有关电子邮件的信息：谁发送的、发给谁、收到的日期、主题等等。 这些头部通常在电子邮件应用程序中显示给用户，但还有许多其他头部。
    大多数电子邮件客户端允许你查看头部； 如果你从未这样做过，我建议你试试。 头部提供了有关电子邮件如何到达你手中的所有信息； 每个经过的服务器和MTA都将在头部中列出。
- en: It often comes as a surprise to people that some headers, like the “from” address,
    can be set arbitrarily by the sender. When you specify a “from” address other
    than the account from which you’re sending, it’s often referred to as *spoofing*.
    There is nothing preventing you from sending an email with the “from” address
    Bill Gates <*billg@microsoft.com*>. I’m not recommending that you try this, just
    driving home the point that you can set certain headers to be whatever you want.
    Sometimes there are legitimate reasons to do this, but you should never abuse
    it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 人们经常会感到惊讶的是，某些头部，如“发件人”地址，可以由发件人任意设置。 当你指定一个与发送账户不同的“发件人”地址时，通常称为*伪造*。 除非你有合理的理由这样做，否则不要滥用。
    有时这样做是合理的，但你不应该滥用它。
- en: An email you send *must* have a “from” address, however. This can sometimes
    cause problems when sending automated email, which is why you often see email
    with a return addresses like DO NOT REPLY <*do-not-reply@meadowlarktravel.com*>.
    Whether you want to take this approach or have automated emails come from an address
    like Meadowlark Travel <*info@meadowlarktravel.com*> is up to you; if you take
    the latter approach, though, you should be prepared to respond to emails that
    come to *info@meadowlarktravel.com*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你发送的电子邮件*必须*有一个“发件人”地址。 但是，当发送自动化电子邮件时，有时可能会出现问题，这就是为什么你经常看到带有返回地址的电子邮件，如DO
    NOT REPLY <*do-not-reply@meadowlarktravel.com*>。 是否采用这种方式或者让自动化邮件来自Meadowlark
    Travel <*info@meadowlarktravel.com*> 是由你决定的；但是，如果你选择后者，你应该准备好回复发送到*info@meadowlarktravel.com*的电子邮件。
- en: Email Formats
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件格式
- en: 'When the internet was new, all email was simply ASCII text. The world has changed
    a lot since then, and people want to send email in different languages and do
    more sophisticated things like include formatted text, images, and attachments.
    This is where things start to get ugly: email formats and encoding are a horrible
    jumble of techniques and standards.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当互联网刚刚出现时，所有的电子邮件都是简单的ASCII文本。 自那时以来，世界发生了很大变化，人们希望用不同的语言发送电子邮件，并做更复杂的事情，比如包含格式化文本、图片和附件。
    这就是事情开始变得混乱的地方：电子邮件的格式和编码是一堆可怕的技术和标准的混合。
- en: Fortunately, we won’t really have to address these complexities. Nodemailer
    will handle that for us. What’s important for you to know is that your email can
    be either plain text (Unicode) or HTML.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不必真正去解决这些复杂性。 Nodemailer会为我们处理这一切。 对你来说重要的是，你的电子邮件可以是纯文本（Unicode）或HTML。
- en: Almost all modern email applications support HTML email, so it’s generally pretty
    safe to format your emails in HTML. Still, there are “text purists” out there
    who eschew HTML email, so I recommend always including both text and HTML email.
    If you don’t want to have to write text and HTML email, Nodemailer supports a
    shortcut that will automatically generate the plain text version from the HTML.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有现代电子邮件应用程序都支持HTML电子邮件，因此通常很安全地格式化你的电子邮件为HTML。 尽管如此，还有一些“文本纯洁主义者”不喜欢HTML电子邮件，因此我建议始终包含文本和HTML电子邮件。
    如果你不想写文本和HTML电子邮件，Nodemailer支持一种快捷方式，可以从HTML自动生成纯文本版本。
- en: HTML Email
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML电子邮件
- en: 'HTML email is a topic that could fill an entire book. Unfortunately, it’s not
    as simple as just writing HTML as you would for your site: most mail clients support
    only a small subset of HTML. Mostly, you have to write HTML as if it were still
    1996; it’s not much fun. In particular, you have to go back to using tables for
    layout (cue sad music).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 邮件是一个可以填满整本书的话题。不幸的是，它并不像为您的网站编写 HTML 那样简单：大多数邮件客户端仅支持 HTML 的一个小子集。大多数时候，您必须像在
    1996 年一样编写 HTML；这并不好玩。特别是，您必须重新使用表格来进行布局（播放悲伤的音乐）。
- en: If you have experience with browser compatibility issues with HTML, you know
    what a headache it can be. Email compatibility issues are much worse. Fortunately,
    there are some things that can help.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有处理 HTML 浏览器兼容性问题的经验，您就知道它可能会让人头疼。电子邮件兼容性问题要糟糕得多。幸运的是，有一些东西可以帮助解决。
- en: First, I encourage you to read MailChimp’s excellent [article about writing
    HTML email](http://bit.ly/33CsaXs). It does a good job covering the basics and
    explaining the things you need to keep in mind when writing HTML email.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我鼓励您阅读 MailChimp 关于[撰写 HTML 邮件的文章](http://bit.ly/33CsaXs)。它很好地涵盖了基础知识，并解释了撰写
    HTML 邮件时需要牢记的事项。
- en: 'The next is a real time-saver: [HTML Email Boilerplate](http://bit.ly/2qJ1XIe).
    It’s essentially a very well-written, rigorously tested template for HTML email.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是真正的时间节省器：[HTML Email Boilerplate](http://bit.ly/2qJ1XIe)。它本质上是一个非常好的、经过严格测试的
    HTML 邮件模板。
- en: 'Finally, there’s testing. You’ve read up on how to write HTML email, and you’re
    using HTML Email Boilerplate, but testing is the only way to know for sure your
    email is not going to explode on Lotus Notes 7 (yes, people still use it). Feel
    like installing 30 different mail clients to test one email? I didn’t think so.
    Fortunately, there’s a great service that does it for you: [Litmus](http://bit.ly/2NI6JPo).
    It’s not an inexpensive service; plans start at about $100 a month. But if you
    send a lot of promotional emails, it’s hard to beat.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有测试。您已经学习了如何编写 HTML 邮件，并且正在使用 HTML Email Boilerplate，但测试是确保您的电子邮件不会在 Lotus
    Notes 7 上爆炸的唯一方法（是的，人们仍在使用它）。感觉要安装 30 种不同的邮件客户端来测试一个电子邮件吗？我不这么认为。幸运的是，有一个很棒的服务可以为您完成：[Litmus](http://bit.ly/2NI6JPo)。这并不是一项便宜的服务；计划每月大约从
    $100 起步。但是，如果您发送大量促销电子邮件，这是无法超越的。
- en: On the other hand, if your formatting is modest, there’s no need for an expensive
    testing service like Litmus. If you’re sticking to things like headers, bold/italic
    text, horizontal rules, and some image links, you’re pretty safe.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您的格式较为简单，就不需要像 Litmus 这样昂贵的测试服务了。如果您坚持使用标题、粗体/斜体文本、水平规则和一些图像链接等内容，您就非常安全了。
- en: Nodemailer
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodemailer
- en: 'First, we need to install the Nodemailer package:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 Nodemailer 包：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, require the `nodemailer` package and create a Nodemailer instance (a
    *transport* in Nodemailer parlance):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，需要引用 `nodemailer` 包并创建一个 Nodemailer 实例（在 Nodemailer 的术语中称为 *transport*）：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice we’re using the credentials module we set up in [Chapter 9](ch09.xhtml#ch_cookies_and_sessions).
    You’ll need to update your *.credentials.development.json* file accordingly:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们正在使用我们在 [第 9 章](ch09.xhtml#ch_cookies_and_sessions) 中设置的凭据模块。您需要相应地更新您的
    *.credentials.development.json* 文件：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Common configuration options for SMTP are the port, authentication type, and
    TLS options. However, most of the major mail services use the default options.
    To find out what settings to use, consult your mail service documentation (try
    searching for *sending SMTP email* or *SMTP configuration* or *SMTP relay*). If
    you’re having trouble sending SMTP email, you may need to check the options; see
    the [Nodemailer documentation](https://nodemailer.com/smtp) for a complete list
    of supported options.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP 的常见配置选项包括端口、认证类型和 TLS 选项。但是，大多数主要的邮件服务使用默认选项。要找出要使用的设置，请参阅您的邮件服务文档（尝试搜索
    *sending SMTP email* 或 *SMTP configuration* 或 *SMTP relay*）。如果您在发送 SMTP 邮件时遇到问题，您可能需要检查选项；请参阅
    [Nodemailer documentation](https://nodemailer.com/smtp) 获取完整的支持选项列表。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re following along with the companion repo, you’ll find that there aren’t
    any settings in the credentials file. In the past, I have had many readers contact
    me asking why the file is missing or empty. I intentionally don’t provide valid
    credentials for the same reason you should be careful with your credentials! I
    trust you very much, dear reader, but not so much that I’m going to give you my
    email password!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在跟随伴随的仓库，您会发现凭据文件中没有任何设置。过去，我有很多读者联系我，问为什么文件丢失或为空。出于同样的原因，我故意不提供有效的凭据，就像您需要小心自己的凭据一样！亲爱的读者，我非常信任您，但不至于给您我的电子邮件密码！
- en: Sending Mail
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送邮件
- en: 'Now that we have our mail transport instance, we can send mail. We’ll start
    with a simple example that sends text mail to only one recipient (*ch11/00-smtp.js*
    in the companion repo):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了邮件传输实例，我们可以开始发送邮件了。我们将从一个简单的例子开始，只向一个收件人发送文本邮件（*ch11/00-smtp.js*在伴随代码库中）。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the code samples in this section, I’m using fake email addresses like *joecustomer@gmail.com*.
    For verification purposes, you’ll probably want to change those email addresses
    to an email you control so you can see what’s happening. Otherwise, poor *joecustomer@gmail.com*
    is going to be getting a lot of nonsense email!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的代码示例中，我使用类似*joecustomer@gmail.com*的虚假电子邮件地址。为了验证目的，您可能需要将这些电子邮件地址更改为您控制的电子邮件地址，以便查看发生的情况。否则，可怜的*joecustomer@gmail.com*将会收到大量无意义的电子邮件！
- en: You’ll notice that we’re handling errors here, but it’s important to understand
    that no errors doesn’t necessarily mean your email was delivered successfully
    to the *recipient*. The callback’s `error` parameter will be set only if there
    was a problem communicating with the MSA (such as a network or authentication
    error). If the MSA was unable to deliver the email (for example, because of an
    invalid email address or an unknown user), you will have to check your account
    activity in your mail service, which you can do either from the admin interface
    or through an API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们在这里处理了错误，但重要的是要理解，没有错误并不一定意味着您的电子邮件已成功发送给*收件人*。如果存在与MSA通信的问题（如网络或身份验证错误），则回调的`error`参数将被设置。如果MSA无法将电子邮件发送给收件人（例如由于无效的电子邮件地址或未知用户），则您将需要检查您邮件服务中的账户活动，您可以通过管理界面或API进行此操作。
- en: If you need your system to automatically determine whether the email was delivered
    successfully, you’ll have to use your mail service’s API. Consult the API documentation
    for your mail service for more information.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统需要自动确定电子邮件是否成功发送，请使用您邮件服务的API。查阅您邮件服务的API文档获取更多信息。
- en: Sending Mail to Multiple Recipients
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向多个收件人发送邮件
- en: 'Nodemail supports sending mail to multiple recipients by using commas (*ch11/01-multiple-recipients.js*
    in the companion repo):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Nodemail支持使用逗号将邮件发送给多个收件人（*ch11/01-multiple-recipients.js*在伴随代码库中）：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that, in this example, we mixed plain email addresses (*joe@gmail.com*)
    with email addresses specifying the recipient’s name (“Jane Customer” <*jane@yahoo.com*>).
    This is allowed syntax.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此示例中，我们混合了普通电子邮件地址（*joe@gmail.com*）和指定收件人姓名的电子邮件地址（“Jane Customer” < *jane@yahoo.com*>）。这是允许的语法。
- en: 'When sending email to multiple recipients, you must be careful to observe the
    limits of your MSA. SendGrid, for example, recommends limiting the number of recipients
    (SendGrid recommends no more than a thousand in one email). If you’re sending
    bulk email, you probably want to deliver multiple messages, each with multiple
    recipients (*ch11/02-many-recipients.js* in the companion repo):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当向多个收件人发送电子邮件时，您必须注意观察您的邮件发送代理（MSA）的限制。例如，SendGrid建议限制收件人数量（SendGrid建议一封邮件中不超过一千个收件人）。如果您正在发送批量邮件，则可能希望发送多个消息，每个消息都有多个收件人（*ch11/02-many-recipients.js*在伴随代码库中）：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Better Options for Bulk Email
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的批量电子邮件选项
- en: While you can certainly send bulk email with Nodemailer and an appropriate MSA,
    you should think carefully before going this route. A responsible email campaign
    must provide a way for people to unsubscribe from your promotional emails, and
    that is not a trivial task. Multiply that by every subscription list you maintain
    (perhaps you have a weekly newsletter and a special announcements campaign, for
    example). This is an area in which it’s best not to reinvent the wheel. Services
    like [Emma](https://myemma.com), [Mailchimp](http://mailchimp.com), and [Campaign
    Monitor](http://www.campaignmonitor.com) offer everything you need, including
    great tools for monitoring the success of your email campaigns. They’re very affordable,
    and I highly recommend using them for promotional emails, newsletters, etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用Nodemailer和适当的MSA发送批量邮件，但在选择这条路线之前应仔细考虑。负责任的电子邮件营销活动必须提供取消订阅的途径，这并不是一个微不足道的任务。乘以您维护的每个订阅列表（也许您有每周通讯和特别公告活动，例如）。这是一个最好不要重复造轮子的领域。像[Emma](https://myemma.com)、[Mailchimp](http://mailchimp.com)和[Campaign
    Monitor](http://www.campaignmonitor.com)等服务提供了您所需的一切，包括监控电子邮件营销活动成功的优秀工具。它们价格合理，我强烈推荐在促销邮件、通讯等方面使用它们。
- en: Sending HTML Email
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送HTML电子邮件
- en: 'So far, we’ve just been sending plain-text email, but most people these days
    expect something a little prettier. Nodemailer allows you to send both HTML and
    plaintext versions in the same email, allowing the email client to choose which
    version is displayed (usually HTML) (*ch11/03-html-email.js* in the companion
    repo):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在发送纯文本电子邮件，但现在大多数人都希望看到一些更漂亮的东西。Nodemailer允许您在同一封电子邮件中发送HTML和纯文本版本，允许电子邮件客户端选择显示哪个版本（通常是HTML）（伴随存储库中的*ch11/03-html-email.js*）：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Providing both HTML and text versions is a lot of work, especially if very few
    of your users prefer text-only email. If you want to save some time, you can write
    your emails in HTML and use a package like [html-to-formatted-text](http://bit.ly/34RX8Lq)
    to automatically generate text from your HTML. (Just keep in mind that it won’t
    be as high quality as hand-crafted text; HTML won’t always translate cleanly.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提供HTML和纯文本版本会增加很多工作量，特别是如果您的用户中很少有人喜欢纯文本电子邮件。如果您想节省一些时间，可以在HTML中编写电子邮件，并使用像[html-to-formatted-text](http://bit.ly/34RX8Lq)这样的包自动生成文本。
    （请记住，它的质量可能不如手工编写的文本高；HTML并非总是能够干净地转换。）
- en: Images in HTML Email
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML电子邮件中的图像
- en: While it is possible to embed images in HTML email, I strongly discourage it.
    They bloat your email messages, and it isn’t generally considered good practice.
    Instead, you should make images you want to use in email available on your web
    server and link appropriately from the email.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以将图像嵌入HTML电子邮件，但我强烈不建议这样做。它们会使您的电子邮件消息变得臃肿，通常不被视为良好的做法。相反，您应该将要在电子邮件中使用的图像放在您的Web服务器上，并适当地进行链接。
- en: It is best to have a dedicated location in your static assets folder for email
    images. You should even keep assets that you use both on your site and in emails
    separate. It reduces the chance of negatively affecting the layout of your emails.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在您的静态资产文件夹中有一个专门用于电子邮件图像的位置。您甚至应将在网站和电子邮件中都使用的资产分开。这样可以减少影响电子邮件布局的机会。
- en: 'Let’s add some email resources in our Meadowlark Travel project. In your *public*
    directory, create a subdirectory called *email*. You can place your *logo.png*
    in there, and any other images you want to use in your email. Then, in your email,
    you can use those images directly:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Meadowlark Travel项目中添加一些电子邮件资源。在*public*目录下创建一个名为*email*的子目录。您可以将*logo.png*放在这里，以及您想在电子邮件中使用的任何其他图像。然后，在您的电子邮件中，您可以直接使用这些图像：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注
- en: It should be obvious that you do not want to use *localhost* when sending out
    email to other people; they probably won’t even have a server running, much less
    on port 3000! Depending on your mail client, you might be able to use *localhost*
    in your email for testing purposes, but it won’t work outside of your computer.
    In [Chapter 17](ch17.xhtml#ch_static_content), we’ll discuss some techniques to
    smooth the transition from development to production.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见，当向其他人发送电子邮件时，不应使用*localhost*；他们可能甚至没有运行服务器，更不用说在3000端口上了！根据您的邮件客户端，您可能可以在电子邮件中使用*localhost*进行测试，但它在您的计算机之外是无法工作的。在[第17章](ch17.xhtml#ch_static_content)中，我们将讨论一些技术，以平稳地从开发过渡到生产。
- en: Using Views to Send HTML Email
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用视图发送HTML电子邮件
- en: 'So far, we’ve been putting our HTML in strings in JavaScript, a practice you
    should try to avoid. Our HTML has been simple enough, but take a look at [HTML
    Email Boilerplate](http://bit.ly/2qJ1XIe): do you want to put all that boilerplate
    in a string? Absolutely not.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在JavaScript中的字符串中放置我们的HTML，这是一个应尽量避免的做法。虽然我们的HTML足够简单，但看看[HTML Email
    Boilerplate](http://bit.ly/2qJ1XIe)：您想把所有这些样板放在一个字符串中吗？绝对不。
- en: 'Fortunately, we can leverage views to handle this. Let’s consider our “Thank
    you for booking your trip with Meadowlark Travel” email example, which we’ll expand
    a little bit. Let’s imagine that we have a shopping cart object that contains
    our order information. That shopping cart object will be stored in the session.
    Let’s say the last step in our ordering process is a form that’s processed by
    */cart/checkout*, which sends a confirmation email. Let’s start by creating a
    view for the thank-you page, *views/cart-thank-you.handlebars*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以利用视图来处理这个问题。让我们考虑一下我们的“感谢您与Meadowlark Travel预订旅行”的电子邮件示例，稍微扩展一下。假设我们有一个包含订单信息的购物车对象。该购物车对象将存储在会话中。假设我们订购过程的最后一步是一个由*/cart/checkout*处理的表单，该表单发送确认电子邮件。让我们首先为感谢页面创建一个视图，*views/cart-thank-you.handlebars*：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we’ll create an email template for the email. Download HTML Email Boilerplate,
    and put in *views/email/cart-thank-you.handlebars*. Edit the file, and modify
    the body:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将为电子邮件创建一个电子邮件模板。下载HTML电子邮件样板，并放入*views/email/cart-thank-you.handlebars*。编辑文件并修改正文：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Because you can’t use *localhost* addresses in email, if your site isn’t live
    yet, you can use a placeholder service for any graphics. For example, *[*http://placehold.it/100x100*](http://placehold.it/100x100)*
    dynamically serves a 100-pixel-square graphic you can use. This technique is used
    quite often for for-placement-only (FPO) images and layout purposes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于电子邮件中无法使用*localhost*地址，如果您的站点尚未上线，您可以使用占位符服务来获取任何图形。例如，[*http://placehold.it/100x100*](http://placehold.it/100x100)*动态提供一个您可以使用的100像素正方形图形。这种技术经常用于仅用于位置的（FPO）图像和布局目的。
- en: 'Now we can create a route for our cart Thank-you page (*ch11/04-rendering-html-email.js*
    in the companion repo):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为我们的购物车感谢页面创建一个路由（伴随仓库中的*ch11/04-rendering-html-email.js*）：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that we’re calling `res.render` twice. Normally, you call it only once
    (calling it twice will display only the results of the first call). However, in
    this instance, we’re circumventing the normal rendering process the first time
    we call it: notice that we provide a callback. Doing that prevents the results
    of the view from being rendered to the browser. Instead, the callback receives
    the rendered view in the parameter `html`: all we have to do is take that rendered
    HTML and send the email! We specify `layout: null` to prevent our layout file
    from being used, because it’s all in the email template (an alternate approach
    would be to create a separate layout file for emails and use that instead). Lastly,
    we call `res.render` again. This time, the results will be rendered to the HTML
    response as normal.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '注意我们调用了`res.render`两次。通常情况下，您只调用一次（调用两次将仅显示第一次调用的结果）。但在这种情况下，我们绕过了第一次调用时的正常渲染过程：请注意我们提供了一个回调函数。这样做可以防止将视图的结果呈现给浏览器。相反，回调函数在参数`html`中接收呈现的视图：我们只需获取呈现的HTML并发送电子邮件！我们指定`layout:
    null`以防止使用我们的布局文件，因为所有内容都在电子邮件模板中（另一种方法是为电子邮件创建单独的布局文件并使用该文件）。最后，我们再次调用`res.render`。这次，结果将像往常一样呈现为HTML响应。'
- en: Encapsulating Email Functionality
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装电子邮件功能
- en: 'If you’re using email a lot throughout your site, you may want to encapsulate
    the email functionality. Let’s assume you always want your site to send email
    from the same sender (“Meadowlark Travel” <*info@meadowlarktravel.com*>) and you
    always want the email to be sent in HTML with automatically generated text. Create
    a module called *lib/email.js* (*ch11/lib/email.js* in the companion repo):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在整个站点上经常使用电子邮件，您可能希望封装电子邮件功能。让我们假设您始终希望您的站点从同一发送者（“草地雀旅行” <*info@meadowlarktravel.com*>)
    发送电子邮件，并且您始终希望以HTML格式发送自动生成的文本电子邮件。创建一个名为*lib/email.js*（伴随仓库中的*ch11/lib/email.js*）的模块：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now all we have to do to send an email is the following (*ch11/05-email-library.js*
    in the companion repo):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需执行以下操作即可发送电子邮件（伴随仓库中的*ch11/05-email-library.js*）：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Conclusion
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you learned the basics of how email is delivered on the internet.
    If you were following along, you set up a free email service (most likely SendGrid
    or Mailgun) and used the service to send text and HTML email. You learned how
    we can use the same template rendering mechanism we use for rendering HTML in
    our Express applications to render HTML for email.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了互联网上电子邮件传递的基础知识。如果您在跟随操作，您已设置了一个免费的电子邮件服务（很可能是SendGrid或Mailgun），并使用该服务发送了文本和HTML电子邮件。您还了解了我们如何使用与在Express应用程序中渲染HTML相同的模板渲染机制来为电子邮件渲染HTML。
- en: Email remains an important way your application can communicate to your users.
    Be mindful not to abuse this power! If you’re like me, you have an inbox overflowing
    with automated email that you mostly ignore. When it comes to automated emails,
    less is more. There are legitimate and useful reasons your application could send
    an email to your users, but you should always ask yourself, “Do my users *really*
    want this email? Is there another way to communicate this information?”
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件仍然是您的应用程序与用户沟通的重要方式。请注意不要滥用这种权力！如果您像我一样，收件箱里充斥着大量的自动化电子邮件，您大部分时间可能会忽略它们。在涉及自动化电子邮件时，少则多。您的应用程序向用户发送电子邮件可能有合法且有用的原因，但您应该始终问自己，“我的用户*真的*想要这封电子邮件吗？是否有其他方式来传达这些信息？”
- en: Now that we’ve covered some basic infrastructure that we’ll need to create applications,
    we’ll spend some time talking about the eventual production launch of our application
    and the kinds of things we’ll want to consider to make that launch successful.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经介绍了一些创建应用程序所需的基础设施，接下来我们将花一些时间讨论应用程序最终的生产发布，并需要考虑的各种因素，以确保发布成功。
