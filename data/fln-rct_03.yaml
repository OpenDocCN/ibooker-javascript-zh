- en: Chapter 2\. JSX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 JSX
- en: In [Chapter 1](ch01.html#ch01), we learned about the basics of React and its
    origin story, comparing it to other popular JavaScript libraries and frameworks
    of its time. We learned about the true value proposition of React and why it’s
    a thing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 1 章](ch01.html#ch01)中，我们了解了 React 的基础知识及其起源故事，将其与当时其他流行的 JavaScript 库和框架进行了比较。我们了解了
    React 的真正价值主张以及为什么它如此重要。
- en: In this chapter, we’ll learn about JSX, which is a syntax extension for JavaScript
    that allows us to write HTML-like code within our JavaScript code. Back when React
    was introduced in 2013, it was the first thing people noticed and heavily criticized,
    so it makes sense to zero in on it this early in the book. With that, let’s dive
    deep into this language extension, how it works, and how we can conceptually make
    our own code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习 JSX，这是 JavaScript 的一种语法扩展，允许我们在 JavaScript 代码中编写类似 HTML 的代码。当 React
    在 2013 年推出时，它是人们首先注意到并且受到了严厉批评的东西，因此很有意义早期就专注于它。因此，让我们深入了解这种语言扩展，它的工作原理以及如何概念化地编写我们自己的代码。
- en: To begin our discussion, let’s understand what JSX stands for. We already know
    that JS is JavaScript. Does that mean JSX is JavaScript version 10? Like Mac OS
    X? Is it JS Xtra? We may think the X in JSX means 10 or Xtra, which would both
    be good guesses! But the X in JSX stands for *JavaScript Syntax eXtension*. It’s
    also sometimes called *JavaScript XML*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始讨论，首先了解 JSX 代表什么。我们已经知道 JS 代表 JavaScript。这是否意味着 JSX 是 JavaScript 的第 10
    版？就像 Mac OS X 一样？它是 JS Xtra 吗？我们可能认为 JSX 中的 X 意味着 10 或 Xtra，这两者都是不错的猜测！但是，JSX
    中的 X 实际上代表*JavaScript Syntax eXtension*。有时它也被称为*JavaScript XML*。
- en: JavaScript XML?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript XML?
- en: 'If you’ve been around the web for a while, you might remember the term *AJAX*,
    or *Asynchronous JavaScript and XML*, from around the 2000s. AJAX was essentially
    a new way of using existing technologies to create highly interactive web pages
    that updated asynchronously and in place, instead of the status quo at the time:
    each state change would load an entire new page.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你长时间在网络上徘徊，你可能还记得约在 2000 年左右的*AJAX*或*Asynchronous JavaScript and XML*这个术语。AJAX
    本质上是利用现有技术的新方式，创建了高度互动的网页，可以异步和局部地更新，而不是当时的常态：每次状态变化都加载整个新页面。
- en: Using tools like `XMLHttpRequest` in the browser, it would initiate an asynchronous
    (that is, nonblocking) request over HTTP (HyperText Transfer Protocol). The response
    to this request traditionally would be a response in XML. Today, we tend to respond
    with JSON instead. This is likely one of the reasons why `fetch` has overtaken
    `XMLHTTPRequest`, since `XMLHttpRequest` has XML in the name.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中使用`XMLHttpRequest`等工具，它将发起一个异步（即非阻塞）的 HTTP 请求。传统上，对该请求的响应将是一个 XML 格式的响应。而今天，我们更倾向于使用
    JSON 来响应。这很可能是为什么`fetch`已经取代了`XMLHTTPRequest`的原因之一，因为`XMLHttpRequest`中带有 XML 这个名称。
- en: JSX is a syntax extension for JavaScript that allows developers to write HTML-like
    code within their JavaScript code. It was originally developed by Meta to be used
    with React, but it has since been adopted by other libraries and frameworks as
    well. JSX is not a separate language, but rather a syntax extension that is transformed
    into regular JavaScript code by a compiler or transpiler. When JSX code is compiled,
    it is transformed into plain JavaScript code. We’ll get into the details of this
    later.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 是 JavaScript 的一种语法扩展，允许开发人员在他们的 JavaScript 代码中编写类似 HTML 的代码。它最初由 Meta 开发用于
    React，但后来也被其他库和框架采纳。JSX 不是一种独立的语言，而是一种由编译器或转译器转换为普通 JavaScript 代码的语法扩展。当 JSX 代码被编译时，它被转换为普通的
    JavaScript 代码。我们稍后将详细介绍这些细节。
- en: 'While JSX syntax looks similar to HTML, there are some key differences. For
    example, JSX uses curly braces `{}` to embed JavaScript expressions within the
    HTML-like code. Additionally, JSX attributes are written in camel case instead
    of HTML attributes: `onclick` in HTML is `onClick` in JSX. HTML elements are written
    in lowercase instead of title case like custom JSX elements or components: `div`
    is HTML, `Div` is a React component.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 JSX 语法看起来类似于 HTML，但它们之间有一些关键的区别。例如，JSX 使用大括号`{}`来嵌入 JavaScript 表达式到类似 HTML
    的代码中。此外，JSX 属性是用驼峰命名法而不是 HTML 属性：HTML 中的`onclick`在 JSX 中是`onClick`。HTML 元素的写法是小写，而不是像自定义
    JSX 元素或组件那样的首字母大写：`div`是 HTML，`Div`是一个 React 组件。
- en: Further, we should mention that it is possible to create React applications
    without JSX, but the code tends to become hard to read, reason about, and maintain.
    Still, if we want to, we can. Let’s look at a React component expressed with JSX
    and without.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还应该提到，可以在不使用JSX的情况下创建React应用程序，但代码往往难以阅读、推理和维护。但如果我们愿意，我们可以。让我们看一个使用JSX和不使用JSX表达的React组件。
- en: 'Here’s an example of a list with JSX:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个带有JSX的列表示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s an example of the same list without JSX:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不使用JSX的相同列表的示例：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For the sake of clarity, we’ve used an earlier JSX transform to illustrate how
    React was written without JSX. We’ll get into transforms in detail later in this
    chapter, but for now let’s establish that a transform is something that takes
    syntax A and turns it into syntax B.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们使用了早期的JSX转换来说明React如何在没有JSX的情况下编写。我们将在本章的后续部分详细介绍转换，但现在让我们确立一个转换是将语法A转换为语法B的东西。
- en: 'Nowadays, React ships with a newer transform introduced in React 17 that automatically
    imports some special functions to essentially do the same thing. This is a minor
    detail in the grand scheme of things, but with the newer transformer, we’d express
    the list without JSX like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，React在React 17中引入了一个新的转换，自动导入一些特殊函数以实现基本相同的功能。这在整体方案中只是一个小细节，但使用新的转换器，我们可以这样表达列表，而不使用JSX：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Either way, do you see the difference between examples with and without JSX?
    You might find the first example with JSX far more readable and maintainable than
    the latter. The former is JSX, the latter is vanilla JS. Let’s talk about its
    trade-offs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，你能看出JSX和不使用JSX的示例之间的差异吗？你可能会发现第一个示例使用JSX比后者更易于阅读和维护。前者是JSX，后者是普通的JS。让我们讨论一下它的权衡。
- en: Benefits of JSX
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX的好处
- en: 'There are several benefits to using JSX in web development:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web开发中使用JSX有几个好处：
- en: Easier to read and write
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 更易于阅读和编写
- en: JSX syntax is easier to read and write, especially for developers who are familiar
    with HTML.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JSX语法更易于阅读和编写，特别是对于熟悉HTML的开发者来说。
- en: Improved security
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 改进的安全性
- en: JSX code can be compiled into safer JavaScript code that produces HTML strings
    that have dangerous characters removed, like `<` and `>`, which could create new
    elements. Instead, these HTML strings replace the angular brackets with the less-than
    and greater-than signs in this scenario to make things safer. This process is
    called sanitization.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JSX代码可以编译成更安全的JavaScript代码，生成没有危险字符（如`<`和`>`）的HTML字符串，这些字符可能创建新元素。在这种情况下，这些HTML字符串将尖括号替换为小于号和大于号，以提高安全性。这个过程称为消毒。
- en: Strong typing
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 强类型
- en: JSX allows for strong typing, which can help catch errors before they occur.
    This is because JSX can be expressed with TypeScript, but even without TypeScript
    it can still benefit from enhanced type safety through the use of JSDoc-style
    comments and `propTypes`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JSX允许强类型，这有助于在出错之前捕获错误。这是因为JSX可以使用TypeScript来表达，即使没有TypeScript，它仍然可以通过使用类似于JSDoc风格的注释和`propTypes`来获得增强的类型安全性。
- en: Encourages component-based architecture
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励基于组件的架构
- en: JSX encourages a component-based architecture, which can help make code more
    modular and easier to maintain.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JSX鼓励基于组件的架构，这有助于使代码更加模块化和易于维护。
- en: Widely used
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 广泛使用
- en: JSX is widely used in the React community and is also supported by other libraries
    and frameworks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JSX广泛应用于React社区，并且也受其他库和框架的支持。
- en: Drawbacks of JSX
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX的缺点
- en: 'There are also some drawbacks to using JSX:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSX也有一些缺点：
- en: Learning curve
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 学习曲线
- en: Developers who are not familiar with JSX may find it difficult to learn and
    understand.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不熟悉JSX的开发者可能会觉得学习和理解困难。
- en: Requires tooling
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要工具支持
- en: JSX code must be compiled into regular JavaScript code before it can be executed,
    which adds an extra step to the development toolchain. Other alternatives, like
    Vue.js, for example, can work immediately in a browser environment when included
    as nothing more than a `<script>` tag in a page.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: JSX代码在执行之前必须编译为常规的JavaScript代码，这为开发工具链增加了额外的步骤。其他替代方案，比如Vue.js，例如，可以在包含为页面中的`<script>`标签的情况下立即在浏览器环境中工作。
- en: Mixing of concerns
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关注点混合
- en: Some developers argue that JSX mixes concerns by combining HTML-like code with
    JavaScript code, making it harder to separate presentation from logic.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者认为JSX通过将类似HTML的代码与JavaScript代码结合在一起，混合了关注点，使得难以将呈现与逻辑分离。
- en: Partial JavaScript compatibility
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 部分JavaScript兼容性
- en: JSX supports inline expressions, but not inline blocks. That is, inside a tree
    of JSX elements, we can have inline expression, but not if or switch blocks. This
    can be somewhat difficult to reason about for engineers newer to JSX.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 支持内联表达式，但不支持内联块。也就是说，在 JSX 元素树中，我们可以有内联表达式，但不能有 if 或 switch 块。对于刚接触 JSX
    的工程师来说，这可能有些难以理解。
- en: Despite its drawbacks, JSX has become a popular choice for web developers, particularly
    those of us working with React. It offers a powerful and flexible way to create
    components and build user interfaces, and has been embraced by a large and active
    community. In addition to its use with React, JSX has also been adopted by other
    libraries and frameworks, including Vue.js, Solid, Qwik, and more. This shows
    that JSX has wider applications beyond just React, and its popularity is likely
    to continue to grow in the coming years, even breaking out of the React and web
    ecosystem by influencing implementations like SwiftUI in the iOS space and more.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在一些缺点，JSX 已经成为 Web 开发者的流行选择，尤其是那些使用 React 的开发者。它提供了一种强大而灵活的方式来创建组件和构建用户界面，并且得到了一个庞大而活跃的社区的支持。除了在
    React 中的使用之外，JSX 还被其他库和框架所采用，包括 Vue.js、Solid、Qwik 等。这表明 JSX 不仅限于 React，在未来的几年里其受欢迎程度可能会继续增长，甚至可能通过影响诸如
    iOS 空间中的 SwiftUI 等实现，突破了 React 和 Web 生态系统的界限。
- en: 'Overall, JSX is a powerful and flexible tool that can help us build dynamic
    and responsive user interfaces. JSX was created with one job: make expressing,
    presenting, and maintaining the code for React components simple while preserving
    powerful capabilities such as iteration, computation, and inline execution.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，JSX 是一个强大而灵活的工具，可以帮助我们构建动态和响应式的用户界面。JSX 的设计目标是简化表达、展示和维护 React 组件的代码，同时保留强大的功能，如迭代、计算和内联执行。
- en: JSX becomes vanilla JavaScript before it makes it to the browser. How does it
    accomplish this? Let’s take a look under the hood!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 在传递到浏览器之前会转换为普通的 JavaScript。它是如何实现这一点的？让我们来看看它的内部工作原理！
- en: Under the Hood
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部工作原理
- en: 'How does one make a language extension? How do they work? To answer these questions,
    we need to understand a little bit about programming languages. Specifically,
    we need to explore how, exactly, code like this outputs `3`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如何制作语言扩展？它们是如何工作的？要回答这些问题，我们需要了解一些关于编程语言的知识。具体来说，我们需要探索像这样的代码如何输出 `3`：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Understanding this will help us understand JSX better, which will in turn help
    us understand React better, thereby increasing our fluency with React.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些将有助于我们更好地理解 JSX，从而帮助我们更好地理解 React，从而增强我们在 React 中的熟练程度。
- en: How Does Code Work?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码如何工作？
- en: 'The code snippet we just saw is literally just text. How is this interpreted
    by a computer and then executed? For starters, it’s not a big, clever `RegExp`
    (regular expression) that can identify key words in a text file. I once tried
    to build a programming language this way and failed miserably, because regular
    expressions are often hard to get right, harder still to read back and mentally
    parse, and quite difficult to maintain because of the readability issues. For
    example, what follows is a regular expression to identify a valid email address.
    At first glance, it’s almost impossible to know its purpose:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到的代码片段实际上只是文本。计算机如何解释并执行它？首先，它不是一个大而聪明的 `RegExp`（正则表达式），可以在文本文件中识别关键字。我曾试图通过这种方式构建一种编程语言，但失败了，因为正则表达式通常很难正确编写，更难以阅读和理解，并且由于可读性问题而难以维护。例如，以下是一个用于识别有效电子邮件地址的正则表达式。乍一看，几乎不可能知道它的目的：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That regular expression isn’t even fully valid because the full version doesn’t
    fit on the page! This is why instead of using regular expressions, code is compiled
    using a *compiler*. A compiler is a piece of software that translates source code
    written in a high-level programming language into a syntax tree (literally, a
    tree data structure like a JavaScript object) according to specific rules. The
    process of compiling code involves several steps, including lexical analysis,
    parsing, semantic analysis, optimization, and code generation. Let’s explore each
    of these steps in more detail and discuss the role of compilers in the modern
    software development landscape.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 那个正则表达式甚至都不完全有效，因为完整版本无法适应页面！这就是为什么不使用正则表达式，而是使用*编译器*来编译代码的原因。编译器是一种将用高级编程语言编写的源代码根据特定规则转换为语法树（字面上，类似JavaScript对象的树数据结构）的软件。编译代码的过程涉及几个步骤，包括词法分析、解析、语义分析、优化和代码生成。让我们更详细地探讨每个步骤，并讨论编译器在现代软件开发领域中的作用。
- en: 'A compiler uses a three-step process (at least in JavaScript anyway) that is
    in play here. These steps are called *tokenization*, *parsing*, and *code generation*.
    Let’s look at each of these steps in more detail:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器使用一个三步骤过程（至少在JavaScript中是这样）在这里发挥作用。这些步骤被称为*词法分析*、*解析*和*代码生成*。让我们更详细地看看这些步骤：
- en: Tokenization
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 词法分析
- en: 'Essentially breaking up a string of characters into meaningful *tokens*. When
    a tokenizer is stateful and each token contains state about its parents and/or
    children, a tokenizer is called a *lexer*. This is a necessary simplification
    for the purposes of our discussion here: lexing is essentially stateful tokenization.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上是将一串字符分解成有意义的*标记*。当一个标记生成器是有状态的，并且每个标记包含关于其父级和/或子级的状态时，标记生成器被称为*词法分析器*。这是我们在这里讨论的目的的一个必要简化：词法分析实质上是有状态的词法分析。
- en: Lexers have *lexer rules* that, in some cases, indeed use a regular expression
    or similar to detect key tokens like variable names, object keys and values, and
    more in a text string representing a programming language. The lexer then maps
    these key words to some type of enumerable value, depending on its implementation.
    For example, `const` becomes `0`, `let` becomes `1`, `function` becomes `2`, etc.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 词法分析器具有*词法规则*，在某些情况下，确实使用正则表达式或类似的方法来检测关键标记，如变量名、对象键和值等，在代表编程语言的文本字符串中。然后，词法分析器将这些关键字映射到某种可枚举值，具体取决于其实现。例如，`const`变成`0`，`let`变成`1`，`function`变成`2`，等等。
- en: Once a string is tokenized or lexed, we move on to the next step, parsing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦字符串被标记化或词法分析，我们就进入下一步，解析。
- en: Parsing
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 解析
- en: 'The process of taking the tokens and converting them into a syntax tree. The
    syntax tree is a data structure that represents the structure of the code. For
    example, the code snippet we looked at earlier would be represented as a syntax
    tree, like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将标记转换为语法树的过程。语法树是表示代码结构的数据结构。例如，我们之前看过的代码片段将被表示为一个语法树，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The string, thanks to the parser, becomes a JSON object. As programmers, when
    we have a data structure like this, we can do some really fun things. Language
    engines use these data structures to complete the process with the third step,
    code generation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串通过解析器变成了一个JSON对象。作为程序员，当我们有这样的数据结构时，我们可以做一些非常有趣的事情。语言引擎使用这些数据结构来完成第三步，即代码生成的过程。
- en: Code generation
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成
- en: This is where the compiler generates machine code from the abstract syntax tree
    (AST). This involves translating the code in the AST into a series of instructions
    that can be executed directly by the computer’s processor. The resulting machine
    code is then executed by the JavaScript engine. Overall, the process of converting
    an AST into machine code is complex and involves many different steps. However,
    modern compilers are highly sophisticated and can produce highly optimized code
    that runs efficiently on a wide range of hardware architectures.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译器从抽象语法树（AST）生成机器代码的地方。这涉及将AST中的代码转换为一系列指令，这些指令可以直接由计算机处理器执行。然后，JavaScript引擎执行生成的机器代码。总的来说，将AST转换为机器代码的过程是复杂的，并涉及许多不同的步骤。然而，现代编译器非常复杂，可以生成在各种硬件架构上高效运行的高度优化代码。
- en: 'There are several types of compilers, each with different characteristics and
    use cases. Some of the most common types of compilers include:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种类型的编译器，每种都具有不同的特征和用例。一些最常见的编译器类型包括：
- en: Native compilers
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本地编译器
- en: These compilers produce machine code that can be executed directly by the target
    platform’s processor. Native compilers are typically used to create standalone
    applications or system-level software.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编译器生成的机器码可以直接被目标平台的处理器执行。本地编译器通常用于创建独立应用程序或系统级软件。
- en: Cross-compilers
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉编译器
- en: These compilers produce machine code for a different platform than the one on
    which the compiler is running. Cross-compilers are often used in embedded systems
    development or when targeting specialized hardware.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编译器生成的机器码运行在与编译器不同的平台上。交叉编译器通常用于嵌入式系统开发或针对特定硬件的目标。
- en: Just-in-Time (JIT) compilers
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 即时（JIT）编译器
- en: These compilers translate code into machine code at runtime, rather than ahead
    of time. JIT compilers are commonly used in virtual machines, such as the Java
    virtual machine, and can offer significant performance advantages over traditional
    interpreters.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编译器在运行时将代码转换为机器码，而不是预先编译。JIT（即时编译）编译器通常用于虚拟机，例如Java虚拟机，并且相比传统的解释器能提供显著的性能优势。
- en: Interpreters
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器
- en: These programs execute source code directly, without the need for compilation.
    Interpreters are typically slower than compilers, but offer greater flexibility
    and ease of use.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些程序直接执行源代码，无需编译。解释器通常比编译器慢，但提供更大的灵活性和易用性。
- en: To execute JavaScript code efficiently, many modern environments, including
    web browsers, utilize JIT compilers. In these systems, JavaScript source code
    might first be translated into an intermediate representation, such as bytecode.
    The JIT compiler then dynamically compiles this bytecode into machine code as
    the program runs. This on-the-fly compilation allows the engine to make optimizations
    based on real-time information, such as variable types and frequently executed
    code paths. Some engines employ multiple stages of compilation, starting with
    a quick, nonoptimized compilation to begin execution swiftly, followed by more
    optimized compilation for frequently executed code segments. This dynamic approach
    allows JavaScript engines to achieve impressive performance for a wide range of
    applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了高效执行JavaScript代码，许多现代环境，包括Web浏览器，都使用JIT编译器。在这些系统中，JavaScript源代码可能首先被转换为中间表示形式，例如字节码。然后JIT编译器动态地将这些字节码编译为机器码，随着程序的运行。这种即时编译允许引擎根据实时信息（如变量类型和频繁执行的代码路径）进行优化。某些引擎采用多阶段编译，从快速的非优化编译开始执行，然后针对频繁执行的代码段进行更优化的编译。这种动态方法使得JavaScript引擎能够在广泛的应用中实现令人印象深刻的性能。
- en: '*Runtimes* usually interface with engines to provide more contextual helpers
    and features for their specific environment. The most popular JavaScript runtime,
    by far, is the common web browser, such as Google Chrome: it ships the Chromium
    *runtime* that interfaces with the engine. Similarly, on the server side we use
    the Node.js runtime that still uses the v8 *engine*. What more engines and runtimes
    can you identify in the wild?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*运行时*通常与引擎交互，为特定环境提供更多上下文辅助功能和特性。目前最流行的JavaScript运行时是常见的Web浏览器，如Google Chrome：它使用Chromium
    *运行时*与引擎交互。类似地，在服务器端我们使用Node.js运行时，它仍然使用v8 *引擎*。在野外还有哪些更多的引擎和运行时可以识别？'
- en: Runtimes give JavaScript engines context, like the `window` object and the `document`
    object that browser runtimes ship with. If you’ve worked with both browsers and
    Node.js before, you may have noticed Node.js does not have a global `window` object.
    This is because it’s a different runtime and, as such, provides different context.
    Cloudflare created a similar runtime called *Workers* whose sole responsibility
    is executing JavaScript on globally distributed machines called edge servers,
    with Bun and Deno being even more alternative runtimes—but we’re digressing. How
    does this all relate to JSX?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时为JavaScript引擎提供上下文，例如浏览器运行时提供的`window`对象和`document`对象。如果你之前同时使用过浏览器和Node.js，你可能注意到Node.js没有全局的`window`对象。这是因为它是不同的运行时，因此提供了不同的上下文。Cloudflare创建了一个名为*Workers*的类似运行时，其唯一责任是在全球分布的边缘服务器上执行JavaScript，而Bun和Deno是更多的替代运行时，但我们偏离了主题。这与JSX有何关系？
- en: Extending JavaScript Syntax with JSX
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JSX扩展JavaScript语法
- en: Now that we understand how we would extend JavaScript syntax, how does JSX work?
    How would we do it? To extend JavaScript syntax, we’d need to either have a different
    engine that can understand our new syntax, or deal with our new syntax before
    it reaches the engine. The former is nearly impossible to do because engines require
    a lot of thought to create and maintain since they tend to be widely used. If
    we decided to go with that option, it might take years or decades before we can
    use our extended syntax! We’d then have to make sure our “bespoke special engine”
    is used everywhere. How would we convince browser vendors and other stakeholders
    to switch to our unpopular new thing? This wouldn’t work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何扩展 JavaScript 语法，那么 JSX 是如何工作的？我们应该如何做？要扩展 JavaScript 语法，我们需要一个能够理解我们新语法的不同引擎，或者在达到引擎之前处理我们的新语法。前者几乎不可能实现，因为引擎需要大量思考来创建和维护，因为它们往往被广泛使用。如果我们决定选择这个选项，可能需要数年甚至数十年才能使用我们的扩展语法！然后我们必须确保我们的“定制特殊引擎”在所有地方都被使用。我们将如何说服浏览器供应商和其他利益相关者转向我们不受欢迎的新东西呢？这不会奏效。
- en: 'The latter is quicker: let’s explore how we can deal with our new syntax before
    it reaches the engine. To do this, we need to create our own lexer and parser
    that can understand our extended language: that is, take a text string of code
    and understand it. Then, instead of generating machine code as is traditional,
    we can take this syntax tree and instead generate plain old regular vanilla JavaScript
    that all current engines can understand. This is precisely what *Babel* in the
    JavaScript ecosystem does, along with other tools like TypeScript, Traceur, and
    swc (see [Figure 2-1](#figure2-1)).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 后者更快：让我们探讨如何在达到引擎之前处理我们的新语法。为了做到这一点，我们需要创建自己的词法分析器和解析器，它能够理解我们的扩展语言：也就是说，获取代码文本字符串并理解它。然后，我们可以不像传统那样生成机器码，而是将语法树生成成当前所有引擎都能理解的普通旧式
    JavaScript。这正是 JavaScript 生态系统中的*Babel*以及其他工具如 TypeScript、Traceur 和 swc 所做的事情（见[图
    2-1](#figure2-1)）。
- en: '![Creating a new JSX engine vs. using a JS preprocessor](assets/frea_0201.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的 JSX 引擎 vs. 使用 JS 预处理器](assets/frea_0201.png)'
- en: Figure 2-1\. Creating a new JSX engine versus using a JS preprocessor
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. 创建新的 JSX 引擎与使用 JS 预处理器
- en: 'Because of this, JSX cannot be used directly in the browser, but instead requires
    a “build step” where a custom parser runs against it, then compiles it into a
    syntax tree. This code is then transformed into vanilla JavaScript in a final,
    distributable bundle. This is called *transpilation*: transformed, then compiled
    code.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，JSX 不能直接在浏览器中使用，而是需要一个“构建步骤”，其中自定义解析器对其运行，然后将其编译成语法树。然后，这段代码再转换为最终的分发包中的普通
    JavaScript。这称为*转译*：转换，然后编译的代码。
- en: To be clear, transpilation is the process of taking source code written in one
    language and transforming it into another language that has a similar level of
    abstraction. That’s why it’s also known as *source-to-source compilation*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确起见，转译是将源代码从一种语言转换为具有相似抽象级别的另一种语言的过程。这也是为什么它被称为*源到源的编译*。
- en: Formally, it’s a type of translator. This generic term could refer to a compiler,
    assembler, or interpreter, for example. Conceptually, it’s near-identical to compiling,
    except the target language is something on a similar abstraction level like the
    source language.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 形式上，它是一种类型的翻译器。这个通用术语可以指编译器、汇编器或解释器等。从概念上讲，它与编译几乎完全相同，只是目标语言是类似抽象级别的源语言。
- en: For example, TypeScript is a high-level language that, when transpiled, is turned
    into JavaScript (another high-level language). Babel’s transpilation of ES6 JavaScript
    code into ES5 JavaScript is another example.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，TypeScript 是一种高级语言，当进行转译时，会转换成 JavaScript（另一种高级语言）。Babel 将 ES6 JavaScript
    代码转译为 ES5 JavaScript 代码就是另一个例子。
- en: Now that we understand how we can build our own extension of JavaScript, let’s
    look at what we can do with this specific extension JSX.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何构建我们自己的 JavaScript 扩展，让我们看看我们可以用这种特定扩展 JSX 做些什么。
- en: The JSX Pragma
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX pragma
- en: 'It all starts with `<`, which, on its own, is an unrecognizable character in
    JavaScript when used outside of comparison operations. When a JavaScript engine
    encounters this, it throws a `SyntaxError: Unexpected token ''<''`. In JSX, this
    “JSX pragma” can be transpiled into a function call. A pragma is a compiler directive
    to provide additional information to the compiler, usually beyond what is conveyed
    in the language itself. It can, for example, tell the compiler how it should handle
    some contents of a file.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '一切都始于 `<`，这个字符在 JavaScript 中独立使用时是一个无法识别的字符，通常在比较操作之外使用时会引发 `SyntaxError: Unexpected
    token ''<''`。在 JSX 中，这个“JSX 编译指示”可以被转译成一个函数调用。编译指示是编译器提供的一个指令，用于为编译器提供文件内容之外的额外信息，通常是在语言本身传达不了的方面。'
- en: Examples of this in JavaScript are the “use strict” pragmas that we sometimes
    see atop older modules, and the recent “use client” pragma in the context of React
    Server Components (RSCs). More on those in [Chapter 9](ch09.html#ch09).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的一些例子是我们有时会在旧模块的顶部看到的“use strict”编译指示，以及在 React 服务器组件（RSCs）上下文中最近的“use
    client”编译指示。更多信息请参阅 [第9章](ch09.html#ch09)。
- en: 'The name of the function to call when a parser sees a `<` pragma is configurable,
    and defaults to the function `React.createElement` or `_jsxs` with the newer transform,
    as discussed earlier. The signature of this function is expected to be this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当解析器看到 `<` 编译指示时，调用函数的名称是可配置的，默认情况下为函数 `React.createElement` 或者在新的转换中为 `_jsxs`，如前所述。预期此函数的签名如下：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'That is, it receives `tag`, `props`, and `children` as arguments. Here’s how
    JSX maps to regular JavaScript syntax. The following JSX code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，它接收 `tag`、`props` 和 `children` 作为参数。这里是 JSX 如何映射到常规 JavaScript 语法的示例。以下
    JSX 代码：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'becomes the following JavaScript code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将变成以下 JavaScript 代码：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice the mapping between the tag (`MyComponent`), the props (`prop="value"`),
    and the children (`"contents"`). This is essentially the role of the JSX pragma:
    syntax sugar over multiple, recursive function calls. The JSX pragma is effectively
    an alias: `<` instead of `React.createElement`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意标签 (`MyComponent`)、属性 (`prop="value"`) 和子元素 (`"contents"`) 之间的映射。这本质上是 JSX
    编译指示的作用：对多个递归函数调用的语法糖。JSX 编译指示实际上是一个别名：`<` 而不是 `React.createElement`。
- en: Expressions
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式
- en: 'One of the most powerful features of JSX is the ability to execute code inside
    a tree of elements. To iterate over a list as we did in [“Under the Hood”](#under_the_hood),
    we can put executable code inside curly braces like we did with our `map` earlier
    in this chapter. If we want to show a sum of two numbers in JSX, we’d do it like
    this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 最强大的功能之一是能够在元素树中执行代码。要像我们在 [“Under the Hood”](#under_the_hood) 中所做的那样迭代列表，我们可以像在本章节早先使用的
    `map` 一样在大括号内放置可执行的代码。如果我们想在 JSX 中显示两个数字的和，我们会这样做：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will render `Here''s an expression: 3`, because the stuff inside curly
    brackets is executed as an expression. Using JSX expressions, we can iterate over
    lists and execute a variety of expressions, including conditional checks with
    ternary operations, string replacement, and more.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '这将呈现 `Here''s an expression: 3`，因为大括号内的内容作为表达式执行。使用 JSX 表达式，我们可以迭代列表并执行各种表达式，包括带有三元操作符的条件检查、字符串替换等。'
- en: 'Here’s another example with a conditional check using a ternary operation:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个使用三元操作符进行条件检查的示例：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will render `Is b more than a? YES` since the comparison is an evaluated
    expression. For posterity, it’s worth mentioning here that JSX expressions are
    exactly that—expressions. It’s not possible to execute statements inside of a
    JSX element tree. This will not work:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现 `Is b more than a? YES`，因为比较是一个被评估的表达式。值得一提的是，JSX 表达式确实是表达式。不可能在 JSX 元素树中执行语句。以下不会起作用：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It doesn’t work because statements do not return anything and are considered
    side effects: they set state without yielding a value. After statements and computations,
    how would we print a value inline? Notice that in the example, we just put the
    number `3` in there on line 6. How is our renderer supposed to know we intend
    to print `3`? This is why expressions are evaluated, but statements are not.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这不起作用是因为语句不返回任何内容并且被视为副作用：它们在不产生值的情况下设置状态。在语句和计算之后，我们如何在内联中打印一个值？请注意，在示例中，我们仅仅在第6行中放入了数字
    `3`。我们的渲染器怎么知道我们打算打印 `3`？这就是为什么表达式被评估，而语句不会。
- en: Chapter Review
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: OK, we’ve covered a fair amount of ground on the topic of JSX. We should be
    feeling pretty confident (or even fluent, if you will) about the topic, to the
    point where we can confidently explain aspects of it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经在 JSX 主题上覆盖了相当多的内容。我们应该对这个主题感到相当自信（甚至可以说是流利的），以至于我们可以自信地解释其中的各个方面。
- en: Review Questions
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Let’s make sure you’ve fully grasped the topics we covered. Take a moment to
    answer the following questions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你完全掌握了我们讨论的主题。花点时间回答以下问题：
- en: What is JSX? What are some of its pros and cons?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX 是什么？它的一些优缺点是什么？
- en: What is the difference between JSX and HTML?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX 和 HTML 有什么区别？
- en: How does a string of text become machine code?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本如何变成机器码？
- en: What are JSX expressions, and what benefits do they provide?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX 表达式是什么，它们有什么好处？
- en: If you have trouble answering these questions, this chapter may be worth another
    read. If not, let’s explore the next chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回答这些问题有困难，可能需要再读一遍这一章。如果没有，让我们探索下一章。
- en: Up Next
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么
- en: Now that we’re pretty fluent with JSX, let’s turn our attention to the next
    aspect of React and see how we can squeeze the most knowledge out of it to further
    boost our fluency. Let’s explore the virtual DOM.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 JSX 已经相当流利，让我们将注意力转向 React 的下一个方面，看看我们如何从中获取最多的知识，进一步提高我们的流利程度。让我们探索虚拟
    DOM。
