- en: Chapter 14\. Application Structure for React.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章。React.js 应用程序结构
- en: When building small hobby projects or trying a new concept or library, developers
    can start adding files to a folder without a plan or organizing structure. These
    could include CSS, helper components, images, and pages. A single folder for all
    resources becomes unmanageable as the project grows. Any respectably sized codebase
    should be organized into an application folder structure based on logical criteria.
    The decision on how to structure your files and application components could be
    a personal/team choice. It would also generally depend on the application domain
    and technology used.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建小型爱好项目或尝试新概念或库时，开发人员可以开始向文件夹添加文件，而无需计划或组织结构。这些可能包括 CSS、辅助组件、图像和页面。随着项目的增长，单个资源文件夹变得难以管理。任何规模相当大的代码库都应根据逻辑标准组织成应用程序文件夹结构。如何结构化文件和应用程序组件的决定可能是个人/团队选择。这也通常取决于应用程序领域和使用的技术。
- en: This chapter mainly focuses on folder structures for React.js applications that
    could help in better management of our projects as they grow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要关注 React.js 应用程序的文件夹结构，这有助于更好地管理我们的项目随着其增长。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: React.js itself does not provide a guideline on structuring projects but does
    suggest a few commonly used approaches. Let’s look at these and understand their
    pros and cons before discussing folder structures for projects with added complexities
    and Next.js applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: React.js 本身并没有提供有关项目结构的指导方针，但确实建议了一些常用的方法。让我们先看看这些方法，并在讨论具有复杂性和 Next.js 应用程序的项目的文件夹结构之前了解它们的优缺点。
- en: 'At the high level, you can group files in a React application in [two ways](https://oreil.ly/Tkwai):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，您可以以[两种方式](https://oreil.ly/Tkwai)对 React 应用程序中的文件进行分组：
- en: Group by feature
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 按功能分组
- en: Create folders for every application module, feature, or route.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个应用程序模块、功能或路由创建文件夹。
- en: Group by file type
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 按文件类型分组
- en: Create folders for different types of files.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为不同类型的文件创建文件夹。
- en: Let us look at this classification in detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这种分类。
- en: Group by Module, Feature, or Route
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按模块、功能或路由分组
- en: 'In this case, the file structure would mirror the business model or the application
    flow. For example, if you have an ecommerce application, you will have folders
    for product, productlist, checkout, etc. The CSS, JSX components, tests, subcomponents,
    or helper libraries explicitly required for the product module reside in the product
    folder:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，文件结构将反映业务模型或应用程序流程。例如，如果您有一个电子商务应用程序，您将为产品、产品列表、结账等创建文件夹。专门为产品模块所需的 CSS、JSX
    组件、测试、子组件或辅助库都位于产品文件夹中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The advantage of grouping files by feature is that if there is a change to the
    module, all the affected files are colocated in the same folder, and the change
    gets localized to a specific part of the code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按功能分组文件的优势在于，如果模块发生更改，所有受影响的文件都位于同一文件夹中，更改会局限于代码的特定部分。
- en: The disadvantage is common components, logic, or styles used across modules
    should be identified periodically to avoid repetition and promote consistency
    and reuse.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是应定期识别跨模块使用的常见组件、逻辑或样式，以避免重复，并促进一致性和重用。
- en: Group by File Type
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按文件类型分组
- en: 'In this type of grouping, you would create different folders for CSS, components,
    test files, images, libraries, etc. Thus, logically related files would reside
    in different folders based on the file type:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种分组方式中，您将为 CSS、组件、测试文件、图像、库等创建不同的文件夹。因此，逻辑相关的文件将根据文件类型位于不同的文件夹中：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The advantages of this approach are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势是：
- en: You have a standard structure that you can reuse across projects.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有一个可以在项目中重复使用的标准结构。
- en: Newer team members with little knowledge of the application-specific logic can
    still find files for something like styles or tests.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于对应用程序特定逻辑了解有限的新团队成员，仍然可以找到类似样式或测试文件。
- en: Common components (such as date pickers) and styles imported in different routes
    or modules can be changed once to ensure that the effect is seen across the application.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同路由或模块中导入的常见组件（如日期选择器）和样式可以一次更改，以确保效果在整个应用程序中可见。
- en: 'The disadvantages are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是：
- en: A change in logic for a specific module would likely require changes in files
    across different folders.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定模块逻辑的更改可能需要跨不同文件夹的文件进行更改。
- en: As the number of features in the application grows, the number of files in different
    folders would increase, making it difficult to find a specific file.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着应用程序中功能的增加，不同文件夹中的文件数量会增加，这使得查找特定文件变得困难。
- en: Either of these approaches could be easy to set up for small- to mid-sized applications
    with a small number of files (50 to 100) per folder. For larger projects, however,
    you may want to go for a hybrid approach based on the logical structure of your
    application. Let us look at some of the possibilities.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小到中型应用程序每个文件夹中的文件数目（50 到 100）较少的项目，这些方法中的任何一种都可以很容易地设置。但是，对于更大的项目，您可能需要根据应用程序的逻辑结构采取一种混合方法。让我们看看一些可能性。
- en: Hybrid Grouping Based on Domain and Common Components
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于领域和通用组件的混合分组
- en: 'Here you would group all common components required across the application
    in a Components folder and all application flow-specific routes or features in
    a [domain folder](https://oreil.ly/rJQaz) (the name could be *domain*, *pages*,
    or *routes*). Every folder can have subfolders for specific components and related
    files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将所有应用程序中需要的常见组件放在一个组件文件夹中，并将所有应用程序流特定的路由或功能放在[领域文件夹](https://oreil.ly/rJQaz)（名称可以是*domain*、*pages*或*routes*）。每个文件夹可以有特定组件和相关文件的子文件夹：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Thus, you can combine the advantages of both “Group by file type” and “Group
    by feature” by colocating related files, which change together frequently and
    common reusable components and styles used across the application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以通过将相关文件放置在一起，结合“按文件类型分组”和“按功能分组”的优势，这些文件经常一起更改，并且通用的可重用组件和样式在整个应用程序中使用。
- en: 'Depending on the complexity of the application, you can modify this to a flatter
    structure without subfolders or a more nested structure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的复杂性，您可以将其修改为较平的结构，没有子文件夹或更嵌套的结构：
- en: Flatter structure
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 较平的结构
- en: 'The following example illustrates a flatter structure:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了一个较平的结构：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Nested structure
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套结构
- en: 'The following example shows a more nested structure:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一个更嵌套的结构：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s best to avoid deep nesting with more than three to four levels because
    it becomes harder to write relative imports between folders or update those imports
    when the files are moved.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最好避免深层嵌套超过三到四个级别，因为在文件夹之间写相对导入或移动文件时更新这些导入会变得更加困难。
- en: A variation to this approach is to create folders based on views or routes,
    in addition to those based on domain, as discussed [here](https://oreil.ly/WiRca).
    A routing component can then coordinate the view to be displayed based on the
    current route. [Next.js](https://oreil.ly/6PwMu) uses a similar structure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个变体是根据视图或路由创建文件夹，除了基于领域创建的文件夹，如此处所述 [here](https://oreil.ly/WiRca)。然后，路由组件可以根据当前路由协调要显示的视图。[Next.js](https://oreil.ly/6PwMu)
    使用了类似的结构。
- en: Application Structure for Modern React Features
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代 React 功能的应用程序结构
- en: Modern React apps use different features such as Redux, stateful containers,
    Hooks, and Styled Components. Let’s see where the code related to these would
    fit in the application structure proposed in the previous section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 React 应用程序使用不同的功能，如 Redux、有状态容器、Hooks 和 Styled Components。让我们看看这些代码在上一节提出的应用程序结构中的位置。
- en: Redux
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Redux
- en: 'Redux documentation [strongly recommends](https://oreil.ly/iH1aX) colocating
    logic for a given feature in one place. Within a given feature folder, the Redux
    logic for that feature should be written as a single “slice” file, preferably
    using the Redux Toolkit `createSlice` API. The file bundles {`actionTypes, actions,
    reducer`} to a self-contained, isolated module. This is also known as the [“ducks”
    pattern](https://oreil.ly/UOqb5) (from Redux). For example, as given [here](https://oreil.ly/0gpXl):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'Redux 文档[强烈建议](https://oreil.ly/iH1aX)在一个地方协调给定特性的逻辑。在给定的特性文件夹内，该特性的 Redux
    逻辑应该被编写为一个单独的“切片”文件，最好使用 Redux Toolkit 的 `createSlice` API。该文件捆绑了 {`actionTypes,
    actions, reducer`} 到一个独立的、隔离的模块。这也被称为[“鸭子”模式](https://oreil.ly/UOqb5)（来自 Redux）。例如，如此处所示
    [here](https://oreil.ly/0gpXl):'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Another comprehensive example that uses Redux without creating containers or
    Hooks is available [here](https://oreil.ly/xMZiu).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不使用创建容器或 Hooks 的详细示例可以在这里找到 [here](https://oreil.ly/xMZiu)。
- en: Containers
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: 'If you have structured your code to categorize components into [presentational
    components and stateful container components](https://oreil.ly/JeYgI), you can
    create a separate folder for the container components. Containers let you separate
    complex stateful logic from other aspects of the component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经将代码结构化为[展示组件和有状态容器组件](https://oreil.ly/JeYgI)，你可以为容器组件创建一个单独的文件夹。容器可以让你将复杂的有状态逻辑与组件的其他方面分离开来：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can find a complete structure for an app with containers in [the same article](https://oreil.ly/JeYgI).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[同一篇文章](https://oreil.ly/JeYgI)中找到一个包含容器的应用的完整结构。
- en: Hooks
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hooks
- en: 'Hooks can fit into the hybrid structure just like any other type of code. You
    can have a folder at the app level for common Hooks that can be consumed by all
    React components. React Hooks used by only one component should remain in the
    component’s file or a separate *hooks.js* file in the component’s folder. You
    can find a sample structure [here](https://oreil.ly/rtT1n):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Hooks可以像任何其他类型的代码一样适应混合结构。你可以在应用程序级别有一个用于所有React组件消费的常见Hooks的文件夹。只有一个组件使用的React
    Hooks应保留在组件的文件中或组件文件夹中的单独*hooks.js*文件中。你可以在[这里](https://oreil.ly/rtT1n)找到一个示例结构：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Styled Components
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Styled Components
- en: 'If you are using Styled Components instead of CSS, you can have *style.js*
    files instead of the component-level CSS files mentioned earlier. For example,
    if you have a `titlebar` component, the structure would be something like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Styled Components而不是CSS，你可以使用*style.js*文件代替之前提到的组件级CSS文件。例如，如果你有一个`titlebar`组件，结构会是这样的：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An application-level [*theme.js* file](https://oreil.ly/OARQ8) would contain
    the values for colors to be used for background and text. A [globals component](https://oreil.ly/LzmtQ)
    could include definitions for common style elements that other components can
    use.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 应用级[*theme.js*文件](https://oreil.ly/OARQ8)将包含用于背景和文本颜色的值。一个[globals组件](https://oreil.ly/LzmtQ)可以包含其他组件可以使用的常见样式元素的定义。
- en: Other Best Practices
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他最佳实践
- en: 'In addition to folder structure, some other best practices that you can consider
    when structuring your React applications are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文件夹结构，当构建React应用程序时，你可以考虑一些其他最佳实践，如下所示：
- en: Use [import aliasing](https://oreil.ly/trM4V) to help with long relative paths
    for common imports. This can be done using both Babel and [webpack](https://oreil.ly/cSkCS)
    configurations.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[导入别名](https://oreil.ly/trM4V)来帮助处理常见导入的长相对路径。这可以通过Babel和[webpack](https://oreil.ly/cSkCS)配置来实现。
- en: '[Wrap third-party libraries](https://oreil.ly/Za7Yt) with your API so that
    they can be swapped if required.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用你的API包装第三方库，以便在需要时可以进行替换。
- en: Use [PropTypes](https://oreil.ly/8kL84) with components to ensure type checking
    for property values.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与组件一起使用[PropTypes](https://oreil.ly/8kL84)来确保属性值的类型检查。
- en: Build performance depends on the number of files and dependencies. If you’re
    using a bundler such as webpack, a few suggestions for improving build times may
    be helpful.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构建性能取决于文件数量和依赖关系。如果你使用像webpack这样的捆绑器，一些建议可以帮助提高构建时间。
- en: 'When using a [loader](https://oreil.ly/zXFkv), apply it to only those modules
    that need to be transformed by it. For example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[加载器](https://oreil.ly/zXFkv)时，只将其应用于需要转换的模块。例如：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you’re using hybrid/nested folder structures, the following [example from
    webpack](https://oreil.ly/slT4K) shows how to include and load files from different
    paths in the structure:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用混合/嵌套的文件夹结构，下面来自webpack的[示例](https://oreil.ly/slT4K)展示了如何在结构中包含和加载不同路径的文件：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Files that do not have an `import`, `require`, `define`, etc. to reference other
    modules need not be parsed for dependencies. You can avoid parsing them using
    the [`noParse` option](https://oreil.ly/UjYPF).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`import`、`require`、`define`等引用其他模块的文件不需要解析其依赖关系。你可以使用[`noParse`选项](https://oreil.ly/UjYPF)来避免解析它们。
- en: Application Structure for Next.js Apps
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Next.js应用程序结构
- en: '[Next.js](https://oreil.ly/ZeU0P) is a production-ready framework for scalable
    React apps. While you can use the hybrid structures, all the routes in the app
    must be grouped under the pages folder. (URL of the page = the root URL + relative
    path in the pages folder).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[Next.js](https://oreil.ly/ZeU0P)是一个可扩展的React应用程序的生产就绪框架。虽然你可以使用混合结构，但应用程序中的所有路由必须分组在pages文件夹下。（页面的URL
    = 根URL + 页面文件夹中的相对路径）。'
- en: 'Extending the structures discussed previously, you can have folders for common
    components, styles, Hooks, and utility functions. Code related on account of the
    domain can be structured into functional components that different routes can
    use. Finally, you will have the pages folder for all routes. Here’s an example
    for this based on [this guide](https://oreil.ly/AAv12):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展之前讨论过的结构，你可以为常见组件、样式、Hooks和实用函数创建文件夹。在领域账户相关的代码可以被组织成功能组件，不同路由可以使用这些组件。最后，你会有一个页面文件夹用于所有路由。根据[这个指南](https://oreil.ly/AAv12)提供的示例，这里有一个例子：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next.js also provides [examples](https://oreil.ly/Kim4W) for many different
    types of apps. You can bootstrap these using `create-next-app` to create the template
    folder structure provided by Next.js. For example, to create the template for
    a basic [blog app](https://oreil.ly/ym0kh), use:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js也为许多不同类型的应用程序提供了[示例](https://oreil.ly/Kim4W)。你可以使用`create-next-app`来创建Next.js提供的模板文件结构。例如，要为基本的[博客应用](https://oreil.ly/ym0kh)创建模板：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter discussed multiple different options for structuring React projects.
    Depending on the size, type, and components used in the project, you can choose
    the one most relevant to yours. Sticking to a defined pattern for structuring
    a project would help you explain it to other team members and prevent projects
    from getting disorganized and unnecessarily complicated.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了多种不同的选项来组织React项目。根据项目的大小、类型和使用的组件，你可以选择最适合你的那种。坚持为项目结构定义一个明确定义的模式将帮助你向团队其他成员解释项目，并防止项目变得混乱和不必要复杂。
- en: The next chapter is the concluding chapter of this book and provides additional
    links that might be helpful when learning about JavaScript design patterns.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章是本书的结尾章节，提供了在学习JavaScript设计模式时可能有帮助的额外链接。
