- en: 'Chapter 2\. Writing Real Code: *Going Further*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。编写真实代码：*更进一步*
- en: '![Image](assets/2-f0001-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/2-f0001-01.png)'
- en: '**You already know about variables, types, expressions... we could go on.**
    The point is, you already know a few things about JavaScript. In fact, you know
    enough to write some **real code**. Some code that does something interesting,
    some code that someone would want to use. What you’re lacking is the **real experience**
    of writing code, and we’re going to remedy that right here and now. How? By jumping
    in head first and coding up a casual game, all written in JavaScript. Our goal
    is ambitious but we’re going to take it one step at a time. Come on, let’s get
    this started, and if you want to launch the next startup, we won’t stand in your
    way; the code is yours.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**你已经了解变量、类型、表达式……我们可以继续下去。** 关键是，您已经了解一些关于JavaScript的东西。事实上，您已经足够了解以编写一些**真实的代码**。一些做一些有趣事情的代码，一些某人想要使用的代码。您缺少的是编写代码的**真实经验**，我们将在这里立即加以弥补。怎么做？通过全力以赴，编写一个用JavaScript编写的休闲游戏。我们的目标是宏伟的，但我们将一步步实现。来吧，让我们开始吧，如果您想启动下一个创业公司，我们不会阻碍您；代码是您的。'
- en: Let’s build a Battleship game
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们来建造一个战舰游戏
- en: 'It’s you against the browser: the browser hides ships and your job is to seek
    them out and destroy them. Of course, unlike the real Battleship game, in this
    one you don’t place any ships of your own. Instead, your job is to sink the computer’s
    ships in the fewest number of guesses.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您与浏览器的对抗：浏览器隐藏船只，您的任务是找出并摧毁它们。当然，与真正的战舰游戏不同，在这个游戏中，您不会放置任何自己的船只。相反，您的工作是以最少的猜测次数击沉计算机的船只。
- en: '**Goal:** Sink the browser’s ships in the fewest number of guesses. You’re
    given a rating, based on how well you perform.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：** 以最少的猜测次数击沉浏览器的船只。根据您的表现，您将获得评级。'
- en: '**Setup**: When the game program is launched, the computer places ships on
    a virtual grid. When that’s done, the game asks for your first guess.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置：** 当游戏程序启动时，计算机会在虚拟网格上放置船只。完成后，游戏会询问您的第一个猜测。'
- en: '**How you play:** The browser will prompt you to enter a guess and you’ll type
    in a grid location. In response to your guess, you’ll see a result of “Hit”, “Miss”,
    or “You sank my battleship!” When you sink all the ships, the game ends by displaying
    your rating.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**玩法：** 浏览器会提示您输入一个猜测，然后您将输入一个网格位置。根据您的猜测，您会看到“命中”、“未命中”或“你击沉了我的战舰！”的结果。当您击沉所有船只时，游戏将显示您的评级。'
- en: Our first attempt...
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一次尝试…
- en: '... a simplified Battleship'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: …一个简化的战舰游戏
- en: For our first attempt we’re going to start simpler than the full-blown 7x7 graphical
    version with three ships. Instead we’re going to start with a nice 1-D grid with
    seven locations and one ship to find. It will be crude, but our focus is on designing
    the basic code for the game, not the look and feel (at least for now).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一次尝试，我们将从比全面的7x7图形版本少的简化版本开始，只有三艘船。相反，我们将从一个带有七个位置和一个要找到的船的不错的一维网格开始。它可能会很简陋，但我们的重点是设计游戏的基本代码，而不是外观和感觉（至少现在是这样）。
- en: Don’t worry; by starting with a simplified version of the game, you get a big
    head start on building the full game later. This also gives us a nice chunk to
    bite off for your first real JavaScript program (not counting the Serious Business
    Application from [Chapter 1](ch01.html#a_quick_dip_into_javascript_getting_your),
    of course). So, we’ll build the simple version of the game in this chapter, and
    get to the deluxe version later in the book after you’ve learned a bit more about
    JavaScript.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心；通过从游戏的简化版本开始，您将在稍后构建完整游戏时获得很大的优势。这还为您的第一个真正的JavaScript程序提供了一个不错的起点（当然，不算上第一章中的严肃商业应用）。因此，在本章中，我们将构建游戏的简化版本，并在您学到更多关于JavaScript的内容后，稍后再进入豪华版本。
- en: '![Image](assets/2-f0002-01.png)![Image](assets/2-f0002-02.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/2-f0002-01.png)![Image](assets/2-f0002-02.png)'
- en: First, a high-level design
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先，一个高层次的设计
- en: We know we’ll need variables, and some numbers and strings, and if statements,
    and conditional tests, and loops... but where and how many? And how do we put
    it all together? To answer these questions, we need more information about what
    the game should do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们将需要变量，一些数字和字符串，以及条件语句和循环……但是在哪里以及有多少？以及我们如何将所有这些组合在一起？为了回答这些问题，我们需要更多关于游戏应该做什么的信息。
- en: 'First, we need to figure out the general flow of the game. Here’s the basic
    idea:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要弄清楚游戏的一般流程。以下是基本想法：
- en: '![Image](assets/2-f0003-01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](assets/2-f0003-01.png)'
- en: Now we have a high-level idea of the kinds of things the program needs to do.
    Next we’ll figure out a few more details for the steps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对程序需要做的事情有了一个高层次的概念。接下来，我们将为这些步骤进一步详细说明一些细节。
- en: '![Image](assets/2-f0003-02.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0003-02.png)'
- en: A few more details...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有一些细节...
- en: We have a pretty good idea about how this game is going to work from the high-level
    design and professional looking flowchart, but let’s nail down just a few more
    of the details before we begin writing the code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这个游戏如何工作有了一个相当好的想法，从高级设计和专业外观的流程图中，但在我们开始编写代码之前，让我们再确定一些细节。
- en: Representing the ships
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示战舰
- en: For one thing, we can start by figuring out how to represent a ship in our grid.
    Keep in mind that the virtual grid is... well, *virtual*. In other words, it doesn’t
    exist anywhere in the program. As long as both the game and the user know that
    the battleship is hidden in three consecutive cells out of a possible seven (starting
    at zero), the row itself doesn’t have to be represented in code. You might be
    tempted to build something that holds all seven locations and then to try to place
    the ship in those locations. But, we don’t need to. We just need to know the cells
    where the ship is located, say, at cells 1, 2 and 3.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以通过找出如何在我们的网格中表示一艘船来开始。请记住，虚拟网格是... 嗯，*虚拟*的。换句话说，它在程序中并不存在。只要游戏和用户知道战舰隐藏在可能的七个连续单元格中的三个单元格中（从零开始），则行本身在代码中不必表示。您可能会尝试构建一个保存所有七个位置的东西，然后尝试将船放置在这些位置中。但是，我们不需要这样做。我们只需要知道船位于哪些单元格，比如说，在单元格1、2和3处。
- en: '![Image](assets/2-f0004-01.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0004-01.png)'
- en: Getting user input
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户输入
- en: What about getting user input? We can do that with the `prompt` function. Whenever
    we need to get a new location from the user, we’ll use `prompt` to display a message
    and get the input, which is just a number between 0 and 6, from the user.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如何获取用户输入？我们可以使用 `prompt` 函数来完成。每当我们需要从用户那里获取一个新的位置时，我们将使用 `prompt` 来显示消息并获取用户的输入，这只是用户从0到6之间的一个数字。
- en: Displaying the results
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示结果
- en: What about output? For now, we’ll continue to use `alert` to show the output
    of the game. It’s a bit clunky, but it’ll work. (For the real game, later in the
    book, we’ll be updating the web page instead, but we’ve got a way to go before
    we get there.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是怎么样的？目前，我们将继续使用 `alert` 来显示游戏的输出。这有点笨拙，但它会起作用。（在本书的后面，对于真实的游戏，我们将更新网页，但在那之前，我们还有很长的路要走。）
- en: Working through the Pseudocode
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过伪代码进行工作
- en: We need an approach to planning and writing our code. We’re going to start by
    writing *pseudocode.* Pseudocode is halfway between real JavaScript code and a
    plain English description of the program, and as you’ll see, it will help us think
    through how the program is going to work without fully having to develop the *real
    code*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种计划和编写代码的方法。我们将从编写*伪代码*开始。伪代码介于真实的JavaScript代码和程序的纯英语描述之间，正如您将看到的那样，它将帮助我们思考程序将如何工作，而不必完全开发*真正的代码*。
- en: In this pseudocode for Simple Battleship, we’ve included a section that describes
    the variables we’ll need, and a section describing the logic of the program. The
    variables will tell us what we need to keep track of in our code, and the logic
    describes what the code has to faithfully implement to create the game.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单战舰的伪代码中，我们包括了一个描述我们将需要的变量的部分，以及描述程序逻辑的部分。变量将告诉我们在我们的代码中需要跟踪的内容，而逻辑描述了必须如实实现以创建游戏的代码。
- en: '![Image](assets/2-f0005-01.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0005-01.png)'
- en: Oh, before we go any further, don’t forget the HTML!
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哦，在我们继续之前，别忘了HTML！
- en: You’re not going to get very far without some HTML to link to your code. Go
    ahead and type the markup below into a new file named “battleship.html”. After
    you’ve done that we’ll get back to writing code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有一些HTML来链接到您的代码，您将无法取得太大进展。请继续在一个名为“battleship.html”的新文件中键入下面的标记。完成这些操作后，我们将继续编写代码。
- en: '![Image](assets/2-f0007-01.png)![Image](assets/2-f0007-02.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0007-01.png)![图片](assets/2-f0007-02.png)'
- en: Writing the Simple Battleship code
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写简单的战舰代码
- en: 'We’re going to use the pseudocode as a blueprint for our real JavaScript code.
    First, let’s tackle all the variables we need. Take another look at our pseudocode
    to check out the variables we need:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用伪代码作为我们真正的JavaScript代码的蓝图。首先，让我们解决我们需要的所有变量。再次查看我们的伪代码，看看我们需要哪些变量：
- en: '![Image](assets/2-f0008-01.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0008-01.png)'
- en: 'Let’s get these variables into a JavaScript file. Create a new file named “battleship.js”
    and type in your variable declarations like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这些变量放到一个JavaScript文件中。创建一个名为“battleship.js”的新文件，并像这样输入你的变量声明：
- en: '![Image](assets/2-f0008-02.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0008-02.png)'
- en: Now let’s write the game logic
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在让我们编写游戏逻辑
- en: 'We’ve got the variables out of the way, so let’s dig into the actual pseudocode
    that implements the game. We’ll break this into a few pieces. The first thing
    you’re going to want to do is implement the loop: it needs to keep looping while
    the ship isn’t sunk. From there we’ll take care of getting the guess from the
    user and validating it—you know, making sure it really is a number between 0 and
    6— and then we’ll write the logic to check for a hit on a ship and to see if the
    ship is sunk. Last, we’ll create a little report for the user with the number
    of guesses it took to sink the ship.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经搞定了变量，让我们深入研究实现游戏的伪代码。我们将其分解为几个部分。首先要做的事情是实现循环：只要船没有沉没，它就需要保持循环。接下来，我们将处理从用户处获取猜测并进行验证——确保它确实是一个介于0到6之间的数字——然后我们将编写检查船只是否被击中以及船只是否已沉没的逻辑。最后，我们将为用户创建一个小报告，报告沉船所用的猜测次数。
- en: '![Image](assets/2-f0009-01.png)![Image](assets/2-f0009-02.png)![Image](assets/2-f0009-03.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0009-01.png)![图片](assets/2-f0009-02.png)![图片](assets/2-f0009-03.png)'
- en: 'Step One: setting up the loop, getting some input'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一步：设置循环，获取一些输入
- en: Now we’re going to begin to translate the logic of our game into actual JavaScript
    code. There isn’t a perfect mapping from pseudocode to JavaScript, so you’ll see
    a few adjustments here and there. The pseudocode gives us a good idea of *what*
    the code needs to do, and now we have to write the JavaScript code that can do
    the *how*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始将游戏逻辑转换为实际的JavaScript代码。从伪代码到JavaScript并没有完美的映射，所以你会看到这里或那里有一些调整。伪代码给了我们一个关于代码需要做什么的好主意，现在我们必须编写JavaScript代码来实现具体的操作。
- en: '![Image](assets/2-f0010-01.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0010-01.png)'
- en: 'Let’s start with all the code we have so far and then we’ll zero in on just
    the parts we’re adding (to save a few trees here and there, or electrons if you’re
    reading the digital version of the book):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从目前为止的所有代码开始，然后我们将专注于我们正在添加的部分（为了节省一些纸张或者说节省电子，如果你正在阅读电子版本的书）：
- en: '![Image](assets/2-f0010-02.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0010-02.png)'
- en: How prompt works
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示的工作原理
- en: The browser provides a built-in function you can use to get input from the user,
    named `prompt`. The `prompt` function is a lot like the `alert` function you’ve
    already used—`prompt` causes a dialog to be displayed with a string that you provide,
    just like `alert`—but it also provides the user with a place to type a response.
    That response, in the form of a string, is then returned as a result of calling
    the function. Now, if the user cancels the dialog or doesn’t enter anything, then
    `null` is returned instead.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器提供了一个内置函数，可以用来从用户那里获取输入，它叫做`prompt`。`prompt`函数与你已经使用过的`alert`函数非常相似——`prompt`会显示一个对话框，其中包含你提供的字符串，与`alert`类似——但它还为用户提供了一个可以输入响应的地方。这个响应以字符串的形式返回，并作为调用函数的结果。如果用户取消对话框或者没有输入任何内容，则返回`null`。
- en: '![Image](assets/2-f0011-01.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0011-01.png)'
- en: Checking the user’s guess
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查用户的猜测
- en: If you look at the pseudocode, to check the user’s guess we need to first make
    sure the user has entered a valid input. If so, then we also check to see if the
    guess was a hit or miss. We’ll also want to make sure we appropriately update
    the `guesses` and `hits` variables. Let’s get started by checking the validity
    of the user’s input, and if the input is valid, we’ll increment the `guesses`
    variable. After that we’ll write the code to see if the user has a hit or miss.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下伪代码，要检查用户的猜测，我们首先需要确保用户输入了有效的内容。如果是这样，然后我们还要检查猜测是击中还是未击中。我们还需要确保适当地更新`guesses`和`hits`变量。让我们开始检查用户输入的有效性，如果输入有效，我们将增加`guesses`变量。之后我们将编写代码来判断用户是击中还是未击中。
- en: '![Image](assets/2-f0012-01.png)![Image](assets/2-f0012-02.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0012-01.png)![图片](assets/2-f0012-02.png)'
- en: 'Let’s look a little more closely at the validity test. You know we’re checking
    to see that the guess is between zero and six, but how exactly does this conditional
    test that? Let’s break it down:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下有效性测试。你知道我们正在检查猜测是否介于零和六之间，但具体是如何进行条件测试的呢？让我们来详细分析一下：
- en: '![Image](assets/2-f0012-03.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0012-03.png)'
- en: So, do we have a hit?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，我们击中了吗？
- en: This is where things get interesting—the user’s taken a guess at the ship’s
    location and we need to write the code to determine if that guess has hit the
    ship. More specifically, we need to see if the guess matches one of the locations
    of the ship. If it does, then we’ll increment the `hits` variable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是事情变得有趣的地方——用户猜测了船的位置，我们需要编写代码来确定该猜测是否击中了船。更具体地说，我们需要查看猜测是否与船的位置之一匹配。如果匹配，那么我们将增加`hits`变量。
- en: '![Image](assets/2-f0014-01.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0014-01.png)'
- en: 'Here’s a first stab at writing the code for the hit detection; let’s step through
    it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对命中检测代码的第一次尝试；让我们逐步进行：
- en: '![Image](assets/2-f0014-02.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0014-02.png)'
- en: Adding the hit detection code
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命中检测代码
- en: 'Let’s put everything together from the previous couple of pages:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前几页的所有内容整合在一起：
- en: '![Image](assets/2-f0015-01.png)![Image](assets/2-f0015-02.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0015-01.png)![图片](assets/2-f0015-02.png)'
- en: Hey, you sank my battleship!
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嘿，你击沉了我的战舰！
- en: '![Image](assets/2-f0015-03.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0015-03.png)'
- en: 'We’re almost there; we’ve almost got this game logic nailed down. Looking at
    the pseudocode again, what we need to do now is test to see if we have three hits.
    If we do, then we’ve sunk a battleship. And, if we’ve sunk a battleship then we
    need to set `isSunk` to true and also tell the user they’ve destroyed a ship.
    Let’s sketch out the code again before adding it in:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快要完成了；我们几乎已经完全掌握了这个游戏逻辑。再次查看伪代码，我们现在需要做的是测试是否有三次命中。如果是的话，那么我们已经击沉了一艘战舰。而且，如果我们击沉了一艘战舰，那么我们需要将`isSunk`设置为true，并告诉用户他们摧毁了一艘船。在添加代码之前，让我们再次勾勒出代码：
- en: '![Image](assets/2-f0015-04.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0015-04.png)'
- en: Provide some post-game analysis
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供一些游戏后分析
- en: 'After `isSunk` is set to true, the while loop is going to stop looping. That’s
    right, this program we’ve come to know so well is going to stop executing the
    body of the while loop, and before you know it the game’s going to be over. But,
    we still owe the user some stats on how they did. Here’s some code that does that:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`isSunk`设置为true之后，while循环将停止循环。没错，我们已经非常熟悉的这个程序将停止执行while循环的主体，在你意识到之前游戏就结束了。但是，我们仍然需要向用户提供一些关于他们表现的统计数据。以下是执行此操作的一些代码：
- en: '![Image](assets/2-f0016-01.png)![Image](assets/2-f0016-02.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0016-01.png)![图片](assets/2-f0016-02.png)'
- en: 'Now let’s add this and the sunk ship detection into the rest of the code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这个和击沉船只检测加入到其余的代码中：
- en: '![Image](assets/2-f0016-03.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0016-03.png)'
- en: And that completes the logic!
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这样就完成了逻辑！
- en: 'Alright! We’ve now fully translated the pseudocode to actual JavaScript code.
    We even discovered something we left out of the pseudocode and we’ve got that
    accounted for too. Below you’ll find the code in its entirety. Make sure you have
    this typed in and saved in “battleship.js”:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！我们现在已经完全将伪代码翻译成了实际的JavaScript代码。我们甚至发现了一些遗漏在伪代码中的内容，我们也已经考虑到了。在下面你会找到完整的代码。确保你已经将其键入并保存在“battleship.js”中：
- en: '![Image](assets/2-f0018-01.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0018-01.png)'
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Doing a little Qualit y Assurance
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行一些**质量保证**。
- en: QA, or quality assurance, is the process of testing software to find defects.
    So we’re going to do a little QA on this code. When you’re ready, load “battleship.html”
    in your browser and start playing. Try some different things. Is it working perfectly?
    Or did you find some issues? If so list them here. You can see our test run on
    this page too.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: QA，或质量保证，是测试软件以查找缺陷的过程。所以我们将对这段代码进行一些质量保证。当你准备好时，在浏览器中加载“battleship.html”并开始游戏。尝试一些不同的事情。它是否完美运行？还是你发现了一些问题？如果是的话，请在这里列出它们。你也可以在此页面上看到我们的测试运行。
- en: '![Image](assets/2-f0019-01.png)![Image](assets/2-f0019-02.png)![Image](assets/2-f0020-01.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0019-01.png)![图片](assets/2-f0019-02.png)![图片](assets/2-f0020-01.png)'
- en: '**Boolean operators allow you to write more complex statements of logic.**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔运算符允许您编写更复杂的逻辑语句。**'
- en: You’ve seen enough conditionals to know how to test, say, if the temperature
    is greater than 32 degrees. Or, that a variable that represents whether an item
    is inStock is true. But sometimes we need to test more. Sometimes we need to know
    not only if a value is greater than 32, but also if it’s less than 100\. Or, if
    an item is inStock, and also onSale. Or that an item is on sale only on Tuesdays
    when the user is a VIP member. So, you see, these conditionals can get complex.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到足够多的条件语句，知道如何测试，比如，温度是否大于32度。或者，表示物品是否有库存的变量是否为true。但有时我们需要进行更多的测试。有时我们不仅需要知道一个值是否大于32，还需要知道它是否小于100。或者，一个物品是否有库存，还要打折。或者，只有在星期二且用户是VIP会员时，物品才打折。所以，你看，这些条件语句可能会变得复杂。
- en: Let’s step through a few to get a better idea of how they work.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步进行一些操作，以更好地了解它们的工作原理。
- en: 'Say we need to test that an item is inStock AND onSale. We could do that like
    this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要测试某个物品是否在库存并且在特价销售。我们可以这样做：
- en: '![Image](assets/2-f0020-02.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0020-02.png)'
- en: We can simplify this code by combining these two conditionals together. Unlike
    in Simple Battleship, where we tested if guess < 0 OR guess > 6, here we want
    to know if inStock is true AND onSale is true. Let’s see how to do that...
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将这两个条件结合在一起来简化此代码。与简单的战舰游戏不同，在那里我们测试了猜测是否 < 0 或 > 6，这里我们想知道的是如果 inStock
    为真并且 onSale 也为真。让我们看看如何做到这一点……
- en: '![Image](assets/2-f0021-01.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0021-01.png)'
- en: 'We don’t have to stop there; we can use multiple boolean operators to combine
    conditionals in a variety of ways:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必止步于此；我们可以使用多个布尔运算符以各种方式组合条件语句：
- en: '![Image](assets/2-f0021-02.png)![Image](assets/2-f0023-01.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0021-02.png)![图片](assets/2-f0023-01.png)'
- en: Can we talk about your verbosit y...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们能谈谈你的啰嗦吗……
- en: 'We don’t know how to bring this up, but you’ve been a little verbose in specifying
    your conditionals. What do we mean? Take this condition for instance:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道如何提出这个问题，但你在指定条件时有点啰嗦。我们是什么意思呢？例如，就拿这个条件来说：
- en: '![Image](assets/2-f0023-02.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0023-02.png)'
- en: 'As it turns out, that’s a bit of overkill. The whole point of a conditional
    is that it evaluates to either true or false, but our boolean variable `inStock`
    already *is* one of those values. So, we don’t need to compare the variable to
    anything; it can just stand on its own. That is, we can just write this instead:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，这有点过头了。条件语句的整个要点在于它评估为 true 或 false，但我们的布尔变量 `inStock` 已经是这些值之一。所以，我们不需要将变量与任何东西进行比较；它可以单独存在。也就是说，我们可以改写成这样：
- en: '![Image](assets/2-f0023-03.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0023-03.png)'
- en: Now, while some might claim our original, verbose version was clearer in its
    intent, it’s more common to see the more succinct version in practice. And, you’ll
    find the less verbose version easier to read as well.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽管有些人可能会说我们最初的冗长版本在意图上更清晰，但实际上更常见的是看到更简洁的版本。而且，你会发现少言简写的版本更易于阅读。
- en: Finishing the Simple Battleship game
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成简单战舰游戏
- en: Yes, we still have one little matter to take care of because right now you’ve
    hard coded the location of the ship—no matter how many times you play the game,
    the ship is always at locations 3, 4 and 5\. That actually works out well for
    testing, but we really need to randomly place the ship to make it a little more
    interesting to the user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们还有一件小事要处理，因为现在你已经将船的位置硬编码了 —— 无论玩游戏多少次，船总是在位置 3、4 和 5。这对于测试来说确实很好，但我们真的需要随机放置船只，这样对用户来说更有趣。
- en: Let’s step back and think about the right way to place a ship on the 1-D grid
    of seven cells. We need a starting location that allows us to place three consecutive
    positions on the grid. That means we need a starting location from zero to four.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退后一步，考虑在七个单元格的一维网格上正确放置船只的方法。我们需要一个起始位置，可以在网格上放置三个连续的位置。这意味着我们需要一个从零到四的起始位置。
- en: '![Image](assets/2-f0024-01.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0024-01.png)'
- en: How to assign random locations
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何分配随机位置
- en: Now, once we have a starting location (between zero and four), we simply use
    it and the following two locations to hold the ship.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们有了起始位置（在零到四之间），我们只需使用它和接下来的两个位置来放置船只。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Take the random location along with the next two consecutive locations.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 取随机位置以及接下来的两个连续位置。
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Okay, but how do we generate a random number? That’s where we turn to JavaScript
    and its built-in functions. More specifically, JavaScript comes with a bunch of
    built-in math-related functions, including a couple that can be used to generate
    random numbers. Now we’re going to get deeper into built-in functions, and functions
    in general, a little later in the book. For now, we’re just going to make use
    of these functions to get our job done.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，但是如何生成一个随机数呢？这就是我们求助于 JavaScript 及其内置函数的地方。更具体地说，JavaScript 自带了一堆与数学相关的内置函数，包括一些用于生成随机数的函数。现在我们将深入了解内置函数，以及一般的函数稍后会讲到。现在，我们只需利用这些函数来完成我们的工作。
- en: The recipe for generating a random number
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机数的配方
- en: 'We’re going to start with the `Math.random` function. By calling this function
    we’ll get back a random decimal number:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 `Math.random` 函数开始。通过调用此函数，我们将得到一个随机的十进制数：
- en: '![Image](assets/2-f0025-01.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0025-01.png)'
- en: What we need is an integer between 0 and 4—that is, 0, 1, 2, 3 or 4—not a decimal
    number, like 0.34\. To start, we could multiply the number returned by `Math.random`
    by 5 to get a little closer; here’s what we mean...
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的是0到4之间的整数，即0、1、2、3或4，而不是像0.34那样的小数。首先，我们可以将由`Math.random`返回的数字乘以5，以更接近目标；这是我们的意思...
- en: '![Image](assets/2-f0025-02.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0025-02.png)'
- en: 'That’s closer! Now all we need to do is clip off the end of the number to give
    us an integer number. To do that we can use another built-in Math function, Math.floor:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 那更接近了！现在我们只需要截取数字的末尾，以得到一个整数。为此，我们可以使用另一个内置的数学函数，Math.floor：
- en: '![Image](assets/2-f0025-03.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0025-03.png)'
- en: Back to do a little more QA
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再回到做一些质量保证的工作
- en: That’s all we need. Let’s put this code together (we’ve already done that below)
    and replace your existing location code with it. When you’re finished, give it
    a few test runs to see how fast you can sink the enemy.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的一切。让我们把这段代码放在一起（我们已经在下面做过了），用它替换你现有的位置代码。完成后，进行几次测试运行，看看你能多快地击沉敌人。
- en: '![Image](assets/2-f0027-01.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0027-01.png)'
- en: Here’s one of our test sessions. The game’s a little more interesting now that
    we’ve got random locations for the ship. But we still managed to get a pretty
    good score...
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的一个测试会话之一。现在游戏变得更加有趣，因为我们为船只设置了随机位置。但我们仍然设法得到了一个相当不错的分数...
- en: '![Image](assets/2-f0027-02.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0027-02.png)'
- en: Congrats on your first true JavaScript program, and a short word about reusing
    code
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恭喜你完成了你的第一个真正的JavaScript程序，并简短地谈一下代码重用的事项
- en: You’ve probably noticed that we made use of a few *built-in functions* like
    `alert`, `prompt`, `console.log` and `Math.random`. With very little effort, these
    functions have given you the ability to pop up dialog boxes, log output to the
    console and generate random numbers, almost like magic. But, these built-in functions
    are just packaged up code that’s already been written for you, and as you can
    see their power is that you can use and reuse them just by making a call to them
    when you need them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们利用了一些*内置函数*，如`alert`、`prompt`、`console.log`和`Math.random`。几乎像魔术一样，这些函数凭借极少的努力就赋予了你弹出对话框、在控制台记录输出和生成随机数的能力。但是，这些内置函数只是已经为你编写好的封装代码，它们的威力在于你可以在需要时调用和重复使用它们。
- en: Now there’s a lot to learn about functions, how to call them, what kinds of
    values you can pass them, and so on, and we’re going to start getting into all
    that in the next chapter where you learn to create your own functions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在关于函数有很多内容要学习，如何调用它们，可以传递什么样的值等等，我们将在下一章开始深入讨论，那时你将学会创建自己的函数。
- en: But before you get there you’ve got the bullet points to review, a crossword
    puzzle to complete... oh, and a good night’s sleep to let everything sink in.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但在你到达那里之前，你得复习一下要点，完成一个交叉字谜...哦，还有一个良好的夜间睡眠，让所有知识都能深入脑海。
- en: JavaScript cross
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript交
- en: '![Image](assets/2-f0030-01.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0030-01.png)'
- en: How does a crossword puzzle help you learn JavaScript? The mental twists and
    turns burn the JavaScript right into your brain!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉字谜如何帮助你学习JavaScript？心理上的转折将JavaScript深深地烙印在你的大脑中！
- en: '![Image](assets/2-f0030-02.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/2-f0030-02.png)'
- en: '**ACROSS**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**ACROSS**'
- en: 1\. This helps you think about how a program is going to work.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 这帮助你思考程序如何运行。
- en: 7\. Both while and if statements use __________ tests.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. while和if语句都使用_________测试。
- en: 8\. Boolean operators always result in true or _________.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 布尔运算符总是得出true或_________。
- en: 9\. To get a true value from an AND operator (&&), both parts of the conditional
    must be ___________.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 要从AND运算符（&&）获得true值，条件的两部分都必须_________。
- en: 10\. JavaScript has many built-in __________ like alert and prompt.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. JavaScript有许多内置_________，如alert和prompt。
- en: 11\. To randomly choose a position for a ship, use Math._________.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 要随机选择一个位置放置船只，可以使用Math._________。
- en: '**DOWN**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**DOWN**'
- en: 1\. To get input from a user, you can use the _________ function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 要从用户那里获取输入，可以使用_________函数。
- en: 2\. == is a _____________ operator you can use to test to see if two values
    are the same.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. == 是一个___________运算符，用于测试两个值是否相同。
- en: 3\. OR (||) and AND (&&) are ___________ operators.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. OR（||）和AND（&&）是_________运算符。
- en: 4\. If you’re good at testing programs, you might want to become a ________
    Assurance specialist.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 如果你擅长测试程序，你可能想成为一个_________保证专家。
- en: 5\. If you don’t initialize a variable, the value is __________.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 如果不初始化一个变量，其值为_________。
- en: 6\. We keep track of whether a ship is sunk or not with a ________ variable.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 我们使用一个________变量来跟踪船是否被击沉。
- en: 8\. To get a false value from an OR operator (||), both parts of the conditional
    must be __________.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 要从或运算符（||）得到假值，条件的两部分都必须是**假的**。
- en: JavaScript cross Solution
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript跨越解决方案
- en: '![Image](assets/2-f0036-01.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/2-f0036-01.png)'
- en: How does a crossword puzzle help you learn JavaScript? The mental twists and
    turns burn the JavaScript right into your brain! Here’s our solution.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉字谜如何帮助你学习JavaScript？这种心理上的转折将JavaScript深深烙印在你的大脑中！这是我们的解决方案。
- en: '![Image](assets/2-f0036-02.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/2-f0036-02.png)'
