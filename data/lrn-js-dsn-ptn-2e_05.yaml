- en: Chapter 5\. Modern JavaScript Syntax and Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 现代JavaScript语法和特性
- en: JavaScript has been around for many decades now and has undergone multiple revisions.
    This book explores design patterns in the modern JavaScript context and uses modern
    ES2015+ syntax for all the examples discussed. This chapter discusses ES2015+
    JavaScript features and syntax essential to further our discussion of design patterns
    in the current JavaScript context.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript现在已经存在了多个十年，并经历了多次修订。本书探讨了现代JavaScript背景下的设计模式，并对所有讨论的示例使用了现代的ES2015+语法。本章讨论了ES2015+
    JavaScript的特性和语法，这些对于进一步讨论当前JavaScript背景下的设计模式至关重要。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Some fundamental changes were introduced to JavaScript syntax with ES2015 that
    are especially relevant to our discussion on patterns. These are covered well
    in the [BabelJS ES2015 guide](https://oreil.ly/V09r_).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ES2015引入了一些对我们讨论的模式特别重要的JavaScript语法的基本更改。这些在[BabelJS ES2015指南](https://oreil.ly/V09r_)中有很好的介绍。
- en: This book relies on modern JavaScript syntax. You may also be curious about
    TypeScript. TypeScript, a statically typed superset of JavaScript, offers several
    language features that JavaScript does not. These features include strong typing,
    interfaces, enums, and advanced type inference and can also influence design patterns.
    To learn more about TypeScript and its benefits, consider checking out some O’Reilly
    books such as [*Programming TypeScript*](https://learning.oreilly.com/library/view/programming-typescript/9781492037644/)
    by Boris Cherny.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书依赖于现代JavaScript语法。您可能也对TypeScript感兴趣。TypeScript是JavaScript的静态类型超集，提供了几个JavaScript不具备的语言特性。这些特性包括强类型、接口、枚举和高级类型推断，还可以影响设计模式。要了解有关TypeScript及其优势的更多信息，请考虑查阅O'Reilly书籍，如[*Programming
    TypeScript*](https://learning.oreilly.com/library/view/programming-typescript/9781492037644/)，作者Boris
    Cherny。
- en: The Importance of Decoupling Applications
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解耦应用程序的重要性
- en: Modular JavaScript allows you to logically split your application into smaller
    pieces called modules. A module can be imported by other modules that, in turn,
    can be imported by more modules. Thus, the application can be composed of many
    nested modules.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化JavaScript允许您将应用程序逻辑上分割成称为模块的小块。一个模块可以被其他模块导入，这些模块又可以被更多的模块导入。因此，应用程序可以由许多嵌套模块组成。
- en: In the world of scalable JavaScript, when we say an application is *modular*,
    we often mean it’s composed of a set of highly decoupled, distinct pieces of functionality
    stored in modules. Loose coupling facilitates easier maintainability of apps by
    removing *dependencies* where possible. If implemented efficiently, it allows
    you to see how changes to one part of a system may affect another.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在可伸缩的JavaScript世界中，当我们说一个应用程序是*模块化*时，通常意味着它由一组高度解耦的功能模块组成。松散耦合通过尽可能消除*依赖关系*来更轻松地维护应用程序。如果实现得当，它允许您看到对系统的一个部分进行更改可能如何影响另一个部分。
- en: Unlike some more traditional programming languages, the older iterations of
    JavaScript until ES5 ([Standard ECMA-262 5.1 Edition](https://oreil.ly/w2WxN))
    did not provide developers with the means to organize and import code modules
    cleanly. It was one of the concerns with the specifications that had not required
    great thought until more recent years when the need for more organized JavaScript
    applications became apparent. [AMD (Asynchronous Module Definition)](https://oreil.ly/W5XPd)
    and [CommonJS](https://oreil.ly/lgw0w) modules were the most popular patterns
    to decouple applications in the initial versions of JavaScript.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不像一些更传统的编程语言，旧版本的JavaScript直到ES5（[ECMA-262第5.1版](https://oreil.ly/w2WxN)）没有为开发人员提供清晰地组织和导入代码模块的手段。这是在更近年才显得需要更有组织的JavaScript应用程序规范时的一个问题。[AMD（异步模块定义）](https://oreil.ly/W5XPd)和[CommonJS](https://oreil.ly/lgw0w)模块是在JavaScript初始版本中解耦应用程序最流行的模式之一。
- en: Native solutions to these problems arrived with [ES6 or ES2015](https://oreil.ly/rPxFL).
    [TC39](https://oreil.ly/GJduA), the standards body charged with defining the syntax
    and semantics of ECMAScript and its future iterations, had been keeping a close
    eye on the evolution of JavaScript usage for large-scale development and was acutely
    aware of the need for better language features for writing more modular JS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题的本地解决方案随着[ES6或ES2015](https://oreil.ly/rPxFL)的到来而出现。[TC39](https://oreil.ly/GJduA)，负责定义ECMAScript及其未来版本的语法和语义的标准机构，一直密切关注JavaScript在大规模开发中的使用演变，并深刻意识到编写更模块化JS的需要。
- en: The syntax to create modules in JavaScript was developed and standardized with
    the release of ECMAScript modules in ES2015\. Today, all major browsers support
    JavaScript modules. They have become the de facto method of implementing modern-day
    modular programming in JavaScript. In this section, we’ll explore code samples
    using the syntax for modules in ES2015+.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ECMAScript 2015 发布的 ECMAScript 模块的语法已经开发并标准化。今天，所有主要浏览器都支持 JavaScript 模块。它们已成为在
    JavaScript 中实现现代模块化编程的事实标准。在本节中，我们将使用 ES2015+ 中的模块语法来探索代码示例。
- en: Modules with Imports and Exports
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有导入和导出的模块
- en: Modules allow us to separate our application code into independent units, each
    containing code for one aspect of the functionality. Modules also encourage code
    reusability and expose features that can be integrated into different applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 模块允许我们将应用程序代码分隔为独立单元，每个单元包含一个功能方面的代码。模块还鼓励代码的可重用性，并公开可集成到不同应用程序中的功能。
- en: 'A language should have features that allow you to `import` module dependencies
    and `export` the module interface (the public API/variables we allow other modules
    to consume) to support modular programming. The support for [JavaScript modules
    (also referred to as ES modules)](https://oreil.ly/kd-pu) was introduced to JavaScript
    in ES2015, allowing you to specify module dependencies using an `import` keyword.
    Similarly, you can use the `export` keyword to export just about anything from
    within the module:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一种语言应该具有功能，允许您 `import` 模块依赖项并 `export` 模块接口（我们允许其他模块使用的公共 API/变量）以支持模块化编程。对于
    [JavaScript 模块（也称为 ES 模块）](https://oreil.ly/kd-pu)，在 ES2015 中引入了对 JavaScript 的支持，允许您使用
    `import` 关键字指定模块依赖项。同样，您可以使用 `export` 关键字从模块内部导出几乎任何内容：
- en: '`import` declarations bind a module’s exports as local variables and may be
    renamed to avoid name collisions/conflicts.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import` 声明将模块的导出绑定为本地变量，并且可以重命名以避免名称冲突。'
- en: '`export` declarations declare that a local binding of a module is externally
    visible such that other modules may read the exports but can’t modify them. Interestingly,
    modules may export child modules but can’t export modules that have been defined
    elsewhere. We can also rename exports so that their external name differs from
    their local names.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export` 声明声明模块的本地绑定是外部可见的，以便其他模块可以读取导出但不能修改它们。有趣的是，模块可以导出子模块，但不能导出在其他地方定义的模块。我们还可以重命名导出，使其外部名称与本地名称不同。'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*.mjs* is an extension used for JavaScript modules that helps us distinguish
    between module files and classic scripts (*.js*). The *.mjs* extension ensures
    that corresponding files are parsed as a module by runtimes and build tools (for
    example, [Node.js](https://oreil.ly/E9oRS), [Babel](https://oreil.ly/fkQAL)).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*.mjs* 是用于 JavaScript 模块的扩展，帮助我们区分模块文件和经典脚本（*.js*）。*.mjs* 扩展确保相应的文件被运行时和构建工具（例如，[Node.js](https://oreil.ly/E9oRS)、[Babel](https://oreil.ly/fkQAL)）解析为模块。'
- en: 'The following example shows three modules for bakery staff, the functions they
    perform while baking, and the bakery itself. We see how functionality that is
    exported by one module is imported and used by the other:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了三个模块，分别是面包店员工、他们在烘焙时执行的功能以及面包店本身。我们看到一个模块导出的功能如何被另一个模块导入并使用：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Typically, a module file contains several related functions, constants, and
    variables. You can collectively export these at the end of the file using a single
    export statement followed by a comma-separated list of the module resources you
    want to export:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个模块文件包含几个相关的函数、常量和变量。您可以在文件末尾使用单个导出语句，后跟一个逗号分隔的模块资源列表，将这些资源集体导出：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, you can import only the functions you need:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以只导入您需要的函数：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can tell browsers to accept `<script>` tags that contain JavaScript modules
    by specifying the `type` attribute with a value of `module`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定值为 `module` 的 `type` 属性，告诉浏览器接受包含 JavaScript 模块的 `<script>` 标签：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `nomodule` attribute tells modern browsers not to load a classic script
    as a module. This is useful for fallback scripts that don’t use the module syntax.
    It allows you to use the module syntax in your HTML and have it work in browsers
    that don’t support it. This is useful for several reasons, including performance.
    Modern browsers don’t require polyfilling for modern features, allowing you to
    serve the larger transpiled code to legacy browsers alone.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`nomodule`属性告诉现代浏览器不要将经典脚本作为模块加载。这对于不使用模块语法的回退脚本非常有用。它允许你在HTML中使用模块语法，并使其在不支持该语法的浏览器中正常工作。这在多个方面都很有用，包括性能。现代浏览器不需要为现代特性提供polyfill，可以单独为传统浏览器提供更大的转码代码。'
- en: Module Objects
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块对象
- en: 'A cleaner approach to importing and using module resources is to import the
    module as an object. This makes all the exports available as members of the object:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更清晰的导入和使用模块资源的方法是将模块作为对象导入。这使得所有导出都作为对象的成员可用：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Modules Loaded from Remote Sources
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从远程源加载的模块
- en: 'ES2015+ also supports remote modules (e.g., third-party libraries), making
    it simplistic to load modules from external locations. Here’s an example of pulling
    in the module we defined previously and utilizing it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ES2015+还支持远程模块（例如第三方库），使得从外部位置加载模块变得简单。这里有一个示例，展示了如何拉取我们之前定义的模块并利用它：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Static Imports
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态导入
- en: 'The type of import just discussed is called static import. The module graph
    needs to be downloaded and executed with static import before the main code can
    run. This can sometimes lead to the eager loading of a lot of code up front on
    the initial page load, which can be expensive and delay key features being available
    earlier:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚讨论的导入类型称为静态导入。在主代码运行之前，需要使用静态导入下载和执行模块图形。有时这会导致在初始页面加载时前端加载大量代码，这可能是昂贵的并延迟关键功能的提前可用性：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Dynamic Imports
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态导入
- en: Sometimes, you don’t want to load a module up-front but on demand when needed.
    Lazy-loading modules allows you to load what you need when needed—for example,
    when the user clicks a link or a button. This improves the initial load-time performance.
    [Dynamic import](https://oreil.ly/fqR6v) was introduced to make this possible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你不想预加载一个模块，而是在需要时按需加载。延迟加载模块允许你在需要时加载所需内容，例如，当用户点击链接或按钮时。这提高了初始加载性能。[动态导入](https://oreil.ly/fqR6v)的引入使这成为可能。
- en: 'Dynamic import introduces a new function-like form of import. `import(url)`
    returns a promise for the module namespace object of the requested module, which
    is created after fetching, instantiating, and evaluating all of the module’s dependencies,
    as well as the module itself. Here is an example that shows dynamic imports for
    the `cakeFactory` module:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 动态导入引入了一种类似函数的导入形式。`import(url)`返回请求的模块命名空间对象的 promise，该对象在获取、实例化和评估模块及其所有依赖项后创建。这里有一个示例展示了对`cakeFactory`模块的动态导入：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Dynamic import can also be supported using the `await` keyword:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 动态导入也可以使用`await`关键字支持：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With dynamic import, the module graph is downloaded and evaluated only when
    the module is used.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动态导入时，只有在模块被使用时才会下载和评估模块图形。
- en: Popular patterns like Import on Interaction and Import on Visibility can be
    easily implemented in vanilla JavaScript using the dynamic import feature.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的模式如交互式导入和可见性导入可以在原生 JavaScript 中利用动态导入功能轻松实现。
- en: Import on Interaction
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式导入
- en: Some libraries may be required only when a user starts interacting with a particular
    feature on the web page. Typical examples are chat widgets, complex dialog boxes,
    or video embeds. Libraries for these features need not be imported on page load
    but can be loaded when the user interacts with them (for example, by clicking
    on the component facade or placeholder). The action can trigger the dynamic import
    of respective libraries followed by the function call to activate the desired
    functionality.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一些库可能仅在用户开始与网页上的特定功能进行交互时才需要。典型的例子包括聊天窗口、复杂的对话框或视频嵌入。这些功能的库不需要在页面加载时导入，而是可以在用户与它们进行交互时加载（例如通过点击组件外观或占位符）。操作可以触发相应库的动态导入，然后调用函数以激活所需的功能。
- en: 'For example, you can implement an onscreen sort function using the external
    [`lodash.sortby` module](https://oreil.ly/VUgnM), which is loaded dynamically:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用外部的[`lodash.sortby`模块](https://oreil.ly/VUgnM)实现屏幕上的排序功能，该模块是动态加载的：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Import on Visibility
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可见性导入
- en: Many components are not visible on the initial page load but become visible
    as the user scrolls down. Since users may not always scroll down, modules corresponding
    to these components can be lazy-loaded when they become visible. The [IntersectionObserver
    API](https://oreil.ly/wXwgi) can detect when a component placeholder is about
    to become visible, and a dynamic import can load the corresponding modules.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组件在初始页面加载时不可见，但随着用户向下滚动，它们变得可见。由于用户可能不会总是向下滚动，因此当这些组件变得可见时，相应的模块可以进行延迟加载。[IntersectionObserver
    API](https://oreil.ly/wXwgi) 可以检测组件占位符即将变得可见的时候，动态导入可以加载相应的模块。
- en: Modules for the Server
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端的模块
- en: '[Node](https://oreil.ly/4Bh_O) 15.3.0 onward supports JavaScript modules. They
    function without an experimental flag and are compatible with the rest of the
    npm package ecosystem. Node [treats](https://oreil.ly/q1Jzl) files ending in *.mjs*
    and *.js* with a top-level type field value of module as JavaScript modules:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[Node](https://oreil.ly/4Bh_O) 15.3.0 以后支持 JavaScript 模块。它们无需实验标志，并且与 npm 软件包生态系统的其余部分兼容。Node
    处理以 *.mjs* 和 *.js* 结尾的文件，并将顶级 type 字段值设置为 module 作为 JavaScript 模块：'
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Advantages of Using Modules
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块的优点
- en: 'Modular programming and the use of modules offer several unique advantages.
    Some of these are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化编程和使用模块提供了几个独特的优势。以下是其中一些：
- en: Modules scripts are evaluated only once.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 模块脚本仅评估一次。
- en: The browser evaluates module scripts only once, while classic scripts get evaluated
    as often as they are added to the DOM. This means that with JS modules, if you
    have an extended hierarchy of dependent modules, the module that depends on the
    innermost module will be evaluated first. This is a good thing because it means
    that the innermost module will be evaluated first and will have access to the
    exports of the modules that depend on it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器只会对模块脚本进行一次评估，而经典脚本会根据其添加到 DOM 的次数进行评估。这意味着，如果您有一个依赖模块层次结构，那么依赖于最内层模块的模块将首先进行评估。这是一件好事，因为这意味着最内层模块将首先进行评估，并且可以访问依赖于它的模块的导出内容。
- en: Modules are auto-deferred.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 模块自动推迟加载。
- en: Unlike other script files, where you have to include the `defer` attribute if
    you don’t want to load them immediately, browsers automatically defer the loading
    of modules.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他脚本文件不同，如果不希望立即加载它们，您无需包含 `defer` 属性，浏览器会自动推迟模块的加载。
- en: Modules are easy to maintain and reuse.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 模块易于维护和重用。
- en: Modules promote decoupling pieces of code that can be maintained independently
    without significant changes to other modules. They also allow you to reuse the
    same code in multiple different functions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 模块促进解耦能够独立维护的代码片段，而不需要对其他模块进行重大更改。它们还允许在多个不同功能中重复使用相同的代码。
- en: Modules provide namespacing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 模块提供命名空间。
- en: Modules create a private space for related variables and constants so that they
    can be referenced via the module without polluting the global namespace.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 模块为相关变量和常量创建了一个私有空间，以便可以通过模块引用它们而不污染全局命名空间。
- en: Modules enable dead code elimination.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 模块实现了死代码消除。
- en: Before the introduction of modules, unused code files had to be manually removed
    from projects. With module imports, bundlers such as [webpack](https://oreil.ly/37e9F)
    and [Rollup](https://oreil.ly/rUWiB) can automatically identify unused modules
    and eliminate them. Dead code may be removed before adding it to the bundle. This
    is known as tree-shaking.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入模块之前，必须手动从项目中删除未使用的代码文件。使用模块导入后，像 [webpack](https://oreil.ly/37e9F) 和 [Rollup](https://oreil.ly/rUWiB)
    这样的打包工具可以自动识别未使用的模块并将其消除。在添加到捆绑包之前可能会删除死代码。这称为摇树。
- en: All modern browsers support module [import](https://oreil.ly/IauTK) and [export](https://oreil.ly/NubAY),
    and you can use them without any fallback.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都支持模块的 [import](https://oreil.ly/IauTK) 和 [export](https://oreil.ly/NubAY)，您可以在没有任何回退的情况下使用它们。
- en: Classes with Constructors, Getters, and Setters
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有构造函数、getter 和 setter 的类
- en: 'In addition to modules, ES2015+ also allows defining classes with constructors
    and some sense of privacy. JavaScript classes are defined with the `class` keyword.
    In the following example, we define a class `Cake` with a constructor and two
    getters and setters:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除了模块外，ES2015+ 还允许使用构造函数和一些私密性概念来定义类。JavaScript 类是用 `class` 关键字定义的。在下面的示例中，我们定义了一个
    `Cake` 类，包含一个构造函数和两个 getter 和 setter：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: JavaScript classes are built on prototypes and are a special category of JavaScript
    functions that need to be defined before they can be referenced.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 类是基于原型的，并且是 JavaScript 函数的一个特殊类别，需要在引用之前定义。
- en: 'You can also use the `extends` keyword to indicate that a class inherits from
    another class:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`extends`关键字指示一个类继承自另一个类：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: All modern browsers and Node support ES2015 classes. They are also compatible
    with the [new-style class syntax](https://oreil.ly/9c9jm) introduced in ES6.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器和Node都支持ES2015类。它们也兼容ES6中引入的[new-style class syntax](https://oreil.ly/9c9jm)。
- en: The difference between JavaScript modules and classes is that modules are [imported](https://oreil.ly/IauTK)
    and [exported](https://oreil.ly/NubAY), and classes are defined with the `class`
    keyword.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 模块和类的区别在于模块是[导入](https://oreil.ly/IauTK)和[导出](https://oreil.ly/NubAY)，而类则是用`class`关键字定义的。
- en: 'Reading through, one may also notice the lack of the word “function” in the
    previous examples. This isn’t a typo: TC39 has made a conscious effort to decrease
    our abuse of the `function` keyword for everything, hoping it will help simplify
    how we write code.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读下去，你可能还会注意到前面的例子中缺少了“function”一词。这不是打字错误：TC39有意减少我们对`function`关键字的滥用，希望能简化我们编写代码的方式。
- en: 'JavaScript classes also support the `super` keyword, which [allows](https://oreil.ly/gYvxw)
    you to call a parent class’ constructor. This is useful for implementing the self-inheritance
    pattern. You can use `super` to call the methods of the superclass:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 类还支持`super`关键字，它允许您调用父类的构造函数。这对实现自身继承模式非常有用。您可以使用`super`来调用超类的方法：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Modern JavaScript supports public and private class members. Public class members
    are accessible to other classes. Private class members are accessible only to
    the class in which they are defined. Class fields are, by default, public. [Private
    class fields](https://oreil.ly/SXsES) can be created by using the `#` (hash) prefix:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 JavaScript 支持公共和私有类成员。公共类成员可以被其他类访问。私有类成员只能在定义它们的类中访问。类字段默认为公共。通过使用`#`（哈希）前缀可以创建[私有类字段](https://oreil.ly/SXsES)：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'JavaScript classes support static methods and properties using the `static`
    keyword. Static members can be referenced without instantiating the class. You
    can use static methods to create utility functions and static properties for holding
    configuration or cached data:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript类支持使用`static`关键字的静态方法和属性。静态成员可以在不实例化类的情况下引用。您可以使用静态方法创建实用函数，并使用静态属性来保存配置或缓存数据：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Classes in JavaScript Frameworks
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 框架中的类
- en: Over the last few years, some modern JavaScript libraries and frameworks—notably
    React—have introduced alternatives to classes. React Hooks make it possible to
    use React state and lifecycle methods without an ES2015 class component. Before
    Hooks, React developers had to refactor functional components as class components
    so that they handle state and lifecycle methods. This was often tricky and required
    an understanding of how ES2015 classes work. React Hooks are functions that allow
    you to manage a component’s state and lifecycle methods without relying on classes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，一些现代 JavaScript 库和框架——特别是 React——引入了替代类的方法。React Hooks使得在不使用ES2015类组件的情况下使用React状态和生命周期方法成为可能。在Hooks出现之前，React开发者必须将功能组件重构为类组件，以便处理状态和生命周期方法。这通常很棘手，并且需要理解ES2015类的工作原理。React
    Hooks是函数，允许您管理组件的状态和生命周期方法，而无需依赖于类。
- en: Note that several other approaches to building for the web, such as the [Web
    Components](https://oreil.ly/ndfeb) community, continue to use classes as a base
    for component development.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，构建Web的其他几种方法，例如[Web Components](https://oreil.ly/ndfeb)社区，继续以类作为组件开发的基础。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced JavaScript language syntax for modules and classes.
    These features allow us to write code while adhering to object-oriented design
    and modular programming principles. We will also use these concepts to categorize
    and describe different design patterns. The next chapter talks about the different
    categories of design patterns.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了模块和类的JavaScript语言语法。这些特性使我们能够在遵循面向对象设计和模块化编程原则的同时编写代码。我们还将使用这些概念来对不同的设计模式进行分类和描述。下一章将讨论设计模式的不同类别。
- en: Related Reading
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关阅读
- en: '[JavaScript modules on v8](https://oreil.ly/IEuAq)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[v8 上的 JavaScript 模块](https://oreil.ly/IEuAq)'
- en: '[JavaScript modules on MDN](https://oreil.ly/OAL9O)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MDN 上的 JavaScript 模块](https://oreil.ly/OAL9O)'
