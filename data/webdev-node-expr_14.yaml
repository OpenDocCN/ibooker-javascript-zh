- en: Chapter 14\. Routing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。路由
- en: Routing is one of the most important aspects of your website or web service;
    fortunately, routing in Express is simple, flexible, and robust. *Routing* is
    the mechanism by which requests (as specified by a URL and HTTP method) are routed
    to the code that handles them. As we’ve already noted, routing used to be file
    based and simple. For example, if you put the file *foo/about.html* on your website,
    you would access it from the browser with the path */foo/about.html*. Simple but
    inflexible. And, in case you hadn’t noticed, having *html* in your URL is extremely
    passé these days.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是你的网站或网络服务中最重要的方面之一；幸运的是，在Express中进行路由是简单、灵活和强大的。*路由*是通过URL和HTTP方法指定的请求被路由到处理它们的代码的机制。正如我们已经指出的那样，路由过去是基于文件且简单的。例如，如果你在网站上放置了文件*foo/about.html*，你可以通过浏览器的路径*/foo/about.html*访问它。简单但不灵活。而且，如果你还没有注意到，在你的URL中有*html*这个词现在已经非常过时了。
- en: Before we dive into the technical aspects of routing with Express, we should
    discuss the concept of *information architecture* (IA). IA refers to the conceptual
    organization of your content. Having an extensible (but not overcomplicated) IA
    before you begin thinking about routing will pay huge dividends down the line.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论使用Express进行路由的技术细节之前，我们应该先讨论*信息架构*（IA）的概念。IA指的是你内容的概念性组织。在你开始考虑路由之前，拥有一个可扩展（但不过于复杂）的IA将会在以后带来巨大的回报。
- en: 'One of the most intelligent and timeless essays on IA is by Tim Berners-Lee,
    who practically *invented the internet*. You can (and should) read it now: [*http://www.w3.org/Provider/Style/URI.html*](http://www.w3.org/Provider/Style/URI.html).
    It was written in 1998\. Let that sink in for a minute; there’s not much that
    was written on internet technology in 1998 that is just as true today as it was
    then.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关信息架构（IA）的最聪明和永恒的文章之一是由实际上*发明互联网*的Tim Berners-Lee所写的。你现在可以（也应该）阅读它：[*http://www.w3.org/Provider/Style/URI.html*](http://www.w3.org/Provider/Style/URI.html)。这篇文章写于1998年。让你沉思片刻；在1998年关于互联网技术写的东西，到今天依然有不多的能像它那样真实。
- en: 'From that essay, here is the lofty responsibility we are being asked to take
    on:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从那篇文章中，我们被要求承担起的崇高责任是：
- en: It is the duty of a Webmaster to allocate URIs which you will be able to stand
    by in 2 years, in 20 years, in 200 years. This needs thought, and organization,
    and commitment.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为网站管理员，你有责任为URI分配能够在2年、20年甚至200年后仍然坚持的URI。这需要思考、组织和承诺。
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tim Berners-Lee
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Tim Berners-Lee
- en: I like to think that if web design ever required professional licensing, like
    other kinds of engineering, that we would take an oath to that effect. (The astute
    reader of that article will find humor in the fact that the URL to that article
    ends with *.html*.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网页设计需要像其他工程一样进行专业许可，我喜欢想象我们会为此效果发誓。（那篇文章的敏锐读者会发现，该文章的网址以*.html*结尾，这一点很有幽默感。）
- en: To make an analogy (that may sadly be lost on the younger audience), imagine
    that every two years your favorite library completely reordered the Dewey decimal
    system. You would walk into the library one day and you wouldn’t be able to find
    anything. That’s exactly what happens when you redesign your URL structure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打个比方（这可能对年轻观众来说有些难以理解），想象一下，每两年你最喜欢的图书馆都会完全重新排列杜威十进制系统。你某一天走进图书馆，却发现找不到任何东西。这正是当你重新设计URL结构时所发生的事情。
- en: 'Put some serious thought into your URLs. Will they still make sense in 20 years?
    (200 years may be a bit of a stretch: who knows if we’ll even be using URLs by
    then. Still, I admire the dedication of thinking that far into the future.) Carefully
    consider the breakdown of your content. Categorize things logically, and try not
    to paint yourself into a corner. It’s a science, but it’s also an art.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 认真考虑你的URL。20年后它们是否还有意义？（200年可能有些牵强：谁知道那时我们是否还会使用URL呢。但是，我钦佩那种能够这么远见的决心。）仔细考虑你内容的分类方式。逻辑地分类，并且尽量避免把自己限制在一个角落里。这既是一门科学，也是一门艺术。
- en: Perhaps most important, work with others to design your URLs. Even if you are
    the best information architect for miles around, you might be surprised at how
    people look at the same content with a different perspective. I’m not saying that
    you should try for an IA that makes sense from *everyone’s* perspective (because
    that is usually quite impossible), but being able to see the problem from multiple
    perspectives will give you better ideas and expose the flaws in your own IA.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或许最重要的是，与他人合作设计您的网址。即使您是方圆数英里内最好的信息架构师，您可能会惊讶地发现人们对相同内容有不同的看法。我并不是说您应该尝试制定一个从*所有人*的角度来看都有意义的IA（因为这通常是不可能的），但能够从多个角度看问题会给您带来更好的想法，并暴露出您自己IA中的缺陷。
- en: 'Here are some suggestions to help you achieve a lasting IA:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些建议，可帮助您实现持久的IA：
- en: Never expose technical details in your URLs
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要在网址中公开技术细节
- en: Have you ever been to a website, noticed that the URL ended in *.asp*, and thought
    that the website was hopelessly out-of-date? Remember that, once upon a time,
    ASP was cutting-edge. Though it pains me to say it, so too shall fall JavaScript
    and JSON and Node and Express. I hope it’s not for many, many productive years,
    but time is not often kind to technology.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否曾经访问过一个网站，注意到网址以*.asp*结尾，并认为该网站已经过时了？请记住，曾经有一段时间，ASP技术是尖端的。虽然我很痛苦地说，JavaScript、JSON、Node和Express也将如此。希望它们能够多年多年地发挥作用，但时间对技术往往并不宽容。
- en: Avoid meaningless information in your URLs
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在网址中包含无意义的信息
- en: Think carefully about every word in your URL. If it doesn’t mean anything, leave
    it out. For example, it always makes me cringe when websites use the word *home*
    in URLs. Your root URL *is* your home page. You don’t need to additionally have
    URLs like */home/directions* and */home/contact*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细考虑您网址中的每个单词。如果没有意义，就不要包括在内。例如，当网站在网址中使用“*home*”一词时，我总是感到不舒服。您的根网址*就是*您的主页。您不需要额外拥有像*/home/directions*和*/home/contact*这样的网址。
- en: Avoid needlessly long URLs
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 避免过长的网址
- en: All things being equal, a short URL is better than a longer URL. However, you
    should not try to make URLs short at the expense of clarity or SEO. Abbreviations
    are tempting, but think carefully about them. They should be common and ubiquitous
    before you immortalize them in a URL.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有事情都相等的情况下，短网址比长网址更好。然而，你不应该试图以牺牲清晰度或SEO为代价来缩短网址。缩写很诱人，但需要仔细考虑。它们在成为网址之前应该是常见且无处不在的。
- en: Be consistent with word separators
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请一致使用单词分隔符
- en: It’s quite common to separate words with hyphens, and a little less common to
    do so with underscores. Hyphens are generally considered more aesthetically pleasing
    than underscores, and most SEO experts recommend them. Whether you choose hyphens
    or underscores, be consistent in their use.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连字符分隔单词相当普遍，使用下划线稍少见一些。连字符通常被认为比下划线更美观，大多数SEO专家推荐使用它们。无论您选择连字符还是下划线，都要在使用上保持一致。
- en: Never use whitespace or untypable characters
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要在网址中使用空格或不可输入字符
- en: Whitespace in a URL is not recommended. It will usually just be converted to
    a plus sign (+), leading to confusion. It should be obvious that you should avoid
    untypable characters, and I caution you strongly against using any characters
    other than alphanumeric characters, numbers, dashes, and underscores. It may feel
    clever at the time, but “clever” has a way of not standing the test of time. Obviously,
    if your website is not for an English audience, you may use non-English characters
    (using percent codes), though that can cause headaches if you ever want to localize
    your website.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议在网址中使用空白。通常会被转换为加号(+)，导致混乱。显然，您应该避免不可输入字符，并强烈警告您不要在网址中使用除字母、数字、短横线和下划线以外的任何字符。这在当时可能会感觉很聪明，但是“聪明”往往经不起时间的考验。显然，如果您的网站不是针对英语受众的，您可以使用非英语字符（使用百分比编码），尽管这可能在需要本地化您的网站时带来麻烦。
- en: Use lowercase for your URLs
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用小写字母来编写您的网址
- en: This one will cause some debate. There are those who feel that mixed case in
    URLs is not only acceptable, but preferable. I don’t want to get in a religious
    debate over this, but I will point out that the advantage of lowercase is that
    it can always automatically be generated by code. If you’ve ever had to go through
    a website and sanitize thousands of links or do string comparisons, you will appreciate
    this argument. I personally feel that lowercase URLs are more aesthetically pleasing,
    but in the end, this decision is up to you.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可能会引发一些争论。有些人认为在URL中使用大小写混合不仅可以接受，而且更可取。我不想在这个问题上进行宗教性的辩论，但我要指出小写的优势在于它可以始终通过代码自动生成。如果你曾经不得不处理成千上万个链接或进行字符串比较，你会欣赏这个论点。我个人觉得小写URL更具审美感，但最终，这个决定由你来做。
- en: Routes and SEO
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路径和SEO
- en: If you want your website to be discoverable (and most people do), then you need
    to think about SEO and how your URLs can affect it. In particular, if there are
    certain keywords that are important—*and it makes sense*—consider making them
    part of the URL. For example, Meadowlark Travel offers several Oregon Coast vacations.
    To ensure high search engine ranking for these vacations, we use the string “Oregon
    Coast” in the title, header, body, and meta description, and the URLs start with
    */vacations/oregon-coast*. The Manzanita vacation package can be found at */vacations/oregon-coast/manzanita*.
    If, to shorten the URL, we simply used */vacations/manzanita*, we would be losing
    out on valuable SEO.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望你的网站被发现（大多数人都希望如此），那么你需要考虑SEO以及你的URL如何影响它。特别是，如果某些关键词很重要——*而且有意义*——考虑将它们作为URL的一部分。例如，Meadowlark
    Travel提供多个俄勒冈海岸度假选择。为了确保这些度假选项在搜索引擎中排名靠前，我们在标题、头部、正文和元描述中使用“Oregon Coast”这个字符串，并且URL以*/vacations/oregon-coast*开头。曼扎尼塔度假套餐可以在*/vacations/oregon-coast/manzanita*找到。如果我们简单地使用*/vacations/manzanita*来缩短URL，我们将会失去宝贵的SEO机会。
- en: That said, resist the temptation to carelessly jam keywords into URLs in an
    attempt to improve your rankings. It will fail. For example, changing the Manzanita
    vacation URL to */vacations/oregon-coast-portland-and-hood-river/oregon-coast/manzanita*
    in an effort to say “Oregon Coast” one more time, and also work the “Portland”
    and “Hood River” keywords in at the same time, is wrong-headed. It flies in the
    face of good IA and will likely backfire.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，不要贸然将关键词塞进URL中以试图提高排名。这是行不通的。例如，试图将曼扎尼塔度假的URL更改为*/vacations/oregon-coast-portland-and-hood-river/oregon-coast/manzanita*，以此来多说一次“Oregon
    Coast”，同时还加入“Portland”和“Hood River”关键词，这是不合适的。这与良好的信息架构相悖，很可能会适得其反。
- en: Subdomains
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子域名
- en: Along with the path, subdomains are the other part of the URL that is commonly
    used to route requests. Subdomains are best reserved for significantly different
    parts of your application—for example, a REST API (*api.meadowlarktravel.com*)
    or an admin interface (*admin.meadowlarktravel.com*). Sometimes subdomains are
    used for technical reasons. For example, if we were to build our blog with WordPress
    (while the rest of our site uses Express), it can be easier to use *blog.meadowlarktravel.com*
    (a better solution would be to use a proxy server, such as NGINX). There are usually
    SEO consequences to partitioning your content using subdomains, which is why you
    should generally reserve them for areas of your site that aren’t important to
    SEO, such as admin areas and APIs. Keep this in mind and make sure there’s no
    other option before using a subdomain for content that is important to your SEO
    plan.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了路径之外，子域名是常用于路由请求的URL的另一部分。子域名最好保留给应用程序的显著不同部分——例如，一个REST API (*api.meadowlarktravel.com*)或管理员界面
    (*admin.meadowlarktravel.com*)。有时候出于技术原因使用子域名。例如，如果我们用WordPress来构建我们的博客（而其余的网站使用Express），使用*blog.meadowlarktravel.com*可能更容易（更好的解决方案是使用代理服务器，比如NGINX）。通常通过使用子域名来分隔内容会对SEO产生影响，这就是为什么你通常应该将它们保留给对SEO不重要的站点区域，比如管理区域和API。记住这一点，并确保在将子域名用于对SEO计划重要的内容之前，没有其他更好的选择。
- en: 'The routing mechanism in Express does not take subdomains into account by default:
    `app.get(*/about*)` will handle requests for *http://meadowlarktravel.com/about*,
    *http://www.meadowlarktravel.com/about*, and *http://admin.meadowlarktravel.com/about*.
    If you want to handle a subdomain separately, you can use a package called `vhost`
    (for “virtual host,” which comes from an Apache mechanism commonly used for handling
    subdomains). First, install the package (`npm install vhost`). To test domain-based
    routing on your dev machine, you’ll need some way to “fake” domain names. Fortunately,
    this is what your *hosts file* is for. On macOS and Linux machines, it can be
    found at */etc/hosts*, and on Windows, it’s at *c:\windows\system32\drivers\etc\hosts*.
    Add the following to your hosts file (you will need admin privileges to edit it):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Express中的路由机制默认不考虑子域：`app.get(*/about*)`将处理关于 *http://meadowlarktravel.com/about*、*http://www.meadowlarktravel.com/about*
    和 *http://admin.meadowlarktravel.com/about* 的请求。如果你想单独处理子域，可以使用一个名为`vhost`（代表“虚拟主机”，这来自于经常用于处理子域的Apache机制）的包。首先，安装这个包（`npm
    install vhost`）。要在开发机上测试基于域的路由，你需要一种“伪造”域名的方法。幸运的是，这正是你的*hosts文件*需要做的。在macOS和Linux机器上，它可以在*/etc/hosts*中找到，在Windows上，它位于*c:\windows\system32\drivers\etc\hosts*。在你的hosts文件中添加以下内容（你需要管理权限来编辑它）：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This tells your computer to treat `meadowlark.local` and `admin.meadowlark.local`
    just like regular internet domains but to map them to localhost (127.0.0.1). We
    use the `.local` top-level domain so as not to get confused (you could use `.com`
    or any other internet domain, but it would override the real domain, which can
    lead to frustration).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉你的计算机将`meadowlark.local`和`admin.meadowlark.local`视为常规的互联网域，但将它们映射到本地主机（127.0.0.1）。我们使用`.local`顶级域，这样就不会混淆（你可以使用`.com`或任何其他互联网域，但它会覆盖真实域名，这可能会导致挫折）。
- en: 'Then you can use the `vhost` middleware to use domain-aware routing (*ch14/00-subdomains.js*
    in the companion repo):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用`vhost`中间件来使用基于域的路由（*伴随仓库中的ch14/00-subdomains.js*）：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`express.Router()` essentially creates a new instance of the Express router.
    You can treat this instance just like your original instance (`app`). You can
    add routes and middleware just as you would to `app`. However, it won’t do anything
    until you add it to `app`. We add it through `vhost`, which binds that router
    instance to that subdomain.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`express.Router()`本质上创建了一个新的Express路由的实例。你可以像处理`app`一样处理这个实例。你可以添加路由和中间件，就像对`app`做的一样。然而，在你将其添加到`app`之前，它不会做任何事情。我们通过`vhost`来添加它，将该路由实例绑定到子域。'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '`express.Router` is also useful for partitioning your routes so that you can
    link in many route handlers at once. See the [Express routing documentation](http://bit.ly/2X8VC59)
    for more information.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`express.Router`还可以用于分区你的路由，这样你可以一次链接多个路由处理程序。查看[Express路由文档](http://bit.ly/2X8VC59)以获取更多信息。'
- en: Route Handlers Are Middleware
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由处理程序就是中间件
- en: 'We’ve already seen basic routing of matching a given path. But what does `app.get(\''/foo'',
    ...)` actually *do*? As we saw in [Chapter 10](ch10.xhtml#ch_middleware), it’s
    simply a specialized piece of middleware, down to having a `next` method passed
    in. Let’s look at some more sophisticated examples (*ch14/01-fifty-fifty.js* in
    the companion repo):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了匹配给定路径的基本路由。但`app.get(\'/foo', ...)`实际上做了什么呢？正如我们在[第10章](ch10.xhtml#ch_middleware)中所看到的，它只是一种专门的中间件，甚至有一个传入的`next`方法。让我们看一些更复杂的例子（*伴随仓库中的ch14/01-fifty-fifty.js*）：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the previous example, we have two handlers for the same route. Normally,
    the first one would win, but in this case, the first one is going to pass approximately
    half the time, giving the second one a chance. We don’t even have to use `app.get`
    twice: you can use as many handlers as you want for a single `app.get` call. Here’s
    an example that has an approximately equal chance of three different responses
    (*ch14/02-red-green-blue.js* in the companion repo):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们为相同的路由设置了两个处理程序。通常情况下，第一个处理程序会胜出，但在这种情况下，第一个处理程序将有大约一半的机会失败，给第二个处理程序一个机会。我们甚至不必两次使用
    `app.get`：你可以为单个`app.get`调用使用多个处理程序。以下是一个示例，它有大约等概率的三种不同的响应（*伴随仓库中的ch14/02-red-green-blue.js*）：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'While this may not seem particularly useful at first, it allows you to create
    generic functions that can be used in any of your routes. For example, let’s say
    we have a mechanism that shows special offers on certain pages. The special offers
    change frequently, and they’re not shown on every page. We can create a function
    to inject the specials into the `res.locals` property (which you’ll remember from
    [Chapter 7](ch07.xhtml#ch_templating)) (*ch14/03-specials.js* in the companion
    repo):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一开始看起来可能并不特别有用，但它允许你创建能够在任何路由中使用的通用函数。例如，假设我们有一种机制，在特定页面上显示特别优惠。这些特别优惠经常变动，并非所有页面都显示。我们可以创建一个函数将特别优惠注入到`res.locals`属性中（你会在[第
    7 章](ch07.xhtml#ch_templating)中记得此属性）（伴随版本库中的 *ch14/03-specials.js*）。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We could also implement an authorization mechanism with this approach. Let’s
    say our user authorization code sets a session variable called `req.session.authorized`.
    We can use the following to make a reusable authorization filter (*ch14/04-authorizer.js*
    in the companion repo):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用这种方法实现授权机制。假设我们的用户授权代码设置了一个名为 `req.session.authorized` 的会话变量。我们可以使用以下方法来创建一个可重用的授权过滤器（伴随版本库中的
    *ch14/04-authorizer.js*）。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Route Paths and Regular Expressions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由路径和正则表达式
- en: 'When you specify a path (like */foo*) in your route, it’s eventually converted
    to a regular expression by Express. Some regular expression metacharacters are
    available in route paths: `+`, `?`, `*`, `(`, and `)`. Let’s look at a couple
    of examples. Let’s say you want the URLs */user* and */username* to be handled
    by the same route:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在路由中指定一个路径（比如 */foo*）时，Express 最终将其转换为正则表达式。路由路径中可用一些正则表达式元字符：`+`, `?`, `*`,
    `(` 和 `)`。让我们看一些示例。假设你希望处理 */user* 和 */username* 这两个 URL 的路由相同：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'One of my favorite novelty websites—now sadly defunct—was *http://khaaan.com*.
    All it was was everyone’s favorite starship captain belting his most iconic line.
    Useless, but made me smile every time. Let’s say we want to make our own “KHAAAAAAAAN”
    page but we don’t want our users to have to remember if it’s 2 *a*’s or 3 or 10\.
    The following will get the job done:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的一个新奇网站——现在可惜已经倒闭了——是 *http://khaaan.com*。那只是每个人最喜欢的星际舰队长高呼他最具代表性的台词。毫无用处，但每次看到都会让我微笑。假设我们想要创建我们自己的“KHAAAAAAAAN”页面，但我们不想让用户记住是
    2 个 *a* 还是 3 个或 10 个。下面的方法可以实现：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Not all normal regex metacharacters have meaning in route paths, though—only
    the ones listed earlier. This is important, because periods, which are normally
    a regex metacharacter meaning “any character,” can be used in routes unescaped.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有常规正则表达式元字符在路由路径中都有意义，只有之前列出的那些元字符才有意义。这一点很重要，因为通常情况下，点号作为正则表达式元字符表示“任何字符”，可以在路由中未经转义地使用。
- en: 'Lastly, if you really need the full power of regular expressions for your route,
    that is supported:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你确实需要路由的完整正则表达式的全部功能，Express 也支持。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I have yet to find a good reason for using regex metacharacters in my route
    paths, much less full regexes, but it’s good to be aware the functionality is
    there.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有找到在我的路由路径中使用正则表达式元字符，更不用说完整的正则表达式的充分理由，但了解这些功能是存在的是很好的。
- en: Route Parameters
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由参数
- en: 'While regex routes may find little day-to-day use in your Expression toolbox,
    you’ll most likely be using route parameters quite frequently. In short, it’s
    a way to turn part of your route into a variable parameter. Let’s say in our website
    we want to have a page for each staff member. We have a database of staff members
    with bios and pictures. As our company grows, it becomes more and more unwieldy
    to add a new route for each staff member. Let’s see how route parameters can help
    us (*ch14/05-staff.js* in the companion repo):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 Express 工具箱中，正则表达式路由可能很少在日常工作中使用，但你很可能会经常使用路由参数。简而言之，这是一种将路由的一部分转换为变量参数的方法。假设在我们的网站中，我们想为每位员工创建一个页面。我们有一个带有生平和照片的员工数据库。随着公司的不断发展，每增加一位员工，为其增加一个新的路由变得越来越困难。让我们看看路由参数如何帮助我们（伴随版本库中的
    *ch14/05-staff.js*）。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note how we used *:name* in our route. That will match any string (that doesn’t
    include a forward slash) and put it in the `req.params` object with the key `name`.
    This is a feature we will be using often, especially when creating a REST API.
    You can have multiple parameters in our route. For example, if we want to break
    up our staff listing by city, we can use this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在路由中使用了 *:name*。这将匹配任意字符串（不包括斜杠）并将其放入 `req.params` 对象的键 `name` 中。这是一个我们会经常使用的功能，特别是在创建
    REST API 时。我们的路由中可以有多个参数。例如，如果我们想要按城市列出我们的员工名单，我们可以使用如下方式：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Organizing Routes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织路由
- en: It may be clear to you already that it would be unwieldy to define all of our
    routes in the main application file. Not only will that file grow over time, it’s
    also not a great separation of functionality because there’s a lot going on in
    that file already. A simple site may have only a dozen routes or fewer, but a
    larger site could have hundreds of routes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对您来说可能已经很清楚，在主应用程序文件中定义所有路由将变得难以管理。不仅这个文件会随着时间的推移而增长，而且它也不是一个良好的功能分离，因为该文件中已经有很多内容。一个简单的网站可能只有十几个或更少的路由，但一个更大的网站可能有数百个路由。
- en: So how to organize your routes? Well, how do you *want* to organize your routes?
    Express is not opinionated about how you organize your routes, so how you do it
    is limited only by your own imagination.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何组织您的路由呢？好吧，您想如何组织您的路由？Express 并不关心您如何组织您的路由，因此您可以做的只受您自己想象的限制。
- en: 'I’ll cover some popular ways to handle routes in the next sections, but at
    the end of the day, I recommend four guiding principles for deciding how to organize
    your routes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将介绍一些处理路由的流行方法，但归根结底，我建议为确定如何组织您的路由提供四个指导原则：
- en: Use named functions for route handlers
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名函数作为路由处理程序
- en: Writing route handlers inline by actually defining the function that handles
    the route right then and there is fine for small applications or prototyping,
    but it will quickly become unwieldy as your website grows.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 写内联的路由处理程序，通过直接定义处理路由的函数来进行实际定义，对于小应用程序或原型设计是可以的，但随着您的网站增长，它将很快变得难以管理。
- en: Routes should not be mysterious
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 路由不应是神秘的
- en: This principle is intentionally vague because a large, complex website may by
    necessity require a more complicated organizational scheme than a 10-page website.
    At one end of the spectrum is simply putting *all* of the routes for your website
    in one single file so you know where they are. For large websites, this may be
    undesirable, so you break the routes out by functional areas. However, even then,
    it should be clear where you should go to look for a given route. When you need
    to fix something, the last thing you want to do is have to spend an hour figuring
    out where the route is being handled. I had an ASP.NET MVC project at work that
    was a nightmare in this respect. The routes were handled in at least 10 different
    places, and it wasn’t logical or consistent and was often contradictory. Even
    though I was intimately familiar with that (very large) website, I still had to
    spend a significant amount of time tracking down where certain URLs were handled.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则有意地模糊，因为一个大型复杂的网站可能需要比一个 10 页网站更复杂的组织方案。在光谱的一端是将您网站的所有路由都放在一个单一文件中，这样您就知道它们在哪里。对于大型网站来说，这可能是不理想的，因此您可以按功能区域拆分路由。然而，即使这样，应该清楚应该去哪里查找特定的路由。当您需要修复某些内容时，您最不希望做的就是花一个小时去找出路由处理的位置。我在工作中有一个
    ASP.NET MVC 项目在这方面是一个噩梦。路由在至少 10 个不同的地方处理，这既不合逻辑也不一致，经常是相互矛盾的。即使我对那个（非常大的）网站非常熟悉，我仍然不得不花费大量时间去追踪某些
    URL 的处理位置。
- en: Route organization should be extensible
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 路由组织应该是可扩展的
- en: If you have 20 or 30 routes now, defining them all in one file is probably fine.
    What about in three years when you have 200 routes? It can happen. Whatever method
    you choose, you should ensure you have room to grow.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在有 20 或 30 个路由，将它们全部定义在一个文件中可能就可以了。但是三年后当您有 200 个路由时呢？这是有可能的。无论您选择哪种方法，都应确保您有足够的空间来扩展。
- en: Don’t overlook automatic view-based route handlers
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忽视自动视图路由处理程序
- en: 'If your site consists of many pages that are static and have fixed URLs, all
    of your routes will end up looking like this: `app.get(''/static/thing'', (req,
    res) => res.render(\''static/thing''))`. To reduce needless code repetition, consider
    using an automatic view-based route handler. This approach is described later
    in this chapter and can be used together with custom routes.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站包含许多静态页面并且具有固定的 URL，那么您的所有路由最终都会看起来像这样：`app.get('/static/thing', (req,
    res) => res.render(\'static/thing'))`。为了减少不必要的代码重复，考虑使用自动视图路由处理程序。本章稍后将介绍这种方法，并可与自定义路由一起使用。
- en: Declaring Routes in a Module
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在一个模块中声明路由
- en: 'The first step to organizing our routes is getting them all into their own
    module. There are multiple ways to do this. One approach is to have your module
    return an array of objects containing method and handler properties. Then you
    could define the routes in your application file thusly:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 组织路由的第一步是将它们全部放入它们自己的模块中。有多种方法可以做到这一点。一种方法是使您的模块返回一个包含方法和处理程序属性的对象数组。然后您可以在应用程序文件中定义路由如下：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This method has its advantages and could be well suited to storing our routes
    dynamically, such as in a database or a JSON file. However, if you don’t need
    that functionality, I recommend passing the `app` instance to the module and letting
    it add the routes. That’s the approach we’ll take for our example. Create a file
    called *routes.js* and move all of our existing routes into it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有其优势，并且非常适合动态存储我们的路由，比如存储在数据库或JSON文件中。然而，如果你不需要这种功能，我建议将 `app` 实例传递给模块，让它添加路由。这是我们示例中采用的方法。创建一个名为
    *routes.js* 的文件，并将所有现有的路由移到其中：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we just cut and paste, we’ll probably run into some problems. For example,
    if we have inline route handlers that use variables or methods not available in
    the new context, those references will now be broken. We could add the necessary
    imports, but hold off on that. We’ll be moving the handlers into their own module
    soon, and we’ll solve the problem then.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只是简单地复制粘贴，可能会遇到一些问题。例如，如果我们有使用新上下文中不可用的变量或方法的内联路由处理程序，那么这些引用现在将会失效。我们可以添加必要的导入，但先暂停。我们很快将把处理程序移到它们自己的模块中，并在那时解决这个问题。
- en: 'So how do we link our routes in? Simple: in *meadowlark.js*, we simply import
    our routes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将我们的路由链接起来？简单：在 *meadowlark.js* 中，我们只需导入我们的路由：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or we could be more explicit and add a named import (which we name `addRoutes`
    to better reflect its nature as a function; we could also name the file this way
    if we wanted):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以更加显式，添加一个命名导入（我们将其命名为 `addRoutes`，以更好地反映它作为函数的性质；如果需要，我们也可以将文件命名为这样）：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Grouping Handlers Logically
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑分组处理程序
- en: To meet our first guiding principle (use named functions for route handlers),
    we’ll need somewhere to put those handlers. One rather extreme option is to have
    a separate JavaScript file for every handler. It’s hard for me to imagine a situation
    in which this approach would have benefit. It’s better to somehow group related
    functionality together. That makes it easier not only to leverage shared functionality,
    but also to make changes in related methods.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合我们的第一个指导原则（为路由处理程序使用命名函数），我们需要一个地方来放置这些处理程序。一个相当极端的选择是为每个处理程序单独创建一个JavaScript文件。我很难想象这种方法会有什么好处。最好是以某种方式将相关功能组合在一起。这不仅使共享功能更容易利用，还使相关方法的更改更容易。
- en: 'For now, let’s group our functionality into separate files: *handlers/main.js*,
    where we’ll put the home page handler, the “about” handler, and generally any
    handler that doesn’t have another logical home; *handlers/vacations.js*, where
    vacation-related handlers will go; and so on.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，让我们将功能分组到不同的文件中：*handlers/main.js*，我们将在其中放置主页处理程序，“关于”处理程序，以及通常没有其他逻辑归属的任何处理程序；*handlers/vacations.js*，用于处理与假期相关的处理程序；等等。
- en: 'Consider *handlers/main.js*:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑 *handlers/main.js*：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now let’s modify *routes.js* to make use of this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修改 *routes.js* 来利用这一点：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This satisfies all of our guiding principles. */routes.js* is *very* straightforward.
    It’s easy to see at a glance what routes are in your site and where they are being
    handled. We’ve also left ourselves plenty of room to grow. We can group related
    functionality in as many different files as we need. And if *routes.js* ever gets
    unwieldy, we can use the same technique again and pass the `app` object on to
    another module that will in turn register more routes (though that is starting
    to veer into the “overcomplicated” territory—make sure you can really justify
    an approach that complicated!).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这满足了我们所有的指导原则。*/routes.js* 非常简单直接。一眼就能看到网站中的所有路由以及它们的处理位置。我们还留了足够的空间来扩展。我们可以将相关功能分组到任意数量的不同文件中。如果
    *routes.js* 变得过于复杂，我们可以再次使用相同的技术，将 `app` 对象传递给另一个模块，然后注册更多的路由（尽管这开始变得“过于复杂”——确保你确实能够证明这样一个复杂的方法是有必要的！）。
- en: Automatically Rendering Views
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动渲染视图
- en: If you ever find yourself wishing for the days of old where you could just put
    an HTML file in a directory and—presto!—your website would serve it, then you’re
    not alone. If your website is content-heavy without a lot of functionality, you
    may find it a needless hassle to add a route for every view. Fortunately, we can
    get around this problem.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己想要回到过去的日子，当你只需将HTML文件放入目录中，然后——神奇地！——你的网站就会提供它，那么你并不孤单。如果你的网站内容丰富，但功能不多，你可能会觉得为每个视图添加路由是一种不必要的麻烦。幸运的是，我们可以解决这个问题。
- en: 'Let’s say you want to add the file *views/foo.handlebars* and just magically
    have it available on the route */foo*. Let’s see how we might do that. In our
    application file, right before the 404 handler, add the following middleware (*ch14/06-auto-views.js*
    in the companion repo):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要添加文件*views/foo.handlebars*并在路由*/foo*上自动使其可用。让我们看看我们可以如何做到这一点。在我们的应用程序文件中，在404处理程序之前，添加以下中间件（在配套存储库中的*ch14/06-auto-views.js*）：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we can just add a *.handlebars* file to the *view* directory and have it
    magically render on the appropriate path. Note that regular routes will circumvent
    this mechanism (because we placed the automatic view handler after all other routes),
    so if you have a route that renders a different view for the route */foo*, that
    will take precedence.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需在*view*目录中添加一个*.handlebars*文件，并在适当的路径上进行神奇渲染即可。请注意，常规路由将绕过此机制（因为我们将自动视图处理程序放置在所有其他路由之后），因此，如果您有一个为路由*/foo*渲染不同视图的路由，那么它将优先处理。
- en: Note that this approach will run into problems if you *delete* a view that had
    been visited; it will have been added to the `autoViews` object, so subsequent
    views will try to render it even though it’s been deleted, resulting in an error.
    The problem could be solved by wrapping the rendering in a `try/catch` block and
    removing the view from `autoViews` when an error is discovered; I will leave this
    enhancement as a reader’s exercise.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您*删除*了访问过的视图，这种方法将会遇到问题；它将被添加到`autoViews`对象中，因此后续的视图尝试渲染它，即使它已被删除，也会导致错误。可以通过在`try/catch`块中包装渲染并在发现错误时从`autoViews`中删除该视图来解决此问题；我将把这个增强功能留给读者来练习。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Routing is an important part of your project, and there are many more possible
    approaches to organizing your route handlers than outlined here, so feel free
    to experiment and find a technique that works for you and your project. I encourage
    you to favor techniques that are clear and easy to trace. Routing is very much
    a map from the outside world (the client, usually a browser) to the server-side
    code that responds to it. If that map is convoluted, it makes it difficult for
    you to trace the flow of information in your application, which will hinder both
    development and debugging.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是项目中的重要部分，比这里概述的组织路由处理程序的方法更多，所以请随意尝试并找到适合您和您的项目的技术。我鼓励您偏爱清晰且易于跟踪的技术。路由在很大程度上是从外部世界（通常是浏览器的客户端）到响应它的服务器端代码的地图。如果这张地图复杂混乱，将会使您难以追踪应用程序中的信息流，这将影响开发和调试。
