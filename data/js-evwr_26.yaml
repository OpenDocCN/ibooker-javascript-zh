- en: Chapter 25\. Mobile Application Distribution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第25章 移动应用分发
- en: In my high school in the mid-1990s, it was all the rage to download games for
    your [TI-81 graphing calculator](https://oreil.ly/SqOKQ). Someone would get ahold
    of a copy of a game and then it would spread like wildfire, each of us taking
    turns connecting our calculator to another with a cord in order to load the game.
    Having a game on your calculator was a way to fill the hours in the back of a
    class or study hall while maintaining the appearance of doing schoolwork. As you
    can imagine, however, this distribution method was slow, requiring two students
    to remain connected for several minutes while others waited. Today, our digital
    pocket computers are capable of much more than my humble graphing calculator,
    in part because we can easily extend their capabilities through installable third-party
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上世纪90年代中期的高中时代，流行下载[TI-81图形计算器](https://oreil.ly/SqOKQ)上的游戏。有人会弄到游戏副本，然后它像野火般传播，我们每个人轮流用线缆连接计算器来加载游戏。在课堂后面或自习时间里玩游戏是填充时间的一种方式，同时又保持做学校作业的外表。然而，这种分发方法很慢，需要两名学生保持连接数分钟，而其他人则等待。如今，我们的数字口袋计算机能做的事情远远超过我那款朴素的图形计算器，部分原因是我们可以轻松地通过可安装的第三方应用扩展其功能。
- en: With our initial application development complete, we can now distribute our
    application so that others may access it. In this chapter we’ll look at how to
    configure our *app.json* file for distribution. We’ll then publish our application
    publicly within Expo. Finally, we’ll generate application packages that can be
    submitted to the Apple or Google Play stores.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 初步应用程序开发完成后，我们现在可以分发应用程序，使他人可以访问。在本章中，我们将学习如何配置我们的*app.json*文件以进行分发。然后，我们将在Expo中公开发布我们的应用程序。最后，我们将生成可提交到Apple或Google
    Play商店的应用程序包。
- en: app.json Configuration
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: app.json 配置
- en: Expo applications include an *app.json* file, which is used to configure application-specific
    settings.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Expo 应用程序包含一个*app.json*文件，用于配置应用程序特定设置。
- en: 'When we generate a new Expo application, an *app.json* file is automatically
    created for us. Let’s take a look at the generated file for our application:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们生成一个新的Expo应用程序时，*app.json*文件会自动为我们创建。让我们来看看为我们的应用程序生成的文件： '
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is likely that most of these are self-explanatory, but let’s review the
    purpose of each:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数可能都很容易理解，但让我们来看看每个的目的：
- en: name
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 名称
- en: The name of our application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的名称。
- en: slug
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: slug
- en: The URL name for publishing the Expo app at *expo.io/project-owner/slug*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 发布Expo应用程序的URL名称为*expo.io/project-owner/slug*。
- en: description
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 描述
- en: A description of our project, which will be used when publishing the application
    with Expo.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目的描述，将在使用Expo发布应用程序时使用。
- en: privacy
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 隐私
- en: The Expo project’s public availability. This can be set to either `public` or
    `unlisted`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Expo 项目的公开可见性。可以设置为`public`或`unlisted`。
- en: sdkVersion
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: sdkVersion
- en: The Expo SDK version number.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Expo SDK 版本号。
- en: platforms
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: platforms
- en: The platforms we are targeting, which can include `ios`, `android`, and `web`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标平台，可以包括`ios`、`android`和`web`。
- en: version
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 版本
- en: Our application’s version number, which should follow the [Semantic Versioning
    standards](https://semver.org).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的版本号，应遵循[语义化版本控制标准](https://semver.org)。
- en: orientation
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 方向
- en: Our application’s default orientation, which can be locked with `portrait` or
    `landscape` values, or match the user’s device rotation with `default`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的默认方向，可以锁定为`portrait`或`landscape`，或者与用户设备旋转匹配使用`default`。
- en: icon
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: icon
- en: A path to the application icon, which will be used for both iOS and Android.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序图标的路径，将用于iOS和Android。
- en: splash
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: splash
- en: The image location and settings for the app loading screen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应用加载屏幕的图像位置和设置。
- en: updates
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更新
- en: A configuration for how our application should check for over the air (OTA)
    updates when the app is loaded. The `fallbackToCacheTimeout` parameter allows
    us to specify a length of time in milliseconds.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序加载时应如何检查 OTA 更新的配置。`fallbackToCacheTimeout` 参数允许我们指定以毫秒为单位的时间长度。
- en: assetBundlePatterns
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: assetBundlePatterns
- en: Allows us to specify the location of assets that should be bundled with our
    application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 允许我们指定应用程序应捆绑的资产位置。
- en: ios and android
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ios 和 android
- en: Enable platform-specific settings.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 启用特定平台的设置。
- en: This default configuration provides us with a solid basis for our application.
    There are a number of additional settings, which can be found in the [Expo documentation](https://oreil.ly/XXT4k).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个默认配置为我们的应用程序提供了一个坚实的基础。还有许多其他设置，可以在[Expo文档](https://oreil.ly/XXT4k)中找到。
- en: Icons and App Loading Screens
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图标和应用加载屏幕
- en: The small squarish icons found on our devices have become one of the most recognizable
    designs in modern society. Close your eyes and I’m sure you can imagine dozens
    of them, down to a logo or a specific background color. Additionally, when a user
    taps an icon there is an initial static “splash screen,” which is displayed while
    the application loads. Up until now we’ve used the default empty Expo icons and
    splash screen. We can replace those with custom designs in our application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设备上发现的小方形图标已经成为现代社会中最具辨识度的设计之一。闭上眼睛，我相信你可以想象出数十个这样的图标，甚至包括一个标志或特定的背景颜色。此外，当用户点击一个图标时，会显示一个初始的静态“启动屏幕”，用于显示应用程序加载时的界面。到目前为止，我们一直使用默认的空Expo图标和启动屏幕。我们可以在我们的应用程序中用自定义设计替换它们。
- en: I’ve included a Notedly icon and splash screen in the *assets/custom* folder.
    We can make use of these by replacing the images in the *assets* directory with
    them or updating our *app.json* configuration to point to the files in the *custom*
    subdirectory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我在*assets/custom*文件夹中包含了一个Notedly图标和启动屏幕。我们可以通过将这些图像替换为*assets*目录中的图像或更新我们的*app.json*配置，指向*custom*子目录中的文件来使用它们。
- en: App Icons
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序图标
- en: 'The *icon.png* file is a square 1024×1024px PNG file. If we point to this file
    with our *app.json* `icon` property, Expo will generate the appropriate icon sizes
    for various platforms and devices. The image should be exactly square and without
    any transparent pixels. This is the simplest and most straightforward way to include
    an application icon:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*icon.png*文件是一个1024×1024像素的正方形PNG文件。如果我们在*app.json*文件的`icon`属性中指定这个文件，Expo将会为各个平台和设备生成适当的图标大小。图像应该是完全正方形，没有任何透明像素。这是包含应用程序图标的最简单直接的方法：'
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition to the single cross-platform icon, we have the option to include
    platform-specific icons. The main draw of this approach would be to include separate
    icon styles for Android and iOS, particularly if you are interested in using Android’s
    [adaptive icons](https://oreil.ly/vLC3f).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单一的跨平台图标外，我们还可以选择包含特定于平台的图标。采用这种方式的主要优势在于可以为Android和iOS分别设置不同的图标样式，特别是如果想要使用Android的[自适应图标](https://oreil.ly/vLC3f)。
- en: 'For iOS, we would continue to use a single 1024×1024 png. In the *app.json*
    file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS，我们将继续使用一个1024×1024像素的单一PNG文件。在*app.json*文件中：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To make use of Android’s adaptive icon, we would specify a `foregroundImage`,
    a `backgroundColor` (or `backgroundImage`), and a fallback static `icon`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Android的自适应图标，我们需要指定`foregroundImage`、`backgroundColor`（或`backgroundImage`）以及一个静态的后备`icon`：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For our use case, we can continue to use the single static icon.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的用例，我们可以继续使用单一静态图标。
- en: Splash Screens
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动屏幕
- en: The splash screen is a full screen image that will briefly display while our
    application is booting on the device. We can replace the default Expo image with
    one found in *assets/custom*. Though device sizes vary within and across platforms,
    I’ve chosen to use a size of 1242×2436, as recommended by the [Expo documentation](https://oreil.ly/7a-5J).
    Expo will then resize the image to work across device screens and aspect ratios.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 启动屏幕是在设备上启动我们的应用程序时，会短暂显示的全屏图像。我们可以将默认的Expo图像替换为在*assets/custom*目录中找到的一个图像。尽管设备尺寸在各平台和设备之间有所不同，但我选择使用1242×2436的尺寸，这是[Expo文档](https://oreil.ly/7a-5J)推荐的尺寸。Expo会自动调整图像大小，以适应不同的设备屏幕和宽高比。
- en: 'We can configure our splash screen in the *app.json* file like so:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*app.json*文件中像这样配置我们的启动屏幕：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By default, we are setting a white background color, which may be visible as
    the image loads or, depending on our selected `resizeMode`, as a border around
    the splash screen image. We can update this to match the color of our screen:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们设置了白色背景色，这可能在图像加载时可见，或者根据我们选择的`resizeMode`而在启动屏幕图像周围显示为边框。我们可以更新它以匹配屏幕的颜色：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `resizeMode` dictates how the image should be resized for various screen
    sizes. By setting this to `contain`, we preserve the aspect ratio of the original
    image. When you use `contain`, some screen sizes or resolutions will see the `backgroundColor`
    as a border around the splash screen image. Alternately, we could set `resizeMode`
    to `cover`, which will expand the image to fill the entire screen. Since our application
    has a subtle gradient, let’s set our `resizeMode` to `cover`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`resizeMode`决定了如何调整图像以适应各种屏幕尺寸。通过将其设置为`contain`，我们保留了原始图像的宽高比。当您使用`contain`时，某些屏幕尺寸或分辨率将看到`backgroundColor`作为启动画面图像周围的边框。或者，我们可以将`resizeMode`设置为`cover`，这将扩展图像以填充整个屏幕。由于我们的应用程序有一个微妙的渐变，让我们将我们的`resizeMode`设置为`cover`：'
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![A screenshot of our application''s splash screen](assets/jsev_2501.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![我们应用程序启动画面的截图](assets/jsev_2501.png)'
- en: Figure 25-1\. Our application splash screen
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 25-1\. 我们的应用程序启动画面
- en: With this, our icon and splash screen images are configured (see [Figure 25-1](#splash_screen)).
    We are now ready to look at how to distribute our application to make it accessible
    to others.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，我们的图标和启动画面图像已经配置完成（见[图 25-1](#splash_screen)）。现在我们可以看看如何分发我们的应用程序，以便让其他人访问。
- en: Expo Publish
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Expo发布
- en: During development, our application is accessible to us in the Expo Client application
    on a physical device, over our local area network. This means that we can access
    the application as long as our development machine and phone are on the same network.
    Expo enables us to publish our project, which uploads the application to an Expo
    CDN and gives us a publicly accessible URL. With this, anyone can run our application
    through the Expo Client app. This can be useful for testing or quick application
    distribution.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们的应用程序可以在物理设备上的Expo客户端应用程序上通过本地区域网络访问。这意味着只要我们的开发机和手机在同一网络上，我们就可以访问该应用程序。Expo使我们能够发布我们的项目，将应用程序上传到Expo
    CDN并提供一个公共可访问的URL。通过这样，任何人都可以通过Expo客户端应用程序运行我们的应用程序。这对于测试或快速分发应用程序非常有用。
- en: To publish our project, we can click the “Publish or republish project” link
    in the browser’s Expo Dev Tools (see [Figure 25-2](#expo_publish)), or type `expo
    publish` in our terminal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布我们的项目，可以在浏览器的Expo开发工具中点击“发布或重新发布项目”链接（见[图 25-2](#expo_publish)），或在我们的终端中键入`expo
    publish`。
- en: '![A screenshot of the Expo Dev Tool''s publish screen.](assets/jsev_2502.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Expo开发工具发布屏幕的截图。](assets/jsev_2502.png)'
- en: Figure 25-2\. We can publish our application directly from Expo Dev Tools
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 25-2\. 我们可以直接从Expo开发工具发布我们的应用程序
- en: Once the packaging has been completed, anyone can visit *https://exp.host/@<username>/<slug>*
    to access the application through the Expo Client App.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打包完成，任何人都可以访问*https://exp.host/@<username>/<slug>*，通过Expo客户端应用程序访问该应用程序。
- en: Creating Native Builds
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建本地构建
- en: While distributing directly through Expo is a great option for testing or quick
    use cases, we will most likely want to release our application through the Apple
    App Store or Google Play Store. To do so, we will build the files that can be
    uploaded to the respective store.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接通过Expo进行分发是测试或快速使用的好选择，但我们很可能希望通过Apple App Store或Google Play Store发布我们的应用程序。为此，我们将构建可上传到各自商店的文件。
- en: Windows Users
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows用户
- en: According to the Expo documentation, Windows users need to enable Windows Subsystem
    for Linux (WSL). To accomplish this, follow the [Installation Guide for Windows
    10](https://oreil.ly/B8_nd) provided by Microsoft.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Expo文档，Windows用户需要启用Windows子系统用于Linux（WSL）。要完成此操作，请按照Microsoft提供的[Windows
    10安装指南](https://oreil.ly/B8_nd)进行操作。
- en: iOS
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS
- en: 'Generating an iOS build requires a membership to the [Apple Developer Program](https://oreil.ly/E0NuU),
    which costs $99 a year. With an account, we can then add a `bundleIdentifier`
    for iOS in our *app.json* file. This identifier should follow reverse DNS notation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 生成iOS构建需要加入[Apple Developer Program](https://oreil.ly/E0NuU)的会员资格，费用为每年99美元。有了账户，我们可以在我们的*app.json*文件中为iOS添加一个`bundleIdentifier`。此标识符应遵循反向DNS表示法：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With our *app.json* file updated, we can generate the build. In your terminal
    application, from the root of the project directory, enter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 更新了我们的*app.json*文件后，我们可以生成构建。在您的终端应用程序中，从项目目录的根目录输入：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After running the build you’ll be prompted to sign in with your Apple ID. Once
    you are signed in, you’ll be asked several questions about how you would like
    to handle credentials. Expo is able to manage all credentials and certificates
    for us, which you can permit by selecting the first option at each of the following
    prompts:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，您将被提示使用您的Apple ID进行登录。登录后，您将被询问关于如何处理凭据的几个问题。Expo能够为我们管理所有凭据和证书，您可以选择在以下提示中每次选择第一个选项以允许此操作：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you have an active Apple Developer Program account, Expo will then generate
    the file, which can be submitted to the Apple App Store.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有活跃的Apple开发者计划账户，Expo将生成文件，您可以将其提交到Apple App Store。
- en: Android
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android
- en: For Android we can generate either an Android Package File (APK) or an Android
    App Bundle (AAB) file. Android App Bundles are the more modern format, so let’s
    go that route. If you are interested, the [Android developers documentation](https://oreil.ly/mEAlR)
    offers a detailed description of the benefits of App Bundles.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android，我们可以生成Android Package File（APK）或Android App Bundle（AAB）文件。Android
    App Bundle是更现代的格式，所以让我们选择这条路线。如果您感兴趣，[Android开发者文档](https://oreil.ly/mEAlR)提供了关于应用程序包优势的详细描述。
- en: 'Before we generate the bundle, let’s update our *app.json* file to include
    an Android `package` identifier. Similarly to iOS, this should be in reverse DNS
    notation:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成应用程序包之前，让我们更新我们的 *app.json* 文件，以包含一个Android `package` 标识符。与iOS类似，这应该采用反向DNS表示法：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With this, we can generate the app bundle from our terminal application. Be
    sure to `cd` into the root of the project and run the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们可以从终端应用程序生成应用程序包。确保`cd`到项目根目录并运行以下命令：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'App Bundles are required to be signed. Though we can generate a signature ourselves,
    Expo can manage the keystore for us. After running the command to generate the
    bundle, you’ll see the following prompt:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序包需要签名。虽然我们可以自行生成签名，但Expo可以为我们管理密钥库。运行命令生成应用程序包后，您将看到以下提示：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you select `1`, Expo will generate the App Bundle for you. At the end of
    the process, you can download the file, which can be uploaded to the Google Play
    Store.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择 `1`，Expo将为您生成应用程序包。在此过程结束时，您可以下载该文件，然后将其上传到Google Play商店。
- en: Distributing to App Stores
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到应用商店
- en: Because of the shifting review guidelines and associated costs, I won’t be walking
    through the specifics of submitting our application to the Apple App Store or
    Google Play Store. The [Expo documentation](https://oreil.ly/OmGB2) does a nice
    job of collecting resources and guidelines and is a helpful, up-to-date guide
    on how to navigate the app store distribution process.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于审核指南和相关成本的变化，我不会详细介绍如何将我们的应用程序提交到Apple App Store或Google Play Store。[Expo文档](https://oreil.ly/OmGB2)收集了资源和指南，并且是关于如何导航应用商店分发流程的有用和最新指南。
- en: Conclusion
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter we’ve looked at how to publish and distribute a React Native
    application. Expo’s tooling allows us to quickly publish applications for testing
    and generate production builds that can be uploaded to app stores. Expo also provides
    us with options around levels of control for managing certificates and dependencies.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看过了如何发布和分发React Native应用程序。Expo的工具使我们能够快速发布用于测试的应用程序，并生成可上传到应用商店的生产版本。Expo还为我们提供了管理证书和依赖关系控制级别的选项。
- en: With this, we’ve successfully written and published a backend data API, a web
    application, a desktop application, and a cross-platform mobile application!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们已成功编写和发布了后端数据API、Web应用程序、桌面应用程序以及跨平台移动应用程序！
