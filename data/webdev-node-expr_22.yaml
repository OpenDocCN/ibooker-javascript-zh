- en: Chapter 22\. Maintenance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章 维护
- en: You launched the site! Congratulations, now you never have to think about it
    again. What’s that? You *do* have to keep thinking about it? Well, in that case,
    keep reading.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你发布了网站！恭喜恭喜，现在你永远不用再去考虑它了。什么？你*还是*得继续考虑它？好吧，在这种情况下，请继续阅读。
- en: Although it has happened a couple of times in my career, it has been the exception
    to the rule that you finish a site and then never have to touch it again (and
    when it does happen, it’s usually because someone else is doing the work, not
    that work doesn’t need to be done). I distinctly remember one website launch “postmortem.”
    I piped up and said, “Shouldn’t we really call it a *postpartum*?”^([1](ch22.xhtml#idm45053572094072))
    Launching a website really is more of a birth than a death. Once it launches,
    you’re glued to the analytics, anxiously awaiting the client’s reaction, waking
    up at three in the morning to check to see if the site is still up. It’s your
    baby.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在我的职业生涯中这种情况已经发生了几次，但完成一个网站然后永远不再碰它的情况并不常见（当它确实发生时，通常是因为有其他人在做这项工作，而不是因为工作不需要做）。我清楚地记得一个网站发布的“事后分析”。我插嘴说：“我们真的应该称它为*产后*吧？”^([1](ch22.xhtml#idm45053572094072))
    发布网站确实更像是一种诞生而非死亡。一旦它发布了，你就会紧盯着分析数据，焦急地等待客户的反应，半夜三点醒来检查网站是否还在运行。这是你的宝贝。
- en: 'Scoping a website, designing a website, building a website: these are all activities
    that can be planned to death. But what usually receives short shrift is *planning
    the maintenance* of a website. This chapter will give you some advice on navigating
    those waters.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 规划一个网站、设计一个网站、构建一个网站：这些都是可以计划到死的活动。但通常被忽视的是*规划网站维护*。本章将为你提供一些关于如何航行在这些波涛汹涌的建议。
- en: The Principles of Maintenance
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护原则
- en: Have a Longevity Plan
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥有长期计划
- en: 'It always surprises me when a client agrees on a price to build a website,
    but it’s never discussed how long the site is expected to last. My experience
    is that if you do good work, clients are happy to pay for it. What clients do
    *not* appreciate is the unexpected: being told after three years that their site
    has to be rebuilt when they had an unspoken expectation that it would last five.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户同意建立一个网站的价格时，我总是感到惊讶，但从未讨论过网站预计的寿命有多长。我的经验是，如果你做得好，客户愿意为此付费。客户*不*欣赏的是意外情况：例如在三年后告知他们他们的网站必须重建，而他们默默地期望它能维持五年。
- en: The internet moves fast. If you built a website with the absolute best and newest
    technology you could find, it might feel like a creaky relic in two short years.
    Or it could truck along for seven, aging, but doing so gracefully (this is a lot
    less common!).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网发展迅速。如果你用你能找到的最好和最新的技术构建了一个网站，也许两年后它会感觉像是一个老旧的遗物。或者它可以坚持七年，虽然老化，但做得很优雅（这种情况不太常见！）。
- en: 'Setting expectations about website longevity is part art, part salesmanship,
    and part science. The science of it involves something that all scientists, but
    very few web developers, do: keep records. Imagine if you had a record of every
    website your team had ever launched, the history of maintenance requests and failures,
    the technologies used, and how long before each site was rebuilt. There are many
    variables, obviously, from the team members involved, to the economy, to the shifting
    winds of technology, but that doesn’t mean that meaningful trends can’t be discovered
    in the data. You may find that certain development approaches work better for
    your team, or certain platforms or technologies. What I almost guarantee you will
    find is a correlation between “procrastination” and defects: the longer you put
    off an infrastructure update or platform upgrade that’s causing pain, the worse
    it will be. Having a good issue-tracking system and keeping meticulous records
    will allow you to give your client a much better (and more realistic) picture
    of what the life cycle of their project is going to be.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于网站寿命的预期设定，这部分是艺术、销售技巧和科学的结合体。其中的科学部分涉及到一些所有科学家都做但很少有网页开发者做的事情：保持记录。想象一下，如果你有你的团队曾经发布的每一个网站的记录，维护请求和故障的历史记录，使用的技术以及每个网站需要重建前的使用时长。显然存在许多变量，从涉及的团队成员，到经济情况，到技术的变动，但这并不意味着数据中不能发现有意义的趋势。你可能会发现某些开发方法对你的团队效果更好，或者某些平台或技术。我几乎可以保证你会发现“拖延”和缺陷之间存在着相关性：你越长时间推迟导致痛苦的基础设施更新或平台升级，问题就会越严重。拥有良好的问题跟踪系统并保持详细的记录将使你能够向客户提供更好（也更现实）的项目生命周期图景。
- en: 'The salesmanship of it boils down to money, of course. If a client can afford
    to have their website completely rebuilt every three years, then they won’t be
    very likely to suffer from aging infrastructure (they will have other problems,
    though). On the flip side, there will be clients who need their dollar to stretch
    as far as possible, wanting a website that will last for five or even seven years.
    (I’ve known websites that have dragged on for even longer than that, but I feel
    that seven years is the maximum realistic life expectancy for websites that have
    any hope of continuing to be useful.) You have a responsibility to both of these
    clients, and both come with their own challenges. With the clients who have a
    lot of money, don’t just take their money because they have it: use that extra
    money to give them something extraordinary. With the clients on a tight budget,
    you will have to find creative ways to design their website for greater longevity
    in the face of constantly changing technology. Both of these extremes have their
    own challenges, but ones that can be solved. What’s important, though is that
    you *know* what the expectations are.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它的推销点归结为当然是钱的问题。如果客户能够负担得起每三年完全重建他们的网站，那么他们不太可能因为老化基础设施而遭受损失（尽管他们会有其他问题）。另一方面，有些客户希望他们的预算能够延伸尽可能远，希望网站能够持续五年甚至七年之久。（我知道有些网站甚至拖延了更长时间，但我认为七年是有希望继续有用的网站的最大现实寿命。）你有责任对待这两类客户，它们各自带来了不同的挑战。对于那些有很多钱的客户，不要仅仅因为他们有钱而接受他们的钱：要利用这些额外的钱为他们提供一些非凡的东西。对于预算紧张的客户，你将不得不找到创造性的方法，在技术不断变化的情况下设计他们的网站，使其更具长期性。这两个极端都有各自的挑战，但都可以解决。然而重要的是，你要*知道*客户的期望是什么。
- en: 'Lastly, there’s the art of the matter. This is what ties it all together: understanding
    what the client can afford, and where you can honestly convince the client to
    spend more money so they get value where they need it. It is also the art of understanding
    technology futures, and being able to predict what technologies will be painfully
    obsolete in five years and which will be going strong.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有这个事情的艺术性。这就是把所有事情联系在一起的东西：了解客户能承受多少，以及在哪些地方你可以诚实地说服客户多花点钱，以便他们在需要的地方得到价值。这也是理解技术未来的艺术，能够预测哪些技术在五年内将会彻底过时，哪些将继续强大。
- en: 'There’s no way to predict anything with absolute certainty, of course. You
    could bet wrong on technologies, personnel shifts can completely change the technical
    culture of your organization, and technology vendors can go out of business (though
    this is usually less of a problem in the open source world). The technology that
    you thought would be solid for the lifetime of your product may turn out to be
    a fad, and you’ll find yourself facing the decision to rebuild sooner than you
    expected. On the flip side, sometimes the exactly right team comes together at
    the exact right time with the exact right technology, and something is created
    that far outlives any reasonable expectations. None of this uncertainty should
    deter you from having a plan, however: better to have a plan that goes awry than
    to always be rudderless.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有办法绝对确定任何事情。你可能对技术下错注，人员变动可能完全改变你组织的技术文化，技术供应商可能会倒闭（虽然在开源世界中这通常不是问题）。你认为会在产品寿命内稳定的技术可能会被证明是一种时尚，你可能会发现自己面临比预期更早重建的决定。另一方面，有时候确切的团队在确切的时间以及确切的技术下来到一起，创造出远超过任何合理期望的东西。然而，所有这些不确定性都不应阻止你制定计划：有一个走样的计划总比一直没有方向好。
- en: 'It should be clear to you by now that I feel that JavaScript and Node are technologies
    that are going to be around for a while. The Node community is vibrant and enthusiastic,
    and wisely based on a language that has clearly *won*. Most important, perhaps,
    is that JavaScript is a multiparadigm language: object-oriented, functional, procedural,
    synchronous, asynchronous—it’s all there. This makes JavaScript an inviting platform
    for developers from many different backgrounds, and is in large part responsible
    for the pace of innovation in the JavaScript ecosystem.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对你来说应该是清楚的，我认为JavaScript和Node是将会持续存在一段时间的技术。Node社区充满活力和热情，明智地基于一种显然已经*胜利*的语言。也许最重要的是，JavaScript是一种多范式语言：面向对象的，函数式的，过程式的，同步的，异步的——它应有尽有。这使得JavaScript成为一个吸引来自不同背景开发者的平台，并且在很大程度上推动了JavaScript生态系统的创新步伐。
- en: Use Source Control
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用源代码控制
- en: 'This probably seems obvious to you, but it’s not just about *using* source
    control, it’s about using it *well*. Why are you using source control? Understand
    the reasons, and make sure the tools are supporting those reasons. There are many
    reasons to use source control, but the one that always seems to me to have the
    biggest payoff is attribution: knowing exactly what change was made when and who
    did it, so I can ask for more information if necessary. Version control is one
    of our greatest tools for understanding the history of our projects and how we
    work together as a team.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这对你可能显而易见，但不仅仅是*使用*源代码控制，而是要*好好使用*它。你为什么使用源代码控制？理解原因，并确保工具支持这些原因。使用源代码控制有许多原因，但我认为最大的回报始终是归因：知道究竟是什么改变了什么时间，以及谁做了这些改变，这样我就可以在必要时询问更多信息。版本控制是我们了解项目历史和团队协作方式的最重要工具之一。
- en: Use an Issue Tracker
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用问题追踪器
- en: Issue trackers go back to the science of development. Without a systematic way
    to record the history of a project, no insight is possible. You’ve probably heard
    it said that the definition of insanity is “doing the same thing over and over
    again and expecting different results” (often dubiously attributed to Albert Einstein).
    It does seem crazy to repeat your mistakes over and over again, but how can you
    avoid it if you don’t know what mistakes you’re making?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 问题追踪器回到了开发的科学。没有系统记录项目历史的方法，就不可能得到洞察。你可能听说过“疯狂的定义是‘一遍又一遍地做同样的事情，但期待不同的结果’”（通常是被错误地归因于阿尔伯特·爱因斯坦）。如果你不知道自己在犯什么错误，如何避免重复这些错误看起来是疯狂的呢？
- en: 'Record everything: every defect the client reports; every defect you find before
    the client sees it; every complaint, every question, every bit of praise. Record
    how long it took, who fixed it, what Git commits were involved, and who approved
    the fix. The art here is finding tools that don’t make this overly time-consuming
    or onerous. A bad issue-tracking system will languish, unused, and it will be
    worse than useless. A good issue-tracking system will yield vital insights into
    your business, your team, and your clients.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 记录一切：客户报告的每一个缺陷；在客户看到之前你发现的每一个缺陷；每一个投诉，每一个问题，每一点赞。记录花费了多少时间，谁修复了它，涉及了哪些 Git
    提交，以及谁批准了修复。关键在于找到不会使这变得过于耗时或繁重的工具。一个糟糕的问题追踪系统会闲置不用，比没用还糟糕。一个好的问题追踪系统将为你的业务、团队和客户提供重要的洞察。
- en: Exercise Good Hygiene
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持良好的卫生习惯
- en: I’m not talking about brushing your teeth—though you should do that too—I’m
    talking about version control, testing, code reviews, and issue tracking. The
    tools you use are useful only if you use them, and use them correctly. Code reviews
    are a great way to encourage hygiene because *everything* can be touched on, from
    discussing the use of the issue-tracking system in which the request originated
    to the tests that had to be added to verify the fix to the version control commit
    comments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是在说刷牙——虽然你也应该这样做——我是在说版本控制、测试、代码审查和问题追踪。你使用的工具只有在正确使用时才是有用的。代码审查是鼓励卫生习惯的好方法，因为可以触及*所有*内容，从讨论请求来源于哪个问题追踪系统，到必须添加的用于验证修复的测试，再到版本控制提交注释。
- en: The data you collect from your issue-tracking system should be reviewed on a
    periodic basis and discussed with the team. From this data, you can gain insights
    about what’s working and what’s not. You might be surprised by what you find.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你从问题追踪系统收集的数据应定期审查并与团队讨论。通过这些数据，你可以获得关于什么有效和什么无效的见解。你可能会对你所发现的内容感到惊讶。
- en: Don’t Procrastinate
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要拖延
- en: 'Institutional procrastination can be one of the hardest things to combat. Usually
    it’s something that doesn’t seem so bad: you notice that your team is routinely
    eating up a lot of hours on a weekly update that could be drastically improved
    by a little refactoring. Every week that you delay refactoring is another week
    you’re paying the inefficiency cost.^([2](ch22.xhtml#idm45053572053096)) Worse,
    some costs may increase over time.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 机构性拖延可能是最难对抗的事情之一。通常情况下，看起来不那么糟糕：你注意到你的团队每周在一个本可以通过稍加重构大幅改善的周更新上浪费了大量时间。每一周你推迟重构，就是另一周你在支付效率成本。^([2](ch22.xhtml#idm45053572053096))
    更糟的是，有些成本可能会随着时间的推移而增加。
- en: 'A great example of this is failing to update software dependencies. As the
    software ages, and team members change, it’s harder to find people who remember
    (or ever understood) the creaky old software. The support community starts to
    evaporate, and before long, the technology is deprecated and you can’t get any
    kind of support for it. You often hear this described as *technical debt*, and
    it’s a very real thing. While you should avoid procrastinating, understanding
    the website longevity can factor into these decisions: if you’re just about to
    redesign the whole website, there’s little value in eliminating technical debt
    that’s been building up.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是未能更新软件依赖关系。随着软件的老化和团队成员的变动，要找到记得（或者曾经理解过）这个老旧软件的人变得更加困难。支持社区开始消失，不久后，技术被淘汰，你将无法获得任何支持。人们经常将此描述为*技术债务*，这是一个非常真实的问题。虽然你应该避免拖延，但理解网站的长期存在性可以影响这些决策：如果你正准备重新设计整个网站，消除一直积累的技术债务就没有太大的价值。
- en: Do Routine QA Checks
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行例行的质量保证检查
- en: 'For each of your websites, you should have a *documented* routine QA check.
    That check should include a link checker, HTML and CSS validation, and running
    your tests. The key here is *documented*: if the items that compose the QA check
    aren’t documented, you will inevitably miss things. A documented QA checklist
    for each site not only helps prevent overlooked checks, but also allows new team
    members to be effective immediately. Ideally, the QA checklist can be executed
    by a nontechnical team member. This will give your (possibly) nontechnical manager
    confidence in your team and will allow you to spread QA responsibilities around
    if you don’t have a dedicated QA department. Depending on your relationship with
    your client, you may also want to share your QA checklist (or part of it) with
    the client; it’s a good way to remind them what they’re paying for, and that you
    are looking out for their best interests.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的每个网站，你应该有一个*记录的*例行质量保证检查。该检查应包括链接检查器、HTML和CSS验证以及运行你的测试。关键在于*记录*：如果组成质量保证检查的项目没有记录，你必然会错过一些事情。每个网站的记录质量保证检查清单不仅有助于防止忽视检查，还允许新团队成员立即生效。理想情况下，质量保证检查清单可以由非技术团队成员执行。这将增强你（可能是）非技术经理对团队的信心，并且如果你没有专门的质量保证部门，将允许你分担质量保证的责任。根据你与客户的关系，你可能还想与客户分享你的质量保证检查清单（或其部分）；这是提醒他们他们为何支付费用以及你在为他们的最佳利益着想的好方法。
- en: 'As part of your routine QA check, I recommend using [Google Webmaster Tools](http://bit.ly/2qH3Y7L)
    and [Bing Webmaster Tools](https://binged.it/2qPwF2c). They are easy to set up,
    and they give you a very important view of your site: how the major search engines
    see it. It will alert you to any problems with your *robots.txt* file, HTML issues
    that are interfering with good search results, security issues, and more.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为例行的质量保证检查的一部分，我建议使用[Google网站管理员工具](http://bit.ly/2qH3Y7L)和[Bing网站管理员工具](https://binged.it/2qPwF2c)。它们易于设置，并且可以让你非常重要地查看你的网站：主要搜索引擎如何看待它。它会提醒你关于你的*robots.txt*文件、干扰良好搜索结果的HTML问题、安全问题等等的任何问题。
- en: Monitor Analytics
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控分析数据
- en: 'If you’re not running analytics on your website, you need to start now: it
    provides vital insight into not just the popularity of your website, but also
    how your users are using it. Google Analytics (GA) is excellent (and free!), and
    even if you supplement it with additional analytics services, there’s little reason
    not to include GA on your site.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网站上没有运行分析，你现在就需要开始：它不仅提供了网站的流行度关键洞察，还告诉你用户如何使用它。Google Analytics（GA）非常出色（而且免费！），即使你用其他分析服务来补充，也没有理由不在你的网站上包含GA。
- en: Often, you will be able to spot subtle UX issues by keeping an eye on your analytics.
    Are there certain pages that are not getting the traffic that you expect? That
    could indicate a problem with your navigation or promotions, or an SEO issue.
    Are your bounce rates high? That could indicate the content on your pages needs
    some tailoring (people are getting to your site by searching, but when they arrive
    on your site, they realize it’s not what they’re looking for). You should have
    an analytics checklist to go along with your QA checklist (it could even be part
    of your QA checklist). That checklist should be a “living document,” because over
    the lifetime of your website, you or your client may have shifting priorities
    about what content is most important.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，通过关注分析数据，您可以发现一些微妙的用户体验问题。某些页面是否没有获得预期的流量？这可能表明导航、促销或 SEO 问题。跳出率是否很高？这可能意味着您的页面内容需要调整（人们通过搜索进入您的网站，但一到达后发现并非他们寻找的内容）。您应该有一个分析检查清单，与您的质量保证清单一起使用（它甚至可以成为质量保证清单的一部分）。该清单应该是一个“活文件”，因为在您的网站生命周期内，您或您的客户可能会对内容的重要性有所变化。
- en: Optimize Performance
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化性能
- en: Study after study has shown the dramatic effect of performance on website traffic.
    It’s a fast-paced world, and people expect their content delivered quickly, especially
    on mobile platforms. The number one principle in performance tuning is to *profile
    first, then optimize*. “Profiling” means finding out what actually is slowing
    your site down. If you spend days speeding up your content rendering when the
    problem is your social media plugins, you’re wasting precious time and money.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 研究表明，性能对网站流量有显著影响。在快节奏的世界中，人们期望内容快速交付，尤其是在移动平台上。性能调优的首要原则是*先进行分析，然后进行优化*。“分析”意味着找出实际拖慢网站速度的因素。如果您花费数天加快内容呈现速度，而问题实际上出在社交媒体插件上，那么您就浪费了宝贵的时间和金钱。
- en: '[Google PageSpeed Insights](http://bit.ly/2Qa3l15) is a great way to measure
    the performance of your website (and now PageSpeed data is recorded in Google
    Analytics so you can monitor performance trends). I will not only give you an
    overall score for mobile and desktop performance, but also make prioritized suggestions
    about how to improve performance.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[Google PageSpeed Insights](http://bit.ly/2Qa3l15) 是衡量网站性能的好方法（现在 PageSpeed
    数据也记录在 Google Analytics 中，所以您可以监控性能趋势）。它不仅会为移动端和桌面端性能给出综合评分，还会提出如何优化性能的优先建议。'
- en: Unless you currently have performance issues, it’s probably not necessary to
    do periodic performance checks (monitoring Google Analytics for significant changes
    in performance scores should be sufficient). However, it is gratifying to watch
    your boost in traffic when you improve performance.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您目前没有性能问题，可能不需要定期进行性能检查（监控 Google Analytics 是否有性能分数显著变化应该足够）。然而，当您提高性能时，观察流量的增加是令人满意的。
- en: Prioritize Lead Tracking
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先考虑潜在客户追踪
- en: In the internet world, the strongest signal your visitors can give you to indicate
    interest in your product or service is contact information. You should treat this
    information with the utmost care. Any form that collects an email or phone number
    should be tested routinely as part of your QA checklist, and there should *always*
    be redundancy when you collect that information. The worst thing you can do to
    a potential customer is collect contact information and then lose it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网世界中，访客能够向您发出的最强信号，表明他们对您的产品或服务感兴趣的是联系信息。您应该非常谨慎地处理这些信息。任何收集电子邮件或电话号码的表单都应定期作为质量保证检查的一部分进行测试，并且在收集信息时应始终保持冗余。对潜在客户做的最糟糕的事情之一就是收集联系信息，然后丢失它。
- en: 'Because lead tracking is so critical to the success of your website, I recommend
    these five principles for collecting information:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于潜在客户追踪对您的网站成功至关重要，我建议您遵循以下五个原则来收集信息：
- en: Have a fallback in case JavaScript fails
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 失效时有备用方案
- en: 'Collecting customer information via Ajax is fine—it often results in a better
    user experience. However, if JavaScript should fail for any reason (the user could
    disable it, or a script on your website could have an error, preventing your Ajax
    from functioning correctly), the form submission should work anyway. A great way
    to test this is to disable JavaScript and use your form. It’s okay if the user
    experience is not ideal: the point is that user data is not lost. To implement
    this, *always* have a valid and working `action` parameter in your `<form>` tag,
    even if you normally use Ajax.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Ajax 收集客户信息是可以的——这通常会带来更好的用户体验。但是，如果由于任何原因 JavaScript 失败（用户可能禁用它，或者您网站上的脚本可能出现错误，导致您的
    Ajax 功能不正常），表单提交应仍然可以工作。测试这一点的一个好方法是禁用 JavaScript 并使用您的表单。如果用户体验不理想也没关系：关键是不要丢失用户数据。为了实现这一点，*始终*在您的
    `<form>` 标签中有一个有效且可用的 `action` 参数，即使您通常使用 Ajax。
- en: If you use Ajax, get the URL from the form’s `action` parameter
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 Ajax，请从表单的 `action` 参数获取 URL。
- en: While not strictly necessary, this helps prevent you from accidentally forgetting
    the `action` parameter on your `<form>` tags. If you tie your Ajax to successful
    no-JavaScript submission, it’s much harder to lose customer data. For example,
    your form tag could be `<form action="/submit/email" method="POST">`; then in
    your Ajax code, you would get the `action` for the form from the DOM, and use
    that in your Ajax submission code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是严格必要的，但这有助于防止您在 `<form>` 标签上意外忘记 `action` 参数。如果将您的 Ajax 绑定到无 JavaScript
    提交成功，那么丢失客户数据将更加困难。例如，您的表单标签可以是 `<form action="/submit/email" method="POST">`；然后在您的
    Ajax 代码中，您会从 DOM 获取表单的 `action`，并在 Ajax 提交代码中使用它。
- en: Provide at least one level of redundancy
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提供至少一级冗余。
- en: 'You’ll probably want to save leads to a database or an external service such
    as Campaign Monitor. But what if your database fails, or Campaign Monitor goes
    down, or there’s a network issue? You still don’t want to lose that lead. A common
    way to provide redundancy is to send an email in addition to storing the lead.
    If you take this approach, you should not use a person’s email address, but a
    shared email address (such as *dev@meadowlarktravel.com*): the redundancy does
    no good if you send it to a person and that person leaves the organization. You
    could also store the lead in a backup database, or even a CSV file. However, *whenever*
    your primary storage fails, there should be some mechanism to alert you of the
    failure. Collecting a redundant backup is the first half of the battle; being
    aware of failures and taking appropriate action is the second half.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望将潜在客户信息保存到数据库或外部服务，如 Campaign Monitor。但是，如果您的数据库出现故障，或者 Campaign Monitor
    停机，或者存在网络问题，您仍然不希望丢失该潜在客户。提供冗余的常见方法是除了存储潜在客户信息外，还发送电子邮件。如果采用这种方法，您不应使用个人电子邮件地址，而应使用共享电子邮件地址（如*dev@meadowlarktravel.com*）：如果将其发送给一个人并且该人离开组织，冗余就没有意义。您还可以将潜在客户信息存储在备份数据库或甚至
    CSV 文件中。然而，*每当*主要存储失败时，应有一些机制来提醒您失败。收集冗余备份是战斗的前半段；意识到故障并采取适当措施是后半段。
- en: In case of total storage failure, inform the user
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全存储失败的情况下，通知用户。
- en: 'Let’s say you have three levels of redundancy: your primary storage is Campaign
    Monitor, and if that fails, you back up to a CSV file and send an email to *dev@meadowlarktravel.com*.
    If *all* of these channels fail, the user should receive a message that says something
    like, “We’re sorry, we’re experiencing technical difficulties. Please try again
    later, or contact *support@meadowlarktravel.com*.”'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有三级冗余：您的主要存储是 Campaign Monitor，如果它失败了，您会备份到 CSV 文件并发送邮件至 *dev@meadowlarktravel.com*。如果*所有*这些渠道都失败了，用户应该收到类似于“很抱歉，我们遇到技术困难，请稍后重试，或联系*support@meadowlarktravel.com*”的消息。
- en: Check for positive confirmation, not absence of an error
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 检查肯定确认，而不是错误的缺失。
- en: 'It’s quite common to have your Ajax handler return an object with an `err`
    property in the case of failure; the client code then has something that looks
    like this: `if(data.err){ /* inform user of failure */ } else { /* thank user
    for successful submission */ }`. Avoid this approach. There’s nothing wrong with
    setting an `err` property, but if there’s an error in your Ajax handler, leading
    the server to respond with a 500 response code or a response that isn’t valid
    JSON, *this approach could fail silently*. The user’s lead will disappear into
    the void, and they will be none the wiser. Instead, provide a `success` property
    for successful submission (even if the primary storage failed: if the user’s information
    was recorded by *something*, you may return `success`). Then your client-side
    code becomes `if(data.success){ /* thank user for successful submission */ } else
    { /* inform user of failure \*/ }`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax 处理程序通常会返回一个带有`err`属性的对象以表示失败；然后客户端代码会像这样：`if(data.err){ /* 通知用户操作失败 */
    } else { /* 感谢用户提交成功 */ }`。避免这种方法。设置`err`属性没有问题，但如果在 Ajax 处理程序中出现错误，导致服务器响应 500
    错误代码或者响应不是有效的 JSON，*这种方法可能会静默失败*。用户的信息将消失无踪，他们对此一无所知。相反，为成功的提交提供一个`success`属性（即使主要存储失败：如果用户的信息被*某种方式*记录，你可以返回`success`）。然后你的客户端代码变成`if(data.success){
    /* 感谢用户提交成功 */ } else { /* 通知用户操作失败 */ }`。
- en: Prevent “Invisible” Failures
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止“隐形”故障
- en: 'I see it all the time: because developers are in a hurry, they record errors
    in ways that never get checked. Whether it is a logfile, a table in a database,
    a client-side console log, or an email that goes to a dead address, the end result
    is the same: *your website has quality problems that are going unnoticed*.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常看到这种情况：因为开发人员赶时间，他们记录错误的方式从未得到检查。无论是日志文件，数据库中的表格，客户端控制台日志，还是发往死信箱的电子邮件，最终结果都是一样的：*你的网站存在质量问题，这些问题没有被注意到*。
- en: 'The number one defense you can have against this problem is to *provide an
    easy, standard method for logging errors*. Document it. Don’t make it difficult.
    Don’t make it obscure. Make sure every developer that touches your project is
    aware of it. It can be as simple as exposing a `meadowlarkLog` function (`log`
    is often used by other packages). It doesn’t matter if the function is recording
    to a database, flat file, email, or some combination thereof: the important thing
    is that it is standard. It also allows you to improve your logging mechanism (for
    example, flat files are less useful when you scale out your server, so you would
    modify your `meadowlarkLog` function to record to a database instead). Once you
    have the logging mechanism in place, documented, and everyone on your team knows
    about it, add “check logs” to your QA checklist, and have instructions on how
    to do that.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对抗这个问题的头号防御措施是*提供一种简单标准的错误日志记录方法*。文档化它。不要让它变得复杂。不要让它变得晦涩。确保每个接触到你项目的开发人员都知道它。可以简单地暴露一个`meadowlarkLog`函数（其他包经常使用`log`）。函数是否记录到数据库、平面文件、电子邮件或其组合并不重要：重要的是它是标准化的。它还允许你改进日志机制（例如，当你扩展服务器时，平面文件的用处变小，因此你会修改`meadowlarkLog`函数以改为记录到数据库）。一旦日志记录机制就位，文档化并且你的团队每个人都知晓，将“检查日志”添加到你的质量保证清单中，并提供如何执行的指导。
- en: Code Reuse and Refactoring
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码重用和重构
- en: 'One tragedy I see all the time is the reinvention of the wheel, over and over
    and over again. Usually it’s just small things: tidbits that feel easier to just
    rewrite than to dig up in some project that you did months ago. All of those little
    rewritten snippets add up. Worse, it flies in the face of good QA: you’re probably
    not going to go to the trouble to write tests for all these little snippets (and
    if you do, you’re doubling the time that you’re wasting by not reusing existing
    code). Each snippet—doing the same thing—can have different bugs. It’s a bad habit.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常看到的一个悲剧是反复发明轮子。通常这只是一些小事情：碎片化的内容感觉重写比挖掘几个月前的项目更容易。所有这些小片段的重写累积起来。更糟糕的是，这与良好的质量保证相悖：你可能不会费心为所有这些小片段编写测试（如果你这样做了，那么浪费时间就会加倍，因为你没有重用现有的代码）。每个相同的片段可能会有不同的错误。这是一个不好的习惯。
- en: Development in Node and Express offers some great ways to combat this problem.
    Node brought namespacing (via modules) and packages (via npm), and Express brings
    the concept of middleware. With these tools at your disposal, developing reusable
    code is a lot easier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node 和 Express 中进行开发提供了一些很好的方法来解决这个问题。Node 通过模块带来了命名空间，通过 npm 带来了包的概念，而 Express
    则引入了中间件的概念。有了这些工具，开发可复用的代码变得更加容易。
- en: Private npm Registry
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私有 npm 注册表
- en: npm registries are a great place to store shared code; it’s what npm was designed
    for, after all. In addition to simple storage, you get versioning, and a convenient
    way to include those packages in other projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: npm 注册表是存储共享代码的好地方；毕竟，这正是 npm 设计的初衷。除了简单的存储外，你还得到了版本控制，以及在其他项目中包含这些包的便捷方法。
- en: 'There’s a fly in the ointment, though: unless you’re working in a completely
    open source organization, you may not want to create npm packages for all of your
    reusable code. (There can be other reasons than intellectual property protection,
    too: your packages could be so organization- or project-specific that it doesn’t
    make sense to make them available on a public registry.)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里有一个小问题：除非你在一个完全开放源码的组织中工作，否则你可能不想为所有可复用的代码创建 npm 包。（除了知识产权保护之外，还可能有其他原因：你的包可能是如此特定于组织或项目，以至于在公共注册表上发布它们没有意义。）
- en: One way to handle this is *private npm registries*. npm now offers Orgs, which
    allows you to publish private packages and give your developers paid logins, allowing
    them to access those private packages. See [npm](https://www.npmjs.com/products)
    for more information about npm Orgs and private packages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个问题的一种方法是*私有 npm 注册表*。npm 现在提供了 Orgs 功能，允许你发布私有包，并给你的开发者提供付费登录，以便让他们访问这些私有包。有关
    npm Orgs 和私有包的更多信息，请参阅 [npm](https://www.npmjs.com/products)。
- en: Middleware
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间件
- en: 'As we’ve seen throughout this book, writing middleware is not some big, scary,
    complicated thing: we’ve done it a dozen times in this book and, after a while,
    you will do it without even thinking about it. The next step, then, is to put
    reusable middleware in a package and put it in an npm registry.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如同本书中所见，编写中间件并不是什么复杂可怕的事情：在本书中我们已经做了很多次了，久而久之，你甚至可以不假思索地完成。因此，下一步就是将可复用的中间件放入一个包中，并将其发布到
    npm 注册表中。
- en: If you find that your middleware is too project-specific to put in a reusable
    package, you should consider refactoring the middleware to be configured for more
    general use. Remember that you can pass configuration objects into middleware
    to make them useful in a whole range of situations. Here is an overview of the
    most common ways to expose middleware in a Node module. All of the following assume
    that you’re using these modules as a package, and that package is called `meadowlark-stuff`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现你的中间件过于特定于某个项目而无法放入一个可复用的包中，那么你应该考虑重构中间件，以便能够为更一般的用途进行配置。记住，你可以传递配置对象到中间件中，使其在各种情况下都能派上用场。下面是在
    Node 模块中公开中间件的最常见方法概述。以下所有内容都假设你正在将这些模块作为一个名为`meadowlark-stuff`的包使用。
- en: Module exposes middleware function directly
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块直接公开中间件函数
- en: 'Use this method if your middleware doesn’t need a configuration object:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的中间件不需要配置对象，请使用这种方法：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To use this middleware:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个中间件的方法：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Module exposes a function that returns middleware
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块公开一个返回中间件的函数
- en: 'Use this method if your middleware needs a configuration object or other information:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的中间件需要配置对象或其他信息，请使用这种方法：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To use this middleware:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个中间件的方法：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Module exposes an object that contains middleware
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块公开一个包含中间件的对象
- en: 'Use this option if you want to expose multiple related middleware:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望公开多个相关的中间件，可以选择使用这个选项：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To use this middleware:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个中间件的方法：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Conclusion
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'When you’re building a website, the focus is often on the launch, and for good
    reason: a lot of excitement surrounds a launch. However, a client that is delighted
    by a newly launched website will quickly become a dissatisfied customer if care
    isn’t taken in maintaining the website. Approaching your maintenance plan with
    the same care with which you launch websites will provide the kind of experience
    that keeps clients coming back.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网站时，焦点通常放在上线上，这是有充分理由的：上线是非常令人兴奋的。然而，一个对新上线网站感到满意的客户，如果在维护网站时不注意，很快就会变成一个不满意的客户。以同样的细心对待维护计划，将会提供客户喜欢的体验，从而使客户不断回头。
- en: ^([1](ch22.xhtml#idm45053572094072-marker)) As it happened, the term *postpartum*
    was a little too visceral. We now call them *retrospectives*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch22.xhtml#idm45053572094072-marker)) 事实证明，“产后”这个术语有点过于直接。我们现在称之为“回顾”。
- en: '^([2](ch22.xhtml#idm45053572053096-marker)) Mike Wilson of [Fuel](http://www.fuelyouth.com)
    has this rule of thumb: “The third time you do something, take the time to automate
    it.”'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch22.xhtml#idm45053572053096-marker)) [Fuel](http://www.fuelyouth.com)的麦克·威尔逊有一条经验法则：“当你第三次做某事时，花点时间自动化它。”
