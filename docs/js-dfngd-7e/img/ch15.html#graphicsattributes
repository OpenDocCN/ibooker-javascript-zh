<!--[if IE]><![endif]--><!DOCTYPE html><!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/javascript-the-definitive/9781491952016/ch15.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="1778064"
  data-user-uuid="fa8bb893-4c96-462f-b20f-f7d5a4c5ca13"
  data-username="vaikkunthm"
  data-account-type="Paid"
  
  data-activated-trial-date=""


  data-archive="9781491952016"
  data-publishers="O&#39;Reilly Media, Inc."



  data-htmlfile-name="ch15.html"
  data-epub-title="JavaScript: The Definitive Guide, 7th Edition" data-debug=0 data-testing=0><![endif]--><!--[if gt IE 8]><!--><html class="no-js" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/javascript-the-definitive/9781491952016/ch15.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="1778064"
  data-user-uuid="fa8bb893-4c96-462f-b20f-f7d5a4c5ca13"
  data-username="vaikkunthm"
  data-account-type="Paid"
  
  data-activated-trial-date=""


  data-archive="9781491952016"
  data-publishers="O&#39;Reilly Media, Inc."



  data-htmlfile-name="ch15.html"
  data-epub-title="JavaScript: The Definitive Guide, 7th Edition" data-debug=0 data-testing=0><!--<![endif]--><head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /><meta name="author" content="Safari Books Online" /><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"/><meta name="HandheldFriendly" content="True"/><meta name="MobileOptimized" content="320"/><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781491952016"/><link rel="shortcut icon" href="https://www.oreilly.com/favicon.ico" /><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"/><meta property="twitter:account_id" content="4503599627559754" /><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={licenseKey:"510f1a6865",applicationID:"172641827"};window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var i=n[t]={exports:{}};e[t][0].call(i.exports,function(n){var i=e[t][1][n];return r(i||n)},i,i.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<t.length;i++)r(t[i]);return r}({1:[function(e,n,t){function r(){}function i(e,n,t){return function(){return o(e,[u.now()].concat(f(arguments)),n?null:this,t),n?void 0:this}}var o=e("handle"),a=e(4),f=e(5),c=e("ee").get("tracer"),u=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",d=l+"ixn-";a(p,function(e,n){s[n]=i(l+n,!0,"api")}),s.addPageAction=i(l+"addPageAction",!0),s.setCurrentRouteName=i(l+"routeName",!0),n.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,n){var t={},r=this,i="function"==typeof n;return o(d+"tracer",[u.now(),e,t],r),function(){if(c.emit((i?"":"no-")+"fn-start",[u.now(),r,i],t),i)try{return n.apply(this,arguments)}catch(e){throw c.emit("fn-err",[arguments,this,e],t),e}finally{c.emit("fn-end",[u.now()],t)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,n){m[n]=i(d+n)}),newrelic.noticeError=function(e,n){"string"==typeof e&&(e=new Error(e)),o("err",[e,u.now(),!1,n])}},{}],2:[function(e,n,t){function r(e,n){var t=e.getEntries();t.forEach(function(e){"first-paint"===e.name?c("timing",["fp",Math.floor(e.startTime)]):"first-contentful-paint"===e.name&&c("timing",["fcp",Math.floor(e.startTime)])})}function i(e,n){var t=e.getEntries();t.length>0&&c("lcp",[t[t.length-1]])}function o(e){if(e instanceof s&&!l){var n,t=Math.round(e.timeStamp);n=t>1e12?Date.now()-t:u.now()-t,l=!0,c("timing",["fi",t,{type:e.type,fid:n}])}}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var a,f,c=e("handle"),u=e("loader"),s=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){a=new PerformanceObserver(r),f=new PerformanceObserver(i);try{a.observe({entryTypes:["paint"]}),f.observe({entryTypes:["largest-contentful-paint"]})}catch(p){}}if("addEventListener"in document){var l=!1,d=["click","keydown","mousedown","pointerdown","touchstart"];d.forEach(function(e){document.addEventListener(e,o,!1)})}}},{}],3:[function(e,n,t){function r(e,n){if(!i)return!1;if(e!==i)return!1;if(!n)return!0;if(!o)return!1;for(var t=o.split("."),r=n.split("."),a=0;a<r.length;a++)if(r[a]!==t[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var f=navigator.userAgent,c=f.match(a);c&&f.indexOf("Chrome")===-1&&f.indexOf("Chromium")===-1&&(i="Safari",o=c[1])}n.exports={agent:i,version:o,match:r}},{}],4:[function(e,n,t){function r(e,n){var t=[],r="",o=0;for(r in e)i.call(e,r)&&(t[o]=n(r,e[r]),o+=1);return t}var i=Object.prototype.hasOwnProperty;n.exports=r},{}],5:[function(e,n,t){function r(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,i=t-n||0,o=Array(i<0?0:i);++r<i;)o[r]=e[n+r];return o}n.exports=r},{}],6:[function(e,n,t){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,n,t){function r(){}function i(e){function n(e){return e&&e instanceof r?e:e?c(e,f,o):o()}function t(t,r,i,o){if(!l.aborted||o){e&&e(t,r,i);for(var a=n(i),f=v(t),c=f.length,u=0;u<c;u++)f[u].apply(a,r);var p=s[y[t]];return p&&p.push([b,t,r,a]),a}}function d(e,n){h[e]=v(e).concat(n)}function m(e,n){var t=h[e];if(t)for(var r=0;r<t.length;r++)t[r]===n&&t.splice(r,1)}function v(e){return h[e]||[]}function g(e){return p[e]=p[e]||i(t)}function w(e,n){u(e,function(e,t){n=n||"feature",y[t]=n,n in s||(s[n]=[])})}var h={},y={},b={on:d,addEventListener:d,removeEventListener:m,emit:t,get:g,listeners:v,context:n,buffer:w,abort:a,aborted:!1};return b}function o(){return new r}function a(){(s.api||s.feature)&&(l.aborted=!0,s=l.backlog={})}var f="nr@context",c=e("gos"),u=e(4),s={},p={},l=n.exports=i();l.backlog=s},{}],gos:[function(e,n,t){function r(e,n,t){if(i.call(e,n))return e[n];var r=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return e[n]=r,r}var i=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(e,n,t){function r(e,n,t,r){i.buffer([e],r),i.emit(e,n,t)}var i=e("ee").get("handle");n.exports=r,r.ee=i},{}],id:[function(e,n,t){function r(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:a(e,o,function(){return i++})}var i=1,o="nr@id",a=e("gos");n.exports=r},{}],loader:[function(e,n,t){function r(){if(!x++){var e=E.info=NREUM.info,n=d.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&n))return s.abort();u(y,function(n,t){e[n]||(e[n]=t)}),c("mark",["onload",a()+E.offset],null,"api");var t=d.createElement("script");t.src="https://"+e.agent,n.parentNode.insertBefore(t,n)}}function i(){"complete"===d.readyState&&o()}function o(){c("mark",["domContent",a()+E.offset],null,"api")}function a(){return O.exists&&performance.now?Math.round(performance.now()):(f=Math.max((new Date).getTime(),f))-E.offset}var f=(new Date).getTime(),c=e("handle"),u=e(4),s=e("ee"),p=e(3),l=window,d=l.document,m="addEventListener",v="attachEvent",g=l.XMLHttpRequest,w=g&&g.prototype;NREUM.o={ST:setTimeout,SI:l.setImmediate,CT:clearTimeout,XHR:g,REQ:l.Request,EV:l.Event,PR:l.Promise,MO:l.MutationObserver};var h=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1167.min.js"},b=g&&w&&w[m]&&!/CriOS/.test(navigator.userAgent),E=n.exports={offset:f,now:a,origin:h,features:{},xhrWrappable:b,userAgent:p};e(1),e(2),d[m]?(d[m]("DOMContentLoaded",o,!1),l[m]("load",r,!1)):(d[v]("onreadystatechange",i),l[v]("onload",r)),c("mark",["firstbyte",f],null,"api");var x=0,O=e(6)},{}],"wrap-function":[function(e,n,t){function r(e){return!(e&&e instanceof Function&&e.apply&&!e[a])}var i=e("ee"),o=e(5),a="nr@original",f=Object.prototype.hasOwnProperty,c=!1;n.exports=function(e,n){function t(e,n,t,i){function nrWrapper(){var r,a,f,c;try{a=this,r=o(arguments),f="function"==typeof t?t(r,a):t||{}}catch(u){l([u,"",[r,a,i],f])}s(n+"start",[r,a,i],f);try{return c=e.apply(a,r)}catch(p){throw s(n+"err",[r,a,p],f),p}finally{s(n+"end",[r,a,c],f)}}return r(e)?e:(n||(n=""),nrWrapper[a]=e,p(e,nrWrapper),nrWrapper)}function u(e,n,i,o){i||(i="");var a,f,c,u="-"===i.charAt(0);for(c=0;c<n.length;c++)f=n[c],a=e[f],r(a)||(e[f]=t(a,u?f+i:i,o,f))}function s(t,r,i){if(!c||n){var o=c;c=!0;try{e.emit(t,r,i,n)}catch(a){l([a,t,r,i])}c=o}}function p(e,n){if(Object.defineProperty&&Object.keys)try{var t=Object.keys(e);return t.forEach(function(t){Object.defineProperty(n,t,{get:function(){return e[t]},set:function(n){return e[t]=n,n}})}),n}catch(r){l([r])}for(var i in e)f.call(e,i)&&(n[i]=e[i]);return n}function l(n){try{e.emit("internal-error",n)}catch(t){}}return e||(e=i),t.inPlace=u,t.flag=a,t}},{}]},{},["loader"]);</script><link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"><link href='//fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700,900,200italic,300italic,400italic,600italic,700italic,900italic' rel='stylesheet' type='text/css'><title>JavaScript in Web Browsers - JavaScript: The Definitive Guide, 7th Edition</title><link rel="stylesheet" href="/static/CACHE/css/output.8054605313ed.css" type="text/css" /><link rel="stylesheet" type="text/css" href="/static/css/annotator.e3b0c44298fc.css"/><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"><style type="text/css" title="ibis-book">
    @charset "utf-8";#sbo-rt-content html,#sbo-rt-content div,#sbo-rt-content div,#sbo-rt-content span,#sbo-rt-content applet,#sbo-rt-content object,#sbo-rt-content iframe,#sbo-rt-content h1,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5,#sbo-rt-content h6,#sbo-rt-content p,#sbo-rt-content blockquote,#sbo-rt-content pre,#sbo-rt-content a,#sbo-rt-content abbr,#sbo-rt-content acronym,#sbo-rt-content address,#sbo-rt-content big,#sbo-rt-content cite,#sbo-rt-content code,#sbo-rt-content del,#sbo-rt-content dfn,#sbo-rt-content em,#sbo-rt-content img,#sbo-rt-content ins,#sbo-rt-content kbd,#sbo-rt-content q,#sbo-rt-content s,#sbo-rt-content samp,#sbo-rt-content small,#sbo-rt-content strike,#sbo-rt-content strong,#sbo-rt-content sub,#sbo-rt-content sup,#sbo-rt-content tt,#sbo-rt-content var,#sbo-rt-content b,#sbo-rt-content u,#sbo-rt-content i,#sbo-rt-content center,#sbo-rt-content dl,#sbo-rt-content dt,#sbo-rt-content dd,#sbo-rt-content ol,#sbo-rt-content ul,#sbo-rt-content li,#sbo-rt-content fieldset,#sbo-rt-content form,#sbo-rt-content label,#sbo-rt-content legend,#sbo-rt-content table,#sbo-rt-content caption,#sbo-rt-content tdiv,#sbo-rt-content tfoot,#sbo-rt-content thead,#sbo-rt-content tr,#sbo-rt-content th,#sbo-rt-content td,#sbo-rt-content article,#sbo-rt-content aside,#sbo-rt-content canvas,#sbo-rt-content details,#sbo-rt-content embed,#sbo-rt-content figure,#sbo-rt-content figcaption,#sbo-rt-content footer,#sbo-rt-content header,#sbo-rt-content hgroup,#sbo-rt-content menu,#sbo-rt-content nav,#sbo-rt-content output,#sbo-rt-content ruby,#sbo-rt-content section,#sbo-rt-content summary,#sbo-rt-content time,#sbo-rt-content mark,#sbo-rt-content audio,#sbo-rt-content video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}#sbo-rt-content article,#sbo-rt-content aside,#sbo-rt-content details,#sbo-rt-content figcaption,#sbo-rt-content figure,#sbo-rt-content footer,#sbo-rt-content header,#sbo-rt-content hgroup,#sbo-rt-content menu,#sbo-rt-content nav,#sbo-rt-content section{display:block}#sbo-rt-content div{line-height:1}#sbo-rt-content ol,#sbo-rt-content ul{list-style:none}#sbo-rt-content blockquote,#sbo-rt-content q{quotes:none}#sbo-rt-content blockquote:before,#sbo-rt-content blockquote:after,#sbo-rt-content q:before,#sbo-rt-content q:after{content:none}#sbo-rt-content table{border-collapse:collapse;border-spacing:0}@page{margin:5px !important}#sbo-rt-content p{margin:10px 0 0;line-height:125%;text-align:left}#sbo-rt-content p.byline{text-align:left;margin:-33px auto 35px;font-style:italic;font-weight:bold}#sbo-rt-content div.preface p+p.byline{margin:1em 0 0 !important}#sbo-rt-content div.preface p.byline+p.byline{margin:0 !important}#sbo-rt-content div.sect1>p.byline{margin:-.25em 0 1em}#sbo-rt-content div.sect1>p.byline+p.byline{margin-top:-1em}#sbo-rt-content em{font-style:italic;font-family:inherit}#sbo-rt-content em strong,#sbo-rt-content strong em{font-weight:bold;font-style:italic;font-family:inherit}#sbo-rt-content strong,#sbo-rt-content span.bold{font-weight:bold}#sbo-rt-content em.replaceable{font-style:italic}#sbo-rt-content strong.userinput{font-weight:bold;font-style:normal}#sbo-rt-content span.bolditalic{font-weight:bold;font-style:italic}#sbo-rt-content a.ulink,#sbo-rt-content a.xref,#sbo-rt-content a.email,#sbo-rt-content a.link,#sbo-rt-content a{text-decoration:none;color:#8e0012}#sbo-rt-content span.lineannotation{font-style:italic;color:#a62a2a;font-family:serif}#sbo-rt-content span.underline{text-decoration:underline}#sbo-rt-content span.strikethrough{text-decoration:line-through}#sbo-rt-content span.smallcaps{font-variant:small-caps}#sbo-rt-content span.cursor{background:#000;color:#fff}#sbo-rt-content span.smaller{font-size:75%}#sbo-rt-content .boxedtext,#sbo-rt-content .keycap{border-style:solid;border-width:1px;border-color:#000;padding:1px}#sbo-rt-content span.gray50{color:#7F7F7F;}#sbo-rt-content h1,#sbo-rt-content div.toc-title,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5{-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;font-weight:bold;text-align:left;page-break-after:avoid !important;font-family:sans-serif,"DejaVuSans"}#sbo-rt-content div.toc-title{font-size:1.5em;margin-top:20px !important;margin-bottom:30px !important}#sbo-rt-content section[data-type="sect1"] h1{font-size:1.3em;color:#8e0012;margin:40px 0 8px 0}#sbo-rt-content section[data-type="sect2"] h2{font-size:1.1em;margin:30px 0 8px 0 !important}#sbo-rt-content section[data-type="sect3"] h3{font-size:1em;color:#555;margin:20px 0 8px 0 !important}#sbo-rt-content section[data-type="sect4"] h4{font-size:1em;font-weight:normal;font-style:italic;margin:15px 0 6px 0 !important}#sbo-rt-content section[data-type="chapter"]>div>h1,#sbo-rt-content section[data-type="preface"]>div>h1,#sbo-rt-content section[data-type="appendix"]>div>h1,#sbo-rt-content section[data-type="glossary"]>div>h1,#sbo-rt-content section[data-type="bibliography"]>div>h1,#sbo-rt-content section[data-type="index"]>div>h1{font-size:2em;line-height:1;margin-bottom:50px;color:#000;padding-bottom:10px;border-bottom:1px solid #000}#sbo-rt-content span.label,#sbo-rt-content span.keep-together{font-size:inherit;font-weight:inherit}#sbo-rt-content div[data-type="part"] h1{font-size:2em;text-align:center;margin-top:0 !important;margin-bottom:50px;padding:50px 0 10px 0;border-bottom:1px solid #000}#sbo-rt-content img.width-ninety{width:90%}#sbo-rt-content img{max-width:95%;margin:0 auto;padding:0}#sbo-rt-content div.figure{background-color:transparent;text-align:center !important;margin:15px auto !important;page-break-inside:avoid}#sbo-rt-content figure{margin:15px auto !important;page-break-inside:avoid}#sbo-rt-content div.figure h6,#sbo-rt-content figure h6,#sbo-rt-content figure figcaption{font-size:.9rem !important;text-align:center;font-weight:normal !important;font-style:italic;font-family:serif !important;text-transform:none !important;letter-spacing:normal !important;color:#000;padding-top:.25em !important;margin-top:0 !important;page-break-before:avoid}#sbo-rt-content div.informalfigure{text-align:center !important;padding:5px 0 !important}#sbo-rt-content div.sidebar{margin:15px 0 10px 0 !important;border:1px solid #DCDCDC;background-color:#F7F7F7;padding:15px !important;page-break-inside:avoid}#sbo-rt-content aside[data-type="sidebar"]{margin:15px 0 10px 0 !important;page-break-inside:avoid}#sbo-rt-content div.sidebar-title,#sbo-rt-content aside[data-type="sidebar"] h5{font-weight:bold;font-size:1em;font-family:sans-serif;text-transform:uppercase;letter-spacing:1px;text-align:center;margin:4px 0 6px 0 !important;page-break-inside:avoid}#sbo-rt-content div.sidebar ol,#sbo-rt-content div.sidebar ul,#sbo-rt-content aside[data-type="sidebar"] ol,#sbo-rt-content aside[data-type="sidebar"] ul{margin-left:1.25em !important}#sbo-rt-content div.sidebar div.figure p.title,#sbo-rt-content aside[data-type="sidebar"] figcaption,#sbo-rt-content div.sidebar div.informalfigure div.caption{font-size:90%;text-align:center;font-weight:normal;font-style:italic;font-family:serif !important;color:#000;padding:5px !important;page-break-before:avoid;page-break-after:avoid}#sbo-rt-content div.sidebar div.tip,#sbo-rt-content div.sidebar div[data-type="tip"],#sbo-rt-content div.sidebar div.note,#sbo-rt-content div.sidebar div[data-type="note"],#sbo-rt-content div.sidebar div.warning,#sbo-rt-content div.sidebar div[data-type="warning"],#sbo-rt-content div.sidebar div[data-type="caution"],#sbo-rt-content div.sidebar div[data-type="important"]{margin:20px auto 20px auto !important;font-size:90%;width:85%}#sbo-rt-content aside[data-type="sidebar"] p.byline{font-size:90%;font-weight:bold;font-style:italic;text-align:center;text-indent:0;margin:5px auto 6px;page-break-after:avoid}#sbo-rt-content pre{white-space:pre-wrap;font-family:"Ubuntu Mono",monospace;margin:25px 0 25px 20px;font-size:85%;display:block;-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;overflow-wrap:break-word}#sbo-rt-content div.note pre.programlisting,#sbo-rt-content div.tip pre.programlisting,#sbo-rt-content div.warning pre.programlisting,#sbo-rt-content div.caution pre.programlisting,#sbo-rt-content div.important pre.programlisting{margin-bottom:0}#sbo-rt-content code{font-family:"Ubuntu Mono",monospace;-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none;overflow-wrap:break-word}#sbo-rt-content code strong em,#sbo-rt-content code em strong,#sbo-rt-content pre em strong,#sbo-rt-content pre strong em,#sbo-rt-content strong code em code,#sbo-rt-content em code strong code,#sbo-rt-content span.bolditalic code{font-weight:bold;font-style:italic;font-family:"Ubuntu Mono BoldItal",monospace}#sbo-rt-content code em,#sbo-rt-content em code,#sbo-rt-content pre em,#sbo-rt-content em.replaceable{font-family:"Ubuntu Mono Ital",monospace;font-style:italic}#sbo-rt-content code strong,#sbo-rt-content strong code,#sbo-rt-content pre strong,#sbo-rt-content strong.userinput{font-family:"Ubuntu Mono Bold",monospace;font-weight:bold}#sbo-rt-content div[data-type="example"]{margin:10px 0 15px 0 !important}#sbo-rt-content div[data-type="example"] h1,#sbo-rt-content div[data-type="example"] h2,#sbo-rt-content div[data-type="example"] h3,#sbo-rt-content div[data-type="example"] h4,#sbo-rt-content div[data-type="example"] h5,#sbo-rt-content div[data-type="example"] h6{font-style:italic;font-weight:normal;text-align:left !important;text-transform:none !important;font-family:serif !important;margin:10px 0 5px 0 !important;border-bottom:1px solid #000}#sbo-rt-content li pre.example{padding:10px 0 !important}#sbo-rt-content div[data-type="example"] pre[data-type="programlisting"],#sbo-rt-content div[data-type="example"] pre[data-type="screen"]{margin:0}#sbo-rt-content section[data-type="titlepage"]>div>h1{font-size:2em;margin:50px 0 10px 0 !important;line-height:1;text-align:center}#sbo-rt-content section[data-type="titlepage"] h2,#sbo-rt-content section[data-type="titlepage"] p.subtitle,#sbo-rt-content section[data-type="titlepage"] p[data-type="subtitle"]{font-size:1.3em;font-weight:normal;text-align:center;margin-top:.5em;color:#555}#sbo-rt-content section[data-type="titlepage"]>div>h2[data-type="author"],#sbo-rt-content section[data-type="titlepage"] p.author{font-size:1.3em;font-family:serif !important;font-weight:bold;margin:50px 0 !important;text-align:center}#sbo-rt-content section[data-type="titlepage"] p.edition{text-align:center;text-transform:uppercase;margin-top:2em}#sbo-rt-content section[data-type="titlepage"]{text-align:center}#sbo-rt-content section[data-type="titlepage"]:after{content:url(css_assets/titlepage_footer_ebook.png);margin:0 auto;max-width:80%}#sbo-rt-content div.book div.titlepage div.publishername{margin-top:60%;margin-bottom:20px;text-align:center;font-size:1.25em}#sbo-rt-content div.book div.titlepage div.locations p{margin:0;text-align:center}#sbo-rt-content div.book div.titlepage div.locations p.cities{font-size:80%;text-align:center;margin-top:5px}#sbo-rt-content section.preface[title="Dedication"]>div.titlepage h2.title{text-align:center;text-transform:uppercase;font-size:1.5em;margin-top:50px;margin-bottom:50px}#sbo-rt-content ul.stafflist{margin:15px 0 15px 20px !important}#sbo-rt-content ul.stafflist li{list-style-type:none;padding:5px 0}#sbo-rt-content ul.printings li{list-style-type:none}#sbo-rt-content section.preface[title="Dedication"] p{font-style:italic;text-align:center}#sbo-rt-content div.colophon h1.title{font-size:1.3em;margin:0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon h2.subtitle{margin:0 !important;color:#000;font-family:serif !important;font-size:1em;font-weight:normal}#sbo-rt-content div.colophon div.author h3.author{font-size:1.1em;font-family:serif !important;margin:10px 0 0 !important;font-weight:normal}#sbo-rt-content div.colophon div.editor h4,#sbo-rt-content div.colophon div.editor h3.editor{color:#000;font-size:.8em;margin:15px 0 0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon div.editor h3.editor{font-size:.8em;margin:0 !important;font-family:serif !important;font-weight:normal}#sbo-rt-content div.colophon div.publisher{margin-top:10px}#sbo-rt-content div.colophon div.publisher p,#sbo-rt-content div.colophon div.publisher span.publishername{margin:0;font-size:.8em}#sbo-rt-content div.legalnotice p,#sbo-rt-content div.timestamp p{font-size:.8em}#sbo-rt-content div.timestamp p{margin-top:10px}#sbo-rt-content div.colophon[title="About the Author"] h1.title,#sbo-rt-content div.colophon[title="Colophon"] h1.title{font-size:1.5em;margin:0 !important;font-family:sans-serif !important}#sbo-rt-content section.chapter div.titlepage div.author{margin:10px 0 10px 0}#sbo-rt-content section.chapter div.titlepage div.author div.affiliation{font-style:italic}#sbo-rt-content div.attribution{margin:5px 0 0 50px !important}#sbo-rt-content h3.author span.orgname{display:none}#sbo-rt-content div.epigraph{margin:10px 0 10px 20px !important;page-break-inside:avoid;font-size:90%}#sbo-rt-content div.epigraph p{font-style:italic}#sbo-rt-content blockquote,#sbo-rt-content div.blockquote{margin:10px !important;page-break-inside:avoid;font-size:95%}#sbo-rt-content blockquote p,#sbo-rt-content div.blockquote p{font-style:italic;margin:.75em 0 0 !important}#sbo-rt-content blockquote div.attribution,#sbo-rt-content blockquote p[data-type="attribution"]{margin:5px 0 10px 30px !important;text-align:right;width:80%}#sbo-rt-content blockquote div.attribution p,#sbo-rt-content blockquote p[data-type="attribution"]{font-style:normal;margin-top:5px}#sbo-rt-content blockquote div.attribution p:before,#sbo-rt-content blockquote p[data-type="attribution"]:before{font-style:normal;content:"—";-webkit-hyphens:none;hyphens:none;adobe-hyphenate:none}#sbo-rt-content p.right{text-align:right;margin:0}#sbo-rt-content div[data-type="footnotes"]{border-top:1px solid black;margin-top:2em}#sbo-rt-content sub,#sbo-rt-content sup{font-size:75%;line-height:0;position:relative}#sbo-rt-content sup{top:-.5em}#sbo-rt-content sub{bottom:-.25em}#sbo-rt-content p[data-type="footnote"]{font-size:90% !important;line-height:1.2em !important;margin-left:2.5em !important;text-indent:-2.3em !important}#sbo-rt-content p[data-type="footnote"] sup{display:inline-block !important;position:static !important;width:2em !important;text-align:right !important;font-size:100% !important;padding-right:.5em !important}#sbo-rt-content p[data-type="footnote"] a[href$="-marker"]{font-family:sans-serif !important;font-size:90% !important;color:#8e0012 !important}#sbo-rt-content p[data-type="footnote"] a[data-type="xref"]{margin:0 !important;padding:0 !important;text-indent:0 !important}#sbo-rt-content a[data-type="noteref"]{font-family:sans-serif !important;color:#8e0012;margin-left:0;padding-left:0}#sbo-rt-content div.refentry p.refname{font-size:1em;font-family:sans-serif,"DejaVuSans";font-weight:bold;margin-bottom:5px;overflow:auto;width:100%}#sbo-rt-content div.refentry{width:100%;display:block;margin-top:2em}#sbo-rt-content div.refsynopsisdiv{display:block;clear:both}#sbo-rt-content div.refentry header{page-break-inside:avoid !important;display:block;break-inside:avoid !important;padding-top:0;border-bottom:1px solid #000}#sbo-rt-content div.refsect1 h6{font-size:.9em;font-family:sans-serif,"DejaVuSans";font-weight:bold}#sbo-rt-content div.refsect1{margin-top:3em}#sbo-rt-content dl{margin-bottom:1.5em !important}#sbo-rt-content dt{padding-top:10px !important;padding-bottom:0 !important;line-height:1.25rem;font-style:italic}#sbo-rt-content dd{margin:10px 0 .25em 1.5em !important;line-height:1.65em !important}#sbo-rt-content dd p{padding:0 !important;margin:0 0 10px !important}#sbo-rt-content dd ol,#sbo-rt-content dd ul{padding-left:1em}#sbo-rt-content dd li{margin-top:0;margin-bottom:0}#sbo-rt-content dd,#sbo-rt-content li{text-align:left}#sbo-rt-content ul,#sbo-rt-content ul>li,#sbo-rt-content ol ul,#sbo-rt-content ol ul>li,#sbo-rt-content ul ol ul,#sbo-rt-content ul ol ul>li{list-style-type:disc}#sbo-rt-content ul ul,#sbo-rt-content ul ul>li{list-style-type:square}#sbo-rt-content ul ul ul,#sbo-rt-content ul ul ul>li{list-style-type:circle}#sbo-rt-content ol,#sbo-rt-content ol>li,#sbo-rt-content ol ul ol,#sbo-rt-content ol ul ol>li,#sbo-rt-content ul ol,#sbo-rt-content ul ol>li{list-style-type:decimal}#sbo-rt-content ol ol,#sbo-rt-content ol ol>li{list-style-type:lower-alpha}#sbo-rt-content ol ol ol,#sbo-rt-content ol ol ol>li{list-style-type:lower-roman}#sbo-rt-content ol,#sbo-rt-content ul{list-style-position:outside;margin:15px 0 15px 1.25em;padding-left:2.25em}#sbo-rt-content ol li,#sbo-rt-content ul li{margin:.5em 0 .65em;line-height:125%}#sbo-rt-content div.orderedlistalpha{list-style-type:upper-alpha}#sbo-rt-content table.simplelist,#sbo-rt-content ul.simplelist{margin:15px 0 15px 20px !important}#sbo-rt-content ul.simplelist li{list-style-type:none;padding:5px 0}#sbo-rt-content table.simplelist td{border:none}#sbo-rt-content table.simplelist tr{border-bottom:none}#sbo-rt-content table.simplelist tr:nth-of-type(even){background-color:transparent}#sbo-rt-content dl.calloutlist p:first-child{margin-top:-25px !important}#sbo-rt-content dl.calloutlist dd{padding-left:0;margin-top:-25px}#sbo-rt-content dl.calloutlist img,#sbo-rt-content a.co img{padding:0}#sbo-rt-content div.toc ol{margin-top:8px !important;margin-bottom:8px !important;margin-left:0 !important;padding-left:0 !important}#sbo-rt-content div.toc ol ol{margin-left:30px !important;padding-left:0 !important}#sbo-rt-content div.toc ol li{list-style-type:none}#sbo-rt-content div.toc a{color:#8e0012}#sbo-rt-content div.toc ol a{font-size:1em;font-weight:bold}#sbo-rt-content div.toc ol>li>ol a{font-weight:bold;font-size:1em}#sbo-rt-content div.toc ol>li>ol>li>ol a{text-decoration:none;font-weight:normal;font-size:1em}#sbo-rt-content div.tip,#sbo-rt-content div[data-type="tip"],#sbo-rt-content div.note,#sbo-rt-content div[data-type="note"],#sbo-rt-content div.warning,#sbo-rt-content div[data-type="warning"],#sbo-rt-content div[data-type="caution"],#sbo-rt-content div[data-type="important"]{margin:30px !important;font-size:90%;padding:10px 8px 20px 8px !important;page-break-inside:avoid}#sbo-rt-content div.tip ol,#sbo-rt-content div.tip ul,#sbo-rt-content div[data-type="tip"] ol,#sbo-rt-content div[data-type="tip"] ul,#sbo-rt-content div.note ol,#sbo-rt-content div.note ul,#sbo-rt-content div[data-type="note"] ol,#sbo-rt-content div[data-type="note"] ul,#sbo-rt-content div.warning ol,#sbo-rt-content div.warning ul,#sbo-rt-content div[data-type="warning"] ol,#sbo-rt-content div[data-type="warning"] ul,#sbo-rt-content div[data-type="caution"] ol,#sbo-rt-content div[data-type="caution"] ul,#sbo-rt-content div[data-type="important"] ol,#sbo-rt-content div[data-type="important"] ul{margin-left:1.5em !important}#sbo-rt-content div.tip,#sbo-rt-content div[data-type="tip"],#sbo-rt-content div.note,#sbo-rt-content div[data-type="note"]{border:1px solid #BEBEBE;background-color:transparent}#sbo-rt-content div.warning,#sbo-rt-content div[data-type="warning"],#sbo-rt-content div[data-type="caution"],#sbo-rt-content div[data-type="important"]{border:1px solid #BC8F8F}#sbo-rt-content div.tip h3,#sbo-rt-content div[data-type="tip"] h6,#sbo-rt-content div[data-type="tip"] h1,#sbo-rt-content div.note h3,#sbo-rt-content div[data-type="note"] h6,#sbo-rt-content div[data-type="note"] h1,#sbo-rt-content div.warning h3,#sbo-rt-content div[data-type="warning"] h6,#sbo-rt-content div[data-type="warning"] h1,#sbo-rt-content div[data-type="caution"] h6,#sbo-rt-content div[data-type="caution"] h1,#sbo-rt-content div[data-type="important"] h1,#sbo-rt-content div[data-type="important"] h6{font-weight:bold;font-size:110%;font-family:sans-serif !important;text-transform:uppercase;letter-spacing:1px;text-align:center;margin:4px 0 6px !important}#sbo-rt-content div[data-type="tip"] figure h6,#sbo-rt-content div[data-type="note"] figure h6,#sbo-rt-content div[data-type="warning"] figure h6,#sbo-rt-content div[data-type="caution"] figure h6,#sbo-rt-content div[data-type="important"] figure h6{font-family:serif !important}#sbo-rt-content div.tip h3,#sbo-rt-content div[data-type="tip"] h6,#sbo-rt-content div.note h3,#sbo-rt-content div[data-type="note"] h6,#sbo-rt-content div[data-type="tip"] h1,#sbo-rt-content div[data-type="note"] h1{color:#737373}#sbo-rt-content div.warning h3,#sbo-rt-content div[data-type="warning"] h6,#sbo-rt-content div[data-type="caution"] h6,#sbo-rt-content div[data-type="important"] h6,#sbo-rt-content div[data-type="warning"] h1,#sbo-rt-content div[data-type="caution"] h1,#sbo-rt-content div[data-type="important"] h1{color:#C67171}#sbo-rt-content div.sect1[title="Safari® Books Online"] div.note,#sbo-rt-content div.safarienabled{background-color:transparent;margin:8px 0 0 !important;border:0 solid #BEBEBE;font-size:100%;padding:0 !important;page-break-inside:avoid}#sbo-rt-content div.sect1[title="Safari® Books Online"] div.note h3,#sbo-rt-content div.safarienabled h6{display:none}#sbo-rt-content div.table,#sbo-rt-content table{margin:15px 0 30px 0 !important;max-width:95%;border:none !important;background:none;display:table !important}#sbo-rt-content div.table,#sbo-rt-content div.informaltable,#sbo-rt-content table{page-break-inside:avoid}#sbo-rt-content table li{margin:10px 0 0 .25em !important}#sbo-rt-content tr,#sbo-rt-content tr td{border-bottom:1px solid #c3c3c3}#sbo-rt-content thead td,#sbo-rt-content thead th{border-bottom:#9d9d9d 1px solid !important;border-top:#9d9d9d 1px solid !important}#sbo-rt-content tr:nth-of-type(even){background-color:#f1f6fc}#sbo-rt-content thead{font-family:sans-serif;font-weight:bold}#sbo-rt-content td,#sbo-rt-content th{display:table-cell;padding:.3em;text-align:left;vertical-align:top;font-size:80%}#sbo-rt-content th{vertical-align:bottom}#sbo-rt-content div.informaltable table{margin:10px auto !important}#sbo-rt-content div.informaltable table tr{border-bottom:none}#sbo-rt-content div.informaltable table tr:nth-of-type(even){background-color:transparent}#sbo-rt-content div.informaltable td,#sbo-rt-content div.informaltable th{border:#9d9d9d 1px solid}#sbo-rt-content div.table-title,#sbo-rt-content table caption{font-weight:normal;font-style:italic;font-family:serif;font-size:1em;margin:10px 0 10px 0 !important;padding:0;page-break-after:avoid;text-align:left !important}#sbo-rt-content table code{font-size:smaller;word-break:break-all}#sbo-rt-content table.border tbody>tr:last-child>td{border-bottom:transparent}#sbo-rt-content div.equation,#sbo-rt-content div[data-type="equation"]{margin:10px 0 15px 0 !important}#sbo-rt-content div.equation-title,#sbo-rt-content div[data-type="equation"] h5{font-style:italic;font-weight:normal;font-family:serif !important;font-size:90%;margin:20px 0 10px 0 !important;page-break-after:avoid}#sbo-rt-content div.equation-contents{margin-left:20px}#sbo-rt-content div[data-type="equation"] math{font-size:calc(.35em + 1vw)}#sbo-rt-content span.inlinemediaobject{height:.85em;display:inline-block;margin-bottom:.2em}#sbo-rt-content span.inlinemediaobject img{margin:0;height:.85em}#sbo-rt-content div.informalequation{margin:20px 0 20px 20px;width:75%}#sbo-rt-content div.informalequation img{width:75%}#sbo-rt-content div.index{text-indent:0}#sbo-rt-content div.index h3{padding:.25em;margin-top:1em !important;background-color:#F0F0F0}#sbo-rt-content div.index li{line-height:130%;list-style-type:none}#sbo-rt-content div.index a.indexterm{color:#8e0012 !important}#sbo-rt-content div.index ul{margin-left:0 !important;padding-left:0 !important}#sbo-rt-content div.index ul ul{margin-left:2em !important;margin-top:0 !important}#sbo-rt-content code.boolean,#sbo-rt-content .navy{color:rgb(0,0,128);}#sbo-rt-content code.character,#sbo-rt-content .olive{color:rgb(128,128,0);}#sbo-rt-content code.comment,#sbo-rt-content .blue{color:rgb(0,0,255);}#sbo-rt-content code.conditional,#sbo-rt-content .limegreen{color:rgb(50,205,50);}#sbo-rt-content code.constant,#sbo-rt-content .darkorange{color:rgb(255,140,0);}#sbo-rt-content code.debug,#sbo-rt-content .darkred{color:rgb(139,0,0);}#sbo-rt-content code.define,#sbo-rt-content .darkgoldenrod,#sbo-rt-content .gold{color:rgb(184,134,11);}#sbo-rt-content code.delimiter,#sbo-rt-content .dimgray{color:rgb(105,105,105);}#sbo-rt-content code.error,#sbo-rt-content .red{color:rgb(255,0,0);}#sbo-rt-content code.exception,#sbo-rt-content .salmon{color:rgb(250,128,11);}#sbo-rt-content code.float,#sbo-rt-content .steelblue{color:rgb(70,130,180);}#sbo-rt-content pre code.function,#sbo-rt-content .green{color:rgb(0,128,0);}#sbo-rt-content code.identifier,#sbo-rt-content .royalblue{color:rgb(65,105,225);}#sbo-rt-content code.ignore,#sbo-rt-content .gray{color:rgb(128,128,128);}#sbo-rt-content code.include,#sbo-rt-content .purple{color:rgb(128,0,128);}#sbo-rt-content code.keyword,#sbo-rt-content .sienna{color:rgb(160,82,45);}#sbo-rt-content code.label,#sbo-rt-content .deeppink{color:rgb(255,20,147);}#sbo-rt-content code.macro,#sbo-rt-content .orangered{color:rgb(255,69,0);}#sbo-rt-content code.number,#sbo-rt-content .brown{color:rgb(165,42,42);}#sbo-rt-content code.operator,#sbo-rt-content .black{color:#000;}#sbo-rt-content code.preCondit,#sbo-rt-content .teal{color:rgb(0,128,128);}#sbo-rt-content code.preProc,#sbo-rt-content .fuschia{color:rgb(255,0,255);}#sbo-rt-content code.repeat,#sbo-rt-content .indigo{color:rgb(75,0,130);}#sbo-rt-content code.special,#sbo-rt-content .saddlebrown{color:rgb(139,69,19);}#sbo-rt-content code.specialchar,#sbo-rt-content .magenta{color:rgb(255,0,255);}#sbo-rt-content code.specialcomment,#sbo-rt-content .seagreen{color:rgb(46,139,87);}#sbo-rt-content code.statement,#sbo-rt-content .forestgreen{color:rgb(34,139,34);}#sbo-rt-content code.storageclass,#sbo-rt-content .plum{color:rgb(221,160,221);}#sbo-rt-content code.string,#sbo-rt-content .darkred{color:rgb(139,0,0);}#sbo-rt-content code.structure,#sbo-rt-content .chocolate{color:rgb(210,106,30);}#sbo-rt-content code.tag,#sbo-rt-content .darkcyan{color:rgb(0,139,139);}#sbo-rt-content code.todo,#sbo-rt-content .black{color:#000;}#sbo-rt-content code.type,#sbo-rt-content .mediumslateblue{color:rgb(123,104,238);}#sbo-rt-content code.typedef,#sbo-rt-content .darkgreen{color:rgb(0,100,0);}#sbo-rt-content code.underlined{text-decoration:underline;}#sbo-rt-content pre code.hll{background-color:#ffc}#sbo-rt-content pre code.c{color:#09F;font-style:italic}#sbo-rt-content pre code.err{color:#A00}#sbo-rt-content pre code.k{color:#069;font-weight:bold}#sbo-rt-content pre code.o{color:#555}#sbo-rt-content pre code.cm{color:#35586C;font-style:italic}#sbo-rt-content pre code.cp{color:#099}#sbo-rt-content pre code.c1{color:#35586C;font-style:italic}#sbo-rt-content pre code.cs{color:#35586C;font-weight:bold;font-style:italic}#sbo-rt-content pre code.gd{background-color:#FCC}#sbo-rt-content pre code.ge{font-style:italic}#sbo-rt-content pre code.gr{color:#F00}#sbo-rt-content pre code.gh{color:#030;font-weight:bold}#sbo-rt-content pre code.gi{background-color:#CFC}#sbo-rt-content pre code.go{color:#000}#sbo-rt-content pre code.gp{color:#009;font-weight:bold}#sbo-rt-content pre code.gs{font-weight:bold}#sbo-rt-content pre code.gu{color:#030;font-weight:bold}#sbo-rt-content pre code.gt{color:#9C6}#sbo-rt-content pre code.kc{color:#069;font-weight:bold}#sbo-rt-content pre code.kd{color:#069;font-weight:bold}#sbo-rt-content pre code.kn{color:#069;font-weight:bold}#sbo-rt-content pre code.kp{color:#069}#sbo-rt-content pre code.kr{color:#069;font-weight:bold}#sbo-rt-content pre code.kt{color:#078;font-weight:bold}#sbo-rt-content pre code.m{color:#F60}#sbo-rt-content pre code.s{color:#C30}#sbo-rt-content pre code.na{color:#309}#sbo-rt-content pre code.nb{color:#366}#sbo-rt-content pre code.nc{color:#0A8;font-weight:bold}#sbo-rt-content pre code.no{color:#360}#sbo-rt-content pre code.nd{color:#99F}#sbo-rt-content pre code.ni{color:#999;font-weight:bold}#sbo-rt-content pre code.ne{color:#C00;font-weight:bold}#sbo-rt-content pre code.nf{color:#C0F}#sbo-rt-content pre code.nl{color:#99F}#sbo-rt-content pre code.nn{color:#0CF;font-weight:bold}#sbo-rt-content pre code.nt{color:#309;font-weight:bold}#sbo-rt-content pre code.nv{color:#033}#sbo-rt-content pre code.ow{color:#000;font-weight:bold}#sbo-rt-content pre code.w{color:#bbb}#sbo-rt-content pre code.mf{color:#F60}#sbo-rt-content pre code.mh{color:#F60}#sbo-rt-content pre code.mi{color:#F60}#sbo-rt-content pre code.mo{color:#F60}#sbo-rt-content pre code.sb{color:#C30}#sbo-rt-content pre code.sc{color:#C30}#sbo-rt-content pre code.sd{color:#C30;font-style:italic}#sbo-rt-content pre code.s2{color:#C30}#sbo-rt-content pre code.se{color:#C30;font-weight:bold}#sbo-rt-content pre code.sh{color:#C30}#sbo-rt-content pre code.si{color:#A00}#sbo-rt-content pre code.sx{color:#C30}#sbo-rt-content pre code.sr{color:#3AA}#sbo-rt-content pre code.s1{color:#C30}#sbo-rt-content pre code.ss{color:#A60}#sbo-rt-content pre code.bp{color:#366}#sbo-rt-content pre code.vc{color:#033}#sbo-rt-content pre code.vg{color:#033}#sbo-rt-content pre code.vi{color:#033}#sbo-rt-content pre code.il{color:#F60}#sbo-rt-content pre code.g{color:#050}#sbo-rt-content pre code.l{color:#C60}#sbo-rt-content pre code.l{color:#F90}#sbo-rt-content pre code.n{color:#008}#sbo-rt-content pre code.nx{color:#008}#sbo-rt-content pre code.py{color:#96F}#sbo-rt-content pre code.p{color:#000}#sbo-rt-content pre code.x{color:#F06}#sbo-rt-content div.blockquote_sampler_toc{width:95%;margin:5px 5px 5px 10px !important}#sbo-rt-content div{font-family:serif;text-align:left}#sbo-rt-content .gray-background,#sbo-rt-content .reverse-video{background:#2E2E2E;color:#FFF}#sbo-rt-content .light-gray-background{background:#A0A0A0}#sbo-rt-content .preserve-whitespace{white-space:pre-wrap}#sbo-rt-content pre.break-code,#sbo-rt-content code.break-code,#sbo-rt-content .break-code pre,#sbo-rt-content .break-code code{word-break:break-all}#sbo-rt-content span.gray{color:#4C4C4C}#sbo-rt-content .width-10,#sbo-rt-content figure.width-10 img{width:10% !important}#sbo-rt-content .width-20,#sbo-rt-content figure.width-20 img{width:20% !important}#sbo-rt-content .width-30,#sbo-rt-content figure.width-30 img{width:30% !important}#sbo-rt-content .width-40,#sbo-rt-content figure.width-40 img{width:40% !important}#sbo-rt-content .width-50,#sbo-rt-content figure.width-50 img{width:50% !important}#sbo-rt-content .width-60,#sbo-rt-content figure.width-60 img{width:60% !important}#sbo-rt-content .width-70,#sbo-rt-content figure.width-70 img{width:70% !important}#sbo-rt-content .width-80,#sbo-rt-content figure.width-80 img{width:80% !important}#sbo-rt-content .width-90,#sbo-rt-content figure.width-90 img{width:90% !important}#sbo-rt-content .width-full,#sbo-rt-content .width-100{width:100% !important}#sbo-rt-content .sc{text-transform:none !important}#sbo-rt-content .right{float:none !important}#sbo-rt-content a.totri-footnote{padding:0 !important}#sbo-rt-content figure.width-10,#sbo-rt-content figure.width-20,#sbo-rt-content figure.width-30,#sbo-rt-content figure.width-40,#sbo-rt-content figure.width-50,#sbo-rt-content figure.width-60,#sbo-rt-content figure.width-70,#sbo-rt-content figure.width-80,#sbo-rt-content figure.width-90{width:auto !important}#sbo-rt-content p img,#sbo-rt-content pre img{height:1em;width:1em}#sbo-rt-content .tablerule td{border-bottom:.25pt solid black !important}
    </style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781491952016/chapter/ch15.html",
          "book_id": "9781491952016",
          "chapter_uri": "ch15.html",
          "position": 0,
          "user_uuid": "fa8bb893-4c96-462f-b20f-f7d5a4c5ca13",
          "next_chapter_uri": "/library/view/javascript-the-definitive/9781491952016/ch16.html"
        
      },
      title: "JavaScript: The Definitive Guide, 7th Edition",
      author_list: "David Flanagan",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]></script><script src="/static/js/src/modernizr.8e35451ddb64.js"></script><script>
    
      

      
        
          window.PUBLIC_ANNOTATIONS = true;
        
      

      window.MOBILE_PUBLIC_ANNOTATIONS = false;

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

      window.PRIVACY_CONTROL_SWITCH = true;

      window.PUBLISHER_PAGES = true;

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://learning.oreilly.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://learning.oreilly.com/library/view/javascript-the-definitive/9781491952016/ch15.html"/><meta name="description" content=" Chapter 15. JavaScript in Web Browsers The JavaScript language was created in 1994 with the express purpose of enabling dynamic behavior in the documents displayed by web browsers. The language ... "><meta property="og:title" content="JavaScript in Web Browsers" /><meta itemprop="isPartOf" content="/library/view/javascript-the-definitive/9781491952016/" /><meta itemprop="name" content="JavaScript in Web Browsers" /><meta property="og:url" itemprop="url" content="https://learning.oreilly.com/library/view/javascript-the-definitive/9781491952016/ch15.html" /><meta property="og:site_name" content="Safari" /><meta property="og:image" itemprop="thumbnailUrl" content="https://learning.oreilly.com/library/cover/9781491952016/" /><meta property="og:description" itemprop="description" content=" Chapter 15. JavaScript in Web Browsers The JavaScript language was created in 1994 with the express purpose of enabling dynamic behavior in the documents displayed by web browsers. The language ... "><meta itemprop="inLanguage" content="en" /><meta itemprop="publisher" content="O&#39;Reilly Media, Inc." /><meta property="og:type" content="book" /><meta property="og:book:isbn" itemprop="isbn" content="9781491952023" /><meta property="og:book:author" itemprop="author" content="David Flanagan" /><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@OReillyMedia"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: <%= font_size %> !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: <%= font_family %> !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: <%= column_width %>% !important; margin: 0 auto !important; }"></style><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script>
    var dataLayer = window.dataLayer || [];

    
      window.medalliaVsgUserIdentifier = 'fa8bb893-4c96-462f-b20f-f7d5a4c5ca13';
      dataLayer.push({userIdentifier: 'fa8bb893-4c96-462f-b20f-f7d5a4c5ca13'});
      dataLayer.push({loggedIn: 'yes'});

      
        window.medalliaVsgAccountIdentifier = 'd99f26ec-be46-4420-91cd-92cccefee7c4';
        

        window.medalliaVsgIsIndividual = true;
        
          
          dataLayer.push({learningAccountType: 'individual'});
          
        

        
          dataLayer.push({learningPaidAccount: 'yes'});
        
      
    

    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
    (function () {
      var VERSION = 'V1.1';
      var AUTHOR = 'Awwad';
      if (!window.GtmHelper)
        window.GtmHelper = function () {
          var instance = this;
          var loc = document.location;
          this.version = VERSION;
          this.author = AUTHOR;
          this.readCookie = function (name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0) == ' ') c = c.substring(1, c.length);
              if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
          };
          this.createCookie = function (name, value, days, cookieDomain) {
            var domain = "";
            var expires = "";

            if (days) {
              var date = new Date();
              date.setTime(date.getTime() + Math.ceil(days * 24 * 60 * 60 * 1000));
              var expires = " expires=" + date.toGMTString() + ";";
            }

            if (typeof (cookieDomain) != 'undefined')
              domain = " domain=" + cookieDomain + "; ";

            document.cookie = name + "=" + value + ";" + expires + domain + "path=/";
          };

          this.isDuplicated = function (currentTransactionId) {
            // the previous transaction id:
            var previousTransIdValue = this.readCookie("previousTransId");

            if (currentTransactionId === previousTransIdValue) {
              return true; // Duplication
            } else {
              return false;
            }
          };
        }
    })()
  </script><script defer src="/static/js/build/vendor.80f7344608b5.js"></script><script defer src="/static/js/build/reader.d2ed5b2b52c2.js"></script></head>


<body class="reading sidenav nav-collapsed  scalefonts">

    
  <noscript> 
    <iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden">
    </iframe>
  </noscript>



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        

  


<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li><a href="/home/" class="l0 nav-icn"><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.738 14H9.254v-3.676a.617.617 0 0 0-.621-.613H7.39a.617.617 0 0 0-.62.613V14H4.284a.617.617 0 0 1-.622-.613V10.22c0-.327.132-.64.367-.87l3.547-3.493a.627.627 0 0 1 .875 0l3.54 3.499c.234.229.366.54.367.864v3.167a.617.617 0 0 1-.62.613zM7.57 2.181a.625.625 0 0 1 .882 0l5.77 5.692-.93.92-5.28-5.209-5.28 5.208-.932-.919 5.77-5.692z" /></svg><span>Home</span></a></li><li class="search"><a href="#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"/></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"/></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><?xml version="1.0" encoding="UTF-8"?><svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M8,8 C6.34321755,8 5.00013,6.65691245 5.00013,5.00013 C5.00013,3.34334755 6.34321755,2.00026001 8,2.00026001 C9.65678245,2.00026001 10.99987,3.34334755 10.99987,5.00013 C10.99987,6.65691245 9.65678245,8 8,8 Z M2.33024571,11.3523547 L2.33774538,11.3523547 C3.7622187,9.70968996 5.82947484,8.76608166 8.00374984,8.76608166 C10.1780248,8.76608166 12.245281,9.70968996 13.6697543,11.3523547 C13.8892083,11.6177474 14.0062813,11.9530021 13.99974,12.2973138 L13.99974,13.99974 L2.00026001,13.99974 L2.00026001,12.2973138 C1.99371867,11.9530021 2.11079172,11.6177474 2.33024571,11.3523547 Z" id="path-1"></path></svg><span>Your O&#39;Reilly</span></a><ul class="flyout"><li><a
                    href="/profile/"
                    class="l2 nav-icn"
                    
                  ><span>Profile</span></a></li><li><a
                    href="/history/"
                    class="l2 nav-icn"
                    
                  ><span>History</span></a></li><li><a
                    href="/playlists/"
                    class="l2 nav-icn"
                    
                  ><span>Playlists</span></a></li><li><a
                    href="/u/fa8bb893-4c96-462f-b20f-f7d5a4c5ca13/"
                    class="l2 nav-icn"
                    
                  ><span>Highlights</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.564 2.263l2.172 2.174c.17.168.264.397.264.636V11a.6.6 0 0 1-.6.6h-.6V6.2h-6V2.6a.6.6 0 0 1 .6-.6h3.527c.239 0 .468.095.637.263zM2.6 14a.6.6 0 0 1-.6-.6V6.8a.6.6 0 0 1 .6-.6h1.903a1.2 1.2 0 0 1 .849.352L6.2 7.4H11a.6.6 0 0 1 .6.6v5.4a.6.6 0 0 1-.6.6H2.6zM11 5h1.8L11 3.2V5z" /></svg><span>Featured</span></a><ul class="flyout"><li><a
                    href="/navigate-change/"
                    class="l2 nav-icn"
                    
                  ><span>Navigating Change</span></a></li><li><a
                    href="/featured/governing-change/"
                    class="l2 nav-icn"
                    
                  ><span>For Government</span></a></li><li><a
                    href="/recommendations/"
                    class="l2 nav-icn"
                    
                  ><span>Recommended</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"/></g></svg><span>Explore</span></a><ul class="flyout"><li><a
                    href="/topics/"
                    class="l2 nav-icn"
                    
                  ><span>All Topics</span></a></li><li><a
                    href="/search/?query=&amp;extended_publisher_data=true&amp;highlight=true&amp;include_assessments=false&amp;include_case_studies=true&amp;include_courses=true&amp;include_orioles=true&amp;include_playlists=true&amp;include_collections=true&amp;include_notebooks=true&amp;is_academic_institution_account=false&amp;source=user&amp;formats=book&amp;sort=publication_date&amp;facet_json=true&amp;page=0"
                    class="l2 nav-icn"
                    
                  ><span>Early Releases</span></a></li><li><a
                    href="/playlists/discover/"
                    class="l2 nav-icn"
                    
                  ><span>Shared Playlists</span></a></li><li><a
                    href="/search/?query=&amp;extended_publisher_data=true&amp;highlight=true&amp;include_assessments=false&amp;include_case_studies=true&amp;include_courses=true&amp;include_orioles=true&amp;include_playlists=true&amp;include_collections=true&amp;include_notebooks=true&amp;is_academic_institution_account=false&amp;source=user&amp;formats=book&amp;formats=case%20study&amp;formats=learning%20path&amp;formats=live%20online%20training&amp;formats=notebook&amp;formats=oriole&amp;formats=video&amp;sort=popularity&amp;facet_json=true&amp;page=0&amp;collection_type=expert"
                    class="l2 nav-icn"
                    
                  ><span>Most Popular Titles</span></a></li><li><a
                    href="/resource-centers/"
                    class="l2 nav-icn"
                    
                  ><span>Resource Centers</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.6467109,4.35328907 L14.7964612,7.51003884 C15.0678463,7.78304342 15.0678463,8.22395603 14.7964612,8.49696061 L11.6467109,11.6467109 L10.6597892,10.6597892 L13.3055794,8 L10.6597892,5.34021084 L11.6467109,4.35328907 Z M4.35328907,11.6467109 L1.20353875,8.48996116 C0.932153749,8.21695658 0.932153749,7.77604397 1.20353875,7.50303939 L4.35328907,4.35328907 L5.34021084,5.34021084 L2.69442057,8 L5.34021084,10.6597892 L4.35328907,11.6467109 Z M5.84417089,11.4997226 L8.67194674,4.50027742 L10.1838269,4.50027742 L7.35605105,11.4997226 L5.84417089,11.4997226 Z" id="Mask"></path></svg><span>Practice</span></a><ul class="flyout"><li><a
                    href="/scenarios/"
                    class="l2 nav-icn"
                    
                  ><span>Katacoda Scenarios</span></a></li><li><a
                    href="/interactive/#notebooks"
                    class="l2 nav-icn"
                    
                  ><span>Jupyter Notebooks</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><?xml version="1.0" encoding="UTF-8"?><svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M10.0440191,12.1582649 C10.177209,12.3351976 10.2476998,12.552011 10.2434767,12.7742985 L10.2434767,13.9482829 L1.96869684,13.9482829 L1.96869684,12.7742985 C1.96418597,12.536863 2.04491894,12.3056731 2.19625329,12.1226596 L2.20142503,12.1226596 C3.18373453,10.9898864 4.60930376,10.339179 6.10867266,10.339179 C7.30793519,10.339179 8.45998426,10.7554703 9.37576632,11.5017585 L14.3434936,11.5017585 L14.3434936,3.65650645 L1.65650645,3.65650645 L1.65650645,11.5017585 L2.06682298,11.5017585 L1.82063306,12.1582649 L1.32825322,12.1582649 C1.14771395,12.1582649 1,12.010551 1,11.8300117 L1,3.32825322 C1,3.14771395 1.14771395,3 1.32825322,3 L14.6717468,3 C14.852286,3 15,3.14771395 15,3.32825322 L15,11.8300117 C15,12.010551 14.852286,12.1582649 14.6717468,12.1582649 L10.0440191,12.1582649 Z M12.5483683,7.16419284 C12.6159362,7.20929881 12.6563112,7.2853432 12.6558247,7.36658194 C12.6553382,7.44782068 12.6140555,7.5233761 12.5459522,7.56766966 L10.4270949,8.91581376 C10.3903366,8.94010203 10.3431312,8.9419685 10.3045699,8.9206583 C10.2660086,8.89934811 10.2424712,8.85838696 10.2434767,8.81434055 L10.2434767,5.91510593 C10.2420711,5.86982855 10.2666257,5.82771857 10.3067229,5.80664182 C10.3468202,5.78556507 10.3954292,5.7892172 10.431927,5.81604875 L12.5483683,7.16419284 Z M6.10608679,9.81089299 C4.9635781,9.81089299 4.03739181,8.8847067 4.03739181,7.74219802 C4.03739181,6.59968933 4.9635781,5.67350304 6.10608679,5.67350304 C7.24859547,5.67350304 8.17478176,6.59968933 8.17478176,7.74219802 C8.17478176,8.8847067 7.24859547,9.81089299 6.10608679,9.81089299 Z"></path></svg><span>Sandboxes</span></a><ul class="flyout"><li><a
                    href="/scenarios/kubernetes-sandbox/9781492062820/"
                    class="l2 nav-icn"
                    
                  ><span>Kubernetes</span></a></li><li><a
                    href="/scenarios/python-sandbox/9781492062844/"
                    class="l2 nav-icn"
                    
                  ><span>Python</span></a></li><li><a
                    href="/scenarios/tensorflow-sandbox/9781492062851/"
                    class="l2 nav-icn"
                    
                  ><span>TensorFlow</span></a></li><li><a
                    href="/scenarios/ubuntu-sandbox/9781492062837/"
                    class="l2 nav-icn"
                    
                  ><span>Ubuntu</span></a></li></ul></li><li ><a
                href="/live-training/"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M13.4 9.8a.6.6 0 0 1 .6.6v1.2h-1.2l-.6 2.4H3.8l-.6-2.4H2v-1.2a.6.6 0 0 1 .6-.6h10.8zM8 5.6a1.8 1.8 0 1 1-.001-3.599A1.8 1.8 0 0 1 8 5.6zm3.6 2.35v.95H4.4v-.95c0-.167.066-.33.19-.443A5.08 5.08 0 0 1 8 6.2a5.08 5.08 0 0 1 3.41 1.307c.124.113.19.276.19.444z" /></svg><span>Attend</span></a></li><li ><a
                href="/certifications/"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M12.912 9.18L14 8.014l-1.088-1.18a.304.304 0 01-.075-.268L13.195 5l-1.535-.463a.313.313 0 01-.194-.194l-.462-1.537-1.565.358c-.09.03-.194 0-.269-.074L8.007 2 6.845 3.09a.303.303 0 01-.269.074l-1.565-.358-.462 1.537a.313.313 0 01-.194.194L2.82 5l.358 1.567a.26.26 0 01-.075.269L2 8.015l1.088 1.164c.075.075.09.18.075.269l-.358 1.567 1.535.463c.09.03.164.104.194.194l.462 1.537 1.565-.358c.015 0 .045-.015.075-.015.075 0 .15.03.209.074L8.007 14l1.163-1.09a.303.303 0 01.269-.074l1.565.358.462-1.537a.313.313 0 01.194-.194L13.195 11l-.358-1.567a.338.338 0 01.075-.254zm-6.046 1.37L4.41 8.26l1.16-1.244 1.767 1.649L10.4 5.6l1.202 1.202-4.242 4.243-.495-.495z"/></svg><span>Certifications</span></a></li><li ><a
                href="https://get.oreilly.com/email-signup.html"
                class="l1 nav-icn "
                target=&quot;_blank&quot;
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.564 2.263l2.172 2.174c.17.168.264.397.264.636V11a.6.6 0 0 1-.6.6h-.6V6.2h-6V2.6a.6.6 0 0 1 .6-.6h3.527c.239 0 .468.095.637.263zM2.6 14a.6.6 0 0 1-.6-.6V6.8a.6.6 0 0 1 .6-.6h1.903a1.2 1.2 0 0 1 .849.352L6.2 7.4H11a.6.6 0 0 1 .6.6v5.4a.6.6 0 0 1-.6.6H2.6zM11 5h1.8L11 3.2V5z" /></svg><span>Newsletters</span></a></li><li ><a
                href="/u/preferences/"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"/></g></svg><span>Settings</span></a></li><li ><a
                href="/public/support/"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M7.363 6.656a2.692 2.692 0 0 1-2.681-2.703c0-1.493 1.2-2.703 2.681-2.703a2.692 2.692 0 0 1 2.682 2.703c0 1.493-1.2 2.703-2.682 2.703zm4.023 2.027c-1.852 0-3.352 1.513-3.352 3.379H2v-1.534c-.006-.31.099-.612.295-.852a6.666 6.666 0 0 1 9.09-.993zm-.543.676h1.12v.304c.003.284.16.543.408.676a.766.766 0 0 0 .77 0l.303-.176.556.966-.302.176a.772.772 0 0 0-.362.676v.08a.772.772 0 0 0 .362.677l.302.21-.556.965-.302-.175a.766.766 0 0 0-.771 0 .778.778 0 0 0-.409.675v.352h-1.106v-.372a.778.778 0 0 0-.409-.676.766.766 0 0 0-.77 0l-.303.176-.556-.912.302-.176a.772.772 0 0 0 .362-.676v-.04-.04a.772.772 0 0 0-.362-.676l-.302-.176.556-.966.289.155a.766.766 0 0 0 .77 0 .778.778 0 0 0 .41-.676V9.36zm1.562 2.703c0-.271-.108-.531-.3-.722a1.001 1.001 0 0 0-.72-.292 1.01 1.01 0 0 0-.992 1.023 1.01 1.01 0 0 0 1.01 1.004 1.01 1.01 0 0 0 1.002-1.013z" /></svg><span>Support</span></a></li><li ><a
                href="/accounts/logout/"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M2.613 12.63A.607.607 0 0 1 2 12.03V3.602C2 3.269 2.274 3 2.613 3h5.515v1.204H3.226v7.223h4.902v1.203H2.613zM5.677 9.02V6.611h4.903V4.926a.301.301 0 0 1 .19-.274.31.31 0 0 1 .33.063l2.722 2.673a.594.594 0 0 1 0 .849L11.1 10.909a.31.31 0 0 1-.331.063.301.301 0 0 1-.19-.274V9.02H5.677z" /></svg><span>Sign Out</span></a></li></ul></div></li></ul></nav></header>



      </div>
      <div id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      JavaScript: The Definitive Guide, 7th Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls" onclick="window.Appcues.track('SearchBook_HeronBook')"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><div class="js-content-uri" data-content-uri="/api/v1/book/9781491952016/chapter/ch15.html"><div class="js-collections-dropdown collections-dropdown menu-bit-cards" onclick="window.Appcues.track('AddPlaylist_HeronBook')"></div></div></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size" onclick="window.Appcues.track('ChangeFont_HeronBook')"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share" onclick="window.Appcues.track('Share_HeronBook')"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a
        class="twitter share-button t-twitter"
        target="_blank"
        aria-label="Share this section on Twitter"
        title="Share this section on Twitter"
      
        href="https://twitter.com/share?url=https://learning.oreilly.com/library/view/javascript-the-definitive/9781491952016/ch15.html&text=JavaScript%3A%20The%20Definitive%20Guide%2C%207th%20Edition&via=OReillyMedia"
      ><span>Twitter</span></a></li><li><a
        class="facebook share-button t-facebook"
        target="_blank"
        aria-label="Share this section on Facebook"
        title="Share this section on Facebook"
        href="https://www.facebook.com/sharer/sharer.php?u=https://learning.oreilly.com/library/view/javascript-the-definitive/9781491952016/ch15.html"
      ><span>Facebook</span></a></li><li><a
        class="googleplus share-button t-googleplus"
        target="_blank"
        aria-label="Share this secton on Google Plus"
        title="Share this secton on Google Plus"
        href="https://plus.google.com/share?url=https://learning.oreilly.com/library/view/javascript-the-definitive/9781491952016/ch15.html"
      ><span>Google Plus</span></a></li><li><a
        class="email share-button t-email"
        aria-label="Share this section via email"
        title="Share this section via email"
      
        href="mailto:?subject=Safari: JavaScript%20in%20Web%20Browsers&body=https://learning.oreilly.com/library/view/javascript-the-definitive/9781491952016/ch15.html%0D%0Afrom JavaScript%3A%20The%20Definitive%20Guide%2C%207th%20Edition%0D%0A"
      ><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    
    <section role="document">
        
        




  <script defer src="/static/js/build/djangoMessagesPage.5a2202c0bdf8.js"></script>


        <script src="//fast.appcues.com/48743.js"></script>
<script>
  var userId = "fa8bb893-4c96-462f-b20f-f7d5a4c5ca13";

  var userObject = {
    firstName: "Mugunthan",
    segment: "Paid",
    admin: "False",
    profileCreatedOn: "2017-07-01",
    academic: ""
  };
  window.Appcues.identify(userId, userObject);
  window.Appcues.page();

  setTimeout(function () {
    window.Appcues.track('ViewingBook_HeronBook')
  }, 20000);
</script>


	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="/library/view/javascript-the-definitive/9781491952016/ch14.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Metaprogramming</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="/library/view/javascript-the-definitive/9781491952016/ch16.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">Server-Side JavaScript with Node</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><section data-type="chapter" epub:type="chapter" data-pdf-bookmark="Chapter 15. JavaScript in Web Browsers"><div class="chapter" id="clientside">
<h1><span class="label">Chapter 15. </span>JavaScript in Web Browsers</h1>


<p>The<a data-type="indexterm" data-primary="JavaScript" data-secondary="introduction to" data-tertiary="history of" id="idm46198511182920"></a> JavaScript language was created in 1994 with the express purpose of
enabling dynamic behavior in the documents displayed by web
browsers. The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="benefits of JavaScript" id="idm46198511255912"></a> language has evolved significantly since then, and at the
same time, the scope and capabilities of the web platform have grown
explosively. Today, JavaScript programmers can think of the web as a
full-featured platform for application development. Web browsers
specialize in the display of formatted text and images, but, like native
operating systems, browsers also provide other services, including
graphics, video, audio, networking, storage, and threading. JavaScript
is the language that enables web applications to use the services
provided by the web platform, and this chapter demonstrates how you can
use the most important of these services.</p>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="overview of" id="idm46198511253768"></a> chapter begins with the web platform’s programming model, explaining
how scripts are embedded within HTML pages (<a data-type="xref" href="#webbasics">§15.1</a>) and how
JavaScript code is triggered asynchronously by events (<a data-type="xref" href="#events">§15.2</a>). The
sections that follow this introductory material document the core JavaScript
APIs that enable your web applications to:</p>

<ul>
<li>
<p>Control document content (<a data-type="xref" href="#dom">§15.3</a>) and style (<a data-type="xref" href="#css">§15.4</a>)</p>
</li>
<li>
<p>Determine the on-screen position of document elements (<a data-type="xref" href="#geometry">§15.5</a>)</p>
</li>
<li>
<p>Create reusable user interface components (<a data-type="xref" href="#webcomponents">§15.6</a>)</p>
</li>
<li>
<p>Draw graphics (<a data-type="xref" href="#svg">§15.7</a> and <a data-type="xref" href="#canvas">§15.8</a>)</p>
</li>
<li>
<p>Play and generate sounds (<a data-type="xref" href="#audioapis">§15.9</a>)</p>
</li>
<li>
<p>Manage browser navigation and history (<a data-type="xref" href="#navigationandhistory">§15.10</a>)</p>
</li>
<li>
<p>Exchange data over the network (<a data-type="xref" href="#networking">§15.11</a>)</p>
</li>
<li>
<p>Store data on the user’s computer (<a data-type="xref" href="#storage">§15.12</a>)</p>
</li>
<li>
<p>Perform concurrent computation with threads (<a data-type="xref" href="#webworkers">§15.13</a>)</p>
</li>
</ul>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198510994536">
<h5>Client-Side JavaScript</h5>
<p>In<a data-type="indexterm" data-primary="client-side JavaScript" id="idm46198510993384"></a><a data-type="indexterm" data-primary="server-side JavaScript" id="idm46198510992648"></a><a data-type="indexterm" data-primary="front-end JavaScript" id="idm46198510991976"></a><a data-type="indexterm" data-primary="backend JavaScript" id="idm46198510991304"></a> this book, and on the web, you’ll see the term “client-side
JavaScript.” The term is simply a synonym for JavaScript written to
run in a web browser, and it stands in contrast to “server-side” code,
which runs in web servers.</p>

<p>The two “sides” refer to the two ends of
the network connection that separate the web server and the web
browser, and software development for the web typically requires code
to be written on both “sides.” Client-side and server-side are also
often called “frontend” and “backend.”</p>
</div></aside>

<p>Previous editions of this book attempted to comprehensively cover all
JavaScript APIs defined by web browsers, and as a result, this book was
too long a decade ago. The number and complexity of web APIs has
continued to grow, and I no longer think it makes sense to attempt to
cover them all in one book. As of the seventh edition, my goal is to
cover the JavaScript language definitively and to provide an in-depth
introduction to using the language with Node and with web browsers. This
chapter cannot cover all the web APIs, but it introduces the most
important ones in enough detail that you can start using them right
away. And, having learned about the core APIs covered here, you should
be able to pick up new APIs (like those summarized in <a data-type="xref" href="#furtherreading">§15.15</a>)
when and if you need them.</p>

<p>Node has a single implementation and a single authoritative source for
documentation. Web APIs, by contrast, are defined by consensus among the
major web browser vendors, and the authoritative documentation takes the
form of a specification intended for the C++ programmers who implement
the API, not for the JavaScript programmers who will use
it. Fortunately, <a href="https://developer.mozilla.org">Mozilla’s “MDN web docs” project</a> is a reliable and comprehensive source<sup><a data-type="noteref" id="idm46198510985832-marker" href="ch15.html#idm46198510985832">1</a></sup> for
web API <span class="keep-together">documentation.</span></p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198510984072">
<h5>Legacy APIs</h5>
<p>In<a data-type="indexterm" data-primary="web browser host environment" data-secondary="legacy APIs" id="idm46198510982744"></a> the 25 years since JavaScript was first released, browser vendors
have been adding features and APIs for programmers to use. Many of
those APIs are now obsolete. They include:</p>

<ul>
<li>
<p>Proprietary APIs that were never standardized and/or never
implemented by other browser vendors. Microsoft’s Internet Explorer
defined a lot of these APIs. Some (like the <code>innerHTML</code> property)
proved useful and were eventually standardized. Others (like the
<code>attachEvent()</code> method) have been obsolete for years.</p>
</li>
<li>
<p>Inefficient APIs (like the <code>document.write()</code> method) that have such
a severe performance impact that their use is no longer considered
acceptable.</p>
</li>
<li>
<p>Outdated APIs that have long since been replaced by new APIs for
achieving the same thing. An example is <code>document.bgColor</code>, which was
defined to allow JavaScript to set the background color of a
document. With the advent of CSS, <span class="keep-together"><code>document.bgColor</code></span> became a quaint
special case with no real purpose.</p>
</li>
<li>
<p>Poorly designed APIs that have been replaced by better ones. In the
early days of the web, standards committees defined the key Document
Object Model API in a language-agnostic way so that the same API
could be used in Java programs to work with XML documents on and in
JavaScript programs to work with HTML documents. This resulted in an
API that was not well suited to the JavaScript language and that had
features that web programmers didn’t particularly care about. It
took decades to recover from those early design mistakes, but
today’s web browsers support a much-improved Document Object Model.</p>
</li>
</ul>

<p>Browser vendors may need to support these legacy APIs for the
foreseeable future in order to ensure backward compatibility, but
there is no longer any need for this book to document them or for you
to learn about them. The web platform has matured and stabilized, and
if you are a seasoned web developer who remembers the fourth or fifth
edition of this book, then you may have as much outdated knowledge to
forget as you have new material to learn.</p>
</div></aside>






<section data-type="sect1" data-pdf-bookmark="15.1 Web Programming Basics"><div class="sect1" id="webbasics">
<h1>15.1 Web Programming Basics</h1>

<p>This section explains how JavaScript programs for the web are
structured, how they are loaded into a web browser, how they obtain
input, how they produce output, and how they run asynchronously by
responding to events.</p>








<section data-type="sect2" data-pdf-bookmark="15.1.1 JavaScript in HTML &lt;script&gt; Tags"><div class="sect2" id="idm46198510969976">
<h2>15.1.1 JavaScript in HTML &lt;script&gt; Tags</h2>

<p>Web<a data-type="indexterm" data-primary="HTML &lt;script&gt; tags" id="html15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="JavaScript in HTML &lt;script&gt; tags" id="WBbasscript15"></a> browsers display HTML documents. If you want a web browser to
execute JavaScript code, you must include (or reference) that code
from an HTML document, and this is what the HTML <code>&lt;script&gt;</code> tag does.</p>

<p>JavaScript code can appear inline within an HTML file between
<code>&lt;script&gt;</code> and 
<span class="keep-together"><code>&lt;/script&gt;</code></span> tags. Here, for example, is an HTML file
that includes a script tag with JavaScript code that dynamically
updates one element of the document to make it behave like a digital
clock:</p>

<pre data-type="programlisting" data-code-language="html" class="less_space pagebreak-before"><code class="cp">&lt;!DOCTYPE html&gt;</code>                 <code class="c">&lt;!-- This is an HTML5 file --&gt;</code>
<code class="nt">&lt;html&gt;</code>                          <code class="c">&lt;!-- The root element --&gt;</code>
<code class="nt">&lt;head&gt;</code>                          <code class="c">&lt;!-- Title, scripts &amp; styles can go here --&gt;</code>
<code class="nt">&lt;title&gt;</code>Digital Clock<code class="nt">&lt;/title&gt;</code>
<code class="nt">&lt;style&gt;</code>                         <code class="c">/* A CSS stylesheet for the clock */</code>
<code class="nf">#clock</code> <code class="p">{</code>                        <code class="c">/* Styles apply to element with id="clock" */</code>
  <code class="k">font</code><code class="o">:</code> <code class="nb">bold</code> <code class="m">24px</code> <code class="nb">sans-serif</code><code class="p">;</code>   <code class="c">/* Use a big bold font */</code>
  <code class="k">background</code><code class="o">:</code> <code class="m">#ddf</code><code class="p">;</code>             <code class="c">/* on a light bluish-gray background. */</code>
  <code class="k">padding</code><code class="o">:</code> <code class="m">15px</code><code class="p">;</code>                <code class="c">/* Surround it with some space */</code>
  <code class="k">border</code><code class="o">:</code> <code class="nb">solid</code> <code class="nb">black</code> <code class="m">2px</code><code class="p">;</code>      <code class="c">/* and a solid black border */</code>
  <code class="k">border-radius</code><code class="o">:</code> <code class="m">10px</code><code class="p">;</code>          <code class="c">/* with rounded corners. */</code>
<code class="p">}</code>
<code class="nt">&lt;/style&gt;</code>
<code class="nt">&lt;/head&gt;</code>
<code class="nt">&lt;body&gt;</code>                    <code class="c">&lt;!-- The body holds the content of the document. --&gt;</code>
<code class="nt">&lt;h1&gt;</code>Digital Clock<code class="nt">&lt;/h1&gt;</code>    <code class="c">&lt;!-- Display a title. --&gt;</code>
<code class="nt">&lt;span</code> <code class="na">id=</code><code class="s">"clock"</code><code class="nt">&gt;&lt;/span&gt;</code>  <code class="c">&lt;!-- We will insert the time into this element. --&gt;</code>
<code class="nt">&lt;script&gt;</code>
<code class="c1">// Define a function to display the current time</code>
<code class="kd">function</code> <code class="nx">displayTime</code><code class="p">()</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">clock</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#clock"</code><code class="p">);</code> <code class="c1">// Get element with id="clock"</code>
    <code class="kd">let</code> <code class="nx">now</code> <code class="o">=</code> <code class="k">new</code> <code class="nb">Date</code><code class="p">();</code>                         <code class="c1">// Get current time</code>
    <code class="nx">clock</code><code class="p">.</code><code class="nx">textContent</code> <code class="o">=</code> <code class="nx">now</code><code class="p">.</code><code class="nx">toLocaleTimeString</code><code class="p">();</code> <code class="c1">// Display time in the clock</code>
<code class="p">}</code>
<code class="nx">displayTime</code><code class="p">()</code>                    <code class="c1">// Display the time right away</code>
<code class="nx">setInterval</code><code class="p">(</code><code class="nx">displayTime</code><code class="p">,</code> <code class="mi">1000</code><code class="p">);</code>  <code class="c1">// And then update it every second.</code>
<code class="nt">&lt;/script&gt;</code>
<code class="nt">&lt;/body&gt;</code>
<code class="nt">&lt;/html&gt;</code></pre>

<p>Although JavaScript code can be embedded directly within a <code>&lt;script&gt;</code>
tag, it is more common to instead use the <code>src</code> attribute of the
<code>&lt;script&gt;</code> tag to specify the URL (an absolute URL or a URL relative
to the URL of the HTML file being displayed) of a file containing
JavaScript code. If we took the JavaScript code out of this
HTML file and stored it in its own <em>scripts/digital_clock.js</em>
file, then the <code>&lt;script&gt;</code> tag might reference that file of code like
this:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;script </code><code class="na">src=</code><code class="s">"scripts/digital_clock.js"</code><code class="nt">&gt;&lt;/script&gt;</code></pre>

<p>A JavaScript file contains pure JavaScript, without <code>&lt;script&gt;</code> tags or
any other HTML. By convention, files of JavaScript code have names that
end with <em>.js</em>.</p>

<p>A <code>&lt;script&gt;</code> tag with the a <code>src</code> attribute behaves exactly as
if the contents of the specified JavaScript file appeared directly
between the <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code> tags. Note that the
closing <code>&lt;/script&gt;</code> tag is required in HTML documents even when
the <code>src</code> attribute is specified: HTML does not support a <code>&lt;script/&gt;</code>
tag.</p>

<p>There are a number of advantages to using the <code>src</code> attribute:</p>

<ul>
<li>
<p>It simplifies your HTML files by allowing you to remove large blocks
of JavaScript code from them—that is, it helps keep content and
behavior separate.</p>
</li>
<li>
<p>When multiple web pages share the same JavaScript code, using the
<code>src</code> attribute allows you to maintain only a single copy of that code,
rather than having to edit each HTML file when the code changes.</p>
</li>
<li>
<p>If a file of JavaScript code is shared by more than one page, it only
needs to be downloaded once, by the first page that uses it—subsequent
pages can retrieve it from the browser cache.</p>
</li>
<li>
<p>Because the <code>src</code> attribute takes an arbitrary URL as its value, a
JavaScript program or web page from one web server can employ code
exported by other web servers. Much internet advertising relies on this
fact.</p>
</li>
</ul>










<section data-type="sect3" data-pdf-bookmark="Modules"><div class="sect3" id="idm46198510701656">
<h3>Modules</h3>

<p><a data-type="xref" href="ch10.html#es6modules">§10.3</a> documents<a data-type="indexterm" data-primary="HTML &lt;script&gt; tags" data-secondary="import and export directives" id="idm46198510699432"></a><a data-type="indexterm" data-primary="modules" data-secondary="import and export directives" id="idm46198510698488"></a> JavaScript modules and covers their <code>import</code>
and <code>export</code> directives. If you have written your JavaScript program
using modules (and have not used a code-bundling tool to combine all
your modules into a single nonmodular file of JavaScript), then you
must load the top-level module of your program with a <code>&lt;script&gt;</code> tag that
has a <code>type="module"</code> attribute. If you do this, then the module you
specify will be loaded, and all of the modules it imports will be
loaded, and (recursively) all of the modules they import will be
loaded. See <a data-type="xref" href="ch10.html#es6modules-script">§10.3.5</a> for complete details.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Specifying script type"><div class="sect3" id="idm46198510694312">
<h3>Specifying script type</h3>

<p>In<a data-type="indexterm" data-primary="HTML &lt;script&gt; tags" data-secondary="specifying script type" id="idm46198510692760"></a> the early days of the web, it was thought that browsers might some
day implement languages other than JavaScript, and programmers added
attributes like <span class="keep-together"><code>language="javascript"</code></span> and
<code>type="application/javascript"</code> to their <code>&lt;script&gt;</code> tags. This is
completely unnecessary. JavaScript is the default (and only) language
of the web. The <code>language</code> attribute is deprecated, and there are only
two reasons to use a <code>type</code> attribute on a <code>&lt;script&gt;</code> tag:</p>

<ul>
<li>
<p>To specify that the script is a module</p>
</li>
<li>
<p>To embed data into a web page without displaying it (see
<a data-type="xref" href="#elementcontent">§15.3.4</a>)</p>
</li>
</ul>
</div></section>













<section data-type="sect3" data-pdf-bookmark="When scripts run: async and deferred"><div class="sect3" id="idm46198510669032">
<h3>When scripts run: async and deferred</h3>

<p>When<a data-type="indexterm" data-primary="HTML &lt;script&gt; tags" data-secondary="synchronous script execution" id="idm46198510667528"></a><a data-type="indexterm" data-primary="synchronous script execution" id="idm46198510666552"></a><a data-type="indexterm" data-primary="blocking script execution" id="idm46198510665864"></a> JavaScript was first added to web browsers, there was no API for
traversing and manipulating the structure and content of an
already rendered document.  The only way that JavaScript code could
affect the content of a document was to generate that content on the
fly while the document was in the process of loading. It did this by using the
<code>document.write()</code> method to inject HTML text into the document at the
location of the script.</p>

<p>The use of <code>document.write()</code> is no longer considered good style, but
the fact that it is possible means that when the HTML parser
encounters a <code>&lt;script&gt;</code> element, it must, by default, run the script
just to be sure that it doesn’t output any HTML before it can resume
parsing and rendering the document. This can dramatically slow down
parsing and rendering of the web page.</p>

<p>Fortunately, this default <em>synchronous</em> or <em>blocking</em> script execution
mode is not the only option.  The <code>&lt;script&gt;</code> tag can have <code>defer</code> and
<code>async</code> attributes, which cause scripts to be executed differently.
These are boolean attributes—they don’t have a value; they just need
to be present on the <code>&lt;script&gt;</code> tag. Note that these attributes
are only meaningful when used in conjunction with the <code>src</code> attribute:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;script </code><code class="na">defer</code> <code class="na">src=</code><code class="s">"deferred.js"</code><code class="nt">&gt;&lt;/script&gt;</code>
<code class="nt">&lt;script </code><code class="na">async</code> <code class="na">src=</code><code class="s">"async.js"</code><code class="nt">&gt;&lt;/script&gt;</code></pre>

<p>Both the <code>defer</code> and <code>async</code> attributes are ways of telling the
browser that the linked script does not use <code>document.write()</code> to
generate HTML output, and that the browser, therefore, can continue to
parse and render the document while downloading the script.  The
<code>defer</code> attribute causes the browser to defer execution of the script
until after the document has been fully loaded and parsed and is ready
to be manipulated. The <code>async</code> attribute causes the browser to run the
script as soon as possible but does not block document parsing while
the script is being downloaded. If a <code>&lt;script&gt;</code> tag has both
attributes, the <code>async</code> attribute takes precedence.</p>

<p>Note that deferred scripts run in the order in which they appear in the
document. Async scripts run as they load, which means that they may
execute out of order.</p>

<p>Scripts with the <code>type="module"</code> attribute are, by default, executed
after the document has loaded, as if they had a <code>defer</code> attribute. You
can override this default with the <code>async</code> attribute, which will cause
the code to be executed as soon as the module and all of its
dependencies have loaded.</p>

<p>A simple alternative to the <code>async</code> and <code>defer</code> attributes—especially
for code that is included directly in the HTML—is to simply put your
scripts at the end of the HTML file. That way, the script can run
knowing that the document content before it has been parsed and is
ready to be manipulated.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Loading scripts on demand"><div class="sect3" id="idm46198510637320">
<h3>Loading scripts on demand</h3>

<p>Sometimes, you<a data-type="indexterm" data-primary="HTML &lt;script&gt; tags" data-secondary="loading scripts on demand" id="idm46198510635784"></a> may have JavaScript code that is not used when a
document first loads and is only needed if the user takes some action
like clicking on a button or opening a menu. If you are developing
your code using modules, you can load a module on demand with
<code>import()</code>, as described in <a data-type="xref" href="ch10.html#dynamicimports">§10.3.6</a>.</p>

<p>If you are not using modules, you can load a file of JavaScript on
demand simply by adding a <code>&lt;script&gt;</code> tag to your document when you
want the script to load:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Asynchronously load and execute a script from a specified URL</code>
<code class="c1">// Returns a Promise that resolves when the script has loaded.</code>
<code class="kd">function</code> <code class="nx">importScript</code><code class="p">(</code><code class="nx">url</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">return</code> <code class="k">new</code> <code class="nb">Promise</code><code class="p">((</code><code class="nx">resolve</code><code class="p">,</code> <code class="nx">reject</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"script"</code><code class="p">);</code> <code class="c1">// Create a &lt;script&gt; element</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">onload</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">resolve</code><code class="p">();</code> <code class="p">};</code>          <code class="c1">// Resolve promise when loaded</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">reject</code><code class="p">(</code><code class="nx">e</code><code class="p">);</code> <code class="p">};</code>        <code class="c1">// Reject on failure</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">src</code> <code class="o">=</code> <code class="nx">url</code><code class="p">;</code>                              <code class="c1">// Set the script URL</code>
        <code class="nb">document</code><code class="p">.</code><code class="nx">head</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">s</code><code class="p">);</code>                  <code class="c1">// Add &lt;script&gt; to document</code>
    <code class="p">});</code>
<code class="p">}</code></pre>

<p>This <code>importScript()</code> function uses DOM APIs (<a data-type="xref" href="#dom">§15.3</a>) to create a new
<code>&lt;script&gt;</code> tag and add it to the document <code>&lt;head&gt;</code>. And it uses event
handlers (<a data-type="xref" href="#events">§15.2</a>) to determine when the script has loaded
successfully or when loading has failed.<a data-type="indexterm" data-primary="" data-startref="WBbasscript15" id="idm46198510535336"></a><a data-type="indexterm" data-primary="" data-startref="html15" id="idm46198510534392"></a></p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.2 The Document Object Model"><div class="sect2" id="domintro">
<h2>15.1.2 The Document Object Model</h2>

<p>One<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="Document Object Model (DOM)" id="WBprogDOM15"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" id="dom15"></a> of the most important objects in client-side JavaScript
programming is the Document object—which represents the HTML document that is displayed in a
browser window or tab. The API for working with HTML documents is
known as the Document Object Model, or DOM, and it is covered in detail
in <a data-type="xref" href="#dom">§15.3</a>. But the DOM is so central to client-side JavaScript
programming that it deserves to be introduced here.</p>

<p>HTML documents contain HTML elements nested within one another, forming
a tree. Consider the following simple HTML document:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;html&gt;</code>
  <code class="nt">&lt;head&gt;</code>
    <code class="nt">&lt;title&gt;</code>Sample Document<code class="nt">&lt;/title&gt;</code>
  <code class="nt">&lt;/head&gt;</code>
  <code class="nt">&lt;body&gt;</code>
    <code class="nt">&lt;h1&gt;</code>An HTML Document<code class="nt">&lt;/h1&gt;</code>
    <code class="nt">&lt;p&gt;</code>This is a <code class="nt">&lt;i&gt;</code>simple<code class="nt">&lt;/i&gt;</code> document.
  <code class="nt">&lt;/body&gt;</code>
<code class="nt">&lt;/html&gt;</code></pre>

<p>The top-level <code>&lt;html&gt;</code> tag contains <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> tags. The
<code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> tag. And the <code>&lt;body&gt;</code> tag contains
<code>&lt;h1&gt;</code> and <code>&lt;p&gt;</code> tags. The <code>&lt;title&gt;</code> and <code>&lt;h1&gt;</code> tags contain strings
of text, and the <code>&lt;p&gt;</code> tag contains two strings of text with an <code>&lt;i&gt;</code>
tag between them.</p>

<p>The DOM API mirrors the tree structure of an HTML document. For each
HTML tag in the document, there is a corresponding JavaScript Element
object, and for each run of text in the document, there is a
corresponding Text object. The Element and Text classes, as well as the
Document class itself, are all subclasses of the more general Node
class, and Node objects are organized into a tree structure that
JavaScript can query and traverse using the DOM API. The DOM
representation of this document is the tree pictured in
<a data-type="xref" href="#documenttree">Figure 15-1</a>.</p>

<figure><div id="documenttree" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1501.png" alt="js7e 1501" width="1300" height="790">
<h6><span class="label">Figure 15-1. </span>The tree representation of an HTML document</h6>
</div></figure>

<p>If you are not already familiar with tree structures in computer
programming, it is helpful to know that they borrow terminology from
family trees. The node directly above a node is the <em>parent</em> of that
node. The nodes one level directly below another node are the
<em>children</em> of that node. Nodes at the same level, and with the same
parent, are <em>siblings</em>. The set of nodes any number of levels below
another node are the <em>descendants</em> of that node. And the parent,
grandparent, and all other nodes above a node are the <em>ancestors</em> of
that node.</p>

<p>The DOM API includes methods for creating new Element and Text nodes,
and for inserting them into the document as children of other Element
objects. There are also methods for moving elements within the
document and for removing them entirely. While a server-side
application might produce plain-text output by writing strings with
<code>console.log()</code>, a client-side JavaScript application can produce
formatted HTML output by building or manipulating the document tree
document using the DOM API.</p>

<p>There is a JavaScript class corresponding to each HTML tag type, and
each occurrence of the tag in a document is represented by an instance
of the class. The <code>&lt;body&gt;</code> tag, for example, is represented by an
instance of HTMLBodyElement, and a <code>&lt;table&gt;</code> tag is represented by an
instance of HTMLTableElement. The JavaScript element objects have
properties that correspond to the HTML attributes of the tags. For
example, instances of HTMLImageElement, which represent <code>&lt;img&gt;</code> tags,
have a <code>src</code> property that corresponds to the <code>src</code> attribute of the
tag. The initial value of the <code>src</code> property is the attribute value
that appears in the HTML tag, and setting this property with
JavaScript changes the value of the HTML attribute (and causes the
browser to load and display a new image). Most of the JavaScript
element classes just mirror the attributes of an HTML tag, but some
define additional methods. The HTMLAudioElement and HTMLVideoElement
classes, for example, define methods like <code>play()</code> and <code>pause()</code> for
controlling playback of audio and video files.<a data-type="indexterm" data-primary="" data-startref="dom15" id="idm46198510490664"></a><a data-type="indexterm" data-primary="" data-startref="WBprogDOM15" id="idm46198510489688"></a></p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.3 The Global Object in Web Browsers"><div class="sect2" id="idm46198510532984">
<h2>15.1.3 The Global Object in Web Browsers</h2>

<p>There<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="global object in web browsers" id="idm46198510487608"></a><a data-type="indexterm" data-primary="global object" id="idm46198510486392"></a> is one global object per browser window or tab (<a data-type="xref" href="ch03.html#global">§3.7</a>). All of
the JavaScript code (except code running in worker threads; see <a data-type="xref" href="#webworkers">§15.13</a>)
running in that window shares this single global object. This is true
regardless of how many scripts or modules are in the document: all the
scripts and modules of a document share a single global object; if one
script defines a property on that object, that property is visible to
all the other scripts as well.</p>

<p>The global object is where JavaScript’s standard library is
defined—the <code>parseInt()</code> function, the Math object, the Set class,
and so on. In web browsers, the global object also contains the main
entry points of various web APIs. For example, the <code>document</code> property
represents the currently displayed document, the <code>fetch()</code> method
makes HTTP network requests, and the <code>Audio()</code> constructor allows
JavaScript programs to play sounds.</p>

<p>In web browsers, the global object does double duty: in addition to
defining built-in types and functions, it also represents the current
web browser window and defines properties like <code>history</code> (<a data-type="xref" href="#history">§15.10.2</a>), which represent the window’s browsing history, and <code>innerWidth</code>, which holds
the window’s width in pixels. One of the properties of this global object is
named <code>window</code>, and its value is the global object itself. This means
that you can simply type <code>window</code> to refer to the global object in
your client-side code. When using window-specific features, it is often a good
idea to include a <code>window.</code> prefix: <code>window.innerWidth</code> is clearer
than <code>innerWidth</code>, for example.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.4 Scripts Share a Namespace"><div class="sect2" id="idm46198510417512">
<h2>15.1.4 Scripts Share a Namespace</h2>

<p>With<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="scripts sharing namespaces" id="idm46198510416040"></a> modules, the constants, variables, functions, and classes defined
at the top level (i.e., outside of any function or class definition) of
the module are private to the module unless they are explicitly
exported, in which case, they can be selectively imported by other
modules. (Note that this property of modules is honored by code-bundling tools as well.)</p>

<p>With non-module scripts, however, the situation is completely
different. If the top-level code in a script defines a constant,
variable, function, or class, that declaration will be visible to all
other scripts in the same document. If one script defines a function
<code>f()</code> and another script defines a class <code>c</code>, then a third script can
invoke the function and instantiate the class without having to take
any action to import them. So if you are not using modules, the
independent scripts in your document share a single namespace and
behave as if they are all part of a single larger script. This can be
convenient for small programs, but the need to avoid naming conflicts
can become problematic for larger programs, especially when some of
the scripts are third-party libraries.</p>

<p>There are some historical quirks with how this shared namespace
works. <code>var</code> and <code>function</code> declarations at the top level create
properties in the shared global object. If one script defines a
top-level function <code>f()</code>, then another script in the same document can
invoke that function as <code>f()</code> or as <code>window.f()</code>. On the other hand,
the ES6 declarations <code>const</code>, <code>let</code>, and <code>class</code>, when used at the
top level, do not create properties in the global object. They are
still defined in a shared namespace, however: if one script defines a
class <code>C</code>, other scripts will be able to create instances of that class
with <code>new C()</code>, but not with <code>new window.C()</code>.</p>

<p>To summarize: in modules, top-level declarations are scoped to the
module and can be explicitly exported. In nonmodule scripts,
however, top-level declarations are scoped to the containing document,
and the declarations are shared by all scripts in the document. Older
<code>var</code> and <code>function</code> declarations are shared via properties of the
global object. Newer <code>const</code>, <code>let</code>, and <code>class</code> declarations are also
shared and have the same document scope, but they do not exist as
properties of any object that JavaScript code has access to.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.5 Execution of JavaScript Programs"><div class="sect2" id="execution">
<h2>15.1.5 Execution of JavaScript Programs</h2>

<p>There<a data-type="indexterm" data-primary="programs" data-secondary="execution of JavaScript" id="Pexec15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="execution of JavaScript programs" id="WBprogexec15"></a> is no formal definition of a <em>program</em> in client-side
JavaScript, but we can say that a JavaScript program consists of all
the JavaScript code in, or referenced from, a document. These separate
bits of code share a single global Window object, which gives them
access to the same underlying Document object representing the HTML
document. Scripts that are not modules additionally share a top-level
namespace.</p>

<p>If a web page includes an embedded frame (using the <code>&lt;iframe&gt;</code>
element), the JavaScript code in the embedded document has a different
global object and Document object than the code in the
embedding document, and it can be considered a separate JavaScript
program. Remember, though, that there is no formal definition of what
the boundaries of a JavaScript program are. If the container document
and the contained document are both loaded from the same server, the
code in one document can interact with the code in the other, and you
can treat them as two interacting parts of a single program, if you
wish. <a data-type="xref" href="#crossoriginmessaging">§15.13.6</a> explains how a JavaScript program can
send and receive
messages to and from JavaScript code running in an <code>&lt;iframe&gt;</code>.</p>

<p>You can think of JavaScript program execution as occurring in two
phases. In the first phase, the document content is loaded, and the
code from <code>&lt;script&gt;</code> elements (both inline scripts and external
scripts) is run. Scripts generally run in the order in which they
appear in the document, though this default order can be modified by
the <code>async</code> and <code>defer</code> attributes we’ve described.
The JavaScript code within any
single script is run from top to bottom, subject, of course, to
JavaScript’s conditionals, loops, and other control statements. Some
scripts don’t really <em>do</em> anything during this first phase and instead
just define functions and classes for use in the second phase. Other
scripts might do significant work during the first phase and then do
nothing in the second. Imagine a script at the very end of a document
that finds all <code>&lt;h1&gt;</code> and <code>&lt;h2&gt;</code> tags in the document and modifies the
document by generating and inserting a table of contents at the
beginning of the document. This could be done entirely in the first
phase. (See <a data-type="xref" href="#tocsection">§15.3.6</a> for an example that does exactly this.)</p>

<p>Once the document is loaded and all scripts have run, JavaScript
execution enters its second phase. This phase is asynchronous and
event-driven. If a script is going to participate in this second
phase, then one of the things it must have done during the first phase
is to register at least one event handler or other callback function
that will be invoked asynchronously. During this event-driven second
phase, the web browser invokes event handler functions and other
callbacks in response to events that occur asynchronously. Event
handlers are most commonly invoked in response to user input (mouse
clicks, keystrokes, etc.) but may also be triggered by network
activity, document and resource loading, elapsed time, or errors in
JavaScript code. Events and event handlers are described in detail in
<a data-type="xref" href="#events">§15.2</a>.</p>

<p>Some<a data-type="indexterm" data-primary="DOMContentLoaded event" id="idm46198510387304"></a><a data-type="indexterm" data-primary="load event" id="idm46198510386568"></a> of the first events to occur during the event-driven phase are
the “DOMContentLoaded” and “load” events. “DOMContentLoaded” is
triggered when the HTML document has been completely loaded and
parsed. The “load” event is triggered when all of the document’s
external resources—such as images—are also fully loaded.  JavaScript
programs often use one of these events as a trigger or starting
signal. It is common to see programs whose scripts define functions
but take no action other than registering an event handler function to be
triggered by the “load” event at the beginning of the event-driven
phase of execution. It is this “load” event handler that then
manipulates the document and does whatever it is that the program is
supposed to do. Note that it is common in JavaScript programming for
an event handler function such as the “load” event handler described
here to register other event handlers.</p>

<p>The loading phase of a JavaScript program is relatively short: ideally less than a second. Once the document is loaded,
the event-driven phase lasts for as long as the document is displayed
by the web browser. Because this phase is asynchronous and
event-driven, there may be long periods of inactivity where no
JavaScript is executed, punctuated by bursts of activity triggered by
user or network events. We’ll cover these two phases in more detail next.</p>










<section data-type="sect3" data-pdf-bookmark="Client-side JavaScript threading model"><div class="sect3" id="threading">
<h3>Client-side JavaScript threading model</h3>

<p>JavaScript<a data-type="indexterm" data-primary="programs" data-secondary="execution of JavaScript" data-tertiary="client-side threading model" id="idm46198510382072"></a> is a single-threaded language, and single-threaded
execution makes for much simpler programming: you can write code with
the assurance that two event handlers will never run at the same
time. You can manipulate document content knowing that no other thread
is attempting to modify it at the same time, and you never need to
worry about locks, deadlock, or race conditions when writing
JavaScript code.</p>

<p>Single-threaded execution means that web browsers stop responding
to user input while scripts and event handlers are executing. This
places a burden on JavaScript programmers: it means that JavaScript
scripts and event handlers must not run for too long. If a script
performs a computationally intensive task, it will introduce a delay
into document loading, and the user will not see the document content
until the script completes. If an event handler performs a
computationally intensive task, the browser may become nonresponsive,
possibly causing the user to think that it has crashed.</p>

<p>The<a data-type="indexterm" data-primary="Web Workers API" id="idm46198510378872"></a> web platform defines a controlled form of concurrency called a
“web worker.”  A web worker is a background thread for performing
computationally intensive tasks without freezing the user
interface. The code that runs in a web worker thread does not have
access to document content, does not share any state with the main
thread or with other workers, and can only communicate with the main
thread and other workers through asynchronous<a data-type="indexterm" data-primary="message events" id="idm46198510377544"></a> message events, so the
concurrency is not detectable to the main thread, and web workers do
not alter the basic single-threaded execution model of JavaScript
programs. See <a data-type="xref" href="#webworkers">§15.13</a> for full details on the web’s safe
threading mechanism.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Client-side JavaScript timeline"><div class="sect3" id="timeline">
<h3>Client-side JavaScript timeline</h3>

<p>We’ve<a data-type="indexterm" data-primary="programs" data-secondary="execution of JavaScript" data-tertiary="client-side timeline" id="idm46198510374040"></a> already seen that JavaScript programs begin in a script-execution phase and then transition to an event-handling phase. These
two phases can be further broken down into the following steps:</p>
<ol>
<li>
<p>The web browser creates a Document object and begins parsing the web
page, adding Element objects and Text nodes to the document as it
parses HTML elements and their textual content. The
<code>document.readyState</code> property has the value “loading” at this
stage.</p>
</li>
<li>
<p>When the HTML parser encounters a <code>&lt;script&gt;</code> tag that does not have
any of the <code>async</code>, <code>defer</code>, or <code>type="module"</code> attributes, it adds
that script tag to the document and then executes the script. The
script is executed synchronously, and the HTML parser pauses while
the script downloads (if necessary) and runs. A script like this can
use <code>document.write()</code> to insert text into the input stream, and
that text will become part of the document when the parser
resumes. A script like this often simply defines functions and
registers event handlers for later use, but it can traverse and
manipulate the document tree as it exists at that time. That is,
non-module scripts that do not have an <code>async</code> or <code>defer</code> attribute
can see their own <code>&lt;script&gt;</code> tag and document content that comes
before it.</p>
</li>
<li>
<p>When the parser encounters a <code>&lt;script&gt;</code> element that has the <code>async</code>
attribute set, it begins downloading the script text (and if the
script is a module, it also recursively downloads all of the
script’s dependencies) and continues parsing the document. The
script will be executed as soon as possible after it has downloaded,
but the parser does not stop and wait for it to
download. Asynchronous scripts must not use the <code>document.write()</code>
method. They can see their own <code>&lt;script&gt;</code> tag and all document
content that comes before it, and may or may not have access to
additional document content.</p>
</li>
<li>
<p>When the document is completely parsed, the <code>document.readyState</code>
property changes to “interactive.”</p>
</li>
<li>
<p>Any scripts that had the <code>defer</code> attribute set (along with any module
scripts that do not have an <code>async</code> attribute) are executed in the order
in which they appeared in the document. Async scripts may also be
executed at this time. Deferred scripts have access to the complete
document and they must not use the 
<span class="keep-together"><code>document.write()</code></span> method.</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="DOMContentLoaded event" id="idm46198510356856"></a> browser fires a “DOMContentLoaded” event on the Document object.
This marks the transition from synchronous script-execution phase to
the <span class="keep-together">asynchronous,</span> event-driven phase of program execution. Note,
however, that there may still be <code>async</code> scripts that have not yet
executed at this point.</p>
</li>
<li>
<p>The document is completely parsed at this point, but the browser may
still be waiting for additional content, such as images, to
load. When all such content finishes loading, and when all <code>async</code>
scripts have loaded and executed, the <span class="keep-together"><code>document.readyState</code></span> property
changes to “complete” and the web browser fires a “load” event on the
Window object.</p>
</li>
<li>
<p>From this point on, event handlers are invoked asynchronously in
response to user input events, network events, timer expirations,
and so on.<a data-type="indexterm" data-primary="" data-startref="WBprogexec15" id="idm46198510351112"></a><a data-type="indexterm" data-primary="" data-startref="Pexec15" id="idm46198510350136"></a></p>
</li>

</ol>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.6 Program Input and Output"><div class="sect2" id="idm46198510402696">
<h2>15.1.6 Program Input and Output</h2>

<p>Like<a data-type="indexterm" data-primary="programs" data-secondary="input and output" id="idm46198510347704"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="program input and output" id="idm46198510346696"></a> any program, client-side JavaScript programs process input data
to produce output data. There are a variety of inputs available:</p>

<ul class="less_space pagebreak-before">
<li>
<p>The content of the document itself, which JavaScript code can access
with the DOM API (<a data-type="xref" href="#dom">§15.3</a>).</p>
</li>
<li>
<p>User input, in the form of events, such as mouse clicks (or
touch-screen taps) on HTML <code>&lt;button&gt;</code> elements, or text entered into
HTML <code>&lt;textarea&gt;</code> elements, for example. <a data-type="xref" href="#events">§15.2</a> demonstrates how
JavaScript programs can respond to user events like these.</p>
</li>
<li>
<p>The URL of the document being displayed is available to client-side
JavaScript as <code>document.URL</code>. If you pass this string to the <code>URL()</code>
constructor (<a data-type="xref" href="ch11.html#urlapi">§11.9</a>), you can easily access the path, query, and
fragment sections of the URL.</p>
</li>
<li>
<p>The content of the HTTP “Cookie” request header is available to
client-side code as <code>document.cookie</code>. Cookies are usually used by
server-side code for maintaining user sessions, but client-side code
can also read (and write) them if necessary. See <a data-type="xref" href="#cookies">§15.12.2</a> for
further details.</p>
</li>
<li>
<p>The global <code>navigator</code> property provides access to information about
the web browser, the OS it’s running on top of, and the
capabilities of each. For example, <code>navigator.userAgent</code> is a
string that identifies the web browser, <code>navigator.language</code> is the
user’s preferred language, and <code>navigator.hardwareConcurrency</code>
returns the number of logical CPUs available to the web
browser. Similarly, the global <code>screen</code> property provides access to
the user’s display size via the <code>screen.width</code> and <code>screen.height</code>
properties. In a sense, these <code>navigator</code> and <code>screen</code> objects are
to web browsers what environment variables are to Node <span class="keep-together">programs.</span></p>
</li>
</ul>

<p>Client-side JavaScript typically produces output, when it needs to, by
manipulating the HTML document with the DOM API (<a data-type="xref" href="#dom">§15.3</a>) or by using
a higher-level 
<span class="keep-together">framework</span> such as React or Angular to manipulate the
document. Client-side code can also use <code>console.log()</code> and related
methods (<a data-type="xref" href="ch11.html#consoleapi">§11.8</a>) to produce output. But this output is only
visible in the web developer console, so it is useful when debugging,
but not for user-visible output.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.7 Program Errors"><div class="sect2" id="onerror">
<h2>15.1.7 Program Errors</h2>

<p>Unlike<a data-type="indexterm" data-primary="error handling" data-secondary="web browser host environment" id="idm46198510323400"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="program errors" id="idm46198510322376"></a><a data-type="indexterm" data-primary="programs" data-secondary="error handling" id="idm46198510321144"></a> applications (such as Node applications) that run directly on
top of the OS, JavaScript programs in a web browser can’t really
“crash.” If an exception occurs while your JavaScript program is
running, and if you do not have a <code>catch</code> statement to handle it, an
error message will be displayed in the developer console, but any
event handlers that have been registered keep running and responding
to events.</p>

<p>If you would like to define an error handler of last resort to be
invoked when this kind of uncaught exception occurs, set the <code>onerror</code>
property of the Window object to an error handler function. When an
uncaught exception propagates all the way up the call stack and an
error message is about to be displayed in the developer console, the
<code>window.onerror</code> function will be invoked with three string arguments.
The first argument to <code>window.onerror</code> is a message describing the
error. The second argument is a string that contains the URL of the
JavaScript code that caused the error. The third argument is the line
number within the document where the error occurred. If the <code>onerror</code>
handler returns <code>true</code>, it tells the browser that the handler has
handled the error and that no further action is necessary—in other
words, the browser should not display its own error message.</p>

<p>When a Promise is rejected and there is no <code>.catch()</code> function to
handle it, that is a situation much like an unhandled exception: an
unanticipated error or a logic error in your program. You<a data-type="indexterm" data-primary="unhandledrejection event" id="idm46198510314568"></a> can detect
this by defining a <code>window.onunhandledrejection</code> function or by using
<code>window.addEventListener()</code> to register a handler for
“unhandledrejection” events. The event object passed to this handler
will have a <code>promise</code> property whose value is the Promise object that
rejected and a <code>reason</code> property whose value is what would have been
passed to a <code>.catch()</code> function. As with the error handlers described
earlier, if you call <code>preventDefault()</code> on the unhandled rejection event
object, it will be considered handled and won’t cause an error message
in the developer console.</p>

<p>It is not often necessary to define <code>onerror</code> or
<code>onunhandledrejection</code> handlers, but it can be quite useful as a
telemetry mechanism if you want to report client-side errors to the
server (using the <code>fetch()</code> function to make an HTTP POST request, for
example) so that you can get information about unexpected errors that
happen in your users’ browsers.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.1.8 The Web Security Model"><div class="sect2" id="idm46198510308792">
<h2>15.1.8 The Web Security Model</h2>

<p>The<a data-type="indexterm" data-primary="security" data-secondary="competing goals of web programming" id="idm46198510307288"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web programming basics" data-tertiary="web security model" id="WBprogsecurity15"></a> fact that web pages can execute arbitrary JavaScript code on your personal device has clear security implications, and browser vendors
have worked hard to balance two competing goals:</p>

<ul>
<li>
<p>Defining powerful client-side APIs to enable useful web applications</p>
</li>
<li>
<p>Preventing malicious code from reading or altering your data,
compromising your privacy, scamming you, or wasting your time</p>
</li>
</ul>

<p>The subsections that follow give a quick overview of the security restrictions
and issues that you, as a JavaScript programmer, should to be aware
of.</p>










<section data-type="sect3" class="less_space pagebreak-before" data-pdf-bookmark="What JavaScript can’t do"><div class="sect3" id="idm46198510301256">
<h3>What JavaScript can’t do</h3>

<p>Web<a data-type="indexterm" data-primary="security" data-secondary="defense against malicious code" id="idm46198510299672"></a> browsers’ first line of defense against malicious code is that
they simply do not support certain capabilities. For example,
client-side JavaScript does not provide any way to write or delete
arbitrary files or list arbitrary directories on the client
computer. This means a JavaScript program cannot delete data or plant
viruses.</p>

<p>Similarly, client-side JavaScript does not have general-purpose
networking capabilities. A client-side JavaScript program can
make HTTP requests (<a data-type="xref" href="#fetch">§15.11.1</a>). And another standard, known as
WebSockets (<a data-type="xref" href="#websockets">§15.11.3</a>), defines a socket-like API for
communicating with specialized servers. But neither of these APIs
allows unmediated access to the wider network. General-purpose
internet clients and servers cannot be written in client-side
JavaScript.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="The same-origin policy"><div class="sect3" id="sameoriginpolicy">
<h3>The same-origin policy</h3>

<p>The<a data-type="indexterm" data-primary="security" data-secondary="same-origin policy" id="idm46198510293624"></a><a data-type="indexterm" data-primary="same-origin policy" id="idm46198510292616"></a> <em>same-origin policy</em> is a sweeping security restriction on what
web content JavaScript code can interact with. It typically comes into
play when a web page includes <code>&lt;iframe&gt;</code> elements. In this case, the
same-origin policy governs the interactions of JavaScript code in one
frame with the content of other frames. Specifically, a script can
read only the properties of windows and documents that have the same
origin as the document that contains the script.</p>

<p>The origin of a document is defined as the protocol, host, and port of
the URL from which the document was loaded. Documents loaded from
different web servers have different origins. Documents loaded through
different ports of the same host have different origins. And a document
loaded with the <code>http:</code> protocol has a different origin than one loaded
with the <code>https:</code> protocol, even if they come from the same web
server. Browsers typically treat every <code>file:</code> URL as a separate
origin, which means that if you’re working on a program that displays
more than one document from the same server, you may not be able to
test it locally using <code>file:</code> URLs and will have to run a static
web server during development.</p>

<p>It is important to understand that the origin of the script itself is
not relevant to the same-origin policy: what matters is the origin of
the document in which the script is embedded. Suppose, for example,
that a script hosted by host A is included (using the <code>src</code> property
of a <code>&lt;script&gt;</code> element) in a web page served by host B. The origin of
that script is host B, and the script has full access to the content of
the document that contains it. If the document contains an <code>&lt;iframe&gt;</code>
that contains a second document from host B, then the script also has
full access to the content of that second document. But if the
top-level document contains another <code>&lt;iframe&gt;</code> that displays a document
from host C (or even one from host A), then the same-origin policy
comes into effect and prevents the script from accessing this
nested document.</p>

<p>The same-origin policy also applies to scripted HTTP requests (see
<a data-type="xref" href="#fetch">§15.11.1</a>). JavaScript code can make arbitrary HTTP requests to the web
server from which the containing document was loaded, but it does not
allow scripts to communicate with other web servers (unless those web
servers opt in with CORS, as we describe next).</p>

<p>The same-origin policy poses problems for large websites that use
multiple subdomains. For example, scripts with origin
<em>orders.example.com</em> might need to read properties from documents on
<em>example.com</em>. To support multidomain websites of this sort, scripts
can alter their origin by setting <code>document.domain</code> to a domain
suffix. So a script with origin <em><a href="https://orders.example.com"><em class="hyperlink">https://orders.example.com</em></a></em> can
change its origin to <em><a href="https://example.com"><em class="hyperlink">https://example.com</em></a></em> by setting
<code>document.domain</code> to “example.com.” But that script cannot set
<code>document.domain</code> to “orders.example”, “ample.com”, or “com”.</p>

<p>The<a data-type="indexterm" data-primary="security" data-secondary="Cross-Origin Resource Sharing (CORS)" id="idm46198510277144"></a><a data-type="indexterm" data-primary="Cross-Origin Resource Sharing (CORS)" id="idm46198510276120"></a><a data-type="indexterm" data-primary="XSS (cross-site scripting)" id="idm46198510275432"></a> second technique for relaxing the same-origin policy is
Cross-Origin Resource Sharing, or CORS, which allows servers to decide
which origins they are willing to serve. CORS extends HTTP with a new
<code>Origin:</code> request header and a new <code>Access-Control-Allow-Origin</code>
response header. It allows servers to use a header to explicitly list
origins that may request a file or to use a wildcard and allow a file
to be requested by any site. Browsers honor these CORS headers and do
not relax same-origin restrictions unless they are present.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Cross-site scripting"><div class="sect3" id="xss">
<h3>Cross-site scripting</h3>

<p><em>Cross-site scripting</em>, or<a data-type="indexterm" data-primary="security" data-secondary="cross-site scripting (XSS)" id="idm46198510270984"></a><a data-type="indexterm" data-primary="cross-site scripting (XSS)" id="idm46198510269912"></a> XSS, is a term for a category of security
issues in which an attacker injects HTML tags or scripts into a target
website. Client-side JavaScript programmers must be aware of, and
defend against, cross-site scripting.</p>

<p>A web page is vulnerable to cross-site scripting if it dynamically
generates document content and bases that content on user-submitted
data without first “sanitizing” that data by removing any embedded
HTML tags from it. As a trivial example, consider the following web
page that uses JavaScript to greet the user by name:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;script&gt;</code>
<code class="kd">let</code> <code class="nx">name</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="nb">document</code><code class="p">.</code><code class="nx">URL</code><code class="p">).</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"name"</code><code class="p">);</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s1">'h1'</code><code class="p">).</code><code class="nx">innerHTML</code> <code class="o">=</code> <code class="s2">"Hello "</code> <code class="o">+</code> <code class="nx">name</code><code class="p">;</code>
<code class="nt">&lt;/script&gt;</code></pre>

<p>This two-line script extracts input from the “name” query parameter of
the document URL. It then uses the DOM API to inject an HTML string
into the first <code>&lt;h1&gt;</code> tag in the document.  This page is intended to
be invoked with a URL like this:</p>

<pre data-type="programlisting">http://www.example.com/greet.html?name=David</pre>

<p>When used like this, it displays the text “Hello David.” But consider
what happens when it is invoked with this query parameter:</p>

<pre data-type="programlisting">name=%3Cimg%20src=%22x.png%22%20onload=%22alert(%27hacked%27)%22/%3E</pre>

<p>When the URL-escaped parameters are decoded, this URL causes the
following HTML to be injected into the document:</p>

<pre data-type="programlisting">Hello &lt;img src="x.png" onload="alert('hacked')"/&gt;</pre>

<p>After the image loads, the string of JavaScript in the <code>onload</code>
attribute is executed. The global <code>alert()</code> function displays a modal
dialogue box. A single dialogue box is relatively benign but demonstrates
that arbitrary code execution is possible on this site because it
displays unsanitized HTML.</p>

<p>Cross-site scripting attacks are so called because more than one site
is involved. Site B includes a specially crafted link (like the one
in the previous example) to site A. If site B can convince users to click the link,
they will be taken to site A, but that site will now be running code
from site B. That code might deface the page or cause it to
malfunction. More dangerously, the malicious code could read cookies
stored by site A (perhaps account numbers or other personally
identifying information) and send that data back to site B. The
injected code could even track the user’s keystrokes and send that
data back to site B.</p>

<p>In general, the way to prevent XSS attacks is to remove HTML tags from
any untrusted data before using it to create dynamic document content.
You can fix the <em>greet.html</em> file shown earlier by replacing special
HTML characters in the untrusted input string with their equivalent
HTML entities:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code>
    <code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="sr">/&amp;/g</code><code class="p">,</code> <code class="s2">"&amp;amp;"</code><code class="p">)</code>
    <code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="sr">/&lt;/g</code><code class="p">,</code> <code class="s2">"&amp;lt;"</code><code class="p">)</code>
    <code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="sr">/&gt;/g</code><code class="p">,</code> <code class="s2">"&amp;gt;"</code><code class="p">)</code>
    <code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="sr">/"/g</code><code class="p">,</code> <code class="s2">"&amp;quot;"</code><code class="p">)</code>
    <code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="sr">/'/g</code><code class="p">,</code> <code class="s2">"&amp;#x27;"</code><code class="p">)</code>
    <code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="sr">/\//g</code><code class="p">,</code> <code class="s2">"&amp;#x2F;"</code><code class="p">)</code></pre>

<p>Another approach to the problem of XSS is to structure your web
applications so that untrusted content is always displayed in an
<code>&lt;iframe&gt;</code> with the <code>sandbox</code> attribute set to disable scripting and
other capabilities.</p>

<p>Cross-site scripting is a pernicious vulnerability whose roots go deep
into the architecture of the web. It is worth understanding this
vulnerability in-depth, but further discussion is beyond the scope of
this book. There are many online resources to help you defend against
cross-site scripting.<a data-type="indexterm" data-primary="" data-startref="WBprogsecurity15" id="idm46198510140840"></a></p>
</div></section>



</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.2 Events"><div class="sect1" id="events">
<h1>15.2 Events</h1>

<p>Client-side<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="overview of" id="idm46198510138040"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="overview of" id="idm46198510136792"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" id="WBevent15"></a><a data-type="indexterm" data-primary="event-driven programming model" id="event15"></a> JavaScript programs use an asynchronous event-driven
programming model. In this style of programming, the web browser
generates an <em>event</em> whenever something interesting happens to the
document or browser or to some element or object associated with
it. For example, the web browser generates an event when it finishes
loading a document, when the user moves the mouse over a hyperlink, or
when the user strikes a key on the keyboard. If a JavaScript
application cares about a particular type of event, it can register
one or more functions to be invoked when events of that type
occur. Note that this is not unique to web programming: all
applications with graphical user interfaces are designed this way—they
sit around waiting to be interacted with (i.e., they wait for events
to occur), and then they respond.</p>

<p>In client-side JavaScript, events can occur on any element within an
HTML document, and this fact makes the event model of web browsers
significantly more complex than Node’s event model. We begin this
section with some important definitions that help to explain that
event model:</p>
<dl>
<dt>event type</dt>
<dd>
<p>This string specifies what kind of event
occurred. The type “mousemove,” for example, means that the user moved
the mouse. The type “keydown” means that the user pressed a key on the
keyboard down. And the type “load” means that a document (or some
other resource) has finished loading from the network. Because the
type of an event is just a string, it’s sometimes called an <em>event
name</em>, and indeed, we use this name to identify the kind of
event we’re talking about.</p>
</dd>
<dt>event target</dt>
<dd>
<p>This is the object on which the event occurred or with
which the event is associated. When we speak of an event, we must
specify both the type and the target. A load event on a Window, for
example, or a click event on a <code>&lt;button&gt;</code> Element. Window, Document,
and Element objects are the most common event targets in client-side
JavaScript applications, but some events are triggered on other kinds
of objects. For example, a Worker object (a kind of thread, covered
<a data-type="xref" href="#webworkers">§15.13</a>) is a target<a data-type="indexterm" data-primary="message events" id="idm46198510125960"></a> for “message” events that occur when the
worker thread sends a message to the main thread.</p>
</dd>
<dt>event handler, or event listener</dt>
<dd>
<p>This<a data-type="indexterm" data-primary="event listeners" id="idm46198510123768"></a> function handles
or responds to an event.<sup><a data-type="noteref" id="idm46198510122904-marker" href="ch15.html#idm46198510122904">2</a></sup> Applications register their event
handler functions with the web browser, specifying an event type and an
event target. When an event of the specified type occurs on the
specified target, the browser invokes the handler function. When event handlers
are invoked for an object, we say that the browser has
“fired,” “triggered,” or “dispatched” the event. There are a
number of ways to register event handlers, and the details of handler
registration and invocation are explained in <a data-type="xref" href="#handlerregistration">§15.2.2</a>
and <a data-type="xref" href="#handlerinvocation">§15.2.3</a>.</p>
</dd>
<dt>event object</dt>
<dd>
<p>This object is associated with a particular
event and contains details about that event. Event objects are passed
as an argument to the event handler function. All event objects have a
<code>type</code> property that specifies the event type and a <code>target</code> property
that specifies the event target. Each event type defines a set of
properties for its associated event object. The object associated with
a mouse event includes the coordinates of the mouse pointer, for
example, and the object associated with a keyboard event contains
details about the key that was pressed and the modifier keys that were
held down. Many event types define only a few standard properties—such
as <code>type</code> and <code>target</code>—and do not carry much other useful
information. For those events, it is the simple occurrence of the
event, not the event details, that matter.</p>
</dd>
<dt>event propagation</dt>
<dd>
<p>This is the process by which the browser decides which
objects to trigger event handlers on. For events that are specific to
a single object—such as the “load” event on the Window object or a
“message” event on a Worker object—no propagation is required. But
when certain kinds of events occur on elements within the HTML
document, however, they propagate or “bubble” up the document tree.
If the user moves the mouse over a hyperlink, the mousemove event is
first fired on the <code>&lt;a&gt;</code> element that defines that link. Then it is
fired on the containing elements: perhaps a <code>&lt;p&gt;</code> element, a <code>&lt;section&gt;</code>
element, and the Document object itself. It is sometimes more
convenient to register a single event handler on a Document or other
container element than to register handlers on each individual element
you’re interested in. An event handler can stop the propagation of an
event so that it will not continue to bubble and will not trigger
handlers on containing elements. Handlers do this by invoking a method
of the event object. In another form of event
propagation, known as <em>event capturing</em>, handlers specially registered
on container elements have the opportunity to intercept (or “capture”)
events before they are delivered to their actual target.  Event
bubbling and capturing are covered in detail in <a data-type="xref" href="#eventpropagation">§15.2.4</a>.</p>
</dd>
</dl>

<p>Some events have <em>default actions</em> associated with them. When a click
event occurs on a hyperlink, for example, the default action is for
the browser to follow the link and load a new page. Event handlers can
prevent this default action by invoking a method of the event object.
This is sometimes called “canceling” the event and is covered in
<a data-type="xref" href="#eventcancellation">§15.2.5</a>.</p>








<section data-type="sect2" class="less_space pagebreak-before" data-pdf-bookmark="15.2.1 Event Categories"><div class="sect2" id="idm46198510108632">
<h2>15.2.1 Event Categories</h2>

<p>Client-side<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="event categories" id="idm46198510107064"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="event categories" id="idm46198510105816"></a> JavaScript supports such a large number of event types
that there is no way this chapter can cover them all. It can be useful,
though, to group events into some general categories, to illustrate
the scope and wide variety of supported events:</p>
<dl>
<dt>Device-dependent input events</dt>
<dd>
<p>These events are directly
tied to a specific input device, such as the mouse or keyboard. They
include event types such as “mousedown,” “mousemove,” “mouseup,”
“touchstart,” “touchmove,” “touchend,” “keydown,” and “keyup.”</p>
</dd>
<dt>Device-independent input events</dt>
<dd>
<p>These input events are not
directly tied to a specific input device. The “click” event, for
example, indicates that a link or button (or other document element)
has been activated. This is often done via a mouse click, but it could
also be done by keyboard or (on touch-sensitive devices) with a tap.
The “input” event is a device-independent alternative to the “keydown”
event and supports keyboard input as well as alternatives such as
cut-and-paste and input methods used for ideographic scripts. The
“pointerdown,” “pointermove,” and “pointerup” event types are device-independent alternatives to mouse and touch events. They work
for mouse-type pointers, for touch screens, and for pen- or stylus-style
input as well.</p>
</dd>
<dt>User interface events</dt>
<dd>
<p>UI events are higher-level events, often on
HTML form elements that define a user interface for a web
application. They include the “focus” event (when a text input field
gains keyboard focus), the “change” event (when the user changes the
value displayed by a form element), and the “submit” event (when the
user clicks a Submit button in a form).</p>
</dd>
<dt>State-change events</dt>
<dd>
<p>Some events are not triggered directly by user
activity, but by network or browser activity, and indicate some kind
of life-cycle or state-related change. The “load” and
“DOMContentLoaded” events—fired on the Window and Document objects,
respectively, at the end of document loading—are probably the most
commonly used of these events (see <a data-type="xref" href="#timeline">“Client-side JavaScript timeline”</a>). Browsers fire
“online” and “offline” events on the Window object when network
connectivity changes. The<a data-type="indexterm" data-primary="popstate event" id="idm46198510079880"></a> browser’s history management mechanism
(<a data-type="xref" href="#pushstate">§15.10.4</a>) fires the “popstate” event in response to the browser’s
Back button.</p>
</dd>
<dt>API-specific events</dt>
<dd>
<p>A number of web APIs defined by HTML and
related specifications include their own event types. The HTML
<code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> elements define a long list of
associated event types such as “waiting,” “playing,” “seeking,”
“volumechange,” and so on, and you can use them to customize media
playback. Generally 
<span class="keep-together">speaking,</span> web platform APIs that are asynchronous
and were developed before Promises were added to JavaScript are
event-based and define API-specific events. The IndexedDB API, for
example (<a data-type="xref" href="#indexeddb">§15.12.3</a>), fires “success” and “error” events when database
requests succeed or fail. And although the new <code>fetch()</code> API (<a data-type="xref" href="#fetch">§15.11.1</a>)
for making HTTP requests is Promise-based, the XMLHttpRequest API
that it replaces defines a number of API-specific event types.</p>
</dd>
</dl>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.2.2 Registering Event Handlers"><div class="sect2" id="handlerregistration">
<h2>15.2.2 Registering Event Handlers</h2>

<p>There<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="registering event handlers" id="idm46198510071064"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="registering event handlers" id="idm46198510069752"></a> are two basic ways to register event handlers. The first, from
the early days of the web, is to set a property on the object or
document element that is the event target. The second (newer and more
general) technique is to pass the handler to the <code>addEventListener()</code>
method of the object or element.</p>










<section data-type="sect3" data-pdf-bookmark="Setting event handler properties"><div class="sect3" id="idm46198510067864">
<h3>Setting event handler properties</h3>

<p>The simplest way to register an event handler is by setting a property
of the event target to the desired event handler function. By
convention, event handler properties have names that consist of the
word “on” followed by the event name: <code>onclick</code>, <code>onchange</code>, <code>onload</code>,
<code>onmouseover</code>, and so on. Note that these property names are case
sensitive and are written in all lowercase,<sup><a data-type="noteref" id="idm46198510064168-marker" href="ch15.html#idm46198510064168">3</a></sup> even when the
event type (such as “mousedown”) consists of multiple words. The following code includes two event handler registrations of this kind:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Set the onload property of the Window object to a function.</code>
<code class="c1">// The function is the event handler: it is invoked when the document loads.</code>
<code class="nb">window</code><code class="p">.</code><code class="nx">onload</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
    <code class="c1">// Look up a &lt;form&gt; element</code>
    <code class="kd">let</code> <code class="nx">form</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"form#shipping"</code><code class="p">);</code>
    <code class="c1">// Register an event handler function on the form that will be invoked</code>
    <code class="c1">// before the form is submitted. Assume isFormValid() is defined elsewhere.</code>
    <code class="nx">form</code><code class="p">.</code><code class="nx">onsubmit</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="p">{</code> <code class="c1">// When the user submits the form</code>
        <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">isFormValid</code><code class="p">(</code><code class="k">this</code><code class="p">))</code> <code class="p">{</code>     <code class="c1">// check whether form inputs are valid</code>
            <code class="nx">event</code><code class="p">.</code><code class="nx">preventDefault</code><code class="p">();</code>   <code class="c1">// and if not, prevent form submission.</code>
        <code class="p">}</code>
    <code class="p">};</code>
<code class="p">};</code></pre>

<p>The shortcoming of event handler properties is that they are designed
around the assumption that event targets will have at most one handler
for each type of event. It is often better to register event handlers
using <code>addEventListener()</code> because that technique does not overwrite
any previously registered handlers.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Setting event handler attributes"><div class="sect3" id="htmleventhandlers">
<h3>Setting event handler attributes</h3>

<p>The event handler properties of document elements can also be defined
directly in the HTML file as attributes on the corresponding HTML
tag. (Handlers that would be registered on the Window element with
JavaScript can be defined with attributes on the <code>&lt;body&gt;</code> tag in
HTML.) This technique is generally frowned upon in modern web
development, but it is possible, and it’s documented here because you may
still see it in existing code.</p>

<p>When defining an event handler as an HTML attribute, the attribute
value should be a string of JavaScript code. That code should be the
<em>body</em> of the event handler function, not a complete function
declaration. That is, your HTML event handler code should not be
surrounded by curly braces and prefixed with the <code>function</code> keyword.
For example:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;button</code> <code class="na">onclick=</code><code class="s">"console.log('Thank you');"</code><code class="nt">&gt;</code>Please Click<code class="nt">&lt;/button&gt;</code></pre>

<p>If an HTML event handler attribute contains multiple JavaScript
statements, you must remember to separate those statements with
semicolons or break the attribute value across multiple lines.</p>

<p>When you specify a string of JavaScript code as the value of an HTML
event handler attribute, the browser converts your string into a
function that works something like this one:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code><code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">with</code><code class="p">(</code><code class="nb">document</code><code class="p">)</code> <code class="p">{</code>
        <code class="kd">with</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">form</code> <code class="o">||</code> <code class="p">{})</code> <code class="p">{</code>
            <code class="kd">with</code><code class="p">(</code><code class="k">this</code><code class="p">)</code> <code class="p">{</code>
                <code class="cm">/* your code here */</code>
            <code class="p">}</code>
        <code class="p">}</code>
    <code class="p">}</code>
<code class="p">}</code></pre>

<p>The <code>event</code> argument means that your handler code can refer to the
current event object as <code>event</code>. The <code>with</code> statements mean that the
code of your handler can refer to the properties of the target object,
the containing <code>&lt;form&gt;</code> (if any), and the containing Document object
directly, as if they were variables in scope. The<a data-type="indexterm" data-primary="strict mode" data-secondary="with statement and" id="idm46198509922776"></a><a data-type="indexterm" data-primary="use strict directive" data-secondary="with statement and" id="idm46198509921800"></a> <code>with</code> statement is
forbidden in strict mode (<a data-type="xref" href="ch05.html#strictmode">§5.6.3</a>), but JavaScript code in HTML
attributes is never strict. Event handlers defined in this way are
executed in an environment in which unexpected variables are
defined. This can be a source of confusing bugs and is a good reason
to avoid writing event handlers in HTML.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="addEventListener()"><div class="sect3" id="addEventListener">
<h3>addEventListener()</h3>

<p>Any<a data-type="indexterm" data-primary="addEventListener() method" id="idm46198509917224"></a> object that can be an event target—this includes the Window and
Document objects and all document Elements—defines a method named
<code>addEventListener()</code> that you can use to register an event handler for
that target. <code>addEventListener()</code> takes three arguments.  The first is
the event type for which the handler is being registered.  The event
type (or name) is a string that does not include the “on” prefix
used when setting event handler properties. The second
argument to <code>addEventListener()</code> is the function that should be
invoked when the specified type of event occurs. The third argument is
optional and is explained below.</p>

<p>The following code registers two handlers for the “click” event on a
<code>&lt;button&gt;</code> element. Note the differences between the two techniques
used:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;button</code> <code class="na">id=</code><code class="s">"mybutton"</code><code class="nt">&gt;</code>Click me<code class="nt">&lt;/button&gt;</code>
<code class="nt">&lt;script&gt;</code>
<code class="kd">let</code> <code class="nx">b</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#mybutton"</code><code class="p">);</code>
<code class="nx">b</code><code class="p">.</code><code class="nx">onclick</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code> <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Thanks for clicking me!"</code><code class="p">);</code> <code class="p">};</code>
<code class="nx">b</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"click"</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Thanks again!"</code><code class="p">);</code> <code class="p">});</code>
<code class="nt">&lt;/script&gt;</code></pre>

<p>Calling <code>addEventListener()</code> with “click” as its first argument does
not affect the value of the <code>onclick</code> property. In this code, a
button click will log two messages to the developer console. And if
we called <code>addEventListener()</code> first and then set <code>onclick</code>, we would
still log two messages, just in the opposite order. More importantly,
you can call <code>addEventListener()</code> multiple times to register more than
one handler function for the same event type on the same object. When
an event occurs on an object, all of the handlers registered for that
type of event are invoked in the order in which they were
registered. Invoking <code>addEventListener()</code> more than once on the same
object with the same arguments has no effect—the handler function
remains registered only once, and the repeated invocation does not
alter the order in which handlers are invoked.</p>

<p><code>addEventListener()</code> is paired with a <code>removeEventListener()</code> method
that expects the same two arguments (plus an optional third) but removes
an event handler function from an object rather than adding it. It is
often useful to temporarily register an event handler and then remove
it soon afterward. For example, when you get a “mousedown” event, you
might register temporary event handlers for “mousemove” and “mouseup”
events so that you can see if the user drags the mouse. You’d then
deregister these handlers when the “mouseup” event arrives. In such a
situation, your event handler removal code might look like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">removeEventListener</code><code class="p">(</code><code class="s2">"mousemove"</code><code class="p">,</code> <code class="nx">handleMouseMove</code><code class="p">);</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">removeEventListener</code><code class="p">(</code><code class="s2">"mouseup"</code><code class="p">,</code> <code class="nx">handleMouseUp</code><code class="p">);</code></pre>

<p>The optional third argument to <code>addEventListener()</code> is a boolean value
or object. If you pass <code>true</code>, then your handler function is
registered as a <em>capturing</em> event handler and is invoked at a
different phase of event dispatch. We’ll cover event capturing in
<a data-type="xref" href="#eventpropagation">§15.2.4</a>. If you pass a third argument of <code>true</code> when you
register an event listener, then you must also pass <code>true</code> as the
third argument to <code>removeEventListener()</code> if you want to remove the
handler.</p>

<p>Registering a capturing event handler is only one of the three options
that <code>addEventListener()</code> supports, and instead of passing a single
boolean value, you can also pass an object that explicitly specifies
the options you want:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"click"</code><code class="p">,</code> <code class="nx">handleClick</code><code class="p">,</code> <code class="p">{</code>
    <code class="nx">capture</code><code class="o">:</code> <code class="kc">true</code><code class="p">,</code>
    <code class="nx">once</code><code class="o">:</code> <code class="kc">true</code><code class="p">,</code>
    <code class="nx">passive</code><code class="o">:</code> <code class="kc">true</code>
<code class="p">});</code></pre>

<p>If the Options object has a <code>capture</code> property set to <code>true</code>, then the
event handler will be registered as a capturing handler. If that
property is <code>false</code> or is omitted, then the handler will be
non-capturing.</p>

<p>If the Options object has a <code>once</code> property set to <code>true</code>, then the
event listener will be automatically removed after it is triggered
once. If this property is <code>false</code> or is omitted, then the handler is
never automatically removed.</p>

<p>If the Options object has a <code>passive</code> property set to <code>true</code>, it
indicates that the event handler will never call <code>preventDefault()</code> to
cancel the default action (see <a data-type="xref" href="#eventcancellation">§15.2.5</a>). This is
particularly important for touch events on mobile devices—if event
handlers for “touchmove” events can prevent the browser’s default
scrolling action, then the browser cannot implement smooth
scrolling. This <code>passive</code> property provides a way to register a
potentially disruptive event handler of this sort but lets the web
browser know that it can safely begin its default behavior—such as
scrolling—while the event handler is running. Smooth scrolling is so
important for a good user experience that Firefox and Chrome make
“touchmove” and “mousewheel” events passive by default. So if you
actually want to register a handler that calls <code>preventDefault()</code> for
one of these events, you should explicitly set the <code>passive</code> property
to <code>false</code>.</p>

<p>You can also pass an Options object to <code>removeEventListener()</code>, but the
<code>capture</code> property is the only one that is relevant. There is no need
to specify <code>once</code> or <code>passive</code> when removing a listener, and these
properties are ignored.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.2.3 Event Handler Invocation"><div class="sect2" id="handlerinvocation">
<h2>15.2.3 Event Handler Invocation</h2>

<p>Once<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="event handler invocation" id="idm46198509724536"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="event handler invocation" id="idm46198509723224"></a> you’ve registered an event handler, the web browser will invoke
it automatically when an event of the specified type occurs on the
specified object. This section describes event handler invocation in
detail, explaining event handler arguments, the invocation context
(the <code>this</code> value), and the meaning of the return value of an event
handler.</p>










<section data-type="sect3" data-pdf-bookmark="Event handler argument"><div class="sect3" id="idm46198509721320">
<h3>Event handler argument</h3>

<p>Event handlers are invoked with an Event object as their single
argument. The properties of the Event object provide details about the
event:</p>
<dl>
<dt><code>type</code></dt>
<dd>
<p>The type of the event that occurred.</p>
</dd>
<dt><code>target</code></dt>
<dd>
<p>The object on which the event occurred.</p>
</dd>
<dt><code>currentTarget</code></dt>
<dd>
<p>For events that propagate, this property is the
object on which the current event handler was registered.</p>
</dd>
<dt><code>timeStamp</code></dt>
<dd>
<p>A timestamp (in milliseconds) that represents when the
event occurred but that does not represent an absolute time. You can
determine the elapsed time between two events by subtracting the
timestamp of the first event from the timestamp of the second.</p>
</dd>
<dt><code>isTrusted</code></dt>
<dd>
<p>This property will be <code>true</code> if the event was dispatched
by the web browser itself and <code>false</code> if the event was dispatched by
JavaScript code.</p>
</dd>
</dl>

<p>Specific kinds of events have additional properties. Mouse and pointer
events, for example, have <code>clientX</code> and <code>clientY</code> properties that specify
the window coordinates at which the event occurred.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Event handler context"><div class="sect3" id="idm46198509680472">
<h3>Event handler context</h3>

<p>When you register an event handler by setting a property, it looks as
if you are defining a new method on the target object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">target</code><code class="p">.</code><code class="nx">onclick</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code> <code class="cm">/* handler code */</code> <code class="p">};</code></pre>

<p>It isn’t surprising, therefore, that event handlers are invoked as
methods of the object on which they are defined. That is, within the
body of an event handler, the <code>this</code> keyword refers to the object on
which the event handler was registered.</p>

<p>Handlers are invoked with the target as their <code>this</code> value, even when
registered using <code>addEventListener()</code>. This does not work for handlers
defined as arrow functions, however: arrow functions always have the
same <code>this</code> value as the scope in which they are defined.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Handler return value"><div class="sect3" id="handlerreturnvalue">
<h3>Handler return value</h3>

<p>In modern JavaScript, event handlers should not return anything. You
may see event handlers that return values in older code, and the
return value is typically a signal to the browser that it should not
perform the default action associated with the event. If the <code>onclick</code>
handler of a Submit button in a form returns <code>false</code>, for example,
then the web browser will not submit the form (usually because the
event handler determined that the user’s input fails client-side
validation).</p>

<p>The standard and preferred way to prevent the browser from performing
a default action is to call the <code>preventDefault()</code> method
(<a data-type="xref" href="#eventcancellation">§15.2.5</a>) on the Event object.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Invocation order"><div class="sect3" id="idm46198509660696">
<h3>Invocation order</h3>

<p>An event target may have more than one event handler registered for a
particular type of event. When an event of that type occurs, the
browser invokes all of the handlers in the order in which they were
registered. Interestingly, this is true even if you mix event handlers
registered with <code>addEventListener()</code> with an event handler registered
on an object property like <code>onclick</code>.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.2.4 Event Propagation"><div class="sect2" id="eventpropagation">
<h2>15.2.4 Event Propagation</h2>

<p>When<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="event propagation" id="idm46198509656104"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="event propagation" id="idm46198509654856"></a> the target of an event is the Window object or some other
standalone object, the browser responds to an event simply by invoking
the appropriate handlers on that one object. When the event target is
a Document or document Element, however, the situation is more
complicated.</p>

<p>After the event handlers registered on the target element are invoked,
most events “bubble” up the DOM tree. The event handlers of the
target’s parent are invoked. Then the handlers registered on the
target’s grandparent are invoked. This continues up to the Document
object, and then beyond to the Window object. Event bubbling provides
an alternative to registering handlers on lots of individual document
elements: instead, you can register a single handler on a common
ancestor element and handle events there. You might register a
“change” handler on a <code>&lt;form&gt;</code> element, for example, instead of
registering a “change” handler for every element in the form.</p>

<p>Most events that occur on document elements bubble. Notable exceptions
are the “focus,” “blur,” and “scroll” events. The “load” event on
document elements bubbles, but it stops bubbling at the Document
object and does not propagate on to the 
<span class="keep-together">Window</span> object. (The “load”
event handlers of the Window object are triggered only when the entire
document has loaded.)</p>

<p>Event bubbling is the third “phase” of event propagation. The
invocation of the event handlers of the target object itself is the
second phase. The first phase, which occurs even before the target
handlers are invoked, is called the “capturing” phase. Recall that
<code>addEventListener()</code> takes an optional third argument. If that
argument is <code>true</code>, or <code>{capture:true}</code>, then the event handler is
registered as a capturing event handler for invocation during this
first phase of event propagation. The capturing phase of event
propagation is like the bubbling phase in reverse. The capturing
handlers of the Window object are invoked first, then the capturing
handlers of the Document object, then of the body object, and so on
down the DOM tree until the capturing event handlers of the parent of
the event target are invoked. Capturing event handlers registered on
the event target itself are not invoked.</p>

<p>Event capturing provides an opportunity to peek at events before they
are delivered to their target. A capturing event handler can be used
for debugging, or it can be used along with the event cancellation
technique described in the next section to filter events so that the target event
handlers are never actually invoked. One common use for event capturing
is handling mouse drags, where mouse motion events need to be handled
by the object being dragged, not the document elements over which it is
dragged.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.2.5 Event Cancellation"><div class="sect2" id="eventcancellation">
<h2>15.2.5 Event Cancellation</h2>

<p>Browsers<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="event cancellation" id="idm46198509624536"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="event cancellation" id="idm46198509623448"></a> respond to many user events, even if your code does not: when
the user clicks the mouse on a hyperlink, the browser follows the
link. If an HTML text input element has the keyboard focus and the
user types a key, the browser will enter the user’s input. If the user
moves their finger across a touch-screen device, the browser
scrolls. If you register an event handler for events like these, you
can prevent the browser from performing its default action by invoking
the <code>preventDefault()</code> method of the event object. (Unless you
registered the handler with the <code>passive</code> option, which makes
<code>preventDefault()</code> ineffective.)</p>

<p>Canceling the default action associated with an event is only one kind
of event cancellation. We can also cancel the propagation of events by
calling the <code>stopPropagation()</code> method of the event object. If there
are other handlers defined on the same object, the rest of those
handlers will still be invoked, but no event handlers on any other
object will be invoked after <code>stopPropagation()</code> is
called. <code>stopPropagation()</code> works during the capturing phase, at the
event target itself, and during the bubbling
phase. <code>stopImmediatePropagation()</code> works like <code>stopPropagation()</code>, but
it also prevents the invocation of any subsequent event handlers
registered on the same object.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.2.6 Dispatching Custom Events"><div class="sect2" id="idm46198509617112">
<h2>15.2.6 Dispatching Custom Events</h2>

<p>Client-side<a data-type="indexterm" data-primary="web browser host environment" data-secondary="events" data-tertiary="dispatching custom events" id="idm46198509615816"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="dispatching custom events" id="idm46198509614552"></a> JavaScript’s event API is a relatively powerful one, and
you can use it to define and dispatch your own events. Suppose, for
example, that your program periodically needs to perform a long
calculation or make a network request and that, while this operation is
pending, other operations are not possible. You want to let the user
know about this by displaying “spinners” to indicate that the
application is busy. But the module that is busy should not need to
know where the spinners should be displayed. Instead, that module
might just dispatch an event to announce that it is busy and then
dispatch another event when it is no longer busy. Then, the UI module
can register event handlers for those events and take whatever UI
actions are appropriate to notify the user.</p>

<p>If a JavaScript object has an <code>addEventListener()</code> method, then it is
an “event target,” and this means it also has a <code>dispatchEvent()</code>
method. You can create your own event object with the <code>CustomEvent()</code>
constructor and pass it to <code>dispatchEvent()</code>. The first argument to
<code>CustomEvent()</code> is a string that specifies the type of your event, and
the second argument is an object that specifies the properties of the
event object. Set the <code>detail</code> property of this object to a string,
object, or other value that represents the content of your event. If
you plan to dispatch your event on a document element and want it to
bubble up the document tree, add <code>bubbles:true</code> to the second<a data-type="indexterm" data-primary="" data-startref="WBevent15" id="idm46198509608632"></a><a data-type="indexterm" data-primary="" data-startref="event15" id="idm46198509607624"></a> argument:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Dispatch a custom event so the UI knows we are busy</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">dispatchEvent</code><code class="p">(</code><code class="k">new</code> <code class="nx">CustomEvent</code><code class="p">(</code><code class="s2">"busy"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">detail</code><code class="o">:</code> <code class="kc">true</code> <code class="p">}));</code>

<code class="c1">// Perform a network operation</code>
<code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">)</code>
  <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">handleNetworkResponse</code><code class="p">)</code>
  <code class="p">.</code><code class="k">catch</code><code class="p">(</code><code class="nx">handleNetworkError</code><code class="p">)</code>
  <code class="p">.</code><code class="k">finally</code><code class="p">(()</code> <code class="o">=&gt;</code> <code class="p">{</code>
      <code class="c1">// After the network request has succeeded or failed, dispatch</code>
      <code class="c1">// another event to let the UI know that we are no longer busy.</code>
      <code class="nb">document</code><code class="p">.</code><code class="nx">dispatchEvent</code><code class="p">(</code><code class="k">new</code> <code class="nx">CustomEvent</code><code class="p">(</code><code class="s2">"busy"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">detail</code><code class="o">:</code> <code class="kc">false</code> <code class="p">}));</code>
  <code class="p">});</code>

<code class="c1">// Elsewhere, in your program you can register a handler for "busy" events</code>
<code class="c1">// and use it to show or hide the spinner to let the user know.</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"busy"</code><code class="p">,</code> <code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">e</code><code class="p">.</code><code class="nx">detail</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">showSpinner</code><code class="p">();</code>
    <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
        <code class="nx">hideSpinner</code><code class="p">();</code>
    <code class="p">}</code>
<code class="p">});</code></pre>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.3 Scripting Documents"><div class="sect1" id="dom">
<h1>15.3 Scripting Documents</h1>

<p>Client-side<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="overview of" id="idm46198509521400"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" id="WBscript15"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="overview of" id="idm46198509518968"></a> JavaScript exists to turn static HTML documents into
interactive web applications. So scripting the content of web pages is
really the central purpose of JavaScript.</p>

<p>Every Window object has a <code>document</code> property that refers to a
Document object. The Document object represents the content of the
window, and it is the subject of this section. The Document object
does not stand alone, however. It is the central object in the DOM for representing
and manipulating document content.</p>

<p>The DOM was introduced in <a data-type="xref" href="#domintro">§15.1.2</a>. This section explains
the API in detail. It <span class="keep-together">covers:</span></p>

<ul>
<li>
<p>How to query or <em>select</em> individual elements from a document.</p>
</li>
<li>
<p>How to <em>traverse</em> a document, and how to find the ancestors,
siblings, and descendants of any document element.</p>
</li>
<li>
<p>How to query and set the attributes of document elements.</p>
</li>
<li>
<p>How to query, set, and modify the content of a document.</p>
</li>
<li>
<p>How to modify the structure of a document by creating, inserting, and
deleting nodes.</p>
</li>
</ul>








<section data-type="sect2" data-pdf-bookmark="15.3.1 Selecting Document Elements"><div class="sect2" id="selectingelements">
<h2>15.3.1 Selecting Document Elements</h2>

<p>Client-side<a data-type="indexterm" data-primary="elements" data-secondary="document elements" data-tertiary="selecting" id="idm46198509506808"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="selecting document elements" id="idm46198509505528"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="selecting document elements" id="idm46198509504280"></a> JavaScript programs often need to manipulate one or more
elements within the document. The global <code>document</code> property refers to
the Document object, and the Document object has <code>head</code> and <code>body</code>
properties that refer to the Element objects for the <code>&lt;head&gt;</code> and
<code>&lt;body&gt;</code> tags, respectively. But a program that wants to manipulate an
element embedded more deeply in the document must somehow obtain or
<em>select</em> the Element objects that refer to those document
elements.</p>










<section data-type="sect3" data-pdf-bookmark="Selecting elements with CSS selectors"><div class="sect3" id="selectors">
<h3>Selecting elements with CSS selectors</h3>

<p>CSS stylesheets<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="CSS selector syntax" id="idm46198509497832"></a> have a very powerful syntax, known as <em>selectors</em>, for
describing elements or sets of elements within a document. The<a data-type="indexterm" data-primary="querySelector() method" id="idm46198509496424"></a><a data-type="indexterm" data-primary="querySelectorAll() method" id="idm46198509495720"></a> DOM
methods <code>querySelector()</code> and <code>querySelectorAll()</code> allow us to find
the element or elements within a document that match a specified CSS
selector. Before we cover the methods, we’ll start with a quick
tutorial on CSS selector syntax.</p>

<p>CSS selectors can describe elements by tag name, the value of
their <code>id</code> attribute, or the words in their <code>class</code> attribute:</p>

<pre data-type="programlisting" data-code-language="css"><code class="n">div</code>                     <code class="o">//</code> <code class="n">Any</code> <code class="o">&lt;</code><code class="n">div</code><code class="o">&gt;</code> <code class="n">element</code>
<code class="m">#nav</code>                    <code class="o">//</code> <code class="n">The</code> <code class="n">element</code> <code class="n">with</code> <code class="n">id</code><code class="o">=</code><code class="s2">"nav"</code>
<code class="o">.</code><code class="n">warning</code>                <code class="o">//</code> <code class="n">Any</code> <code class="n">element</code> <code class="n">with</code> <code class="s2">"warning"</code> <code class="n">in</code> <code class="n">its</code> <code class="n">class</code> <code class="n">attribute</code></pre>

<p>The <code>#</code> character is used to match based on the <code>id</code> attribute, and the
<code>.</code> character is used to match based on the <code>class</code>
attribute. Elements can also be selected based on more general
attribute values:</p>

<pre data-type="programlisting" data-code-language="css"><code class="n">p</code><code class="p">[</code><code class="n">lang</code><code class="o">=</code><code class="s2">"fr"</code><code class="p">]</code>            <code class="o">//</code> <code class="n">A</code> <code class="n">paragraph</code> <code class="n">written</code> <code class="n">in</code> <code class="n">French</code><code class="o">:</code> <code class="o">&lt;</code><code class="n">p</code> <code class="n">lang</code><code class="o">=</code><code class="s2">"fr"</code><code class="o">&gt;</code>
<code class="o">*</code><code class="p">[</code><code class="n">name</code><code class="o">=</code><code class="s2">"x"</code><code class="p">]</code>             <code class="o">//</code> <code class="n">Any</code> <code class="n">element</code> <code class="n">with</code> <code class="n">a</code> <code class="n">name</code><code class="o">=</code><code class="s2">"x"</code> <code class="n">attribute</code></pre>

<p>Note that these examples combine a tag name selector (or the <code>*</code>
tag name wildcard) with an attribute selector. More complex
combinations are also possible:</p>

<pre data-type="programlisting" data-code-language="css"><code class="n">span</code><code class="o">.</code><code class="n">fatal</code><code class="o">.</code><code class="n">error</code>        <code class="o">//</code> <code class="n">Any</code> <code class="o">&lt;</code><code class="n">span</code><code class="o">&gt;</code> <code class="n">with</code> <code class="s2">"fatal"</code> <code class="n">and</code> <code class="s2">"error"</code> <code class="n">in</code> <code class="n">its</code> <code class="n">class</code>
<code class="n">span</code><code class="p">[</code><code class="n">lang</code><code class="o">=</code><code class="s2">"fr"</code><code class="p">]</code><code class="o">.</code><code class="n">warning</code> <code class="o">//</code> <code class="n">Any</code> <code class="o">&lt;</code><code class="n">span</code><code class="o">&gt;</code> <code class="n">in</code> <code class="n">French</code> <code class="n">with</code> <code class="n">class</code> <code class="s2">"warning"</code></pre>

<p>Selectors can also specify document structure:</p>

<pre data-type="programlisting" data-code-language="css"><code class="m">#log</code> <code class="n">span</code>               <code class="o">//</code> <code class="n">Any</code> <code class="o">&lt;</code><code class="n">span</code><code class="o">&gt;</code> <code class="n">descendant</code> <code class="n">of</code> <code class="n">the</code> <code class="n">element</code> <code class="n">with</code> <code class="n">id</code><code class="o">=</code><code class="s2">"log"</code>
<code class="m">#log</code><code class="o">&gt;</code><code class="n">span</code>               <code class="o">//</code> <code class="n">Any</code> <code class="o">&lt;</code><code class="n">span</code><code class="o">&gt;</code> <code class="n">child</code> <code class="n">of</code> <code class="n">the</code> <code class="n">element</code> <code class="n">with</code> <code class="n">id</code><code class="o">=</code><code class="s2">"log"</code>
<code class="n">body</code><code class="o">&gt;</code><code class="n">h1</code><code class="o">:</code><code class="n">first</code><code class="o">-</code><code class="n">child</code>     <code class="o">//</code> <code class="n">The</code> <code class="n">first</code> <code class="o">&lt;</code><code class="n">h1</code><code class="o">&gt;</code> <code class="n">child</code> <code class="n">of</code> <code class="n">the</code> <code class="o">&lt;</code><code class="n">body</code><code class="o">&gt;</code>
<code class="n">img</code> <code class="o">+</code> <code class="n">p</code><code class="o">.</code><code class="n">caption</code>         <code class="o">//</code> <code class="n">A</code> <code class="o">&lt;</code><code class="n">p</code><code class="o">&gt;</code> <code class="n">with</code> <code class="n">class</code> <code class="s2">"caption"</code> <code class="n">immediately</code> <code class="n">after</code> <code class="n">an</code> <code class="o">&lt;</code><code class="n">img</code><code class="o">&gt;</code>
<code class="n">h2</code> <code class="o">~</code> <code class="n">p</code>                  <code class="o">//</code> <code class="n">Any</code> <code class="o">&lt;</code><code class="n">p</code><code class="o">&gt;</code> <code class="n">that</code> <code class="n">follows</code> <code class="n">an</code> <code class="o">&lt;</code><code class="n">h2</code><code class="o">&gt;</code> <code class="n">and</code> <code class="n">is</code> <code class="n">a</code> <code class="n">sibling</code> <code class="n">of</code> <code class="n">it</code></pre>

<p>If two selectors are separated by a comma, it means that we’ve
selected elements that match either one of the selectors:</p>

<pre data-type="programlisting" data-code-language="css"><code class="n">button</code><code class="o">,</code> <code class="n">input</code><code class="p">[</code><code class="n">type</code><code class="o">=</code><code class="s2">"button"</code><code class="p">]</code> <code class="o">//</code> <code class="n">All</code> <code class="o">&lt;</code><code class="n">button</code><code class="o">&gt;</code> <code class="n">and</code> <code class="o">&lt;</code><code class="n">input</code> <code class="n">type</code><code class="o">=</code><code class="s2">"button"</code><code class="o">&gt;</code> <code class="n">elements</code></pre>

<p>As you can see, CSS selectors allow us to refer to elements within a
document by type, ID, class, attributes, and position within the
document. The <code>querySelector()</code> method takes a CSS selector string as
its argument and returns the first matching element in the document
that it finds, or returns <code>null</code> if none match:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Find the document element for the HTML tag with attribute id="spinner"</code>
<code class="kd">let</code> <code class="nx">spinner</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#spinner"</code><code class="p">);</code></pre>

<p><code>querySelectorAll()</code> is similar, but it returns all matching elements
in the document rather than just returning the first:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Find all Element objects for &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; tags</code>
<code class="kd">let</code> <code class="nx">titles</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelectorAll</code><code class="p">(</code><code class="s2">"h1, h2, h3"</code><code class="p">);</code></pre>

<p>The<a data-type="indexterm" data-primary="NodeLists" id="idm46198509124472"></a> return value of <code>querySelectorAll()</code> is not an array of Element
objects. Instead, it is an array-like object known as a
NodeList. NodeList objects have a <code>length</code> property and can be indexed
like arrays, so you can loop over them with a traditional <code>for</code>
loop. NodeLists are also iterable, so you can use them with <code>for/of</code>
loops as well. If you want to convert a NodeList into a true array,
simply pass it to <code>Array.from()</code>.</p>

<p>The NodeList returned by <code>querySelectorAll()</code> will have a <code>length</code>
property set to 0 if there are not any elements in the document that
match the specified selector.</p>

<p><code>querySelector()</code> and <code>querySelectorAll()</code> are implemented by the
Element class as well as by the Document class. When invoked on an
element, these methods will only return elements that are descendants
of that element.</p>

<p>Note that CSS defines <code>::first-line</code> and <code>::first-letter</code> pseudoelements.
In CSS, these match portions of text nodes rather than actual elements.
They will not match if used with <code>querySelectorAll()</code> or
<code>querySelector()</code>. Also, many browsers will refuse to return matches
for the <code>:link</code> and <code>:visited</code> pseudoclasses, as this could expose
information about the user’s browsing history.</p>

<p>Another<a data-type="indexterm" data-primary="closest() method" id="idm46198509020824"></a> CSS-based element selection method is <code>closest()</code>. This method
is defined by the Element class and takes a selector as its only
argument. If the selector matches the element it is invoked on, it
returns that element. Otherwise, it returns the closest ancestor
element that the selector matches, or returns <code>null</code> if none matched. In
a sense, <code>closest()</code> is the opposite of <code>querySelector()</code>: <code>closest()</code>
starts at an element and looks for a match above it in the tree, while
<code>querySelector()</code> starts with an element and looks for a match below
it in the tree. <code>closest()</code> can be useful when you have registered an
event handler at a high level in the document tree. If you are
handling a “click” event, for example, you might want to know whether
it is a click a hyperlink. The event object will tell you what the
target was, but that target might be the text inside a link rather
than the hyperlink’s <code>&lt;a&gt;</code> tag itself. Your event handler could look
for the nearest containing hyperlink like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Find the closest enclosing &lt;a&gt; tag that has an href attribute.</code>
<code class="kd">let</code> <code class="nx">hyperlink</code> <code class="o">=</code> <code class="nx">event</code><code class="p">.</code><code class="nx">target</code><code class="p">.</code><code class="nx">closest</code><code class="p">(</code><code class="s2">"a[href]"</code><code class="p">);</code></pre>

<p>Here is another way you might use <code>closest()</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Return true if the element e is inside of an HTML list element</code>
<code class="kd">function</code> <code class="nx">insideList</code><code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nx">e</code><code class="p">.</code><code class="nx">closest</code><code class="p">(</code><code class="s2">"ul,ol,dl"</code><code class="p">)</code> <code class="o">!==</code> <code class="kc">null</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>The<a data-type="indexterm" data-primary="matches() method" id="idm46198508972728"></a> related method <code>matches()</code> does not return ancestors or
descendants: it simply tests whether an element is matched by a CSS
selector and returns <code>true</code> if so and <code>false</code> otherwise:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Return true if e is an HTML heading element</code>
<code class="kd">function</code> <code class="nx">isHeading</code><code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">return</code> <code class="nx">e</code><code class="p">.</code><code class="nx">matches</code><code class="p">(</code><code class="s2">"h1,h2,h3,h4,h5,h6"</code><code class="p">);</code>
<code class="p">}</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Other element selection methods"><div class="sect3" id="idm46198508876952">
<h3>Other element selection methods</h3>

<p>In addition to <code>querySelector()</code> and <code>querySelectorAll()</code>, the DOM
also defines a number of older element selection methods that are
more or less obsolete now. You may still see some of these methods
(especially <code>getElementById()</code>) in use, however:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Look up an element by id. The argument is just the id, without</code>
<code class="c1">// the CSS selector prefix #. Similar to document.querySelector("#sect1")</code>
<code class="kd">let</code> <code class="nx">sect1</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">getElementById</code><code class="p">(</code><code class="s2">"sect1"</code><code class="p">);</code>

<code class="c1">// Look up all elements (such as form checkboxes) that have a name="color"</code>
<code class="c1">// attribute. Similar to document.querySelectorAll('*[name="color"]');</code>
<code class="kd">let</code> <code class="nx">colors</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">getElementsByName</code><code class="p">(</code><code class="s2">"color"</code><code class="p">);</code>

<code class="c1">// Look up all &lt;h1&gt; elements in the document.</code>
<code class="c1">// Similar to document.querySelectorAll("h1")</code>
<code class="kd">let</code> <code class="nx">headings</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">getElementsByTagName</code><code class="p">(</code><code class="s2">"h1"</code><code class="p">);</code>

<code class="c1">// getElementsByTagName() is also defined on elements.</code>
<code class="c1">// Get all &lt;h2&gt; elements within the sect1 element.</code>
<code class="kd">let</code> <code class="nx">subheads</code> <code class="o">=</code> <code class="nx">sect1</code><code class="p">.</code><code class="nx">getElementsByTagName</code><code class="p">(</code><code class="s2">"h2"</code><code class="p">);</code>

<code class="c1">// Look up all elements that have class "tooltip."</code>
<code class="c1">// Similar to document.querySelectorAll(".tooltip")</code>
<code class="kd">let</code> <code class="nx">tooltips</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">getElementsByClassName</code><code class="p">(</code><code class="s2">"tooltip"</code><code class="p">);</code>

<code class="c1">// Look up all descendants of sect1 that have class "sidebar"</code>
<code class="c1">// Similar to sect1.querySelectorAll(".sidebar")</code>
<code class="kd">let</code> <code class="nx">sidebars</code> <code class="o">=</code> <code class="nx">sect1</code><code class="p">.</code><code class="nx">getElementsByClassName</code><code class="p">(</code><code class="s2">"sidebar"</code><code class="p">);</code></pre>

<p>Like <code>querySelectorAll()</code>, the methods in this code return a
NodeList (except for <code>getElementById()</code>, which returns a single
Element object). Unlike <code>querySelectorAll()</code>, however, the NodeLists
returned by these older selection methods are “live,” which means that
the length and content of the list can change if the document content
or structure changes.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Preselected elements"><div class="sect3" id="idm46198508798648">
<h3>Preselected elements</h3>

<p>For historical reasons, the Document class defines shortcut properties
to access certain kinds of nodes. The <code>images</code>, <code>forms</code>, and <code>links</code>
properties, for example, provide easy access to the <code>&lt;img&gt;</code>, <code>&lt;form&gt;</code>,
and <code>&lt;a&gt;</code> elements (but only <code>&lt;a&gt;</code> tags that have an <code>href</code> attribute)
of a document. These properties refer to HTMLCollection objects, which
are much like NodeList objects, but they can additionally be indexed
by element ID or name. With the <code>document.forms</code> property, for
example, you can access the <code>&lt;form id="address"&gt;</code> tag as:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">forms</code><code class="p">.</code><code class="nx">address</code><code class="p">;</code></pre>

<p>An even more outdated API for selecting elements is the <code>document.all</code>
property, which is like an HTMLCollection for all elements in the
document. <code>document.all</code> is deprecated, and you should no longer use it.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.3.2 Document Structure and Traversal"><div class="sect2" id="idm46198508790408">
<h2>15.3.2 Document Structure and Traversal</h2>

<p>Once<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="document structure and traversal" id="idm46198508788936"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="document structure and traversal" id="idm46198508786120"></a> you have selected an Element from a Document, you sometimes need
to find structurally related portions (parent, siblings, children) of
the document. When we are primarily interested in the Elements of a
document instead of the text within them (and the whitespace between
them, which is also text), there is a traversal API that allows us to
treat a document as a tree of Element objects, ignoring Text nodes
that are also part of the document. This traversal API does not
involve any methods; it is simply a set of properties on Element
objects that allow us to refer to the parent, children, and siblings of
a given element:</p>
<dl class="less_space pagebreak-before">
<dt><code>parentNode</code></dt>
<dd>
<p>This property of an element refers to the parent of the
element, which will be another Element or a Document object.</p>
</dd>
<dt><code>children</code></dt>
<dd>
<p>This NodeList contains the Element children of an
element, but excludes non-Element children like Text nodes (and
Comment nodes).</p>
</dd>
<dt><code>childElementCount</code></dt>
<dd>
<p>The number of Element children. Returns the same
value as <code>children.length</code>.</p>
</dd>
<dt><code>firstElementChild</code>, <code>lastElementChild</code></dt>
<dd>
<p>These properties refer to
the first and last Element children of an Element. They are <code>null</code> if
the Element has no Element children.</p>
</dd>
<dt><code>nextElementSibling</code>, <code>previousElementSibling</code></dt>
<dd>
<p>These properties
refer to the sibling Elements immediately before or immediately after
an Element, or <code>null</code> if there is no such sibling.</p>
</dd>
</dl>

<p>Using these Element properties, the second child Element of the first
child Element of the Document can be referred to with either of these
expressions:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">children</code><code class="p">[</code><code class="mi">0</code><code class="p">].</code><code class="nx">children</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">firstElementChild</code><code class="p">.</code><code class="nx">firstElementChild</code><code class="p">.</code><code class="nx">nextElementSibling</code></pre>

<p>(In a standard HTML document, both of those expressions refer to the
<code>&lt;body&gt;</code> tag of the document.)</p>

<p>Here are two functions that demonstrate how you can use these
properties to recursively do a depth-first traversal of a document
invoking a specified function for every element in the document:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Recursively traverse the Document or Element e, invoking the function</code>
<code class="c1">// f on e and on each of its descendants</code>
<code class="kd">function</code> <code class="nx">traverse</code><code class="p">(</code><code class="nx">e</code><code class="p">,</code> <code class="nx">f</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">f</code><code class="p">(</code><code class="nx">e</code><code class="p">);</code>                             <code class="c1">// Invoke f() on e</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">child</code> <code class="k">of</code> <code class="nx">e</code><code class="p">.</code><code class="nx">children</code><code class="p">)</code> <code class="p">{</code>    <code class="c1">// Iterate over the children</code>
        <code class="nx">traverse</code><code class="p">(</code><code class="nx">child</code><code class="p">,</code> <code class="nx">f</code><code class="p">);</code>           <code class="c1">// And recurse on each one</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="kd">function</code> <code class="nx">traverse2</code><code class="p">(</code><code class="nx">e</code><code class="p">,</code> <code class="nx">f</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">f</code><code class="p">(</code><code class="nx">e</code><code class="p">);</code>                             <code class="c1">// Invoke f() on e</code>
    <code class="kd">let</code> <code class="nx">child</code> <code class="o">=</code> <code class="nx">e</code><code class="p">.</code><code class="nx">firstElementChild</code><code class="p">;</code>  <code class="c1">// Iterate the children linked-list style</code>
    <code class="k">while</code><code class="p">(</code><code class="nx">child</code> <code class="o">!==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">traverse2</code><code class="p">(</code><code class="nx">child</code><code class="p">,</code> <code class="nx">f</code><code class="p">);</code>          <code class="c1">// And recurse</code>
        <code class="nx">child</code> <code class="o">=</code> <code class="nx">child</code><code class="p">.</code><code class="nx">nextElementSibling</code><code class="p">;</code>
    <code class="p">}</code>
<code class="p">}</code></pre>










<section data-type="sect3" data-pdf-bookmark="Documents as trees of nodes"><div class="sect3" id="treeofnodes">
<h3>Documents as trees of nodes</h3>

<p>If you want to traverse a document or some portion of a document and
do not want to ignore the Text nodes, you can use a different set of
properties defined on all Node objects. This will allow you to see
Elements, Text nodes, and even Comment nodes (which represent HTML
comments in the document).</p>

<p>All Node objects define the following properties:</p>
<dl>
<dt><code>parentNode</code></dt>
<dd>
<p>The node that is the parent of this one, or <code>null</code> for
nodes like the Document object that have no parent.</p>
</dd>
<dt><code>childNodes</code></dt>
<dd>
<p>A read-only NodeList that that contains all children
(not just Element children) of the node.</p>
</dd>
<dt><code>firstChild</code>, <code>lastChild</code></dt>
<dd>
<p>The first and last child nodes of a node,
or <code>null</code> if the node has no children.</p>
</dd>
<dt><code>nextSibling</code>, <code>previousSibling</code></dt>
<dd>
<p>The next and previous sibling nodes
of a node. These properties connect nodes in a doubly linked list.</p>
</dd>
<dt><code>nodeType</code></dt>
<dd>
<p>A number that specifies what kind of node this is.
Document nodes have value 9.
Element nodes have value 1.
Text nodes have value 3.
Comment nodes have value 8.</p>
</dd>
<dt><code>nodeValue</code></dt>
<dd>
<p>The textual content of a Text or Comment node.</p>
</dd>
<dt><code>nodeName</code></dt>
<dd>
<p>The HTML tag name of an Element, converted to uppercase.</p>
</dd>
</dl>

<p>Using these Node properties, the second child node of the first child
of the Document can be referred to with expressions like these:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">childNodes</code><code class="p">[</code><code class="mi">0</code><code class="p">].</code><code class="nx">childNodes</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">firstChild</code><code class="p">.</code><code class="nx">firstChild</code><code class="p">.</code><code class="nx">nextSibling</code></pre>

<p>Suppose the document in question is the following:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;html&gt;&lt;head&gt;&lt;title&gt;</code>Test<code class="nt">&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</code>Hello World!<code class="nt">&lt;/body&gt;&lt;/html&gt;</code></pre>

<p>Then the second child of the first child is the <code>&lt;body&gt;</code> element. It
has a <code>nodeType</code> of 1 and a <code>nodeName</code> of “BODY”.</p>

<p>Note, however, that this API is extremely sensitive to variations in
the document text. If the document is modified by inserting a single
newline between the <code>&lt;html&gt;</code> and the <code>&lt;head&gt;</code> tag, for example, the
Text node that represents that newline becomes the first child of the
first child, and the second child is the <code>&lt;head&gt;</code> element instead of
the <code>&lt;body&gt;</code> element.</p>

<p>To demonstrate this Node-based traversal API, here is a function that
returns all of the text within an element or document:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Return the plain-text content of element e, recursing into child elements.</code>
<code class="c1">// This method works like the textContent property</code>
<code class="kd">function</code> <code class="nx">textContent</code><code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="s2">""</code><code class="p">;</code>                        <code class="c1">// Accumulate the text here</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">child</code> <code class="o">=</code> <code class="nx">e</code><code class="p">.</code><code class="nx">firstChild</code><code class="p">;</code> <code class="nx">child</code> <code class="o">!==</code> <code class="kc">null</code><code class="p">;</code> <code class="nx">child</code> <code class="o">=</code> <code class="nx">child</code><code class="p">.</code><code class="nx">nextSibling</code><code class="p">)</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">type</code> <code class="o">=</code> <code class="nx">child</code><code class="p">.</code><code class="nx">nodeType</code><code class="p">;</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">type</code> <code class="o">===</code> <code class="mi">3</code><code class="p">)</code> <code class="p">{</code>              <code class="c1">// If it is a Text node</code>
            <code class="nx">s</code> <code class="o">+=</code> <code class="nx">child</code><code class="p">.</code><code class="nx">nodeValue</code><code class="p">;</code>      <code class="c1">// add the text content to our string.</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">type</code> <code class="o">===</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>       <code class="c1">// And if it is an Element node</code>
            <code class="nx">s</code> <code class="o">+=</code> <code class="nx">textContent</code><code class="p">(</code><code class="nx">child</code><code class="p">);</code>   <code class="c1">// then recurse.</code>
        <code class="p">}</code>
    <code class="p">}</code>
    <code class="k">return</code> <code class="nx">s</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>This function is a demonstration only—in practice, you would simply
write <code>e.textContent</code> to obtain the textual content of the element
<code>e</code>.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.3.3 Attributes"><div class="sect2" id="idm46198508738616">
<h2>15.3.3 Attributes</h2>

<p>HTML<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="querying and setting attributes" id="idm46198508371080"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="querying and setting attributes" id="idm46198508369864"></a> elements consist of a tag name and a set of name/value pairs
known as <em>attributes</em>. The <code>&lt;a&gt;</code> element that defines a hyperlink, for
example, uses the value of its <code>href</code> attribute as the destination of
the link.</p>

<p>The Element class defines general <code>getAttribute()</code>, <code>setAttribute()</code>,
<code>hasAttribute()</code>, and <code>removeAttribute()</code> methods for querying,
setting, testing, and removing the attributes of an element. But the
attribute values of HTML elements (for all standard attributes of
standard HTML elements) are available as properties of the HTMLElement
objects that represent those elements, and it is usually much easier
to work with them as JavaScript properties than it is to call
<code>getAttribute()</code> and related methods.</p>










<section data-type="sect3" data-pdf-bookmark="HTML attributes as element properties"><div class="sect3" id="attrsasprops">
<h3>HTML attributes as element properties</h3>

<p>The Element objects that represent the elements of an HTML document
usually define read/write properties that mirror the HTML attributes of the
elements. Element defines properties for the universal HTML
attributes such as <code>id</code>, <code>title</code>, <code>lang</code>, and <code>dir</code> and event handler
properties like <code>onclick</code>. Element-specific subtypes define attributes
specific to those elements. To query the URL of an image, for example,
you can use the <code>src</code> property of the HTMLElement that represents the
<code>&lt;img&gt;</code> element:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">image</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#main_image"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">url</code> <code class="o">=</code> <code class="nx">image</code><code class="p">.</code><code class="nx">src</code><code class="p">;</code>       <code class="c1">// The src attribute is the URL of the image</code>
<code class="nx">image</code><code class="p">.</code><code class="nx">id</code> <code class="o">===</code> <code class="s2">"main_image"</code>  <code class="c1">// =&gt; true; we looked up the image by id</code></pre>

<p>Similarly, you might set the form-submission attributes of a <code>&lt;form&gt;</code>
element with code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">f</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"form"</code><code class="p">);</code>      <code class="c1">// First &lt;form&gt; in the document</code>
<code class="nx">f</code><code class="p">.</code><code class="nx">action</code> <code class="o">=</code> <code class="s2">"https://www.example.com/submit"</code><code class="p">;</code> <code class="c1">// Set the URL to submit it to.</code>
<code class="nx">f</code><code class="p">.</code><code class="nx">method</code> <code class="o">=</code> <code class="s2">"POST"</code><code class="p">;</code>                           <code class="c1">// Set the HTTP request type.</code></pre>

<p>For some elements, such as the <code>&lt;input&gt;</code> element, some HTML attribute
names map to differently named properties. The HTML <code>value</code> attribute
of an <code>&lt;input&gt;</code>, for example, is mirrored by the JavaScript
<code>defaultValue</code> property. The JavaScript <code>value</code> property of the
<code>&lt;input&gt;</code> element contains the user’s current input, but changes to the
<code>value</code> property do not affect the <code>defaultValue</code> property nor the
<code>value</code> attribute.</p>

<p>HTML attributes are not case sensitive, but JavaScript property names
are. To convert an attribute name to the JavaScript property, write it
in lowercase. If the attribute is more than one word long, however,
put the first letter of each word after the first in uppercase:
<code>defaultChecked</code> and <code>tabIndex</code>, for example. Event handler properties
like <code>onclick</code> are an exception, however, and are written in lowercase.</p>

<p>Some HTML attribute names are reserved words in JavaScript. For these,
the general rule is to prefix the property name with “html”. The HTML
<code>for</code> attribute (of the <code>&lt;label&gt;</code> element), for example, becomes the
JavaScript <code>htmlFor</code> property. “class” is a reserved
word in JavaScript, and the very important HTML <code>class</code> attribute is an
exception to the rule: it becomes <code>className</code> in JavaScript code.</p>

<p>The properties that represent HTML attributes usually have string
values. But when the attribute is a boolean or numeric value (the
<code>defaultChecked</code> and <code>maxLength</code> attributes of an <code>&lt;input&gt;</code> element,
for example), the properties are booleans or numbers instead of
strings. Event handler attributes always have functions (or
<code>null</code>) as their values.</p>

<p>Note that this property-based API for getting and setting attribute
values does not define any way to remove an attribute from an element.
In particular, the <code>delete</code> operator cannot be used for this purpose.
If you need to delete an attribute, use the <code>removeAttribute()</code> method.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="The class attribute"><div class="sect3" id="classattributes">
<h3>The class attribute</h3>

<p>The <code>class</code> attribute of an HTML element is a particularly important
one. Its value is a space-separated list of CSS classes that apply to
the element and affect how it is styled with CSS. Because <code>class</code> is a
reserved word in JavaScript, the value of this attribute is available
through the <code>className</code> property on Element objects. The <code>className</code>
property can set and return the value of the <code>class</code> attribute as a
string. But the <code>class</code> attribute is poorly named: its value is a list
of CSS classes, not a single class, and it is common in client-side
JavaScript programming to want to add and remove individual class
names from this list rather than work with the list as a single
string.</p>

<p>For this reason, Element objects define a <code>classList</code> property that
allows you to treat the <code>class</code> attribute as a list. The value of the
<code>classList</code> property is an iterable Array-like object. Although the
name of the property is <code>classList</code>, it behaves more like a set of
classes, and defines <code>add()</code>, <code>remove()</code>, <code>contains()</code>, and <code>toggle()</code>
methods:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// When we want to let the user know that we are busy, we display</code>
<code class="c1">// a spinner. To do this we have to remove the "hidden" class and add the</code>
<code class="c1">// "animated" class (assuming the stylesheets are configured correctly).</code>
<code class="kd">let</code> <code class="nx">spinner</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#spinner"</code><code class="p">);</code>
<code class="nx">spinner</code><code class="p">.</code><code class="nx">classList</code><code class="p">.</code><code class="nx">remove</code><code class="p">(</code><code class="s2">"hidden"</code><code class="p">);</code>
<code class="nx">spinner</code><code class="p">.</code><code class="nx">classList</code><code class="p">.</code><code class="nx">add</code><code class="p">(</code><code class="s2">"animated"</code><code class="p">);</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Dataset attributes"><div class="sect3" id="datasetattributes">
<h3>Dataset attributes</h3>

<p>It is sometimes useful to attach additional information to HTML
elements, typically when JavaScript code will be selecting those
elements and manipulating them in some way. In HTML, any attribute
whose name is lowercase and begins with the prefix “data-” is
considered valid, and you can use them for any purpose. These “dataset
attributes” will not affect the presentation of the elements on which
they appear, and they define a standard way to attach additional data
without compromising document validity.</p>

<p>In the DOM, Element objects have a <code>dataset</code> property that refers to
an object that has properties that correspond to the <code>data-</code>
attributes with their prefix removed. Thus, <code>dataset.x</code> would hold the
value of the <code>data-x</code> attribute. Hyphenated attributes map to
camelCase property names: the attribute <code>data-section-number</code> becomes
the property <code>dataset.sectionNumber</code>.</p>

<p>Suppose an HTML document contains this text:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;h2</code> <code class="na">id=</code><code class="s">"title"</code> <code class="na">data-section-number=</code><code class="s">"16.1"</code><code class="nt">&gt;</code>Attributes<code class="nt">&lt;/h2&gt;</code></pre>

<p>Then you could write JavaScript like this to access that section
number:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">number</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#title"</code><code class="p">).</code><code class="nx">dataset</code><code class="p">.</code><code class="nx">sectionNumber</code><code class="p">;</code></pre>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.3.4 Element Content"><div class="sect2" id="elementcontent">
<h2>15.3.4 Element Content</h2>

<p>Look again at the document tree pictured in <a data-type="xref" href="#documenttree">Figure 15-1</a>,
and ask yourself what the
“content” of the <code>&lt;p&gt;</code> element is. There are two ways we might
answer this question:</p>

<ul>
<li>
<p>The content is the HTML string “This is a &lt;i&gt;simple&lt;/i&gt; document”.</p>
</li>
<li>
<p>The content is the plain-text string “This is a simple document”.</p>
</li>
</ul>

<p>Both of these are valid answers, and each answer is useful in its own
way. The sections that follow explain how to work with the HTML
representation and the plain-text representation of an element’s
content.</p>










<section data-type="sect3" data-pdf-bookmark="Element content as HTML"><div class="sect3" id="innerandouterhtml">
<h3>Element content as HTML</h3>

<p>Reading<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="modifying content" id="idm46198508095512"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="modifying content" id="idm46198508094264"></a> the <code>innerHTML</code> property of an Element returns the content of
that element as a string of markup. Setting this property on an element
invokes the web browser’s parser and replaces the element’s current
content with a parsed representation of the new string. You can test
this out by opening the developer console and typing:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">body</code><code class="p">.</code><code class="nx">innerHTML</code> <code class="o">=</code> <code class="s2">"&lt;h1&gt;Oops&lt;/h1&gt;"</code><code class="p">;</code></pre>

<p>You will see that the entire web page disappears and is replaced with
the single heading, “Oops”. Web browsers are very good at parsing HTML,
and setting <code>innerHTML</code> is usually fairly efficient. Note, however,
that appending text to the <code>innerHTML</code> property with the <code>+=</code>
operator is not efficient because it requires both a serialization
step to convert element content to a string and then a parsing step to
convert the new string back into element content.</p>
<div data-type="warning" epub:type="warning"><h6>Warning</h6>
<p>When using these HTML APIs, it is very important that you never insert
user input into the document. If you do this, you allow malicious
users to inject their own scripts into your application. See <a data-type="xref" href="#xss">“Cross-site scripting”</a>
for details.</p>
</div>

<p>The <code>outerHTML</code> property of an Element is like <code>innerHTML</code> except that
its value includes the element itself. When you query <code>outerHTML</code>, the
value includes the opening and closing tags of the element. And when
you set <code>outerHTML</code> on an element, the new content replaces the
element itself.</p>

<p>A related Element method is <code>insertAdjacentHTML()</code>, which allows you
to insert a string of arbitrary HTML markup “adjacent” to the
specified element. The markup is passed as the second argument to this
method, and the precise meaning of “adjacent” depends on the value of
the first argument. This first argument should be a string with one
of the values “beforebegin,” “afterbegin,” “beforeend,” or
“afterend.” These values correspond to insertion points that are
illustrated in <a data-type="xref" href="#insertionpoints">Figure 15-2</a>.</p>

<figure><div id="insertionpoints" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1502.png" alt="js7e 1502" width="1173" height="131">
<h6><span class="label">Figure 15-2. </span>Insertion points for insertAdjacentHTML()</h6>
</div></figure>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Element content as plain text"><div class="sect3" id="plaintextcontent">
<h3>Element content as plain text</h3>

<p>Sometimes you want to query the content of an element as plain text or
to insert plain text into a document (without having to escape the
angle brackets and ampersands used in HTML markup). The standard way to
do this is with the <code>textContent</code> <span class="keep-together">property:</span></p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">para</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"p"</code><code class="p">);</code> <code class="c1">// First &lt;p&gt; in the document</code>
<code class="kd">let</code> <code class="nx">text</code> <code class="o">=</code> <code class="nx">para</code><code class="p">.</code><code class="nx">textContent</code><code class="p">;</code>            <code class="c1">// Get the text of the paragraph</code>
<code class="nx">para</code><code class="p">.</code><code class="nx">textContent</code> <code class="o">=</code> <code class="s2">"Hello World!"</code><code class="p">;</code>      <code class="c1">// Alter the text of the paragraph</code></pre>

<p>The <code>textContent</code> property is defined by the Node class, so it works
for Text nodes as well as Element nodes. For Element nodes, it finds
and returns all text in all descendants of the element.</p>

<p>The Element class defines an <code>innerText</code> property that is similar to
<code>textContent</code>. <code>innerText</code> has some unusual and complex behaviors, such
as attempting to preserve table formatting. It is not well specified
nor implemented compatibly between browsers, however, and should no
longer be used.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198508013048">
<h5>Text in &lt;script&gt; Elements</h5>
<p>Inline<a data-type="indexterm" data-primary="HTML &lt;script&gt; tags" data-secondary="text property" id="idm46198508011480"></a> <code>&lt;script&gt;</code> elements (i.e., those that do not have a <code>src</code>
attribute) have a <code>text</code> property that you can use to retrieve their
text. The content of a <code>&lt;script&gt;</code> element is never displayed by the
browser, and the HTML parser ignores angle brackets and ampersands
within a script. This makes a <code>&lt;script&gt;</code> element an ideal place to
embed arbitrary textual data for use by your application. Simply set
the <code>type</code> attribute of the element to some value (such as
“text/x-custom-data”) that makes it clear that the script is not
executable JavaScript code. If you do this, the JavaScript interpreter
will ignore the script, but the element will exist in the document tree,
and its <code>text</code> property will return the data to you.</p>
</div></aside>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.3.5 Creating, Inserting, and Deleting Nodes"><div class="sect2" id="creating-inserting-deleting">
<h2>15.3.5 Creating, Inserting, and Deleting Nodes</h2>

<p>We’ve<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="modifying structure" id="idm46198508004792"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="modifying structure" id="idm46198508003496"></a> seen how to query and alter document content using strings of
HTML and of plain text. And we’ve also seen that we can traverse a
Document to examine the individual Element and Text nodes that it is
made of. It is also possible to alter a document at the level of
individual nodes. The Document class defines methods for creating
Element objects, and Element and Text objects have methods for
inserting, deleting, and replacing nodes in the tree.</p>

<p>Create a new element with the <code>createElement()</code> method of the Document
class and append strings of text or other elements to it with its
<code>append()</code> and <code>prepend()</code> <span class="keep-together">methods:</span></p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">paragraph</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"p"</code><code class="p">);</code> <code class="c1">// Create an empty &lt;p&gt; element</code>
<code class="kd">let</code> <code class="nx">emphasis</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"em"</code><code class="p">);</code> <code class="c1">// Create an empty &lt;em&gt; element</code>
<code class="nx">emphasis</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="s2">"World"</code><code class="p">);</code>                    <code class="c1">// Add text to the &lt;em&gt; element</code>
<code class="nx">paragraph</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="s2">"Hello "</code><code class="p">,</code> <code class="nx">emphasis</code><code class="p">,</code> <code class="s2">"!"</code><code class="p">);</code>   <code class="c1">// Add text and &lt;em&gt; to &lt;p&gt;</code>
<code class="nx">paragraph</code><code class="p">.</code><code class="nx">prepend</code><code class="p">(</code><code class="s2">"¡"</code><code class="p">);</code>                      <code class="c1">// Add more text at start of &lt;p&gt;</code>
<code class="nx">paragraph</code><code class="p">.</code><code class="nx">innerHTML</code>                          <code class="c1">// =&gt; "¡Hello &lt;em&gt;World&lt;/em&gt;!"</code></pre>

<p><code>append()</code> and <code>prepend()</code> take any number of arguments, which can be
Node objects or strings. String arguments are automatically converted
to Text nodes. (You can create Text nodes explicitly with
<code>document.createTextNode()</code>, but there is rarely any reason to do
so.) <code>append()</code> adds the arguments to the element at the end of the
child list. <code>prepend()</code> adds the arguments at the start of the child
list.</p>

<p>If you want to insert an Element or Text node into the middle of the
containing element’s child list, then neither <code>append()</code> or <code>prepend()</code>
will work for you. In this case, you should obtain a reference to a
sibling node and call <code>before()</code> to insert the new content before that
sibling or <code>after()</code> to insert it after that sibling. For example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Find the heading element with class="greetings"</code>
<code class="kd">let</code> <code class="nx">greetings</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"h2.greetings"</code><code class="p">);</code>

<code class="c1">// Now insert the new paragraph and a horizontal rule after that heading</code>
<code class="nx">greetings</code><code class="p">.</code><code class="nx">after</code><code class="p">(</code><code class="nx">paragraph</code><code class="p">,</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"hr"</code><code class="p">));</code></pre>

<p>Like <code>append()</code> and <code>prepend()</code>, <code>after()</code> and <code>before()</code> take any
number of string and element arguments and insert them all into the
document after converting strings to Text nodes. <code>append()</code> and
<code>prepend()</code> are only defined on Element objects, but <code>after()</code> and
<code>before()</code> work on both Element and Text nodes: you can use them to
insert content relative to a Text node.</p>

<p>Note that elements can only be inserted at one spot in the
document. If an element is already in the document and you insert it
somewhere else, it will be moved to the new location, not copied:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// We inserted the paragraph after this element, but now we</code>
<code class="c1">// move it so it appears before the element instead</code>
<code class="nx">greetings</code><code class="p">.</code><code class="nx">before</code><code class="p">(</code><code class="nx">paragraph</code><code class="p">);</code></pre>

<p>If you do want to make a copy of an element, use the <code>cloneNode()</code>
method, passing <code>true</code> to copy all of its content:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Make a copy of the paragraph and insert it after the greetings element</code>
<code class="nx">greetings</code><code class="p">.</code><code class="nx">after</code><code class="p">(</code><code class="nx">paragraph</code><code class="p">.</code><code class="nx">cloneNode</code><code class="p">(</code><code class="kc">true</code><code class="p">));</code></pre>

<p>You can remove an Element or Text node from the document by calling
its <code>remove()</code> method, or you can replace it by calling
<code>replaceWith()</code> instead. <code>remove()</code> takes no arguments, and
<code>replaceWith()</code> takes any number of strings and elements just like
<code>before()</code> and <code>after()</code> do:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Remove the greetings element from the document and replace it with</code>
<code class="c1">// the paragraph element (moving the paragraph from its current location</code>
<code class="c1">// if it is already inserted into the document).</code>
<code class="nx">greetings</code><code class="p">.</code><code class="nx">replaceWith</code><code class="p">(</code><code class="nx">paragraph</code><code class="p">);</code>

<code class="c1">// And now remove the paragraph.</code>
<code class="nx">paragraph</code><code class="p">.</code><code class="nx">remove</code><code class="p">();</code></pre>

<p>The DOM API also defines an older generation of methods for inserting
and removing content. <code>appendChild()</code>, <code>insertBefore()</code>,
<code>replaceChild()</code>, and <code>removeChild()</code> are harder to use than
the methods shown here and should never be needed.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.3.6 Example: Generating a Table of Contents"><div class="sect2" id="tocsection">
<h2>15.3.6 Example: Generating a Table of Contents</h2>

<p><a data-type="xref" href="#TOC.js">Example 15-1</a> shows<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting documents" data-tertiary="dynamically generating tables of contents" id="idm46198507772872"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="dynamically generating tables of contents" id="idm46198507771624"></a> how to dynamically create a table of contents for a
document. It demonstrates many of the document scripting techniques
described in the previous sections. The example is well commented, and you
should have no trouble following the code.<a data-type="indexterm" data-primary="" data-startref="WBscript15" id="idm46198507770296"></a><a data-type="indexterm" data-primary="" data-startref="dom15" id="idm46198507769352"></a></p>
<div id="TOC.js" data-type="example">
<h5><span class="label">Example 15-1. </span>Generating a table of contents with the DOM API</h5>

<pre data-type="programlisting" data-code-language="js"><code class="cm">/**</code>
<code class="cm"> * TOC.js: create a table of contents for a document.</code>
<code class="cm"> *</code>
<code class="cm"> * This script runs when the DOMContentLoaded event is fired and</code>
<code class="cm"> * automatically generates a table of contents for the document.</code>
<code class="cm"> * It does not define any global symbols so it should not conflict</code>
<code class="cm"> * with other scripts.</code>
<code class="cm"> *</code>
<code class="cm"> * When this script runs, it first looks for a document element with</code>
<code class="cm"> * an id of "TOC". If there is no such element it creates one at the</code>
<code class="cm"> * start of the document. Next, the function finds all &lt;h2&gt; through</code>
<code class="cm"> * &lt;h6&gt; tags, treats them as section titles, and creates a table of</code>
<code class="cm"> * contents within the TOC element. The function adds section numbers</code>
<code class="cm"> * to each section heading and wraps the headings in named anchors so</code>
<code class="cm"> * that the TOC can link to them. The generated anchors have names</code>
<code class="cm"> * that begin with "TOC", so you should avoid this prefix in your own</code>
<code class="cm"> * HTML.</code>
<code class="cm"> *</code>
<code class="cm"> * The entries in the generated TOC can be styled with CSS. All</code>
<code class="cm"> * entries have a class "TOCEntry". Entries also have a class that</code>
<code class="cm"> * corresponds to the level of the section heading. &lt;h1&gt; tags generate</code>
<code class="cm"> * entries of class "TOCLevel1", &lt;h2&gt; tags generate entries of class</code>
<code class="cm"> * "TOCLevel2", and so on. Section numbers inserted into headings have</code>
<code class="cm"> * class "TOCSectNum".</code>
<code class="cm"> *</code>
<code class="cm"> * You might use this script with a stylesheet like this:</code>
<code class="cm"> *</code>
<code class="cm"> *   #TOC { border: solid black 1px; margin: 10px; padding: 10px; }</code>
<code class="cm"> *   .TOCEntry { margin: 5px 0px; }</code>
<code class="cm"> *   .TOCEntry a { text-decoration: none; }</code>
<code class="cm"> *   .TOCLevel1 { font-size: 16pt; font-weight: bold; }</code>
<code class="cm"> *   .TOCLevel2 { font-size: 14pt; margin-left: .25in; }</code>
<code class="cm"> *   .TOCLevel3 { font-size: 12pt; margin-left: .5in; }</code>
<code class="cm"> *   .TOCSectNum:after { content: ": "; }</code>
<code class="cm"> *</code>
<code class="cm"> * To hide the section numbers, use this:</code>
<code class="cm"> *</code>
<code class="cm"> *   .TOCSectNum { display: none }</code>
<code class="cm"> **/</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"DOMContentLoaded"</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="c1">// Find the TOC container element.</code>
    <code class="c1">// If there isn't one, create one at the start of the document.</code>
    <code class="kd">let</code> <code class="nx">toc</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#TOC"</code><code class="p">);</code>
    <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">toc</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">toc</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"div"</code><code class="p">);</code>
        <code class="nx">toc</code><code class="p">.</code><code class="nx">id</code> <code class="o">=</code> <code class="s2">"TOC"</code><code class="p">;</code>
        <code class="nb">document</code><code class="p">.</code><code class="nx">body</code><code class="p">.</code><code class="nx">prepend</code><code class="p">(</code><code class="nx">toc</code><code class="p">);</code>
    <code class="p">}</code>

    <code class="c1">// Find all section heading elements. We're assuming here that the</code>
    <code class="c1">// document title uses &lt;h1&gt; and that sections within the document are</code>
    <code class="c1">// marked with &lt;h2&gt; through &lt;h6&gt;.</code>
    <code class="kd">let</code> <code class="nx">headings</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelectorAll</code><code class="p">(</code><code class="s2">"h2,h3,h4,h5,h6"</code><code class="p">);</code>

    <code class="c1">// Initialize an array that keeps track of section numbers.</code>
    <code class="kd">let</code> <code class="nx">sectionNumbers</code> <code class="o">=</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">];</code>

    <code class="c1">// Now loop through the section header elements we found.</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">heading</code> <code class="k">of</code> <code class="nx">headings</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Skip the heading if it is inside the TOC container.</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">heading</code><code class="p">.</code><code class="nx">parentNode</code> <code class="o">===</code> <code class="nx">toc</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">continue</code><code class="p">;</code>
        <code class="p">}</code>

        <code class="c1">// Figure out what level heading it is.</code>
        <code class="c1">// Subtract 1 because &lt;h2&gt; is a level-1 heading.</code>
        <code class="kd">let</code> <code class="nx">level</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">heading</code><code class="p">.</code><code class="nx">tagName</code><code class="p">.</code><code class="nx">charAt</code><code class="p">(</code><code class="mi">1</code><code class="p">))</code> <code class="o">-</code> <code class="mi">1</code><code class="p">;</code>

        <code class="c1">// Increment the section number for this heading level</code>
        <code class="c1">// and reset all lower heading level numbers to zero.</code>
        <code class="nx">sectionNumbers</code><code class="p">[</code><code class="nx">level</code><code class="o">-</code><code class="mi">1</code><code class="p">]</code><code class="o">++</code><code class="p">;</code>
        <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="nx">level</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">sectionNumbers</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
            <code class="nx">sectionNumbers</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
        <code class="p">}</code>

        <code class="c1">// Now combine section numbers for all heading levels</code>
        <code class="c1">// to produce a section number like 2.3.1.</code>
        <code class="kd">let</code> <code class="nx">sectionNumber</code> <code class="o">=</code> <code class="nx">sectionNumbers</code><code class="p">.</code><code class="nx">slice</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="nx">level</code><code class="p">).</code><code class="nx">join</code><code class="p">(</code><code class="s2">"."</code><code class="p">);</code>

        <code class="c1">// Add the section number to the section header title.</code>
        <code class="c1">// We place the number in a &lt;span&gt; to make it styleable.</code>
        <code class="kd">let</code> <code class="nx">span</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"span"</code><code class="p">);</code>
        <code class="nx">span</code><code class="p">.</code><code class="nx">className</code> <code class="o">=</code> <code class="s2">"TOCSectNum"</code><code class="p">;</code>
        <code class="nx">span</code><code class="p">.</code><code class="nx">textContent</code> <code class="o">=</code> <code class="nx">sectionNumber</code><code class="p">;</code>
        <code class="nx">heading</code><code class="p">.</code><code class="nx">prepend</code><code class="p">(</code><code class="nx">span</code><code class="p">);</code>

        <code class="c1">// Wrap the heading in a named anchor so we can link to it.</code>
        <code class="kd">let</code> <code class="nx">anchor</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"a"</code><code class="p">);</code>
        <code class="kd">let</code> <code class="nx">fragmentName</code> <code class="o">=</code> <code class="sb">`TOC</code><code class="si">${</code><code class="nx">sectionNumber</code><code class="si">}</code><code class="sb">`</code><code class="p">;</code>
        <code class="nx">anchor</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">fragmentName</code><code class="p">;</code>
        <code class="nx">heading</code><code class="p">.</code><code class="nx">before</code><code class="p">(</code><code class="nx">anchor</code><code class="p">);</code>    <code class="c1">// Insert anchor before heading</code>
        <code class="nx">anchor</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">heading</code><code class="p">);</code>    <code class="c1">// and move heading inside anchor</code>

        <code class="c1">// Now create a link to this section.</code>
        <code class="kd">let</code> <code class="nx">link</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"a"</code><code class="p">);</code>
        <code class="nx">link</code><code class="p">.</code><code class="nx">href</code> <code class="o">=</code> <code class="sb">`#</code><code class="si">${</code><code class="nx">fragmentName</code><code class="si">}</code><code class="sb">`</code><code class="p">;</code>     <code class="c1">// Link destination</code>

        <code class="c1">// Copy the heading text into the link. This is a safe use of</code>
        <code class="c1">// innerHTML because we are not inserting any untrusted strings.</code>
        <code class="nx">link</code><code class="p">.</code><code class="nx">innerHTML</code> <code class="o">=</code> <code class="nx">heading</code><code class="p">.</code><code class="nx">innerHTML</code><code class="p">;</code>

        <code class="c1">// Place the link in a div that is styleable based on the level.</code>
        <code class="kd">let</code> <code class="nx">entry</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"div"</code><code class="p">);</code>
        <code class="nx">entry</code><code class="p">.</code><code class="nx">classList</code><code class="p">.</code><code class="nx">add</code><code class="p">(</code><code class="s2">"TOCEntry"</code><code class="p">,</code> <code class="sb">`TOCLevel</code><code class="si">${</code><code class="nx">level</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
        <code class="nx">entry</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">link</code><code class="p">);</code>

        <code class="c1">// And add the div to the TOC container.</code>
        <code class="nx">toc</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">entry</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">});</code></pre></div>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.4 Scripting CSS"><div class="sect1" id="css">
<h1>15.4 Scripting CSS</h1>

<p>We’ve<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" id="wBcss15"></a><a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="common CSS styles" id="idm46198507729992"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="common CSS styles" id="idm46198507729048"></a> seen that JavaScript can control the logical structure and
content of HTML documents. It can also control the visual appearance
and layout of those documents by scripting CSS. The following subsections explain a few different techniques that JavaScript code can use to work with CSS.</p>

<p>This is a book about JavaScript, not about CSS, and this section
assumes that you already have a working knowledge of how CSS is used
to style HTML content. But it’s worth mentioning some of the CSS styles
that are commonly scripted from <span class="keep-together">JavaScript:</span></p>

<ul>
<li>
<p>Setting the <code>display</code> style to “none” hides an element. You can
later show the element by setting <code>display</code> to some other value.</p>
</li>
<li>
<p>You can dynamically position elements by setting the <code>position</code>
style to “absolute,” “relative,” or “fixed” and then setting the
<code>top</code> and <code>left</code> styles to the desired coordinates. This is
important when using JavaScript to display dynamic content like
modal dialogues and tooltips.</p>
</li>
<li>
<p>You can shift, scale, and rotate elements with the <code>transform</code>
style.</p>
</li>
<li>
<p>You can animate changes to other CSS styles with the <code>transition</code>
style. These animations are handled automatically by the web browser
and do not require JavaScript, but you can use JavaScript to
initiate the animations.</p>
</li>
</ul>








<section data-type="sect2" data-pdf-bookmark="15.4.1 CSS Classes"><div class="sect2" id="idm46198507368376">
<h2>15.4.1 CSS Classes</h2>

<p>The<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="CSS classes" id="idm46198507366808"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="CSS classes" id="idm46198507365800"></a> simplest way to use JavaScript to affect the styling of document
content is to add and remove CSS class names from the <code>class</code>
attribute of HTML tags. This is easy to do with the <code>classList</code>
property of Element objects, as explained in <a data-type="xref" href="#classattributes">“The class attribute”</a>.</p>

<p>Suppose, for example, that your document’s stylesheet includes a
definition for a “hidden” class:</p>

<pre data-type="programlisting" data-code-language="css"><code class="nc">.hidden</code> <code class="p">{</code>
  <code class="k">display</code><code class="o">:</code><code class="nb">none</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>With this style defined, you can hide (and then show) an element with
code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Assume that this "tooltip" element has class="hidden" in the HTML file.</code>
<code class="c1">// We can make it visible like this:</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#tooltip"</code><code class="p">).</code><code class="nx">classList</code><code class="p">.</code><code class="nx">remove</code><code class="p">(</code><code class="s2">"hidden"</code><code class="p">);</code>

<code class="c1">// And we can hide it again like this:</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#tooltip"</code><code class="p">).</code><code class="nx">classList</code><code class="p">.</code><code class="nx">add</code><code class="p">(</code><code class="s2">"hidden"</code><code class="p">);</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.4.2 Inline Styles"><div class="sect2" id="idm46198507310392">
<h2>15.4.2 Inline Styles</h2>

<p>To<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="inline styles" id="idm46198507341640"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="inline styles" id="idm46198507293544"></a> continue with the preceding tooltip example, suppose that the document
is structured with only a single tooltip element, and we want to
dynamically position it before displaying it. In general, we can’t
create a different stylesheet class for each possible position of the
tooltip, so the <code>classList</code> property won’t help us with <span class="keep-together">positioning.</span></p>

<p>In this case, we need to script the <code>style</code> attribute of the tooltip
element to set inline styles that are specific to that one
element. The DOM defines a <code>style</code> property on all Element objects
that correspond to the <code>style</code> attribute. Unlike most such
properties, however, the <code>style</code> property is not a string. Instead, it
is a<a data-type="indexterm" data-primary="CSSStyleDeclaration object" id="idm46198507288424"></a> CSSStyleDeclaration object: a parsed representation of the CSS
styles that appear in textual form in the <code>style</code> attribute. To
display and set the position of our hypothetical tooltip with
JavaScript, we might use code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">displayAt</code><code class="p">(</code><code class="nx">tooltip</code><code class="p">,</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">tooltip</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">display</code> <code class="o">=</code> <code class="s2">"block"</code><code class="p">;</code>
    <code class="nx">tooltip</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">position</code> <code class="o">=</code> <code class="s2">"absolute"</code><code class="p">;</code>
    <code class="nx">tooltip</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">left</code> <code class="o">=</code> <code class="sb">`</code><code class="si">${</code><code class="nx">x</code><code class="si">}</code><code class="sb">px`</code><code class="p">;</code>
    <code class="nx">tooltip</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">top</code> <code class="o">=</code> <code class="sb">`</code><code class="si">${</code><code class="nx">y</code><code class="si">}</code><code class="sb">px`</code><code class="p">;</code>
<code class="p">}</code></pre>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198507241320">
<h5>Naming Conventions: CSS Properties in JavaScript</h5>
<p>Many<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="naming conventions" id="idm46198507205880"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="naming conventions" id="idm46198507204936"></a> CSS style properties, such as <code>font-size</code>, contain hyphens in
their names. In JavaScript, a hyphen is interpreted as a minus sign and is not allowed in property names or other identifiers. Therefore,
the names of the properties of the CSSStyleDeclaration object are
slightly different from the names of actual CSS properties.  If a CSS
property name contains one or more hyphens, the CSSStyleDeclaration
property name is formed by removing the hyphens and capitalizing the
letter immediately following each hyphen. The CSS property
<code>border-left-width</code> is accessed through the JavaScript
<code>borderLeftWidth</code> property, for example, and the CSS <code>font-family</code>
property is written as <code>fontFamily</code> in JavaScript.</p>
</div></aside>

<p>When working with the style properties of the CSSStyleDeclaration
object, remember that all values must be specified as strings. In a
stylesheet or <code>style</code> attribute, you can write:</p>

<pre data-type="programlisting" data-code-language="css"><code class="k">display</code><code class="o">:</code> <code class="nb">block</code><code class="p">;</code> <code class="k">font-family</code><code class="o">:</code> <code class="nb">sans-serif</code><code class="p">;</code> <code class="k">background-color</code><code class="o">:</code> <code class="m">#ffffff</code><code class="p">;</code></pre>

<p>To accomplish the same thing for an element <code>e</code> with JavaScript, you
have to quote all of the values:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">display</code> <code class="o">=</code> <code class="s2">"block"</code><code class="p">;</code>
<code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">fontFamily</code> <code class="o">=</code> <code class="s2">"sans-serif"</code><code class="p">;</code>
<code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">backgroundColor</code> <code class="o">=</code> <code class="s2">"#ffffff"</code><code class="p">;</code></pre>

<p>Note that the semicolons go outside the strings. These are just normal
JavaScript semicolons; the semicolons you use in CSS stylesheets are
not required as part of the string values you set with JavaScript.</p>

<p>Furthermore, remember that many CSS properties require units such as
“px” for pixels or “pt” for points. Thus, it is not correct to set the
<code>marginLeft</code> property like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">marginLeft</code> <code class="o">=</code> <code class="mi">300</code><code class="p">;</code>    <code class="c1">// Incorrect: this is a number, not a string</code>
<code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">marginLeft</code> <code class="o">=</code> <code class="s2">"300"</code><code class="p">;</code>  <code class="c1">// Incorrect: the units are missing</code></pre>

<p>Units are required when setting style properties in JavaScript, just as
they are when setting style properties in stylesheets. The correct way
to set the value of the <code>marginLeft</code> property of an element <code>e</code> to 300 pixels
is:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">marginLeft</code> <code class="o">=</code> <code class="s2">"300px"</code><code class="p">;</code></pre>

<p>If you want to set a CSS property to a computed value, be sure to
append the units at the end of the computation:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">left</code> <code class="o">=</code> <code class="sb">`</code><code class="si">${</code><code class="nx">x0</code> <code class="o">+</code> <code class="nx">left_border</code> <code class="o">+</code> <code class="nx">left_padding</code><code class="si">}</code><code class="sb">px`</code><code class="p">;</code></pre>

<p>Recall that some CSS properties, such as <code>margin</code>, are shortcuts for
other properties, such as <code>margin-top</code>, <code>margin-right</code>,
<code>margin-bottom</code>, and <code>margin-left</code>. The CSSStyleDeclaration object has
properties that correspond to these shortcut properties. For example,
you might set the <code>margin</code> property like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">margin</code> <code class="o">=</code> <code class="sb">`</code><code class="si">${</code><code class="nx">top</code><code class="si">}</code><code class="sb">px </code><code class="si">${</code><code class="nx">right</code><code class="si">}</code><code class="sb">px </code><code class="si">${</code><code class="nx">bottom</code><code class="si">}</code><code class="sb">px </code><code class="si">${</code><code class="nx">left</code><code class="si">}</code><code class="sb">px`</code><code class="p">;</code></pre>

<p>Sometimes, you may find it easier to set or query the inline style of
an element as a single string value rather than as a
CSSStyleDeclaration object. To do that, you can use the Element
<code>getAttribute()</code> and <code>setAttribute()</code> methods, or you can use the
<code>cssText</code> property of the CSSStyleDeclaration object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Copy the inline styles of element e to element f:</code>
<code class="nx">f</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"style"</code><code class="p">,</code> <code class="nx">e</code><code class="p">.</code><code class="nx">getAttribute</code><code class="p">(</code><code class="s2">"style"</code><code class="p">));</code>

<code class="c1">// Or do it like this:</code>
<code class="nx">f</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">cssText</code> <code class="o">=</code> <code class="nx">e</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">cssText</code><code class="p">;</code></pre>

<p>When querying the <code>style</code> property of an element, keep in mind that it
represents only the inline styles of an element and that most styles
for most elements are specified in stylesheets rather than
inline. Furthermore, the values you obtain when querying the <code>style</code>
property will use whatever units and whatever shortcut property format
is actually used on the HTML attribute, and your code may have to do
some sophisticated parsing to interpret them. In general, if you want
to query the styles of an element, you probably want the <em>computed
style</em>, which is discussed next.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.4.3 Computed Styles"><div class="sect2" id="computedstyle">
<h2>15.4.3 Computed Styles</h2>

<p>The<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="computed styles" id="idm46198506764120"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="computed styles" id="idm46198506763112"></a> computed style for an element is the set of property values that
the browser derives (or computes) from the element’s inline style plus
all applicable style rules in all stylesheets: it is the set of
properties actually used to display the element. Like inline styles,
computed styles are represented with a CSSStyleDeclaration
object. Unlike inline styles, however, computed styles are
read-only. You can’t set these styles, but the computed
CSSStyleDeclaration object for an element lets you determine what
style property values the browser used when rendering that element.</p>

<p>Obtain the computed style for an element with the <code>getComputedStyle()</code>
method of the Window object. The first argument to this method is the
element whose computed style is desired. The optional second argument
is used to specify a CSS pseudoelement, such as “::before” or
“::after”:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">title</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#section1title"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">styles</code> <code class="o">=</code> <code class="nb">window</code><code class="p">.</code><code class="nx">getComputedStyle</code><code class="p">(</code><code class="nx">title</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">beforeStyles</code> <code class="o">=</code> <code class="nb">window</code><code class="p">.</code><code class="nx">getComputedStyle</code><code class="p">(</code><code class="nx">title</code><code class="p">,</code> <code class="s2">"::before"</code><code class="p">);</code></pre>

<p>The return value of <code>getComputedStyle()</code> is a CSSStyleDeclaration
object that represents all the styles that apply to the specified
element (or pseudoelement). There are a number of important differences
between a CSSStyleDeclaration object that represents inline styles and
one that represents computed styles:</p>

<ul>
<li>
<p>Computed style properties are read-only.</p>
</li>
<li>
<p>Computed style properties are <em>absolute</em>: relative units like
percentages and points are converted to absolute values. Any
property that specifies a size (such as a margin size or a font
size) will have a value measured in pixels. This value will be a
string with a “px” suffix, so you’ll still need to parse it, but you
won’t have to worry about parsing or converting other units. Properties
whose values are colors will be returned in “rgb()” or
“rgba()” format.</p>
</li>
<li>
<p>Shortcut properties are not computed—only the fundamental
properties that they are based on are. Don’t query the <code>margin</code>
property, for example, but use <code>marginLeft</code>, <code>marginTop</code>, and so
on. Similarly, don’t query <code>border</code> or even <code>borderWidth</code>. Instead,
use <code>borderLeftWidth</code>, <code>borderTopWidth</code>, and so on.</p>
</li>
<li>
<p>The <code>cssText</code> property of the computed style is undefined.</p>
</li>
</ul>

<p>A CSSStyleDeclaration object returned by <code>getComputedStyle()</code>
generally contains much more information about an element than the
CSSStyleDeclaration obtained from the inline <code>style</code> property of that
element. But computed styles can be tricky, and querying them does not
always provide the information you might expect. Consider the
<code>font-family</code> attribute: it accepts a comma-separated list of desired
font families for cross-platform portability. When you query the
<code>fontFamily</code> property of a computed style, you’re simply getting the
value of the most specific <code>font-family</code> style that applies to the
element. This may return a value such as “arial,helvetica,sans-serif,”
which does not tell you which typeface is actually in use. Similarly,
if an element is not absolutely positioned, attempting to query its
position and size through the <code>top</code> and <code>left</code> properties of its
computed style often returns the value <code>auto</code>. This is a perfectly
legal CSS value, but it is probably not what you were looking for.</p>

<p>Although CSS can be used to precisely specify the position and size of
document elements, querying the computed style of an element is not the
preferred way to determine the element’s size and position. See
<a data-type="xref" href="#getBoundingClientRect">§15.5.2</a> for a simpler, portable alternative.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.4.4 Scripting Stylesheets"><div class="sect2" id="idm46198506687256">
<h2>15.4.4 Scripting Stylesheets</h2>

<p>In<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="scripting stylesheets" id="idm46198506685496"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="scripting stylesheets" id="idm46198506684488"></a> addition to scripting class attributes and inline styles,
JavaScript can also manipulate stylesheets themselves. Stylesheets are
associated with an HTML document with a <code>&lt;style&gt;</code> tag or with a <code>&lt;link
rel="stylesheet"&gt;</code> tag. Both of these are regular HTML tags, so you
can give them both <code>id</code> attributes and then look them up with
<code>document.querySelector()</code>.</p>

<p>The Element objects for both <code>&lt;style&gt;</code> and <code>&lt;link&gt;</code> tags have a
<code>disabled</code> property that you can use to disable the entire
stylesheet. You might use it with code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// This function switches between the "light" and "dark" themes</code>
<code class="kd">function</code> <code class="nx">toggleTheme</code><code class="p">()</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">lightTheme</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#light-theme"</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">darkTheme</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#dark-theme"</code><code class="p">);</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">darkTheme</code><code class="p">.</code><code class="nx">disabled</code><code class="p">)</code> <code class="p">{</code>          <code class="c1">// Currently light, switch to dark</code>
        <code class="nx">lightTheme</code><code class="p">.</code><code class="nx">disabled</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
        <code class="nx">darkTheme</code><code class="p">.</code><code class="nx">disabled</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
    <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>                           <code class="c1">// Currently dark, switch to light</code>
        <code class="nx">lightTheme</code><code class="p">.</code><code class="nx">disabled</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
        <code class="nx">darkTheme</code><code class="p">.</code><code class="nx">disabled</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
    <code class="p">}</code>
<code class="p">}</code></pre>

<p>Another simple way to script stylesheets is to insert new ones into
the document using DOM manipulation techniques we’ve already seen. For
example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">function</code> <code class="nx">setTheme</code><code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// Create a new &lt;link rel="stylesheet"&gt; element to load the named stylesheet</code>
    <code class="kd">let</code> <code class="nx">link</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"link"</code><code class="p">);</code>
    <code class="nx">link</code><code class="p">.</code><code class="nx">id</code> <code class="o">=</code> <code class="s2">"theme"</code><code class="p">;</code>
    <code class="nx">link</code><code class="p">.</code><code class="nx">rel</code> <code class="o">=</code> <code class="s2">"stylesheet"</code><code class="p">;</code>
    <code class="nx">link</code><code class="p">.</code><code class="nx">href</code> <code class="o">=</code> <code class="sb">`themes/</code><code class="si">${</code><code class="nx">name</code><code class="si">}</code><code class="sb">.css`</code><code class="p">;</code>

    <code class="c1">// Look for an existing link with id "theme"</code>
    <code class="kd">let</code> <code class="nx">currentTheme</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#theme"</code><code class="p">);</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">currentTheme</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// If there is an existing theme, replace it with the new one.</code>
        <code class="nx">currentTheme</code><code class="p">.</code><code class="nx">replaceWith</code><code class="p">(</code><code class="nx">link</code><code class="p">);</code>
    <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
        <code class="c1">// Otherwise, just insert the link to the theme stylesheet.</code>
        <code class="nb">document</code><code class="p">.</code><code class="nx">head</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">link</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">}</code></pre>

<p>Less subtly, you can also just insert a string of HTML containing a
<code>&lt;style&gt;</code> tag into your document. This is a fun trick, for example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">head</code><code class="p">.</code><code class="nx">insertAdjacentHTML</code><code class="p">(</code>
    <code class="s2">"beforeend"</code><code class="p">,</code>
    <code class="s2">"&lt;style&gt;body{transform:rotate(180deg)}&lt;/style&gt;"</code>
<code class="p">);</code></pre>

<p>Browsers define an API that allows JavaScript to look inside
stylesheets to query, modify, insert, and delete style rules in that
stylesheet. This API is so specialized that it is not documented
here. You can read about it on MDN by searching for “CSSStyleSheet”
and “CSS Object Model.”</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.4.5 CSS Animations and Events"><div class="sect2" id="idm46198506459080">
<h2>15.4.5 CSS Animations and Events</h2>

<p>Suppose<a data-type="indexterm" data-primary="CSS stylesheets" data-secondary="CSS animations and events" id="idm46198506457720"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scripting CSS" data-tertiary="CSS animations and events" id="idm46198506456744"></a> you have the following two CSS classes defined in a
stylesheet:</p>

<pre data-type="programlisting" data-code-language="css"><code class="nc">.transparent</code> <code class="p">{</code> <code class="k">opacity</code><code class="o">:</code> <code class="m">0</code><code class="p">;</code> <code class="p">}</code>
<code class="nc">.fadeable</code> <code class="p">{</code> <code class="k">transition</code><code class="o">:</code> <code class="n">opacity</code> <code class="m">.5s</code> <code class="n">ease</code><code class="o">-</code><code class="n">in</code> <code class="p">}</code></pre>

<p>If you apply the first style to an element, it will be fully
transparent and therefore invisible. But if you apply the second style
that tells the browser that when the opacity of the element changes,
that change should be animated over a period of 0.5 seconds, “ease-in”
specifies that the opacity change animation should start off slow and
then accelerate.</p>

<p>Now suppose that your HTML document contains an element with the
“fadeable” class:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;div</code> <code class="na">id=</code><code class="s">"subscribe"</code> <code class="na">class=</code><code class="s">"fadeable notification"</code><code class="nt">&gt;</code>...<code class="nt">&lt;/div&gt;</code></pre>

<p>In JavaScript, you can add the “transparent” class:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#subscribe"</code><code class="p">).</code><code class="nx">classList</code><code class="p">.</code><code class="nx">add</code><code class="p">(</code><code class="s2">"transparent"</code><code class="p">);</code></pre>

<p>This element is configured to animate opacity changes. Adding the
“transparent” class changes the opacity and triggers an animate: the
browser “fades out” the element so that it becomes fully transparent
over the period of half a second.</p>

<p>This works in reverse as well: if you remove the “transparent” class
of a “fadeable” element, that is also an opacity change, and the
element fades back in and becomes visible again.</p>

<p>JavaScript does not have to do any work to make these animations
happen: they are a pure CSS effect. But JavaScript can be used to
trigger them.</p>

<p>JavaScript can also be used to monitor the progress of a CSS
transition because the web browser fires events at the start and end
of a transition. The “transitionrun” event is dispatched when the
transition is first triggered. This may happen before any visual
changes begin, when the <code>transition-delay</code> style has been
specified. Once the visual changes begin a “transitionstart” event is
dispatched, and when the animation is complete, a “transitionend” event
is dispatched. The target of all these events is the element being
animated, of course. The event object passed to handlers for these
events is a TransitionEvent object. It has a <code>propertyName</code> property
that specifies the CSS property being animated and an <code>elapsedTime</code>
property that for “transitionend” events specifies how many seconds have
passed since the “transitionstart” event.</p>

<p>In addition to transitions, CSS also supports a more complex form of
animation known simply as “CSS Animations.” These use CSS properties
such as <code>animation-name</code> and <code>animation-duration</code> and a special
<code>@keyframes</code> rule to define animation details. Details of how CSS
animations work are beyond the scope of this book, but once again, if
you define all of the animation properties on a CSS class, then you
can use JavaScript to trigger the animation simply by adding the class
to the element that is to be animated.</p>

<p>And like CSS transitions, CSS animations also trigger events that your
JavaScript code can listen form. “animationstart” is dispatched when
the animation starts, and “animationend” is dispatched when it is
complete. If the animation repeats more than once, then an
“animationiteration” event is dispatched after each repetition except
the last. The event target is the animated element, and the event
object passed to handler functions is an AnimationEvent object. These
events include an <code>animationName</code> property that specifies the
<code>animation-name</code> property that defines the animation and an
<code>elapsedTime</code> property that specifies how many seconds have passed
since the animation started.<a data-type="indexterm" data-primary="" data-startref="wBcss15" id="idm46198506308936"></a></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.5 Document Geometry and Scrolling"><div class="sect1" id="geometry">
<h1>15.5 Document Geometry and Scrolling</h1>

<p>In<a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" id="WBgeom15"></a><a data-type="indexterm" data-primary="document geometry and scrolling" id="docgeo15"></a> this chapter so far, we have thought about documents as abstract
trees of elements and text nodes. But when a browser renders a
document within a window, it creates a visual representation of the
document in which each element has a position and a size. Often, web
applications can treat documents as trees of elements and never have
to think about how those elements are rendered on screen. Sometimes,
however, it is necessary to determine the precise geometry of an
element. If, for example, you want to use CSS to dynamically position
an element (such as a tooltip) next to some ordinary
browser-positioned element, you need to be able to determine the
location of that element.</p>

<p>The following subsections explain how you can go back and forth between
the abstract, tree-based <em>model</em> of a document and the geometrical,
coordinate-based <em>view</em> of the document as it is laid out in a browser
window.</p>








<section data-type="sect2" data-pdf-bookmark="15.5.1 Document Coordinates and Viewport Coordinates"><div class="sect2" id="idm46198506301896">
<h2>15.5.1 Document Coordinates and Viewport Coordinates</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" data-tertiary="document coordinates and viewport coordinates" id="idm46198506300360"></a><a data-type="indexterm" data-primary="document geometry and scrolling" data-secondary="document coordinates and viewport coordinates" id="idm46198506298696"></a> position of a document element is measured in CSS pixels, with the <em>x</em>
coordinate increasing to the right and the <em>y</em> coordinate increasing as
we go down. There are two different points we can use as the
coordinate system origin, however: the <em>x</em> and <em>y</em> coordinates of an
element can be relative to the top-left corner of the document or
relative to the top-left corner of<a data-type="indexterm" data-primary="viewport" id="idm46198506295640"></a> the <em>viewport</em> in which the
document is displayed. In top-level windows and tabs, the “viewport”
is the portion of the browser that actually displays document content:
it excludes browser “chrome” such as menus, toolbars, and tabs. For
documents<a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="iframe elements" id="idm46198506294136"></a><a data-type="indexterm" data-primary="elements" data-secondary="document elements" data-tertiary="iframe" id="idm46198506276072"></a> displayed in <code>&lt;iframe&gt;</code> tags, it is the iframe element in
the DOM that defines the viewport for the nested document. In either
case, when we talk about the position of an element, we must be clear
whether we are using document coordinates or viewport
coordinates. (Note that viewport coordinates are sometimes called
“window coordinates.”)</p>

<p>If the document is smaller than the viewport, or if it has not been
scrolled, the upper-left corner of the document is in the upper-left
corner of the viewport and the document and viewport coordinate
systems are the same. In general, however, to convert between the two
coordinate systems, we must add or subtract the<a data-type="indexterm" data-primary="scroll offsets" id="idm46198506273448"></a> <em>scroll offsets</em>.  If
an element has a <em>y</em> coordinate of 200 pixels in document coordinates,
for example, and if the user has scrolled down by 75 pixels, then that
element has a <em>y</em> coordinate of 125 pixels in viewport
coordinates. Similarly, if an element has an <em>x</em> coordinate of 400 in
viewport coordinates after the user has scrolled the viewport 200
pixels horizontally, then the element’s <em>x</em> coordinate in document
coordinates is 600.</p>

<p>If we use the mental model of printed paper documents, it is logical
to assume that every element in a document must have a unique position
in document coordinates, regardless of how much the user has scrolled
the document. That is an appealing property of paper documents, and it
applies for simple web documents, but in general, document coordinates
don’t really work on the web. The problem is that the CSS <code>overflow</code>
property allows elements within a document to contain more content
than it can display. Elements can have their own scrollbars and serve
as viewports for the content they contain. The fact that the web
allows scrolling elements within a scrolling document means that it is
simply not possible to describe the position of an element within the
document using a single (x,y) point.</p>

<p>Because<a data-type="indexterm" data-primary="getBoundingClientRect() method" id="idm46198506268024"></a><a data-type="indexterm" data-primary="elementFromPoint() method" id="idm46198506267352"></a> document coordinates don’t really work, client-side JavaScript
tends to use viewport coordinates. The <code>getBoundingClientRect()</code> and
<code>elementFromPoint()</code> methods described next use viewport coordinates,
for example, and the <code>clientX</code> and <code>clientY</code> properties of mouse and
pointer event objects also use this coordinate <span class="keep-together">system.</span></p>

<p>When you explicitly position an element using CSS <code>position:fixed</code>,
the <code>top</code> and <code>left</code> properties are interpreted in viewport
coordinates. If you use <code>position:relative</code>, the element is positioned
relative to where it would have been if it didn’t have the <code>position</code>
property set. If you use <code>position:absolute</code>, then <code>top</code> and <code>left</code>
are relative to the document or to the nearest containing positioned
element. This means, for example, that an absolutely positioned element
inside a relatively positioned element is positioned relative to the
container element, not relative to the overall document. It is
sometimes very useful to create a relatively positioned container with
<code>top</code> and <code>left</code> set to 0 (so the container is laid out normally) in
order to establish a new coordinate system origin for the absolutely
positioned elements it contains. We might refer to this new coordinate
system as “container coordinates” to distinguish it from document
coordinates and viewport coordinates.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198506263576">
<h5>CSS Pixels</h5>
<p>If, like me, you<a data-type="indexterm" data-primary="document geometry and scrolling" data-secondary="CSS pixels" id="idm46198506256984"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" data-tertiary="CSS pixels" id="idm46198506256040"></a><a data-type="indexterm" data-primary="CSS pixels" id="idm46198506254808"></a><a data-type="indexterm" data-primary="pixels" id="idm46198506254136"></a><a data-type="indexterm" data-primary="devicePixelRatio property" id="idm46198506253464"></a> are old enough to remember computer monitors with
resolutions of 1024 × 768 and touch-screen phones with resolutions of
320 × 480, then you may still think that the word “pixel” refers to a
single “picture element” in <em>hardware</em>. Today’s 4K monitors and
“retina” displays have such high resolution that software pixels have
been decoupled from hardware pixels. A CSS pixel—and therefore a
client-side JavaScript pixel—may in fact consist of multiple device
pixels. The <code>devicePixelRatio</code> property of the Window object specifies
how many device pixels are used for each software pixel. A “dpr” of 2,
for example, means that each software pixel is actually a 2 × 2 grid of
hardware pixels. The <code>devicePixelRatio</code> value
depends on the physical resolution of your hardware, on settings in
your operating system, and on the zoom level in your browser.</p>

<p><code>devicePixelRatio</code> does not have to be an integer. If you are using a
CSS font size of “12px” and the device pixel ratio is 2.5, then the
actual font size, in device pixels, is 30. Because the pixel values we
use in CSS no longer correspond directly to individual pixels on the
screen, pixel coordinates no longer need to be integers. If the
<code>devicePixelRatio</code> is 3, then a coordinate of 3.33 makes perfect
sense. And if the ratio is actually 2, then a coordinate of 3.33 will
just be rounded up to 3.5.</p>
</div></aside>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.5.2 Querying the Geometry of an Element"><div class="sect2" id="getBoundingClientRect">
<h2>15.5.2 Querying the Geometry of an Element</h2>

<p>You<a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" data-tertiary="querying geometry of elements" id="idm46198506247112"></a><a data-type="indexterm" data-primary="document geometry and scrolling" data-secondary="querying geometry of elements" id="idm46198506245496"></a><a data-type="indexterm" data-primary="elements" data-secondary="document elements" data-tertiary="querying geometry of elements" id="idm46198506244520"></a> can determine the size (including CSS border and padding, but not
the margin) and position (in viewport coordinates) of
an element by calling its <code>getBoundingClientRect()</code> method. It takes
no arguments and returns an object with properties <code>left</code>, <code>right</code>,
<code>top</code>, <code>bottom</code>, <code>width</code>, and <code>height</code>. The <code>left</code> and <code>top</code>
properties give the <em>x</em> and <em>y</em> coordinates of the upper-left corner of
the element, and the <code>right</code> and <code>bottom</code> properties give the
coordinates of the lower-right corner. The differences between these
values are the <code>width</code> and <code>height</code> properties.</p>

<p>Block elements, such as images, paragraphs, and <code>&lt;div&gt;</code> elements are
always rectangular when laid out by the browser. Inline elements, such
as <code>&lt;span&gt;</code>, <code>&lt;code&gt;</code>, and <code>&lt;b&gt;</code> elements, however, may span multiple
lines and may therefore consist of multiple rectangles. Imagine, for
example, some text within <code>&lt;em&gt;</code> and <code>&lt;/em&gt;</code> tags that happens to be
displayed so that it wraps across two lines.
Its rectangles consist of the end of
the first line and beginning of the second line. If you call
<code>getBoundingClientRect()</code> on this element, the bounding rectangle would
include the entire width of both lines. If you want to query the
individual rectangles of inline elements, call the <code>getClientRects()</code>
method to obtain a read-only, array-like object whose elements are
rectangle objects like those returned by <code>getBoundingClientRect()</code>.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.5.3 Determining the Element at a Point"><div class="sect2" id="idm46198506231224">
<h2>15.5.3 Determining the Element at a Point</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" data-tertiary="determining element at a point" id="idm46198506229928"></a><a data-type="indexterm" data-primary="document geometry and scrolling" data-secondary="determining element at a point" id="idm46198506228312"></a><a data-type="indexterm" data-primary="elements" data-secondary="document elements" data-tertiary="determining element at a point" id="idm46198506227336"></a> <code>getBoundingClientRect()</code> method allows us to determine the
current position of an element in a viewport. Sometimes we want to go
in the other direction and determine which element is at a given
location in the viewport. You can determine this with the
<code>elementFromPoint()</code> method of the Document object. Call this method
with the <em>x</em> and <em>y</em> coordinates of a point (using viewport coordinates,
not document coordinates: the <code>clientX</code> and <code>clientY</code> coordinates of a
mouse event work, for example). <code>elementFromPoint()</code> returns an
Element object that is at the specified
position. The <em>hit detection</em> algorithm for selecting the element is
not precisely specified, but the intent of this method is that it
returns the innermost (most deeply nested) and uppermost (highest CSS
<code>z-index</code> attribute) element at that point.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.5.4 Scrolling"><div class="sect2" id="idm46198506221416">
<h2>15.5.4 Scrolling</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" data-tertiary="scrolling" id="idm46198506219688"></a><a data-type="indexterm" data-primary="scrolling" id="idm46198506218456"></a><a data-type="indexterm" data-primary="document geometry and scrolling" data-secondary="scrolling" id="idm46198506217752"></a><a data-type="indexterm" data-primary="scrollTo() method" id="idm46198506216840"></a> <code>scrollTo()</code> method of the Window object takes the <em>x</em> and <em>y</em>
coordinates of a point (in document coordinates) and sets these as the
scrollbar offsets. That is, it scrolls the window so that the
specified point is in the upper-left corner of the viewport. If you
specify a point that is too close to the bottom or too close to the
right edge of the document, the browser will move it as close as
possible to the upper-left corner but won’t be able to get it all the
way there. The following code scrolls the browser so that the
bottom-most page of the document is visible:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Get the heights of the document and viewport.</code>
<code class="kd">let</code> <code class="nx">documentHeight</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">documentElement</code><code class="p">.</code><code class="nx">offsetHeight</code><code class="p">;</code>
<code class="kd">let</code> <code class="nx">viewportHeight</code> <code class="o">=</code> <code class="nb">window</code><code class="p">.</code><code class="nx">innerHeight</code><code class="p">;</code>
<code class="c1">// And scroll so the last "page" shows in the viewport</code>
<code class="nb">window</code><code class="p">.</code><code class="nx">scrollTo</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="nx">documentHeight</code> <code class="o">-</code> <code class="nx">viewportHeight</code><code class="p">);</code></pre>

<p>The <code>scrollBy()</code> method of the Window is similar to <code>scrollTo()</code>, but
its arguments are relative and are added to the current scroll
position:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Scroll 50 pixels down every 500 ms. Note there is no way to turn this off!</code>
<code class="nx">setInterval</code><code class="p">(()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">scrollBy</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code><code class="mi">50</code><code class="p">)},</code> <code class="mi">500</code><code class="p">);</code></pre>

<p>If you want to scroll smoothly with <code>scrollTo()</code> or <code>scrollBy()</code>, pass
a single object argument instead of two numbers, like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">window</code><code class="p">.</code><code class="nx">scrollTo</code><code class="p">({</code>
  <code class="nx">left</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code>
  <code class="nx">top</code><code class="o">:</code> <code class="nx">documentHeight</code> <code class="o">-</code> <code class="nx">viewportHeight</code><code class="p">,</code>
  <code class="nx">behavior</code><code class="o">:</code> <code class="s2">"smooth"</code>
<code class="p">});</code></pre>

<p>Often, instead of scrolling to a numeric location in a document, we just
want to scroll so that a certain element in the document is visible.
You can do this with the <code>scrollIntoView()</code> method on the desired HTML
element. This method ensures that the element on which it is invoked
is visible in the viewport. By default, it tries to put the top edge
of the element at or near the top of the viewport. If <code>false</code> is passed as the only argument, it tries to put the bottom edge of the
element at the bottom of the viewport. The browser will also scroll
the viewport horizontally as needed to make the element visible.</p>

<p>You can also pass an object to <code>scrollIntoView()</code>, setting the
<code>behavior:"smooth"</code> property for smooth scrolling. You can set the
<code>block</code> property to specify where the element should be positioned
vertically and the <code>inline</code> property to specify how it should be
positioned horizontally if horizontal scrolling is needed. Legal
values for both of these properties are <code>start</code>, <code>end</code>, <code>nearest</code>, and <code>center</code>.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.5.5 Viewport Size, Content Size, and Scroll Position"><div class="sect2" id="viewports">
<h2>15.5.5 Viewport Size, Content Size, and Scroll Position</h2>

<p>As<a data-type="indexterm" data-primary="web browser host environment" data-secondary="document geometry and scrolling" data-tertiary="viewport size, content size, and scroll position" id="idm46198506094920"></a><a data-type="indexterm" data-primary="viewport" id="idm46198506093608"></a><a data-type="indexterm" data-primary="document geometry and scrolling" data-secondary="viewport size, content size, and scroll position" id="idm46198506092936"></a> we’ve discussed, browser windows and other HTML elements can
display scrolling content. When this is the case, we sometimes need to
know the size of the viewport, the size of the content, and the scroll
offsets of the content within the viewport. This section covers these
details.</p>

<p>For browser windows, the viewport size is given by the
<code>window.innerWidth</code> and <code>window.innerHeight</code> properties. (Web pages
optimized for mobile devices often use a <code>&lt;meta name="viewport"&gt;</code> tag
in their <code>&lt;head&gt;</code> to set the desired viewport width for the page.) The total
size of the document is the same as the size of the <code>&lt;html&gt;</code> element,
<code>document.documentElement</code>. You can call <code>getBoundingClientRect()</code> on
<code>document.documentElement</code> to get the width and height of the document, or you can use the <code>offsetWidth</code> and <code>offsetHeight</code> properties of
<code>document.documentElement</code>. The scroll offsets of the document within
its viewport are available as <code>window.scrollX</code> and
<code>window.scrollY</code>. These are read-only properties, so you can’t set
them to scroll the document: use <code>window.scrollTo()</code> instead.</p>

<p>Things are a little more complicated for elements. Every Element
object defines the following three groups of properties:</p>

<pre data-type="programlisting">offsetWidth     clientWidth      scrollWidth
offsetHeight    clientHeight     scrollHeight
offsetLeft      clientLeft       scrollLeft
offsetTop       clientTop        scrollTop
offsetParent</pre>

<p>The <code>offsetWidth</code> and <code>offsetHeight</code> properties of an element return its on-screen size in CSS pixels. The returned sizes include the element
border and padding but not margins. The <code>offsetLeft</code> and <code>offsetTop</code>
properties return the <em>x</em> and <em>y</em> coordinates of the element. For
many elements, these values are document coordinates. But for
descendants of positioned elements and for some other elements, such
as table cells, these properties return coordinates that are relative
to an ancestor element rather than the document itself. The
<code>offsetParent</code> property specifies which element the properties are
relative to. These offset properties are all read-only.</p>

<p><code>clientWidth</code> and <code>clientHeight</code> are like <code>offsetWidth</code> and
<code>offsetHeight</code> except that they do not include the border size—only
the content area and its padding. The <code>clientLeft</code> and <code>clientTop</code>
properties are not very useful: they return the horizontal and
vertical distance between the outside of an element’s padding and the
outside of its border. Usually, these values are just the width of the
left and top borders. These client properties are all read-only.  For
inline elements like <code>&lt;i&gt;</code>, <code>&lt;code&gt;</code>, and <code>&lt;span&gt;</code>, they all return 0.</p>

<p><code>scrollWidth</code> and <code>scrollHeight</code> return the size of an element’s
content area plus its padding plus any overflowing content. When the
content fits within the content area without overflow, these
properties are the same as <code>clientWidth</code> and <code>clientHeight</code>. But when
there is overflow, they include the overflowing content and return
values larger than <code>clientWidth</code> and <code>clientHeight</code>. <code>scrollLeft</code> and
<code>scrollTop</code> give the scroll offset of the element content within the
element’s viewport. Unlike all the other properties described here,
<code>scrollLeft</code> and <code>scrollTop</code> are writable properties, and you can set
them to scroll the content within an element. (In most browsers,
Element objects also have <code>scrollTo()</code> and <code>scrollBy()</code> methods like
the Window object does, but these are not yet universally supported.)<a data-type="indexterm" data-primary="" data-startref="docgeo15" id="idm46198506044200"></a><a data-type="indexterm" data-primary="" data-startref="WBgeom15" id="idm46198506043224"></a></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.6 Web Components"><div class="sect1" id="webcomponents">
<h1>15.6 Web Components</h1>

<p>HTML<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="overview of" id="idm46198506040536"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" id="WBcomp15"></a> is a language for document markup and defines a rich set of tags
for that purpose. Over the last three decades, it has become a language
that is used to describe the user interfaces of web applications, but
basic HTML tags such as <code>&lt;input&gt;</code> and <code>&lt;button&gt;</code> are
inadequate for modern UI designs. Web developers are able to make it
work, but only by using CSS and JavaScript to augment the appearance
and behavior of basic HTML tags. Consider a typical user interface
component, such as the search box shown in <a data-type="xref" href="#searchboxfig">Figure 15-3</a>.</p>

<figure><div id="searchboxfig" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1503.png" alt="js7e 1503" width="643" height="110">
<h6><span class="label">Figure 15-3. </span>A search box user interface component</h6>
</div></figure>

<p>The HTML <code>&lt;input&gt;</code> element can be used to accept a single line of
input from the user, but it doesn’t have any way to display icons like
the magnifying glass on the left and the cancel X on the right. In
order to implement a modern user interface element like this for the
web, we need to use at least four HTML elements: an <code>&lt;input&gt;</code> element to
accept and display the user’s input, two <code>&lt;img&gt;</code> elements (or in this
case, two <code>&lt;span&gt;</code> elements displaying Unicode glyphs), and a container
<code>&lt;div&gt;</code> element to hold those three children. Furthermore, we have to
use CSS to hide the default border of the <code>&lt;input&gt;</code> element and define
a border for the container. And we need to use JavaScript to make all
the HTML elements work together. When the user clicks on the X icon, we
need an event handler to clear the input from the <code>&lt;input&gt;</code>
element, for example.</p>

<p>That is a lot of work to do every time you want to display a search
box in a web application, and most web applications today are not
written using “raw” HTML. Instead, many web developers use frameworks
like React and Angular that support the creation of reusable user
interface components like the search box shown here. Web components
is a browser-native alternative to those frameworks based on three
relatively recent additions to web standards that allow JavaScript to
extend HTML with new tags that work as self-contained, reusable UI
components.</p>

<p>The subsections that follow explain how to use web components defined
by other developers in your own web pages, then explain each of the
three technologies that web components are based on, and finally tie all
three together in an example that implements the search box element
pictured in <a data-type="xref" href="#searchboxfig">Figure 15-3</a>.</p>








<section data-type="sect2" data-pdf-bookmark="15.6.1 Using Web Components"><div class="sect2" id="usingwebcomponents">
<h2>15.6.1 Using Web Components</h2>

<p>Web<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="using" id="idm46198506024824"></a> components are defined in JavaScript, so in order to use a web
component in your HTML file, you need to include the JavaScript file
that defines the component. Because web components are a relatively
new technology, they are often written as JavaScript modules, so you
might include one in your HTML like this:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;script </code><code class="na">type=</code><code class="s">"module"</code> <code class="na">src=</code><code class="s">"components/search-box.js"</code><code class="nt">&gt;</code></pre>

<p>Web components define their own HTML tag names, with the important
restriction that those tag names must include a hyphen. (This means
that future versions of HTML can introduce new tags without hyphens,
and there is no chance that the tags will conflict with anyone’s web
component.) To use a web component, just use its tag in your HTML
file:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;search-box</code> <code class="na">placeholder=</code><code class="s">"Search..."</code><code class="nt">&gt;&lt;/search-box&gt;</code></pre>

<p>Web components can have attributes just like regular HTML tags can;
the documentation for the component you are using should tell you
which attributes are supported. Web components cannot be defined with
self-closing tags. You cannot write <code>&lt;search-box/&gt;</code>, for example. Your
HTML file must include both the opening tag and the closing tag.</p>

<p>Like regular HTML elements, some web components are written to expect
children and others are written in such a way that they do not expect
(and will not display) children. Some web components are written so
that they can optionally accept 
<span class="keep-together">specially</span> labeled children that will
appear in named “slots.” The <code>&lt;search-box&gt;</code> component pictured in
<a data-type="xref" href="#searchboxfig">Figure 15-3</a> and implemented in <a data-type="xref" href="#search-box.js">Example 15-3</a> uses “slots” for
the two icons it displays. If you want to to use a <code>&lt;search-box&gt;</code> with
different icons, you can use HTML like this:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;search-box&gt;</code>
  <code class="nt">&lt;img</code> <code class="na">src=</code><code class="s">"images/search-icon.png"</code> <code class="na">slot=</code><code class="s">"left"</code><code class="nt">/&gt;</code>
  <code class="nt">&lt;img</code> <code class="na">src=</code><code class="s">"images/cancel-icon.png"</code> <code class="na">slot=</code><code class="s">"right"</code><code class="nt">/&gt;</code>
<code class="nt">&lt;/search-box&gt;</code></pre>

<p>The <code>slot</code> attribute is an extension to HTML that it is used to
specify which children should go where. The slot names—“left” and
“right” in this example—are defined by the web component. If the
component you are using supports slots, that fact should be included
in its documentation.</p>

<p>I previously noted that web components are often implemented as JavaScript
modules and can be loaded into HTML files with a <code>&lt;script
type="module"&gt;</code> tag. You may remember from the beginning of this
chapter that modules are loaded after document content is parsed, as
if they had a <code>deferred</code> tag. So this means that a web browser will
typically parse and render tags like <code>&lt;search-box&gt;</code> before it has run
the code that will tell it what a <code>&lt;search-box&gt;</code> is. This is normal
when using web components. HTML parsers in web browsers are flexible
and very forgiving about input that they do not understand. When they
encounter a web component tag before that component has been defined,
they add a generic HTMLElement to the DOM tree even though they do not
know what to do with it. Later, when the custom element is defined, the
generic element is “upgraded” so that it looks and behaves as desired.</p>

<p>If a web component has children, then those children will probably be
displayed incorrectly before the component is defined. You can use
this CSS to keep web components hidden until they are defined:</p>

<pre data-type="programlisting" data-code-language="css"><code class="c">/*</code>
<code class="c"> * Make the &lt;search-box&gt; component invisible before it is defined.</code>
<code class="c"> * And try to duplicate its eventual layout and size so that nearby</code>
<code class="c"> * content does not move when it becomes defined.</code>
<code class="c"> */</code>
<code class="nt">search-box</code><code class="nd">:not</code><code class="o">(</code><code class="nd">:defined</code><code class="o">)</code> <code class="p">{</code>
    <code class="k">opacity</code><code class="o">:</code><code class="m">0</code><code class="p">;</code>
    <code class="k">display</code><code class="o">:</code> <code class="nb">inline-block</code><code class="p">;</code>
    <code class="k">width</code><code class="o">:</code> <code class="m">300px</code><code class="p">;</code>
    <code class="k">height</code><code class="o">:</code> <code class="m">50px</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>Like regular HTML elements, web components can be used in
JavaScript. If you include a <code>&lt;search-box&gt;</code> tag in your web page, then
you can obtain a reference to it with <code>querySelector()</code> and an
appropriate CSS selector, just as you would for any other HTML tag.
Generally, it only makes sense to do this after the module that
defines the component has run, so be careful when querying web
components that you do not do so too early. Web component
implementations typically (but this is not a requirement) define a
JavaScript property for each HTML attribute they support. And, like
HTML elements, they may also define useful methods. Once again, the
documentation for the web component you are using should specify what
properties and methods are available to your JavaScript code.</p>

<p>Now that you know how to use web components, the next three sections
cover the three web browser features that allow us to implement them.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198505901960">
<h5>DocumentFragment Nodes</h5>
<p>Before<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="DocumentFragment nodes" id="idm46198505900808"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="DocumentFragment nodes" id="idm46198505899560"></a><a data-type="indexterm" data-primary="DocumentFragment nodes" id="idm46198505898648"></a> we can cover web component APIs, we need to return briefly to
the DOM API to explain what a DocumentFragment is. The DOM API
organizes a document into a tree of Node objects, where a Node can be
a Document, an Element, a Text node, or even a Comment. None of these
node types allows you to represent a fragment of a document that
consists of a set of sibling nodes without their parent. This is where
DocumentFragment comes in: it is another type of Node that serves as a
temporary parent when you want to manipulate a group of sibling nodes
as a single unit. You can create a DocumentFragment node with
<code>document.createDocumentFragment()</code>. Once you have a DocumentFragment,
you can use it like an Element and <code>append()</code> content to it. A
DocumentFragment is different from an Element because it does not have
a parent. But more importantly, when you insert a DocumentFragment
node into the document, the DocumentFragment itself is not
inserted. Instead, all of its children are inserted.</p>
</div></aside>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.6.2 HTML Templates"><div class="sect2" id="templatetag">
<h2>15.6.2 HTML Templates</h2>

<p>The<a data-type="indexterm" data-primary="HTML &lt;template&gt; tag" id="idm46198505894232"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="HTML templates" id="idm46198505893496"></a> HTML <code>&lt;template&gt;</code> tag is only loosely related to web components,
but it does enable a useful optimization for components that appear
frequently in web pages. <code>&lt;template&gt;</code> tags and their children are
never rendered by a web browser and are only useful on web pages that
use JavaScript. The idea behind this tag is that when a web page
contains multiple repetitions of the same basic HTML structure (such
as rows in a table or the internal implementation of a web component),
then we can use a <code>&lt;template&gt;</code> to define that element structure once, then use JavaScript to duplicate the structure as many times as
needed.</p>

<p>In JavaScript, a <code>&lt;template&gt;</code> tag is represented by an
HTMLTemplateElement object. This object defines a single <code>content</code>
property, and the value of this property is a DocumentFragment of all
the child nodes of the <code>&lt;template&gt;</code>. You can clone this
DocumentFragment and then insert the cloned copy into your document as
needed. The fragment itself will not be inserted, but its children
will be. Suppose you’re working with a document that includes a
<code>&lt;table&gt;</code> and <code>&lt;template id="row"&gt;</code> tag and that the template defines
the structure of rows for that table. You might use the template like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">tableBody</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"tbody"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">template</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#row"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">clone</code> <code class="o">=</code> <code class="nx">template</code><code class="p">.</code><code class="nx">content</code><code class="p">.</code><code class="nx">cloneNode</code><code class="p">(</code><code class="kc">true</code><code class="p">);</code>  <code class="c1">// deep clone</code>
<code class="c1">// ...Use the DOM to insert content into the &lt;td&gt; elements of the clone...</code>
<code class="c1">// Now add the cloned and initialized row into the table</code>
<code class="nx">tableBody</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">clone</code><code class="p">);</code></pre>

<p>Template elements do not have to appear literally in an HTML document
in order to be useful. You can create a template in your JavaScript
code, create its children with <code>innerHTML</code>, and then make as many
clones as needed without the parsing overhead of <code>innerHTML</code>. This is
how HTML templates are typically used in web components, and
<a data-type="xref" href="#search-box.js">Example 15-3</a> demonstrates this technique.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.6.3 Custom Elements"><div class="sect2" id="idm46198505809384">
<h2>15.6.3 Custom Elements</h2>

<p>The<a data-type="indexterm" data-primary="elements" data-secondary="document elements" data-tertiary="custom elements" id="idm46198505807688"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="custom elements" id="idm46198505806408"></a> second web browser feature that enables web components is “custom
elements”: the ability to associate a JavaScript class with an HTML
tag name so that any such tags in the document are automatically
turned into instances of the class in the DOM tree. The
<code>customElements.define()</code> method takes a web component tag name as its
first argument (remember that the tag name must include a hyphen) and
a subclass of HTMLElement as its second argument. Any existing
elements in the document with that tag name are “upgraded” to newly
created instances of the class. And if the browser parses any HTML in
the future, it will automatically create an instance of the class for
each of the tags it encounters.</p>

<p>The class passed to <code>customElements.define()</code> should extend
HTMLElement and not a more specific type like
HTMLButtonElement.<sup><a data-type="noteref" id="idm46198505802920-marker" href="ch15.html#idm46198505802920">4</a></sup>
Recall from <a data-type="xref" href="ch09.html#classes">Chapter 9</a> that when a JavaScript class extends another
class, the constructor function must call <code>super()</code> before it uses the
<code>this</code> keyword, so if the custom element class has a constructor, it
should call <code>super()</code> (with no arguments) before doing anything else.</p>

<p>The browser will automatically invoke certain “lifecycle methods” of a
custom element class. The <code>connectedCallback()</code> method is invoked when
an instance of the custom element is inserted into the document, and
many elements use this method to perform initialization. There is also
a <code>disconnectedCallback()</code> method invoked when (and if) the element is
removed from the document, though this is less often used.</p>

<p>If a custom element class defines a static <code>observedAttributes</code>
property whose value is an array of attribute names, and if any of the
named attributes are set (or changed) on an instance of the custom
element, the browser will invoke the <code>attributeChangedCallback()</code>
method, passing the attribute name, its old value, and its new
value. This callback can take whatever steps are necessary to update
the component based on its attribute values.</p>

<p>Custom element classes can also define whatever other properties and
methods they want to. Commonly, they will define getter and setter
methods that make the element’s attributes available as JavaScript
properties.</p>

<p>As an example of a custom element, suppose we want to be able to
display circles within paragraphs of regular text. We’d like to be
able to write HTML like this in order to render mathematical story
problems like the one shown in <a data-type="xref" href="#inlinecircle">Figure 15-4</a>:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;p&gt;</code>
  The document has one marble: <code class="nt">&lt;inline-circle&gt;&lt;/inline-circle&gt;</code>.
  The HTML parser instantiates two more marbles:
  <code class="nt">&lt;inline-circle</code> <code class="na">diameter=</code><code class="s">"1.2em"</code> <code class="na">color=</code><code class="s">"blue"</code><code class="nt">&gt;&lt;/inline-circle&gt;</code>
  <code class="nt">&lt;inline-circle</code> <code class="na">diameter=</code><code class="s">".6em"</code> <code class="na">color=</code><code class="s">"gold"</code><code class="nt">&gt;&lt;/inline-circle&gt;</code>.
  How many marbles does the document contain now?
<code class="nt">&lt;/p&gt;</code></pre>

<figure><div id="inlinecircle" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_15in01.png" alt="js7e 15in01" width="1050" height="262">
<h6><span class="label">Figure 15-4. </span>An inline circle custom element</h6>
</div></figure>

<p>We can implement this <code>&lt;inline-circle&gt;</code> custom element with the code shown in <a data-type="xref" href="#inline-circle-js">Example 15-2</a>:</p>
<div id="inline-circle-js" data-type="example">
<h5><span class="label">Example 15-2. </span>The &lt;inline-circle&gt; custom element</h5>

<pre data-type="programlisting" data-code-language="js"><code class="nx">customElements</code><code class="p">.</code><code class="nx">define</code><code class="p">(</code><code class="s2">"inline-circle"</code><code class="p">,</code> <code class="kr">class</code> <code class="nx">InlineCircle</code> <code class="kr">extends</code> <code class="nx">HTMLElement</code> <code class="p">{</code>
    <code class="c1">// The browser calls this method when an &lt;inline-circle&gt; element</code>
    <code class="c1">// is inserted into the document. There is also a disconnectedCallback()</code>
    <code class="c1">// that we don't need in this example.</code>
    <code class="nx">connectedCallback</code><code class="p">()</code> <code class="p">{</code>
        <code class="c1">// Set the styles needed to create circles</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">display</code> <code class="o">=</code> <code class="s2">"inline-block"</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">borderRadius</code> <code class="o">=</code> <code class="s2">"50%"</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">border</code> <code class="o">=</code> <code class="s2">"solid black 1px"</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">transform</code> <code class="o">=</code> <code class="s2">"translateY(10%)"</code><code class="p">;</code>

        <code class="c1">// If there is not already a size defined, set a default size</code>
        <code class="c1">// that is based on the current font size.</code>
        <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">width</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">width</code> <code class="o">=</code> <code class="s2">"0.8em"</code><code class="p">;</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">height</code> <code class="o">=</code> <code class="s2">"0.8em"</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// The static observedAttributes property specifies which attributes</code>
    <code class="c1">// we want to be notified about changes to. (We use a getter here since</code>
    <code class="c1">// we can only use "static" with methods.)</code>
    <code class="kr">static</code> <code class="nx">get</code> <code class="nx">observedAttributes</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="p">[</code><code class="s2">"diameter"</code><code class="p">,</code> <code class="s2">"color"</code><code class="p">];</code> <code class="p">}</code>

    <code class="c1">// This callback is invoked when one of the attributes listed above</code>
    <code class="c1">// changes, either when the custom element is first parsed, or later.</code>
    <code class="nx">attributeChangedCallback</code><code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">oldValue</code><code class="p">,</code> <code class="nx">newValue</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">switch</code><code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">case</code> <code class="s2">"diameter"</code><code class="o">:</code>
            <code class="c1">// If the diameter attribute changes, update the size styles</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">width</code> <code class="o">=</code> <code class="nx">newValue</code><code class="p">;</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">height</code> <code class="o">=</code> <code class="nx">newValue</code><code class="p">;</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"color"</code><code class="o">:</code>
            <code class="c1">// If the color attribute changes, update the color styles</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">backgroundColor</code> <code class="o">=</code> <code class="nx">newValue</code><code class="p">;</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// Define JavaScript properties that correspond to the element's</code>
    <code class="c1">// attributes. These getters and setters just get and set the underlying</code>
    <code class="c1">// attributes. If a JavaScript property is set, that sets the attribute</code>
    <code class="c1">// which triggers a call to attributeChangedCallback() which updates</code>
    <code class="c1">// the element styles.</code>
    <code class="nx">get</code> <code class="nx">diameter</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">getAttribute</code><code class="p">(</code><code class="s2">"diameter"</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">set</code> <code class="nx">diameter</code><code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"diameter"</code><code class="p">,</code> <code class="nx">diameter</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">get</code> <code class="nx">color</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">getAttribute</code><code class="p">(</code><code class="s2">"color"</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">set</code> <code class="nx">color</code><code class="p">(</code><code class="nx">color</code><code class="p">)</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"color"</code><code class="p">,</code> <code class="nx">color</code><code class="p">);</code> <code class="p">}</code>
<code class="p">});</code></pre></div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.6.4 Shadow DOM"><div class="sect2" id="idm46198505808792">
<h2>15.6.4 Shadow DOM</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="shadow DOM" id="idm46198505738216"></a><a data-type="indexterm" data-primary="shadow DOM" id="shadow15"></a><a data-type="indexterm" data-primary="Document Object Model (DOM)" data-secondary="shadow DOM" id="DOMshadow15"></a> custom element demonstrated in <a data-type="xref" href="#inline-circle-js">Example 15-2</a> is not well
encapsulated. When you set its <code>diameter</code> or <code>color</code> attributes, it
responds by altering its own <code>style</code> attribute, which is not behavior
we would ever expect from a real HTML element. To turn a custom
element into a true web component, it should use the powerful
encapsulation mechanism known as <em>shadow DOM</em>.</p>

<p>Shadow DOM allows a “shadow root” to be attached to a custom element
(and also to a <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;main&gt;</code>,
<code>&lt;nav&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;blockquote&gt;</code>,
<code>&lt;aside&gt;</code>, or <code>&lt;h1&gt;</code> through <code>&lt;h6&gt;</code> element) known as a “shadow host.”
Shadow host elements, like all HTML elements, are already the
root of a normal DOM tree of descendant elements and text nodes. A
shadow root is the root of another, more private, tree of descendant
elements that sprouts from the shadow host and can be thought of as a
distinct minidocument.</p>

<p>The word “shadow” in “shadow DOM” refers to the fact that elements
that descend from a shadow root are “hiding in the shadows”: they are
not part of the normal DOM tree, do not appear in the <code>children</code> array
of their host element, and are not visited by normal DOM traversal
methods such as <code>querySelector()</code>. For contrast, the normal, regular
DOM children of a shadow host are sometimes referred to as the “light
DOM.”</p>

<p>To understand the purpose of the shadow DOM, picture the HTML
<code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements: they display a nontrivial user
interface for controlling media playback, but the play and pause
buttons and other UI elements are not part of the DOM tree and cannot
be manipulated by JavaScript. Given that web browsers are designed to
display HTML, it is only natural that browser vendors would want to
display internal UIs like these using HTML. In fact, most browsers
have been doing something like that for a long time, and the shadow
DOM makes it a standard part of the web platform.</p>










<section data-type="sect3" data-pdf-bookmark="Shadow DOM encapsulation"><div class="sect3" id="idm46198505493960">
<h3>Shadow DOM encapsulation</h3>

<p>The key feature of shadow DOM is the encapsulation it provides. The
descendants of a shadow root are hidden from—and independent from—the
regular DOM tree, almost as if they were in an independent
document. There are three very important kinds of encapsulation
provided by the shadow DOM:</p>

<ul>
<li>
<p>As already mentioned, elements in the shadow DOM are hidden from
regular DOM methods like <code>querySelectorAll()</code>. When a shadow root is
created and attached to its shadow host, it can be created in “open”
or “closed” mode. A closed shadow root is completely sealed away and
inaccessible. More commonly, though, shadow roots are created in
“open” mode, which means that the shadow host has a <code>shadowRoot</code>
property that JavaScript can use to gain access to the elements of
the shadow root, if it has some reason to do so.</p>
</li>
<li>
<p>Styles defined beneath a shadow root are private to that tree and
will never affect the light DOM elements on the outside. (A shadow
root can define default styles for its host element, but these will
be overridden by light DOM styles.) Similarly, the light DOM styles
that apply to the shadow host element have no effect on the
descendants of the shadow root. Elements in the shadow DOM will
inherit things like font size and background color from the light
DOM, and styles in the shadow DOM can choose to use CSS variables
defined in the light DOM. For the most part, however, the styles of
the light DOM and the styles of the shadow DOM are completely
independent: the author of a web component and the user of a web
component do not have to worry about collisions or conflicts between
their stylesheets. Being able to “scope” CSS in this way is perhaps
the most important feature of the shadow DOM.</p>
</li>
<li>
<p>Some events (like “load”) that occur within the shadow DOM are
confined to the shadow DOM. Others, including focus, mouse, and
keyboard events bubble up and out. When an event that originates in
the shadow DOM crosses the boundary and begins to propagate in the
light DOM, its <code>target</code> property is changed to the shadow host
element, so it appears to have originated directly on that <span class="keep-together">element.</span></p>
</li>
</ul>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Shadow DOM slots and light DOM children"><div class="sect3" id="idm46198505485272">
<h3>Shadow DOM slots and light DOM children</h3>

<p>An HTML element that is a shadow host has two trees of
descendants. One is the <code>children[]</code> array—the regular light DOM
descendants of the host element—and the other is the shadow root and
all of its descendants, and you may be wondering how two distinct
content trees can be displayed within the same host element. Here’s
how it works:</p>

<ul>
<li>
<p>The descendants of the shadow root are always displayed within the
shadow host.</p>
</li>
<li>
<p>If those descendants include a <code>&lt;slot&gt;</code> element, then the regular
light DOM children of the host element are displayed as if they were
children of that <code>&lt;slot&gt;</code>, replacing any shadow DOM content in the
slot. If the shadow DOM does not include a <code>&lt;slot&gt;</code>, then any light
DOM content of the host is never displayed. If the shadow DOM has a
<code>&lt;slot&gt;</code>, but the shadow host has no light DOM children, then the
shadow DOM content of the slot is displayed as a default.</p>
</li>
<li>
<p>When light DOM content is displayed within a shadow DOM slot, we say
that those elements have been “distributed,” but it is important to
understand that the elements do not actually become part of the
shadow DOM. They can still be queried with <code>querySelector()</code>, and
they still appear in the light DOM as children or descendants of
the host element.</p>
</li>
<li>
<p>If the shadow DOM defines more than one <code>&lt;slot&gt;</code> and names those
slots with a <code>name</code> attribute, then children of the shadow host can
specify which slot they would like to appear in by specifying a
<code>slot="slotname"</code> attribute. We saw an example of this usage
in <a data-type="xref" href="#usingwebcomponents">§15.6.1</a> when we demonstrated how to customize the
icons displayed by the <code>&lt;search-box&gt;</code> component.</p>
</li>
</ul>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Shadow DOM API"><div class="sect3" id="idm46198505473224">
<h3>Shadow DOM API</h3>

<p>For all of its power, the Shadow DOM doesn’t have much of a JavaScript
API. To turn a light DOM element into a shadow host, just call its
<code>attachShadow()</code> method, passing
<code>{mode:"open"}</code> as the only argument. This method returns a shadow
root object and also sets that object as the value of the host’s
<code>shadowRoot</code> property. The shadow root object is a DocumentFragment,
and you can use DOM methods to add content to it or just set its
<code>innerHTML</code> property to a string of HTML.</p>

<p>If your web component needs to know when the light DOM content of a
shadow DOM <code>&lt;slot&gt;</code> has changed, it can register a listener for
“slotchanged” events directly on the <code>&lt;slot&gt;</code> element.<a data-type="indexterm" data-primary="" data-startref="DOMshadow15" id="idm46198505468488"></a><a data-type="indexterm" data-primary="" data-startref="shadow15" id="idm46198505467480"></a></p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.6.5 Example: a &lt;search-box&gt; Web Component"><div class="sect2" id="idm46198505466280">
<h2>15.6.5 Example: a &lt;search-box&gt; Web Component</h2>

<p><a data-type="xref" href="#searchboxfig">Figure 15-3</a> illustrated<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web components" data-tertiary="search box example" id="idm46198505464120"></a> a <code>&lt;search-box&gt;</code> web
component. <a data-type="xref" href="#search-box.js">Example 15-3</a> demonstrates the three enabling
technologies that define web components: it implements the
<code>&lt;search-box&gt;</code> component as a custom element that uses a <code>&lt;template&gt;</code>
tag for efficiency and a shadow root for encapsulation.</p>

<p>This example shows how to use the low-level web component APIs
directly. In practice, many web components developed today create them
using higher-level libraries such as “lit-element.” One of the reasons
to use a library is that creating reusable and customizable components
is actually quite hard to do well, and there are many details to get
right. <a data-type="xref" href="#search-box.js">Example 15-3</a> demonstrates web components and does some
basic keyboard focus handling, but otherwise ignores accessibility and
makes no attempt to use proper ARIA attributes to make the component
work with screen readers and other assistive technology.<a data-type="indexterm" data-primary="" data-startref="WBcomp15" id="idm46198505458776"></a></p>
<div id="search-box.js" data-type="example">
<h5><span class="label">Example 15-3. </span>Implementing a web component</h5>

<pre data-type="programlisting" data-code-language="js"><code class="cm">/**</code>
<code class="cm"> * This class defines a custom HTML &lt;search-box&gt; element that displays an</code>
<code class="cm"> * &lt;input&gt; text input field plus two icons or emoji. By default, it displays a</code>
<code class="cm"> * magnifying glass emoji (indicating search) to the left of the text field</code>
<code class="cm"> * and an X emoji (indicating cancel) to the right of the text field. It</code>
<code class="cm"> * hides the border on the input field and displays a border around itself,</code>
<code class="cm"> * creating the appearance that the two emoji are inside the input</code>
<code class="cm"> * field. Similarly, when the internal input field is focused, the focus ring</code>
<code class="cm"> * is displayed around the &lt;search-box&gt;.</code>
<code class="cm"> *</code>
<code class="cm"> * You can override the default icons by including &lt;span&gt; or &lt;img&gt; children</code>
<code class="cm"> * of &lt;search-box&gt; with slot="left" and slot="right" attributes.</code>
<code class="cm"> *</code>
<code class="cm"> * &lt;search-box&gt; supports the normal HTML disabled and hidden attributes and</code>
<code class="cm"> * also size and placeholder attributes, which have the same meaning for this</code>
<code class="cm"> * element as they do for the &lt;input&gt; element.</code>
<code class="cm"> *</code>
<code class="cm"> * Input events from the internal &lt;input&gt; element bubble up and appear with</code>
<code class="cm"> * their target field set to the &lt;search-box&gt; element.</code>
<code class="cm"> *</code>
<code class="cm"> * The element fires a "search" event with the detail property set to the</code>
<code class="cm"> * current input string when the user clicks on the left emoji (the magnifying</code>
<code class="cm"> * glass). The "search" event is also dispatched when the internal text field</code>
<code class="cm"> * generates a "change" event (when the text has changed and the user types</code>
<code class="cm"> * Return or Tab).</code>
<code class="cm"> *</code>
<code class="cm"> * The element fires a "clear" event when the user clicks on the right emoji</code>
<code class="cm"> * (the X). If no handler calls preventDefault() on the event then the element</code>
<code class="cm"> * clears the user's input once event dispatch is complete.</code>
<code class="cm"> *</code>
<code class="cm"> * Note that there are no onsearch and onclear properties or attributes:</code>
<code class="cm"> * handlers for the "search" and "clear" events can only be registered with</code>
<code class="cm"> * addEventListener().</code>
<code class="cm"> */</code>
<code class="kr">class</code> <code class="nx">SearchBox</code> <code class="kr">extends</code> <code class="nx">HTMLElement</code> <code class="p">{</code>
    <code class="nx">constructor</code><code class="p">()</code> <code class="p">{</code>
        <code class="kr">super</code><code class="p">();</code> <code class="c1">// Invoke the superclass constructor; must be first.</code>

        <code class="c1">// Create a shadow DOM tree and attach it to this element, setting</code>
        <code class="c1">// the value of this.shadowRoot.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">attachShadow</code><code class="p">({</code><code class="nx">mode</code><code class="o">:</code> <code class="s2">"open"</code><code class="p">});</code>

        <code class="c1">// Clone the template that defines the descendants and stylesheet for</code>
        <code class="c1">// this custom component, and append that content to the shadow root.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">shadowRoot</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">SearchBox</code><code class="p">.</code><code class="nx">template</code><code class="p">.</code><code class="nx">content</code><code class="p">.</code><code class="nx">cloneNode</code><code class="p">(</code><code class="kc">true</code><code class="p">));</code>

        <code class="c1">// Get references to the important elements in the shadow DOM</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">input</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">shadowRoot</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#input"</code><code class="p">);</code>
        <code class="kd">let</code> <code class="nx">leftSlot</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">shadowRoot</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s1">'slot[name="left"]'</code><code class="p">);</code>
        <code class="kd">let</code> <code class="nx">rightSlot</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">shadowRoot</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s1">'slot[name="right"]'</code><code class="p">);</code>

        <code class="c1">// When the internal input field gets or loses focus, set or remove</code>
        <code class="c1">// the "focused" attribute which will cause our internal stylesheet</code>
        <code class="c1">// to display or hide a fake focus ring on the entire component. Note</code>
        <code class="c1">// that the "blur" and "focus" events bubble and appear to originate</code>
        <code class="c1">// from the &lt;search-box&gt;.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">onfocus</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"focused"</code><code class="p">,</code> <code class="s2">""</code><code class="p">);</code> <code class="p">};</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">onblur</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">removeAttribute</code><code class="p">(</code><code class="s2">"focused"</code><code class="p">);};</code>

        <code class="c1">// If the user clicks on the magnifying glass, trigger a "search"</code>
        <code class="c1">// event.  Also trigger it if the input field fires a "change"</code>
        <code class="c1">// event. (The "change" event does not bubble out of the Shadow DOM.)</code>
        <code class="nx">leftSlot</code><code class="p">.</code><code class="nx">onclick</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">onchange</code> <code class="o">=</code> <code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="nx">event</code><code class="p">.</code><code class="nx">stopPropagation</code><code class="p">();</code>    <code class="c1">// Prevent click events from bubbling</code>
            <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">disabled</code><code class="p">)</code> <code class="k">return</code><code class="p">;</code>  <code class="c1">// Do nothing when disabled</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">dispatchEvent</code><code class="p">(</code><code class="k">new</code> <code class="nx">CustomEvent</code><code class="p">(</code><code class="s2">"search"</code><code class="p">,</code> <code class="p">{</code>
                <code class="nx">detail</code><code class="o">:</code> <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">value</code>
            <code class="p">}));</code>
        <code class="p">};</code>

        <code class="c1">// If the user clicks on the X, trigger a "clear" event.</code>
        <code class="c1">// If preventDefault() is not called on the event, clear the input.</code>
        <code class="nx">rightSlot</code><code class="p">.</code><code class="nx">onclick</code> <code class="o">=</code> <code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="nx">event</code><code class="p">.</code><code class="nx">stopPropagation</code><code class="p">();</code>    <code class="c1">// Don't let the click bubble up</code>
            <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">disabled</code><code class="p">)</code> <code class="k">return</code><code class="p">;</code>  <code class="c1">// Don't do anything if disabled</code>
            <code class="kd">let</code> <code class="nx">e</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">CustomEvent</code><code class="p">(</code><code class="s2">"clear"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">cancelable</code><code class="o">:</code> <code class="kc">true</code> <code class="p">});</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">dispatchEvent</code><code class="p">(</code><code class="nx">e</code><code class="p">);</code>
            <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">e</code><code class="p">.</code><code class="nx">defaultPrevented</code><code class="p">)</code> <code class="p">{</code>  <code class="c1">// If the event was not "cancelled"</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">value</code> <code class="o">=</code> <code class="s2">""</code><code class="p">;</code>  <code class="c1">// then clear the input field</code>
            <code class="p">}</code>
        <code class="p">};</code>
    <code class="p">}</code>

    <code class="c1">// When some of our attributes are set or changed, we need to set the</code>
    <code class="c1">// corresponding value on the internal &lt;input&gt; element. This life cycle</code>
    <code class="c1">// method, together with the static observedAttributes property below,</code>
    <code class="c1">// takes care of that.</code>
    <code class="nx">attributeChangedCallback</code><code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">oldValue</code><code class="p">,</code> <code class="nx">newValue</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">name</code> <code class="o">===</code> <code class="s2">"disabled"</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">disabled</code> <code class="o">=</code> <code class="nx">newValue</code> <code class="o">!==</code> <code class="kc">null</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">name</code> <code class="o">===</code> <code class="s2">"placeholder"</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">placeholder</code> <code class="o">=</code> <code class="nx">newValue</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">name</code> <code class="o">===</code> <code class="s2">"size"</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">size</code> <code class="o">=</code> <code class="nx">newValue</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">name</code> <code class="o">===</code> <code class="s2">"value"</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">input</code><code class="p">.</code><code class="nx">value</code> <code class="o">=</code> <code class="nx">newValue</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// Finally, we define property getters and setters for properties that</code>
    <code class="c1">// correspond to the HTML attributes we support. The getters simply return</code>
    <code class="c1">// the value (or the presence) of the attribute. And the setters just set</code>
    <code class="c1">// the value (or the presence) of the attribute. When a setter method</code>
    <code class="c1">// changes an attribute, the browser will automatically invoke the</code>
    <code class="c1">// attributeChangedCallback above.</code>

    <code class="nx">get</code> <code class="nx">placeholder</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">getAttribute</code><code class="p">(</code><code class="s2">"placeholder"</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">get</code> <code class="nx">size</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">getAttribute</code><code class="p">(</code><code class="s2">"size"</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">get</code> <code class="nx">value</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">getAttribute</code><code class="p">(</code><code class="s2">"value"</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">get</code> <code class="nx">disabled</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">hasAttribute</code><code class="p">(</code><code class="s2">"disabled"</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">get</code> <code class="nx">hidden</code><code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">hasAttribute</code><code class="p">(</code><code class="s2">"hidden"</code><code class="p">);</code> <code class="p">}</code>

    <code class="nx">set</code> <code class="nx">placeholder</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"placeholder"</code><code class="p">,</code> <code class="nx">value</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">set</code> <code class="nx">size</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"size"</code><code class="p">,</code> <code class="nx">value</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">set</code> <code class="nx">value</code><code class="p">(</code><code class="nx">text</code><code class="p">)</code> <code class="p">{</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"value"</code><code class="p">,</code> <code class="nx">text</code><code class="p">);</code> <code class="p">}</code>
    <code class="nx">set</code> <code class="nx">disabled</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"disabled"</code><code class="p">,</code> <code class="s2">""</code><code class="p">);</code>
        <code class="k">else</code> <code class="k">this</code><code class="p">.</code><code class="nx">removeAttribute</code><code class="p">(</code><code class="s2">"disabled"</code><code class="p">);</code>
    <code class="p">}</code>
    <code class="nx">set</code> <code class="nx">hidden</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="k">this</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"hidden"</code><code class="p">,</code> <code class="s2">""</code><code class="p">);</code>
        <code class="k">else</code> <code class="k">this</code><code class="p">.</code><code class="nx">removeAttribute</code><code class="p">(</code><code class="s2">"hidden"</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="c1">// This static field is required for the attributeChangedCallback method.</code>
<code class="c1">// Only attributes named in this array will trigger calls to that method.</code>
<code class="nx">SearchBox</code><code class="p">.</code><code class="nx">observedAttributes</code> <code class="o">=</code> <code class="p">[</code><code class="s2">"disabled"</code><code class="p">,</code> <code class="s2">"placeholder"</code><code class="p">,</code> <code class="s2">"size"</code><code class="p">,</code> <code class="s2">"value"</code><code class="p">];</code>

<code class="c1">// Create a &lt;template&gt; element to hold the stylesheet and the tree of</code>
<code class="c1">// elements that we'll use for each instance of the SearchBox element.</code>
<code class="nx">SearchBox</code><code class="p">.</code><code class="nx">template</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"template"</code><code class="p">);</code>

<code class="c1">// We initialize the template by parsing this string of HTML. Note, however,</code>
<code class="c1">// that when we instantiate a SearchBox, we are able to just clone the nodes</code>
<code class="c1">// in the template and do have to parse the HTML again.</code>
<code class="nx">SearchBox</code><code class="p">.</code><code class="nx">template</code><code class="p">.</code><code class="nx">innerHTML</code> <code class="o">=</code> <code class="sb">`</code>
<code class="sb">&lt;style&gt;</code>
<code class="sb">/*</code>
<code class="sb"> * The :host selector refers to the &lt;search-box&gt; element in the light</code>
<code class="sb"> * DOM. These styles are defaults and can be overridden by the user of the</code>
<code class="sb"> * &lt;search-box&gt; with styles in the light DOM.</code>
<code class="sb"> */</code>
<code class="sb">:host {</code>
<code class="sb">  display: inline-block;   /* The default is inline display */</code>
<code class="sb">  border: solid black 1px; /* A rounded border around the &lt;input&gt; and &lt;slots&gt; */</code>
<code class="sb">  border-radius: 5px;</code>
<code class="sb">  padding: 4px 6px;        /* And some space inside the border */</code>
<code class="sb">}</code>
<code class="sb">:host([hidden]) {          /* Note the parentheses: when host has hidden... */</code>
<code class="sb">  display:none;            /* ...attribute set don't display it */</code>
<code class="sb">}</code>
<code class="sb">:host([disabled]) {        /* When host has the disabled attribute... */</code>
<code class="sb">  opacity: 0.5;            /* ...gray it out */</code>
<code class="sb">}</code>
<code class="sb">:host([focused]) {         /* When host has the focused attribute... */</code>
<code class="sb">  box-shadow: 0 0 2px 2px #6AE;  /* display this fake focus ring. */</code>
<code class="sb">}</code>

<code class="sb">/* The rest of the stylesheet only applies to elements in the Shadow DOM. */</code>
<code class="sb">input {</code>
<code class="sb">  border-width: 0;         /* Hide the border of the internal input field. */</code>
<code class="sb">  outline: none;           /* Hide the focus ring, too. */</code>
<code class="sb">  font: inherit;           /* &lt;input&gt; elements don't inherit font by default */</code>
<code class="sb">  background: inherit;     /* Same for background color. */</code>
<code class="sb">}</code>
<code class="sb">slot {</code>
<code class="sb">  cursor: default;         /* An arrow pointer cursor over the buttons */</code>
<code class="sb">  user-select: none;       /* Don't let the user select the emoji text */</code>
<code class="sb">}</code>
<code class="sb">&lt;/style&gt;</code>
<code class="sb">&lt;div&gt;</code>
<code class="sb">  &lt;slot name="left"&gt;</code><code class="err">\</code><code class="sb">u{1f50d}&lt;/slot&gt;  &lt;!-- U+1F50D is a magnifying glass --&gt;</code>
<code class="sb">  &lt;input type="text" id="input" /&gt;    &lt;!-- The actual input element --&gt;</code>
<code class="sb">  &lt;slot name="right"&gt;</code><code class="err">\</code><code class="sb">u{2573}&lt;/slot&gt;  &lt;!-- U+2573 is an X --&gt;</code>
<code class="sb">&lt;/div&gt;</code>
<code class="sb">`</code><code class="p">;</code>

<code class="c1">// Finally, we call customElement.define() to register the SearchBox element</code>
<code class="c1">// as the implementation of the &lt;search-box&gt; tag. Custom elements are required</code>
<code class="c1">// to have a tag name that contains a hyphen.</code>
<code class="nx">customElements</code><code class="p">.</code><code class="nx">define</code><code class="p">(</code><code class="s2">"search-box"</code><code class="p">,</code> <code class="nx">SearchBox</code><code class="p">);</code></pre></div>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.7 SVG: Scalable Vector Graphics"><div class="sect1" id="svg">
<h1>15.7 SVG: Scalable Vector Graphics</h1>

<p><em>SVG</em> (scalable vector graphics) <a data-type="indexterm" data-primary="SVG" data-see="scalable vector graphics (SVG)" id="idm46198505445832"></a><a data-type="indexterm" data-primary="graphics" data-secondary="scalable vector graphics (SVG)" id="Gscal15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scalable vector graphics (SVG)" id="WBsvg15"></a><a data-type="indexterm" data-primary="scalable vector graphics (SVG)" id="svg15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="scalable vector graphics (SVG)" data-tertiary="overview of" id="idm46198505441352"></a><a data-type="indexterm" data-primary="scalable vector graphics (SVG)" data-secondary="overview of" id="idm46198505440104"></a>is an image format. The word “vector” in its name indicates that
it is fundamentally different from raster image formats, such as GIF,
JPEG, and PNG, that specify a matrix of pixel values. Instead, an SVG
“image” is a precise, resolution-independent (hence “scalable”)
description of the steps necessary to draw the desired graphic. SVG
images are described by text files using the XML markup language,
which is quite similar to HTML.</p>

<p>There are three ways you can use SVG in web browsers:</p>
<ol>
<li>
<p>You can use <em>.svg</em> image files with regular HTML <code>&lt;img&gt;</code> tags,
just as you would use a <em>.png</em> or <em>.jpeg</em> image.</p>
</li>
<li>
<p>Because the XML-based SVG format is so similar to HTML, you
can actually embed SVG tags directly into your HTML documents. If
you do this, the browser’s HTML parser allows you to omit XML
namespaces and treat SVG tags as if they were HTML tags.</p>
</li>
<li>
<p>You can use the DOM API to dynamically create SVG elements to
generate images on demand.</p>
</li>

</ol>

<p>The subsections that follow demonstrate the second and third uses of
SVG. Note, however, that SVG has a large and moderately complex
grammar. In addition to simple shape-drawing primitives, it includes
support for arbitrary curves, text, and animation. SVG graphics can
even incorporate JavaScript scripts and CSS stylesheets to add
behavior and presentation information. A full description of SVG is
well beyond the scope of this book. The goal of this section is just
to show you how you can use SVG in your HTML documents and script it
with JavaScript.</p>








<section data-type="sect2" data-pdf-bookmark="15.7.1 SVG in HTML"><div class="sect2" id="idm46198504558936">
<h2>15.7.1 SVG in HTML</h2>

<p>SVG<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scalable vector graphics (SVG)" data-tertiary="SVG in HTML" id="idm46198504557608"></a><a data-type="indexterm" data-primary="scalable vector graphics (SVG)" data-secondary="SVG in HTML" id="idm46198504556248"></a> images can, of course, be displayed using HTML <code>&lt;img&gt;</code> tags. But
you can also embed SVG directly in HTML. And if you do this, you can
even use CSS stylesheets to specify things like fonts, colors, and line
widths. Here, for example, is an HTML file that uses SVG to display
an analog clock face:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;html&gt;</code>
<code class="nt">&lt;head&gt;</code>
<code class="nt">&lt;title&gt;</code>Analog Clock<code class="nt">&lt;/title&gt;</code>
<code class="nt">&lt;style&gt;</code>
<code class="c">/* These CSS styles all apply to the SVG elements defined below */</code>
<code class="nf">#clock</code> <code class="p">{</code>                             <code class="c">/* Styles for everything in the clock:*/</code>
   <code class="k">stroke</code><code class="o">:</code> <code class="nb">black</code><code class="p">;</code>                    <code class="c">/* black lines */</code>
   <code class="k">stroke-linecap</code><code class="o">:</code> <code class="n">round</code><code class="p">;</code>            <code class="c">/* with rounded ends */</code>
   <code class="k">fill</code><code class="o">:</code> <code class="m">#ffe</code><code class="p">;</code>                       <code class="c">/* on an off-white background */</code>
<code class="p">}</code>
<code class="nf">#clock</code> <code class="nc">.face</code> <code class="p">{</code> <code class="k">stroke-width</code><code class="o">:</code> <code class="m">3</code><code class="p">;</code> <code class="p">}</code>    <code class="c">/* Clock face outline */</code>
<code class="nf">#clock</code> <code class="nc">.ticks</code> <code class="p">{</code> <code class="k">stroke-width</code><code class="o">:</code> <code class="m">2</code><code class="p">;</code> <code class="p">}</code>   <code class="c">/* Lines that mark each hour */</code>
<code class="nf">#clock</code> <code class="nc">.hands</code> <code class="p">{</code> <code class="k">stroke-width</code><code class="o">:</code> <code class="m">3</code><code class="p">;</code> <code class="p">}</code>   <code class="c">/* How to draw the clock hands */</code>
<code class="nf">#clock</code> <code class="nc">.numbers</code> <code class="p">{</code>                    <code class="c">/* How to draw the numbers */</code>
    <code class="k">font-family</code><code class="o">:</code> <code class="nb">sans-serif</code><code class="p">;</code> <code class="k">font-size</code><code class="o">:</code> <code class="m">10</code><code class="p">;</code> <code class="k">font-weight</code><code class="o">:</code> <code class="nb">bold</code><code class="p">;</code>
    <code class="k">text-anchor</code><code class="o">:</code> <code class="nb">middle</code><code class="p">;</code> <code class="k">stroke</code><code class="o">:</code> <code class="nb">none</code><code class="p">;</code> <code class="k">fill</code><code class="o">:</code> <code class="nb">black</code><code class="p">;</code>
<code class="p">}</code>
<code class="nt">&lt;/style&gt;</code>
<code class="nt">&lt;/head&gt;</code>
<code class="nt">&lt;body&gt;</code>
  <code class="nt">&lt;svg</code> <code class="na">id=</code><code class="s">"clock"</code> <code class="na">viewBox=</code><code class="s">"0 0 100 100"</code> <code class="na">width=</code><code class="s">"250"</code> <code class="na">height=</code><code class="s">"250"</code><code class="nt">&gt;</code>
    <code class="c">&lt;!-- The width and height attributes are the screen size of the graphic --&gt;</code>
    <code class="c">&lt;!-- The viewBox attribute gives the internal coordinate system --&gt;</code>
    <code class="nt">&lt;circle</code> <code class="na">class=</code><code class="s">"face"</code> <code class="na">cx=</code><code class="s">"50"</code> <code class="na">cy=</code><code class="s">"50"</code> <code class="na">r=</code><code class="s">"45"</code><code class="nt">/&gt;</code>  <code class="c">&lt;!-- the clock face --&gt;</code>
    <code class="nt">&lt;g</code> <code class="na">class=</code><code class="s">"ticks"</code><code class="nt">&gt;</code>   <code class="c">&lt;!-- tick marks for each of the 12 hours --&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'50'</code> <code class="na">y1=</code><code class="s">'5.000'</code> <code class="na">x2=</code><code class="s">'50.00'</code> <code class="na">y2=</code><code class="s">'10.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'72.50'</code> <code class="na">y1=</code><code class="s">'11.03'</code> <code class="na">x2=</code><code class="s">'70.00'</code> <code class="na">y2=</code><code class="s">'15.36'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'88.97'</code> <code class="na">y1=</code><code class="s">'27.50'</code> <code class="na">x2=</code><code class="s">'84.64'</code> <code class="na">y2=</code><code class="s">'30.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'95.00'</code> <code class="na">y1=</code><code class="s">'50.00'</code> <code class="na">x2=</code><code class="s">'90.00'</code> <code class="na">y2=</code><code class="s">'50.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'88.97'</code> <code class="na">y1=</code><code class="s">'72.50'</code> <code class="na">x2=</code><code class="s">'84.64'</code> <code class="na">y2=</code><code class="s">'70.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'72.50'</code> <code class="na">y1=</code><code class="s">'88.97'</code> <code class="na">x2=</code><code class="s">'70.00'</code> <code class="na">y2=</code><code class="s">'84.64'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'50.00'</code> <code class="na">y1=</code><code class="s">'95.00'</code> <code class="na">x2=</code><code class="s">'50.00'</code> <code class="na">y2=</code><code class="s">'90.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'27.50'</code> <code class="na">y1=</code><code class="s">'88.97'</code> <code class="na">x2=</code><code class="s">'30.00'</code> <code class="na">y2=</code><code class="s">'84.64'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'11.03'</code> <code class="na">y1=</code><code class="s">'72.50'</code> <code class="na">x2=</code><code class="s">'15.36'</code> <code class="na">y2=</code><code class="s">'70.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'5.000'</code> <code class="na">y1=</code><code class="s">'50.00'</code> <code class="na">x2=</code><code class="s">'10.00'</code> <code class="na">y2=</code><code class="s">'50.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'11.03'</code> <code class="na">y1=</code><code class="s">'27.50'</code> <code class="na">x2=</code><code class="s">'15.36'</code> <code class="na">y2=</code><code class="s">'30.00'</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">x1=</code><code class="s">'27.50'</code> <code class="na">y1=</code><code class="s">'11.03'</code> <code class="na">x2=</code><code class="s">'30.00'</code> <code class="na">y2=</code><code class="s">'15.36'</code><code class="nt">/&gt;</code>
    <code class="nt">&lt;/g&gt;</code>
    <code class="nt">&lt;g</code> <code class="na">class=</code><code class="s">"numbers"</code><code class="nt">&gt;</code> <code class="c">&lt;!-- Number the cardinal directions--&gt;</code>
      <code class="nt">&lt;text</code> <code class="na">x=</code><code class="s">"50"</code> <code class="na">y=</code><code class="s">"18"</code><code class="nt">&gt;</code>12<code class="nt">&lt;/text&gt;&lt;text</code> <code class="na">x=</code><code class="s">"85"</code> <code class="na">y=</code><code class="s">"53"</code><code class="nt">&gt;</code>3<code class="nt">&lt;/text&gt;</code>
      <code class="nt">&lt;text</code> <code class="na">x=</code><code class="s">"50"</code> <code class="na">y=</code><code class="s">"88"</code><code class="nt">&gt;</code>6<code class="nt">&lt;/text&gt;&lt;text</code> <code class="na">x=</code><code class="s">"15"</code> <code class="na">y=</code><code class="s">"53"</code><code class="nt">&gt;</code>9<code class="nt">&lt;/text&gt;</code>
    <code class="nt">&lt;/g&gt;</code>
    <code class="nt">&lt;g</code> <code class="na">class=</code><code class="s">"hands"</code><code class="nt">&gt;</code>   <code class="c">&lt;!-- Draw hands pointing straight up. --&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">class=</code><code class="s">"hourhand"</code> <code class="na">x1=</code><code class="s">"50"</code> <code class="na">y1=</code><code class="s">"50"</code> <code class="na">x2=</code><code class="s">"50"</code> <code class="na">y2=</code><code class="s">"25"</code><code class="nt">/&gt;</code>
      <code class="nt">&lt;line</code> <code class="na">class=</code><code class="s">"minutehand"</code> <code class="na">x1=</code><code class="s">"50"</code> <code class="na">y1=</code><code class="s">"50"</code> <code class="na">x2=</code><code class="s">"50"</code> <code class="na">y2=</code><code class="s">"20"</code><code class="nt">/&gt;</code>
    <code class="nt">&lt;/g&gt;</code>
  <code class="nt">&lt;/svg&gt;</code>
  <code class="nt">&lt;script </code><code class="na">src=</code><code class="s">"clock.js"</code><code class="nt">&gt;&lt;/script&gt;</code>
<code class="nt">&lt;/body&gt;</code>
<code class="nt">&lt;/html&gt;</code></pre>

<p>You’ll notice that the descendants of the <code>&lt;svg&gt;</code> tag are not normal
HTML tags. <code>&lt;circle&gt;</code>, <code>&lt;line&gt;</code>, and <code>&lt;text&gt;</code> tags have obvious
purposes, though, and it should be clear how this SVG graphic
works. There are many other SVG tags, however, and you’ll need to
consult an SVG reference to learn more. You may also notice that the
stylesheet is odd. Styles like <code>fill</code>, <code>stroke-width</code>, and
<code>text-anchor</code> are not normal CSS style properties. In this case, CSS
is essentially being used to set attributes of SVG tags that appear in
the document. Note also that the CSS <code>font</code> shorthand property does
not work for SVG tags, and you must explicitly set <code>font-family</code>,
<code>font-size</code>, and <code>font-weight</code> as separate style properties.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.7.2 Scripting SVG"><div class="sect2" id="idm46198504247688">
<h2>15.7.2 Scripting SVG</h2>

<p>One<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scalable vector graphics (SVG)" data-tertiary="scripting SVG" id="idm46198504246120"></a><a data-type="indexterm" data-primary="scalable vector graphics (SVG)" data-secondary="scripting SVG" id="idm46198504244760"></a> reason to embed SVG directly into your HTML files (instead of just
using static <code>&lt;img&gt;</code> tags) is that if you do this, then you can use
the DOM API to manipulate the SVG image.  Suppose you use SVG to
display icons in your web application. You could embed SVG within a
<code>&lt;template&gt;</code> tag (<a data-type="xref" href="#templatetag">§15.6.2</a>) and then clone the template content
whenever you need to insert a copy of that icon into your UI. And if
you want the icon to respond to user activity—by changing color when
the user hovers the pointer over it, for example—you can often achieve
this with CSS.</p>

<p>It is also possible to dynamically manipulate SVG graphics that are
directly embedded in HTML. The clock face example in the previous section displays a
static clock with hour and minute hands facing straight up displaying
the time noon or midnight. But you may have noticed that the HTML file
includes a <code>&lt;script&gt;</code> tag. That script runs a function periodically
to check the time and transform the hour and minute hands by rotating
them the appropriate number of degrees so that the clock actually
displays the current time, as shown in <a data-type="xref" href="#clockfig">Figure 15-5</a>.</p>

<figure><div id="clockfig" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1504.png" alt="js7e 1504" width="330" height="331">
<h6><span class="label">Figure 15-5. </span>A scripted SVG analog clock</h6>
</div></figure>

<p>The code to manipulate the clock is straightforward. It determines the
proper angle of the hour and minute hands based on the current time,
then uses <code>querySelector()</code> to look up the SVG elements that display
those hands, then sets a <code>transform</code> attribute on them to rotate them
around the center of the clock face. The function uses <code>setTimeout()</code>
to ensure that it runs once a minute:</p>

<pre data-type="programlisting" data-code-language="js"><code class="p">(</code><code class="kd">function</code> <code class="nx">updateClock</code><code class="p">()</code> <code class="p">{</code> <code class="c1">// Update the SVG clock graphic to show current time</code>
    <code class="kd">let</code> <code class="nx">now</code> <code class="o">=</code> <code class="k">new</code> <code class="nb">Date</code><code class="p">();</code>                       <code class="c1">// Current time</code>
    <code class="kd">let</code> <code class="nx">sec</code> <code class="o">=</code> <code class="nx">now</code><code class="p">.</code><code class="nx">getSeconds</code><code class="p">();</code>                 <code class="c1">// Seconds</code>
    <code class="kd">let</code> <code class="nx">min</code> <code class="o">=</code> <code class="nx">now</code><code class="p">.</code><code class="nx">getMinutes</code><code class="p">()</code> <code class="o">+</code> <code class="nx">sec</code><code class="o">/</code><code class="mi">60</code><code class="p">;</code>        <code class="c1">// Fractional minutes</code>
    <code class="kd">let</code> <code class="nx">hour</code> <code class="o">=</code> <code class="p">(</code><code class="nx">now</code><code class="p">.</code><code class="nx">getHours</code><code class="p">()</code> <code class="o">%</code> <code class="mi">12</code><code class="p">)</code> <code class="o">+</code> <code class="nx">min</code><code class="o">/</code><code class="mi">60</code><code class="p">;</code>  <code class="c1">// Fractional hours</code>
    <code class="kd">let</code> <code class="nx">minangle</code> <code class="o">=</code> <code class="nx">min</code> <code class="o">*</code> <code class="mi">6</code><code class="p">;</code>                     <code class="c1">// 6 degrees per minute</code>
    <code class="kd">let</code> <code class="nx">hourangle</code> <code class="o">=</code> <code class="nx">hour</code> <code class="o">*</code> <code class="mi">30</code><code class="p">;</code>                  <code class="c1">// 30 degrees per hour</code>

    <code class="c1">// Get SVG elements for the hands of the clock</code>
    <code class="kd">let</code> <code class="nx">minhand</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#clock .minutehand"</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">hourhand</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#clock .hourhand"</code><code class="p">);</code>

    <code class="c1">// Set an SVG attribute on them to move them around the clock face</code>
    <code class="nx">minhand</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"transform"</code><code class="p">,</code> <code class="sb">`rotate(</code><code class="si">${</code><code class="nx">minangle</code><code class="si">}</code><code class="sb">,50,50)`</code><code class="p">);</code>
    <code class="nx">hourhand</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"transform"</code><code class="p">,</code> <code class="sb">`rotate(</code><code class="si">${</code><code class="nx">hourangle</code><code class="si">}</code><code class="sb">,50,50)`</code><code class="p">);</code>

    <code class="c1">// Run this function again in 10 seconds</code>
    <code class="nx">setTimeout</code><code class="p">(</code><code class="nx">updateClock</code><code class="p">,</code> <code class="mi">10000</code><code class="p">);</code>
<code class="p">}());</code> <code class="c1">// Note immediate invocation of the function here.</code></pre>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.7.3 Creating SVG Images with JavaScript"><div class="sect2" id="idm46198504233288">
<h2>15.7.3 Creating SVG Images with JavaScript</h2>

<p>In<a data-type="indexterm" data-primary="web browser host environment" data-secondary="scalable vector graphics (SVG)" data-tertiary="creating SVG images with JavaScript" id="idm46198504231912"></a><a data-type="indexterm" data-primary="scalable vector graphics (SVG)" data-secondary="creating SVG images with JavaScript" id="idm46198504114312"></a> addition to simply scripting SVG images embedded in your HTML
documents, you can also build SVG images from scratch, which can be
useful to create visualizations of dynamically loaded data, for
example. <a data-type="xref" href="#pieChart.js">Example 15-4</a> demonstrates how you can use JavaScript to
create SVG pie charts, like the one shown in <a data-type="xref" href="#piechartfig">Figure 15-6</a>.</p>

<p>Even though SVG tags can be included within HTML documents, they are
technically XML tags, not HTML tags, and if you want to create SVG
elements with the JavaScript DOM API, you can’t use the normal
<code>createElement()</code> function that was introduced in
<a data-type="xref" href="#creating-inserting-deleting">§15.3.5</a>. Instead you must use
<code>createElementNS()</code>, which takes an XML namespace string as its first
argument. For SVG, that namespace is the literal string
“http://www.w3.org/2000/svg.”</p>

<figure><div id="piechartfig" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1505.png" alt="js7e 1505" width="1086" height="689">
<h6><span class="label">Figure 15-6. </span>An SVG pie chart built with JavaScript (data from Stack Overflow’s 2018 Developer Survey of Most Popular Technologies)</h6>
</div></figure>

<p>Other than the use of <code>createElementNS()</code>, the pie chart–drawing code
in <a data-type="xref" href="#pieChart.js">Example 15-4</a> is relatively straightforward. There is a little
math to convert the data being charted into pie-slice angles. The
bulk of the example, however, is DOM code that creates SVG elements
and sets attributes on those elements.</p>

<p>The most opaque part of this example is the code that draws the actual
pie slices. The element used to display each slice is <code>&lt;path&gt;</code>.
This SVG element describes arbitrary shapes comprised of lines and
curves. The shape description is specified by the <code>d</code> attribute of the
<code>&lt;path&gt;</code> element. The value of this attribute uses a compact
grammar of letter codes and numbers that specify coordinates, angles,
and other values. The letter M, for example, means “move to” and is
followed by <em>x</em> and <em>y</em> coordinates. The letter L means “line to” and
draws a line from the current point to the coordinates that follow it.
This example also uses the letter A to draw an arc. This letter is
followed by seven numbers describing the arc, and you can look up the
syntax online if you want to know more.</p>
<div id="pieChart.js" data-type="example" class="less_space pagebreak-before">
<h5><span class="label">Example 15-4. </span>Drawing a pie chart with JavaScript and SVG</h5>

<pre data-type="programlisting" data-code-language="js"><code class="cm">/**</code>
<code class="cm"> * Create an &lt;svg&gt; element and draw a pie chart into it.</code>
<code class="cm"> *</code>
<code class="cm"> * This function expects an object argument with the following properties:</code>
<code class="cm"> *</code>
<code class="cm"> *   width, height: the size of the SVG graphic, in pixels</code>
<code class="cm"> *   cx, cy, r: the center and radius of the pie</code>
<code class="cm"> *   lx, ly: the upper-left corner of the chart legend</code>
<code class="cm"> *   data: an object whose property names are data labels and whose</code>
<code class="cm"> *         property values are the values associated with each label</code>
<code class="cm"> *</code>
<code class="cm"> * The function returns an &lt;svg&gt; element. The caller must insert it into</code>
<code class="cm"> * the document in order to make it visible.</code>
<code class="cm"> */</code>
<code class="kd">function</code> <code class="nx">pieChart</code><code class="p">(</code><code class="nx">options</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="p">{</code><code class="nx">width</code><code class="p">,</code> <code class="nx">height</code><code class="p">,</code> <code class="nx">cx</code><code class="p">,</code> <code class="nx">cy</code><code class="p">,</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">lx</code><code class="p">,</code> <code class="nx">ly</code><code class="p">,</code> <code class="nx">data</code><code class="p">}</code> <code class="o">=</code> <code class="nx">options</code><code class="p">;</code>

    <code class="c1">// This is the XML namespace for svg elements</code>
    <code class="kd">let</code> <code class="nx">svg</code> <code class="o">=</code> <code class="s2">"http://www.w3.org/2000/svg"</code><code class="p">;</code>

    <code class="c1">// Create the &lt;svg&gt; element, and specify pixel size and user coordinates</code>
    <code class="kd">let</code> <code class="nx">chart</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElementNS</code><code class="p">(</code><code class="nx">svg</code><code class="p">,</code> <code class="s2">"svg"</code><code class="p">);</code>
    <code class="nx">chart</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"width"</code><code class="p">,</code> <code class="nx">width</code><code class="p">);</code>
    <code class="nx">chart</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"height"</code><code class="p">,</code> <code class="nx">height</code><code class="p">);</code>
    <code class="nx">chart</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"viewBox"</code><code class="p">,</code> <code class="sb">`0 0 </code><code class="si">${</code><code class="nx">width</code><code class="si">}</code><code class="sb"> </code><code class="si">${</code><code class="nx">height</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>

    <code class="c1">// Define the text styles we'll use for the chart. If we leave these</code>
    <code class="c1">// values unset here, they can be set with CSS instead.</code>
    <code class="nx">chart</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"font-family"</code><code class="p">,</code> <code class="s2">"sans-serif"</code><code class="p">);</code>
    <code class="nx">chart</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"font-size"</code><code class="p">,</code> <code class="s2">"18"</code><code class="p">);</code>

    <code class="c1">// Get labels and values as arrays and add up the values so we know how</code>
    <code class="c1">// big the pie is.</code>
    <code class="kd">let</code> <code class="nx">labels</code> <code class="o">=</code> <code class="nb">Object</code><code class="p">.</code><code class="nx">keys</code><code class="p">(</code><code class="nx">data</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">values</code> <code class="o">=</code> <code class="nb">Object</code><code class="p">.</code><code class="nx">values</code><code class="p">(</code><code class="nx">data</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">total</code> <code class="o">=</code> <code class="nx">values</code><code class="p">.</code><code class="nx">reduce</code><code class="p">((</code><code class="nx">x</code><code class="p">,</code><code class="nx">y</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="nx">x</code><code class="o">+</code><code class="nx">y</code><code class="p">);</code>

    <code class="c1">// Figure out the angles for all the slices. Slice i starts at angles[i]</code>
    <code class="c1">// and ends at angles[i+1]. The angles are measured in radians.</code>
    <code class="kd">let</code> <code class="nx">angles</code> <code class="o">=</code> <code class="p">[</code><code class="mi">0</code><code class="p">];</code>
    <code class="nx">values</code><code class="p">.</code><code class="nx">forEach</code><code class="p">((</code><code class="nx">x</code><code class="p">,</code> <code class="nx">i</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="nx">angles</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">+</code> <code class="nx">x</code><code class="o">/</code><code class="nx">total</code> <code class="o">*</code> <code class="mi">2</code> <code class="o">*</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="p">));</code>

    <code class="c1">// Now loop through the slices of the pie</code>
    <code class="nx">values</code><code class="p">.</code><code class="nx">forEach</code><code class="p">((</code><code class="nx">value</code><code class="p">,</code> <code class="nx">i</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="c1">// Compute the two points where our slice intersects the circle</code>
        <code class="c1">// These formulas are chosen so that an angle of 0 is at 12 o'clock</code>
        <code class="c1">// and positive angles increase clockwise.</code>
        <code class="kd">let</code> <code class="nx">x1</code> <code class="o">=</code> <code class="nx">cx</code> <code class="o">+</code> <code class="nx">r</code> <code class="o">*</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">sin</code><code class="p">(</code><code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="p">]);</code>
        <code class="kd">let</code> <code class="nx">y1</code> <code class="o">=</code> <code class="nx">cy</code> <code class="o">-</code> <code class="nx">r</code> <code class="o">*</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">cos</code><code class="p">(</code><code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="p">]);</code>
        <code class="kd">let</code> <code class="nx">x2</code> <code class="o">=</code> <code class="nx">cx</code> <code class="o">+</code> <code class="nx">r</code> <code class="o">*</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">sin</code><code class="p">(</code><code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">1</code><code class="p">]);</code>
        <code class="kd">let</code> <code class="nx">y2</code> <code class="o">=</code> <code class="nx">cy</code> <code class="o">-</code> <code class="nx">r</code> <code class="o">*</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">cos</code><code class="p">(</code><code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">1</code><code class="p">]);</code>

        <code class="c1">// This is a flag for angles larger than a half circle</code>
        <code class="c1">// It is required by the SVG arc drawing component</code>
        <code class="kd">let</code> <code class="nx">big</code> <code class="o">=</code> <code class="p">(</code><code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">1</code><code class="p">]</code> <code class="o">-</code> <code class="nx">angles</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">&gt;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="p">)</code> <code class="o">?</code> <code class="mi">1</code> <code class="o">:</code> <code class="mi">0</code><code class="p">;</code>

        <code class="c1">// This string describes how to draw a slice of the pie chart:</code>
        <code class="kd">let</code> <code class="nx">path</code> <code class="o">=</code> <code class="sb">`M</code><code class="si">${</code><code class="nx">cx</code><code class="si">}</code><code class="sb">,</code><code class="si">${</code><code class="nx">cy</code><code class="si">}</code><code class="sb">`</code> <code class="o">+</code>     <code class="c1">// Move to circle center.</code>
            <code class="sb">`L</code><code class="si">${</code><code class="nx">x1</code><code class="si">}</code><code class="sb">,</code><code class="si">${</code><code class="nx">y1</code><code class="si">}</code><code class="sb">`</code> <code class="o">+</code>            <code class="c1">// Draw line to (x1,y1).</code>
            <code class="sb">`A</code><code class="si">${</code><code class="nx">r</code><code class="si">}</code><code class="sb">,</code><code class="si">${</code><code class="nx">r</code><code class="si">}</code><code class="sb"> 0 </code><code class="si">${</code><code class="nx">big</code><code class="si">}</code><code class="sb"> 1`</code> <code class="o">+</code>   <code class="c1">// Draw an arc of radius r...</code>
            <code class="sb">`</code><code class="si">${</code><code class="nx">x2</code><code class="si">}</code><code class="sb">,</code><code class="si">${</code><code class="nx">y2</code><code class="si">}</code><code class="sb">`</code> <code class="o">+</code>             <code class="c1">// ...ending at to (x2,y2).</code>
            <code class="s2">"Z"</code><code class="p">;</code>                        <code class="c1">// Close path back to (cx,cy).</code>

        <code class="c1">// Compute the CSS color for this slice. This formula works for only</code>
        <code class="c1">// about 15 colors. So don't include more than 15 slices in a chart.</code>
        <code class="kd">let</code> <code class="nx">color</code> <code class="o">=</code> <code class="sb">`hsl(</code><code class="si">${</code><code class="p">(</code><code class="nx">i</code><code class="o">*</code><code class="mi">40</code><code class="p">)</code><code class="o">%</code><code class="mi">360</code><code class="si">}</code><code class="sb">,</code><code class="si">${</code><code class="mi">90</code><code class="o">-</code><code class="mi">3</code><code class="o">*</code><code class="nx">i</code><code class="si">}</code><code class="sb">%,</code><code class="si">${</code><code class="mi">50</code><code class="o">+</code><code class="mi">2</code><code class="o">*</code><code class="nx">i</code><code class="si">}</code><code class="sb">%)`</code><code class="p">;</code>

        <code class="c1">// We describe a slice with a &lt;path&gt; element. Note createElementNS().</code>
        <code class="kd">let</code> <code class="nx">slice</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElementNS</code><code class="p">(</code><code class="nx">svg</code><code class="p">,</code> <code class="s2">"path"</code><code class="p">);</code>

        <code class="c1">// Now set attributes on the &lt;path&gt; element</code>
        <code class="nx">slice</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"d"</code><code class="p">,</code> <code class="nx">path</code><code class="p">);</code>           <code class="c1">// Set the path for this slice</code>
        <code class="nx">slice</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"fill"</code><code class="p">,</code> <code class="nx">color</code><code class="p">);</code>       <code class="c1">// Set slice color</code>
        <code class="nx">slice</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"stroke"</code><code class="p">,</code> <code class="s2">"black"</code><code class="p">);</code>   <code class="c1">// Outline slice in black</code>
        <code class="nx">slice</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"stroke-width"</code><code class="p">,</code> <code class="s2">"1"</code><code class="p">);</code> <code class="c1">// 1 CSS pixel thick</code>
        <code class="nx">chart</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">slice</code><code class="p">);</code>                     <code class="c1">// Add slice to chart</code>

        <code class="c1">// Now draw a little matching square for the key</code>
        <code class="kd">let</code> <code class="nx">icon</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElementNS</code><code class="p">(</code><code class="nx">svg</code><code class="p">,</code> <code class="s2">"rect"</code><code class="p">);</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"x"</code><code class="p">,</code> <code class="nx">lx</code><code class="p">);</code>              <code class="c1">// Position the square</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"y"</code><code class="p">,</code> <code class="nx">ly</code> <code class="o">+</code> <code class="mi">30</code><code class="o">*</code><code class="nx">i</code><code class="p">);</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"width"</code><code class="p">,</code> <code class="mi">20</code><code class="p">);</code>          <code class="c1">// Size the square</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"height"</code><code class="p">,</code> <code class="mi">20</code><code class="p">);</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"fill"</code><code class="p">,</code> <code class="nx">color</code><code class="p">);</code>        <code class="c1">// Same fill color as slice</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"stroke"</code><code class="p">,</code> <code class="s2">"black"</code><code class="p">);</code>    <code class="c1">// Same outline, too.</code>
        <code class="nx">icon</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"stroke-width"</code><code class="p">,</code> <code class="s2">"1"</code><code class="p">);</code>
        <code class="nx">chart</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">icon</code><code class="p">);</code>                      <code class="c1">// Add to the chart</code>

        <code class="c1">// And add a label to the right of the rectangle</code>
        <code class="kd">let</code> <code class="nx">label</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElementNS</code><code class="p">(</code><code class="nx">svg</code><code class="p">,</code> <code class="s2">"text"</code><code class="p">);</code>
        <code class="nx">label</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"x"</code><code class="p">,</code> <code class="nx">lx</code> <code class="o">+</code> <code class="mi">30</code><code class="p">);</code>        <code class="c1">// Position the text</code>
        <code class="nx">label</code><code class="p">.</code><code class="nx">setAttribute</code><code class="p">(</code><code class="s2">"y"</code><code class="p">,</code> <code class="nx">ly</code> <code class="o">+</code> <code class="mi">30</code><code class="o">*</code><code class="nx">i</code> <code class="o">+</code> <code class="mi">16</code><code class="p">);</code>
        <code class="nx">label</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="sb">`</code><code class="si">${</code><code class="nx">labels</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code><code class="si">}</code><code class="sb"> </code><code class="si">${</code><code class="nx">value</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>   <code class="c1">// Add text to label</code>
        <code class="nx">chart</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">label</code><code class="p">);</code>                     <code class="c1">// Add label to the chart</code>
    <code class="p">});</code>

    <code class="k">return</code> <code class="nx">chart</code><code class="p">;</code>
<code class="p">}</code></pre></div>

<p>The pie chart in <a data-type="xref" href="#piechartfig">Figure 15-6</a> was created using the <code>pieChart()</code>
function from <a data-type="xref" href="#pieChart.js">Example 15-4</a>, like<a data-type="indexterm" data-primary="" data-startref="svg15" id="idm46198503670952"></a><a data-type="indexterm" data-primary="" data-startref="WBsvg15" id="idm46198503669976"></a><a data-type="indexterm" data-primary="" data-startref="Gscal15" id="idm46198503669032"></a> this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#chart"</code><code class="p">).</code><code class="nx">append</code><code class="p">(</code><code class="nx">pieChart</code><code class="p">({</code>
    <code class="nx">width</code><code class="o">:</code> <code class="mi">640</code><code class="p">,</code> <code class="nx">height</code><code class="o">:</code><code class="mi">400</code><code class="p">,</code>    <code class="c1">// Total size of the chart</code>
    <code class="nx">cx</code><code class="o">:</code> <code class="mi">200</code><code class="p">,</code> <code class="nx">cy</code><code class="o">:</code> <code class="mi">200</code><code class="p">,</code> <code class="nx">r</code><code class="o">:</code> <code class="mi">180</code><code class="p">,</code>  <code class="c1">// Center and radius of the pie</code>
    <code class="nx">lx</code><code class="o">:</code> <code class="mi">400</code><code class="p">,</code> <code class="nx">ly</code><code class="o">:</code> <code class="mi">10</code><code class="p">,</code>           <code class="c1">// Position of the legend</code>
    <code class="nx">data</code><code class="o">:</code> <code class="p">{</code>                    <code class="c1">// The data to chart</code>
        <code class="s2">"JavaScript"</code><code class="o">:</code> <code class="mf">71.5</code><code class="p">,</code>
        <code class="s2">"Java"</code><code class="o">:</code> <code class="mf">45.4</code><code class="p">,</code>
        <code class="s2">"Bash/Shell"</code><code class="o">:</code> <code class="mf">40.4</code><code class="p">,</code>
        <code class="s2">"Python"</code><code class="o">:</code> <code class="mf">37.9</code><code class="p">,</code>
        <code class="s2">"C#"</code><code class="o">:</code> <code class="mf">35.3</code><code class="p">,</code>
        <code class="s2">"PHP"</code><code class="o">:</code> <code class="mf">31.4</code><code class="p">,</code>
        <code class="s2">"C++"</code><code class="o">:</code> <code class="mf">24.6</code><code class="p">,</code>
        <code class="s2">"C"</code><code class="o">:</code> <code class="mf">22.1</code><code class="p">,</code>
        <code class="s2">"TypeScript"</code><code class="o">:</code> <code class="mf">18.3</code><code class="p">,</code>
        <code class="s2">"Ruby"</code><code class="o">:</code> <code class="mf">10.3</code><code class="p">,</code>
        <code class="s2">"Swift"</code><code class="o">:</code> <code class="mf">8.3</code><code class="p">,</code>
        <code class="s2">"Objective-C"</code><code class="o">:</code> <code class="mf">7.3</code><code class="p">,</code>
        <code class="s2">"Go"</code><code class="o">:</code> <code class="mf">7.2</code><code class="p">,</code>
    <code class="p">}</code>
<code class="p">}));</code></pre>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.8 Graphics in a &lt;canvas&gt;"><div class="sect1" id="canvas">
<h1>15.8 Graphics in a &lt;canvas&gt;</h1>

<p>The<a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" id="Gcanvas15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" id="WBcanvas15"></a><a data-type="indexterm" data-primary="Canvas API" id="canvasapi15"></a><a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="overview of" id="idm46198503054984"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="overview of" id="idm46198503053768"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="overview of" id="idm46198503052584"></a> <code>&lt;canvas&gt;</code> element has no appearance of its own but creates a
drawing surface within the document and exposes a powerful drawing API
to client-side JavaScript. The main difference between the <code>&lt;canvas&gt;</code>
API and SVG is that with the canvas you create drawings by calling
methods, and with SVG you create drawings by building a tree of XML
elements. These two approaches are equivalently powerful: either one
can be simulated with the other. On the surface, they are quite
different, however, and each has its strengths and weaknesses. An SVG
drawing, for example, is easily edited by removing elements from its
description. To remove an element from the same graphic in a
<code>&lt;canvas&gt;</code>, it is often necessary to erase the drawing and redraw it
from scratch. Since the Canvas drawing API is JavaScript-based and
relatively compact (unlike the SVG grammar), it is documented in more
detail in this book.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198503049352">
<h5>3D Graphics in a Canvas</h5>
<p>You<a data-type="indexterm" data-primary="graphics" data-secondary="3D" id="idm46198503048024"></a><a data-type="indexterm" data-primary="3D graphics" id="idm46198503047016"></a><a data-type="indexterm" data-primary="3D graphics" data-primary-sortas="threeD graphics" id="idm46198503046344"></a> can also call <code>getContext()</code> with the string “webgl” to obtain a
context object that allows you to draw 3D graphics using the WebGL
API. WebGL is a large, complicated, and low-level API that allows
JavaScript programmers to access the GPU, write custom shaders, and
perform other very powerful graphics operations. WebGL is not
documented in this book, however: web developers are more likely to
use utility libraries built on top of WebGL than to use the WebGL API
directly.</p>
</div></aside>

<p>Most of the Canvas drawing API is defined not on the <code>&lt;canvas&gt;</code> element
itself, but instead on a “drawing context” object obtained with the
<code>getContext()</code> method of the canvas. Call <code>getContext()</code> with the
argument “2d” to obtain a CanvasRenderingContext2D object that you
can use to draw two-dimensional graphics into the canvas.</p>

<p>As a simple example of the Canvas API, the following HTML document
uses <span class="keep-together"><code>&lt;canvas&gt;</code></span> elements and some JavaScript to display two simple
shapes:</p>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;p&gt;</code>This is a red square: <code class="nt">&lt;canvas</code> <code class="na">id=</code><code class="s">"square"</code> <code class="na">width=</code><code class="s">10</code> <code class="na">height=</code><code class="s">10</code><code class="nt">&gt;&lt;/canvas&gt;</code>.
<code class="nt">&lt;p&gt;</code>This is a blue circle: <code class="nt">&lt;canvas</code> <code class="na">id=</code><code class="s">"circle"</code> <code class="na">width=</code><code class="s">10</code> <code class="na">height=</code><code class="s">10</code><code class="nt">&gt;&lt;/canvas&gt;</code>.
<code class="nt">&lt;script&gt;</code>
<code class="kd">let</code> <code class="nx">canvas</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#square"</code><code class="p">);</code>  <code class="c1">// Get first canvas element</code>
<code class="kd">let</code> <code class="nx">context</code> <code class="o">=</code> <code class="nx">canvas</code><code class="p">.</code><code class="nx">getContext</code><code class="p">(</code><code class="s2">"2d"</code><code class="p">);</code>           <code class="c1">// Get 2D drawing context</code>
<code class="nx">context</code><code class="p">.</code><code class="nx">fillStyle</code> <code class="o">=</code> <code class="s2">"#f00"</code><code class="p">;</code>                      <code class="c1">// Set fill color to red</code>
<code class="nx">context</code><code class="p">.</code><code class="nx">fillRect</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">10</code><code class="p">,</code><code class="mi">10</code><code class="p">);</code>                     <code class="c1">// Fill a square</code>

<code class="nx">canvas</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#circle"</code><code class="p">);</code>      <code class="c1">// Second canvas element</code>
<code class="nx">context</code> <code class="o">=</code> <code class="nx">canvas</code><code class="p">.</code><code class="nx">getContext</code><code class="p">(</code><code class="s2">"2d"</code><code class="p">);</code>               <code class="c1">// Get its context</code>
<code class="nx">context</code><code class="p">.</code><code class="nx">beginPath</code><code class="p">();</code>                             <code class="c1">// Begin a new "path"</code>
<code class="nx">context</code><code class="p">.</code><code class="nx">arc</code><code class="p">(</code><code class="mi">5</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">2</code><code class="o">*</code><code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="p">,</code> <code class="kc">true</code><code class="p">);</code>        <code class="c1">// Add a circle to the path</code>
<code class="nx">context</code><code class="p">.</code><code class="nx">fillStyle</code> <code class="o">=</code> <code class="s2">"#00f"</code><code class="p">;</code>                      <code class="c1">// Set blue fill color</code>
<code class="nx">context</code><code class="p">.</code><code class="nx">fill</code><code class="p">();</code>                                  <code class="c1">// Fill the path</code>
<code class="nt">&lt;/script&gt;</code></pre>

<p>We’ve seen that SVG describes complex shapes as a “path” of lines and
curves that can be drawn or filled. The Canvas API also uses the notion
of a path. Instead of describing a path as a string of letters and
numbers, a path is defined by a series of method calls, such as the
<code>beginPath()</code> and <code>arc()</code> invocations in the preceding code. Once a path is
defined, other methods, such as <code>fill()</code>, operate on that path. Various
properties of the context object, such as <code>fillStyle</code>, specify how
these operations are <span class="keep-together">performed.</span></p>

<p>The subsections that follow demonstrate the methods and properties of
the 2D Canvas API. Much of the example code that follows operates on a variable
<code>c</code>. This variable holds the CanvasRenderingContext2D object of the
canvas, but the code to initialize that variable is sometimes not shown.
In order to make these examples run, you would need to add HTML markup
to define a canvas with appropriate <code>width</code> and <code>height</code> attributes, and
then add code like this to initialize the variable <code>c</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">canvas</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#my_canvas_id"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">c</code> <code class="o">=</code> <code class="nx">canvas</code><code class="p">.</code><code class="nx">getContext</code><code class="p">(</code><code class="s1">'2d'</code><code class="p">);</code></pre>








<section data-type="sect2" data-pdf-bookmark="15.8.1 Paths and Polygons"><div class="sect2" id="canvaspaths">
<h2>15.8.1 Paths and Polygons</h2>

<p>To<a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="paths and polygons" id="idm46198502675176"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="paths and polygons" id="idm46198502617912"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="paths and polygons" id="idm46198502616728"></a><a data-type="indexterm" data-primary="paths" id="path15"></a><a data-type="indexterm" data-primary="polygons" id="polyg15"></a> draw lines on a canvas and to fill the areas enclosed by those
lines, you begin by defining a <em>path</em>. A path is a sequence of one or
more subpaths. A subpath is a sequence of two or more points connected
by line segments (or, as we’ll see later, by curve segments). Begin a
new path with the <code>beginPath()</code> method. Begin a new 
<span class="keep-together">subpath</span> with the
<code>moveTo()</code> method. Once you have established the starting point of a
subpath with <code>moveTo()</code>, you can connect that point to a new point with
a straight line by calling <code>lineTo()</code>. The following code defines a
path that includes two line <span class="keep-together">segments:</span></p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">c</code><code class="p">.</code><code class="nx">beginPath</code><code class="p">();</code>        <code class="c1">// Start a new path</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">100</code><code class="p">,</code> <code class="mi">100</code><code class="p">);</code>   <code class="c1">// Begin a subpath at (100,100)</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineTo</code><code class="p">(</code><code class="mi">200</code><code class="p">,</code> <code class="mi">200</code><code class="p">);</code>   <code class="c1">// Add a line from (100,100) to (200,200)</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineTo</code><code class="p">(</code><code class="mi">100</code><code class="p">,</code> <code class="mi">200</code><code class="p">);</code>   <code class="c1">// Add a line from (200,200) to (100,200)</code></pre>

<p>This code simply defines a path; it does not draw anything on the
canvas. To draw (or “stroke”) the two line segments in the path, call
the <code>stroke()</code> method, and to fill the area defined by those line
segments, call <code>fill()</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">c</code><code class="p">.</code><code class="nx">fill</code><code class="p">();</code>             <code class="c1">// Fill a triangular area</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">stroke</code><code class="p">();</code>           <code class="c1">// Stroke two sides of the triangle</code></pre>

<p>This code (along with some additional code to set line widths and
fill colors) produced the drawing shown in <a data-type="xref" href="#simplepath_png">Figure 15-7</a>.</p>

<figure><div id="simplepath_png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1506.png" alt="js7e 1506" width="224" height="217">
<h6><span class="label">Figure 15-7. </span>A simple path, filled and stroked</h6>
</div></figure>

<p>Notice that the subpath defined in <a data-type="xref" href="#simplepath_png">Figure 15-7</a> is “open.” It consists of just
two line segments, and the end point is not connected back to the
starting point. This means that it does not enclose a region. The
<code>fill()</code> method fills open subpaths by acting as if a straight line
connected the last point in the subpath to the first point in the
subpath. That is why this code fills a triangle, but strokes only
two sides of the triangle.</p>

<p>If you wanted to stroke all three sides of the triangle just shown, you
would call the <code>closePath()</code> method to connect the end point of the
subpath to the start point. (You could also call <code>lineTo(100,100)</code>, but
then you end up with three line segments that share a start and end
point but are not truly closed. When drawing with wide lines, the
visual results are better if you use <code>closePath()</code>.)</p>

<p>There are two other important points to notice about <code>stroke()</code> and
<code>fill()</code>. First, both methods operate on all subpaths in the current
path. Suppose we had added another subpath in the preceding code:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">300</code><code class="p">,</code><code class="mi">100</code><code class="p">);</code>    <code class="c1">// Begin a new subpath at (300,100);</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineTo</code><code class="p">(</code><code class="mi">300</code><code class="p">,</code><code class="mi">200</code><code class="p">);</code>    <code class="c1">// Draw a vertical line down to (300,200);</code></pre>

<p>If we then called <code>stroke()</code>, we would draw two connected edges of a
triangle and a disconnected vertical line.</p>

<p>The second point to note about <code>stroke()</code> and <code>fill()</code> is that neither
one alters the current path: you can call <code>fill()</code> and the path will
still be there when you call <code>stroke()</code>. When you are done with a path
and want to begin another, you must remember to call <code>beginPath()</code>. If
you don’t, you’ll end up adding new subpaths to the existing path, and
you may end up drawing those old subpaths over and over again.</p>

<p><a data-type="xref" href="#polygons.js">Example 15-5</a> defines a function for drawing regular polygons and
demonstrates the use of <code>moveTo()</code>, <code>lineTo()</code>, and <code>closePath()</code> for
defining subpaths and of <code>fill()</code> and <code>stroke()</code> for drawing those
paths. It produces the drawing shown in <a data-type="xref" href="#polygons.png">Figure 15-8</a>.</p>

<figure><div id="polygons.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1507.png" alt="js7e 1507" width="1440" height="343">
<h6><span class="label">Figure 15-8. </span>Regular polygons</h6>
</div></figure>
<div id="polygons.js" data-type="example">
<h5><span class="label">Example 15-5. </span>Regular polygons with moveTo(), lineTo(), and closePath()</h5>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Define a regular polygon with n sides, centered at (x,y) with radius r.</code>
<code class="c1">// The vertices are equally spaced along the circumference of a circle.</code>
<code class="c1">// Put the first vertex straight up or at the specified angle.</code>
<code class="c1">// Rotate clockwise, unless the last argument is true.</code>
<code class="kd">function</code> <code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="nx">n</code><code class="p">,</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">angle</code><code class="o">=</code><code class="mi">0</code><code class="p">,</code> <code class="nx">counterclockwise</code><code class="o">=</code><code class="kc">false</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="nx">x</code> <code class="o">+</code> <code class="nx">r</code><code class="o">*</code><code class="nb">Math</code><code class="p">.</code><code class="nx">sin</code><code class="p">(</code><code class="nx">angle</code><code class="p">),</code>  <code class="c1">// Begin a new subpath at the first vertex</code>
             <code class="nx">y</code> <code class="o">-</code> <code class="nx">r</code><code class="o">*</code><code class="nb">Math</code><code class="p">.</code><code class="nx">cos</code><code class="p">(</code><code class="nx">angle</code><code class="p">));</code> <code class="c1">// Use trigonometry to compute position</code>
    <code class="kd">let</code> <code class="nx">delta</code> <code class="o">=</code> <code class="mi">2</code><code class="o">*</code><code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="o">/</code><code class="nx">n</code><code class="p">;</code>         <code class="c1">// Angular distance between vertices</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">n</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>     <code class="c1">// For each of the remaining vertices</code>
        <code class="nx">angle</code> <code class="o">+=</code> <code class="nx">counterclockwise</code><code class="o">?-</code><code class="nx">delta</code><code class="o">:</code><code class="nx">delta</code><code class="p">;</code> <code class="c1">// Adjust angle</code>
        <code class="nx">c</code><code class="p">.</code><code class="nx">lineTo</code><code class="p">(</code><code class="nx">x</code> <code class="o">+</code> <code class="nx">r</code><code class="o">*</code><code class="nb">Math</code><code class="p">.</code><code class="nx">sin</code><code class="p">(</code><code class="nx">angle</code><code class="p">),</code>         <code class="c1">// Add line to next vertex</code>
                 <code class="nx">y</code> <code class="o">-</code> <code class="nx">r</code><code class="o">*</code><code class="nb">Math</code><code class="p">.</code><code class="nx">cos</code><code class="p">(</code><code class="nx">angle</code><code class="p">));</code>
    <code class="p">}</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">closePath</code><code class="p">();</code>                   <code class="c1">// Connect last vertex back to the first</code>
<code class="p">}</code>

<code class="c1">// Assume there is just one canvas, and get its context object to draw with.</code>
<code class="kd">let</code> <code class="nx">c</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"canvas"</code><code class="p">).</code><code class="nx">getContext</code><code class="p">(</code><code class="s2">"2d"</code><code class="p">);</code>

<code class="c1">// Start a new path and add polygon subpaths</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">beginPath</code><code class="p">();</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code> <code class="mi">70</code><code class="p">,</code> <code class="mi">50</code><code class="p">);</code>                   <code class="c1">// Triangle</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">150</code><code class="p">,</code> <code class="mi">60</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="o">/</code><code class="mi">4</code><code class="p">);</code>       <code class="c1">// Square</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">255</code><code class="p">,</code> <code class="mi">55</code><code class="p">,</code> <code class="mi">50</code><code class="p">);</code>                  <code class="c1">// Pentagon</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">365</code><code class="p">,</code> <code class="mi">53</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="o">/</code><code class="mi">6</code><code class="p">);</code>       <code class="c1">// Hexagon</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">365</code><code class="p">,</code> <code class="mi">53</code><code class="p">,</code> <code class="mi">20</code><code class="p">,</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="o">/</code><code class="mi">4</code><code class="p">,</code> <code class="kc">true</code><code class="p">);</code> <code class="c1">// Small square inside the hexagon</code>

<code class="c1">// Set some properties that control how the graphics will look</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillStyle</code> <code class="o">=</code> <code class="s2">"#ccc"</code><code class="p">;</code>    <code class="c1">// Light gray interiors</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">strokeStyle</code> <code class="o">=</code> <code class="s2">"#008"</code><code class="p">;</code>  <code class="c1">// outlined with dark blue lines</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineWidth</code> <code class="o">=</code> <code class="mi">5</code><code class="p">;</code>         <code class="c1">// five pixels wide.</code>

<code class="c1">// Now draw all the polygons (each in its own subpath) with these calls</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fill</code><code class="p">();</code>                <code class="c1">// Fill the shapes</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">stroke</code><code class="p">();</code>              <code class="c1">// And stroke their outlines</code></pre></div>

<p>Notice that this example draws a hexagon with a square inside it. The
square and the hexagon are separate subpaths, but they overlap. When
this happens (or when a single subpath intersects itself), the canvas
needs to be able to determine which regions are inside the path and
which are outside. The canvas uses a test known as the “nonzero
winding rule” to achieve this. In this case, the interior of the
square is not filled because the square and the hexagon were drawn in
the opposite directions: the vertices of the hexagon were connected
with line segments moving clockwise around the circle. The vertices of
the square were connected counterclockwise. Had the square been drawn
clockwise as well, the call to <code>fill()</code> would have filled the interior
of the square as well.<a data-type="indexterm" data-primary="" data-startref="polyg15" id="idm46198502799720"></a><a data-type="indexterm" data-primary="" data-startref="path15" id="idm46198502798872"></a></p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.8.2 Canvas Dimensions and Coordinates"><div class="sect2" id="canvasdimensions">
<h2>15.8.2 Canvas Dimensions and Coordinates</h2>

<p>The<a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="canvas dimensions and coordinates" id="idm46198502796152"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="canvas dimensions and coordinates" id="idm46198502298888"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="canvas dimensions and coordinates" id="idm46198502297640"></a> <code>width</code> and <code>height</code> attributes of the <code>&lt;canvas&gt;</code> element and the
corresponding <code>width</code> and <code>height</code> properties of the Canvas object
specify the dimensions of the canvas. The default canvas
coordinate system places the origin (0,0) at the upper-left corner of
the canvas. The <em>x</em> coordinates increase to the right and the <em>y</em> coordinates
increase as you go down the screen. Points on the canvas can be
specified using floating-point values.</p>

<p>The dimensions of a canvas cannot be altered without completely
resetting the canvas. Setting either the <code>width</code> or <code>height</code> properties
of a Canvas (even setting them to their current value) clears the
canvas, erases the current path, and resets all graphics attributes
(including current transformation and clipping region) to their original
state.</p>

<p>The <code>width</code> and <code>height</code> attributes of a canvas specify the actual
number of pixels that the canvas can draw into. Four bytes of memory
are allocated for each pixel, so if <code>width</code> and <code>height</code> are both set
to 100, the canvas allocates 40,000 bytes to represent 10,000 pixels.</p>

<p>The <code>width</code> and <code>height</code> attributes also specify the default size (in
CSS pixels) at which the canvas will be displayed on the screen. If
<code>window.devicePixelRatio</code> is 2, then 100 × 100 CSS pixels is actually
40,000 hardware pixels. When the contents of the canvas are drawn onto
the screen, the 10,000 pixels in memory will need to be enlarged to
cover 40,000 physical pixels on the screen, and this means that your
graphics will not be as crisp as they could be.</p>

<p>For optimum image quality, you should not use the <code>width</code> and <code>height</code>
attributes to set the on-screen size of the canvas. Instead, set the
desired on-screen size CSS pixel size of the canvas with CSS <code>width</code>
and <code>height</code> style attributes. Then, before you begin drawing in your
JavaScript code, set the <code>width</code> and <code>height</code> properties of the canvas
object to the number of CSS pixels times
<code>window.devicePixelRatio</code>. Continuing with the preceding example, this
technique would result in the canvas being displayed at 100 × 100 CSS
pixels but allocating memory for 200 × 200 pixels. (Even with this
technique, the user can zoom in on the canvas and may see fuzzy or
pixelated graphics if they do. This is in contrast to SVG graphics,
which remain crisp no matter the on-screen size or zoom level.)</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.8.3 Graphics Attributes"><div class="sect2" id="graphicsattributes">
<h2>15.8.3 Graphics Attributes</h2>

<p><a data-type="xref" href="#polygons.js">Example 15-5</a> set<a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="graphics attributes" id="idm46198502279992"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="graphics attributes" id="idm46198502278744"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="overview of" id="idm46198502277560"></a> the properties <code>fillStyle</code>, <code>strokeStyle</code>, and
<code>lineWidth</code> on the context object of the canvas. These properties are
graphics attributes that specify the color to be used by <code>fill()</code> and by <code>stroke()</code>, and the width of the lines to be drawn
by <code>stroke()</code>. Notice that these parameters are not passed to the
<code>fill()</code> and <code>stroke()</code> methods, but are instead part of the general
<em>graphics state</em> of the canvas. If you define a method that draws a
shape and do not set these properties yourself, the caller of your
method can define the color of the shape by setting the <code>strokeStyle</code>
and <code>fillStyle</code> properties before calling your method. This separation
of graphics state from drawing commands is fundamental to the Canvas
API and is akin to the separation of presentation from content achieved
by applying CSS stylesheets to HTML <span class="keep-together">documents.</span></p>

<p>There are a number of properties (and also some methods) on the context
object that affect the graphics state of the canvas. They are detailed
below.</p>










<section data-type="sect3" data-pdf-bookmark="Line styles"><div class="sect3" id="idm46198502269864">
<h3>Line styles</h3>

<p>The<a data-type="indexterm" data-primary="line styles" id="idm46198502268296"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="line styles" id="idm46198502267176"></a> <code>lineWidth</code> property specifies how wide (in CSS pixels) the lines
drawn by <code>stroke()</code> will be. The default value is 1. It is important
to understand that line width is determined by the <code>lineWidth</code>
property at the time <code>stroke()</code> is called, not at the time that
<code>lineTo()</code> and other path-building methods are called. To fully
understand the <code>lineWidth</code> property, it is important to visualize
paths as infinitely thin one-dimensional lines. The lines and curves
drawn by the <code>stroke()</code> method are centered over the path, with half
of the <code>lineWidth</code> on either side. If you’re stroking a closed path
and only want the line to appear outside the path, stroke the path
first, then fill with an opaque color to hide the portion of the
stroke that appears inside the path. Or if you only want the line to
appear inside a closed path, call the <code>save()</code> and <code>clip()</code> methods
first, then call <code>stroke()</code> and <code>restore()</code>. (The <code>save()</code>,
<code>restore()</code>, and <code>clip()</code> methods are described later.)</p>

<p>When drawing lines that are more than about two pixels wide, the <code>lineCap</code>
and <code>lineJoin</code> properties can have a significant impact on the visual
appearance of the ends of a path and the vertices at which two path
segments meet. <a data-type="xref" href="#linestyles.png">Figure 15-9</a> illustrates the values and resulting
graphical appearance of <code>lineCap</code> and <code>lineJoin</code>.</p>

<figure><div id="linestyles.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1508.png" alt="js7e 1508" width="1440" height="384">
<h6><span class="label">Figure 15-9. </span>The lineCap and lineJoin attributes</h6>
</div></figure>

<p>The default value for <code>lineCap</code> is “butt.” The default value for
<code>lineJoin</code> is “miter.” Note, however, that if two lines meet at a very
narrow angle, then the resulting miter can become quite long and
visually distracting. If the miter at a given vertex would be longer
than half of the line width times the <code>miterLimit</code> property, that vertex
will be drawn with a beveled join instead of a mitered join. The default
value for <code>miterLimit</code> is 10.</p>

<p>The <code>stroke()</code> method can draw dashed and dotted lines as well as solid
lines, and a canvas’s graphics state includes an array of numbers that
serves as a “dash pattern” by specifying how many pixels to draw, then
how many to omit. Unlike other line-drawing properties, the dash pattern
is set and queried with the methods <code>setLineDash()</code> and <code>getLineDash()</code>
instead of with a property. To specify a dotted dash pattern, you might
use <code>setLineDash()</code> like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">c</code><code class="p">.</code><code class="nx">setLineDash</code><code class="p">([</code><code class="mi">18</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">3</code><code class="p">]);</code> <code class="c1">// 18px dash, 3px space, 3px dot, 3px space</code></pre>

<p>Finally, the <code>lineDashOffset</code> property specifies how far into the dash
pattern drawing should begin. The default is 0. Paths stroked with the
dash pattern shown here begin with an 18-pixel dash, but if
<code>lineDashOffset</code> is set to 21, then that same path would begin with a
dot followed by a space and a dash.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Colors, patterns, and gradients"><div class="sect3" id="idm46198502236200">
<h3>Colors, patterns, and gradients</h3>

<p>The<a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="colors, patterns, and gradients" id="idm46198502234552"></a><a data-type="indexterm" data-primary="colors" id="idm46198502233304"></a><a data-type="indexterm" data-primary="patterns" id="idm46198502232632"></a><a data-type="indexterm" data-primary="gradients" id="idm46198502231960"></a> <code>fillStyle</code> and <code>strokeStyle</code> properties specify how paths are
filled and stroked. The word “style” often means color, but these
properties can also be used to specify a color gradient or an image to
be used for filling and stroking. (Note that drawing a line is basically
the same as filling a narrow region on both sides of the line, and
filling and stroking are fundamentally the same operation.)</p>

<p>If you want to fill or stroke with a solid color (or a translucent
color), simply set these properties to a valid CSS color string. Nothing
else is required.</p>

<p>To fill (or stroke) with a color gradient, set <code>fillStyle</code> (or
<code>strokeStyle</code>) to a CanvasGradient object returned by the
<code>createLinearGradient()</code> or <code>createRadialGradient()</code> methods of the
context. The arguments to <code>createLinearGradient()</code> are the coordinates
of two points that define a line (it does not need to be horizontal or
vertical) along which the colors will vary. The arguments to
<code>createRadialGradient()</code> specify the centers and radii of two
circles. (They need not be concentric, but the first circle typically
lies entirely inside the second.) Areas inside the smaller circle or
outside the larger will be filled with solid colors; areas between the
two will be filled with a color gradient.</p>

<p>After creating the CanvasGradient object that defines the regions of the
canvas that will be filled, you must define the gradient colors by
calling the <code>addColorStop()</code> method of the CanvasGradient. The first
argument to this method is a number between 0.0 and 1.0. The second
argument is a CSS color specification. You must call this method at
least twice to define a simple color gradient, but you may call it more
than that. The color at 0.0 will appear at the start of the gradient,
and the color at 1.0 will appear at the end. If you specify additional
colors, they will appear at the specified fractional position within the
gradient. Between the points you specify, colors will be smoothly
interpolated. Here are some examples:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// A linear gradient, diagonally across the canvas (assuming no transforms)</code>
<code class="kd">let</code> <code class="nx">bgfade</code> <code class="o">=</code> <code class="nx">c</code><code class="p">.</code><code class="nx">createLinearGradient</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">width</code><code class="p">,</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">height</code><code class="p">);</code>
<code class="nx">bgfade</code><code class="p">.</code><code class="nx">addColorStop</code><code class="p">(</code><code class="mf">0.0</code><code class="p">,</code> <code class="s2">"#88f"</code><code class="p">);</code>  <code class="c1">// Start with light blue in upper left</code>
<code class="nx">bgfade</code><code class="p">.</code><code class="nx">addColorStop</code><code class="p">(</code><code class="mf">1.0</code><code class="p">,</code> <code class="s2">"#fff"</code><code class="p">);</code>  <code class="c1">// Fade to white in lower right</code>

<code class="c1">// A gradient between two concentric circles. Transparent in the middle</code>
<code class="c1">// fading to translucent gray and then back to transparent.</code>
<code class="kd">let</code> <code class="nx">donut</code> <code class="o">=</code> <code class="nx">c</code><code class="p">.</code><code class="nx">createRadialGradient</code><code class="p">(</code><code class="mi">300</code><code class="p">,</code><code class="mi">300</code><code class="p">,</code><code class="mi">100</code><code class="p">,</code> <code class="mi">300</code><code class="p">,</code><code class="mi">300</code><code class="p">,</code><code class="mi">300</code><code class="p">);</code>
<code class="nx">donut</code><code class="p">.</code><code class="nx">addColorStop</code><code class="p">(</code><code class="mf">0.0</code><code class="p">,</code> <code class="s2">"transparent"</code><code class="p">);</code>           <code class="c1">// Transparent</code>
<code class="nx">donut</code><code class="p">.</code><code class="nx">addColorStop</code><code class="p">(</code><code class="mf">0.7</code><code class="p">,</code> <code class="s2">"rgba(100,100,100,.9)"</code><code class="p">);</code>  <code class="c1">// Translucent gray</code>
<code class="nx">donut</code><code class="p">.</code><code class="nx">addColorStop</code><code class="p">(</code><code class="mf">1.0</code><code class="p">,</code> <code class="s2">"rgba(0,0,0,0)"</code><code class="p">);</code>         <code class="c1">// Transparent again</code></pre>

<p>An important point to understand about gradients is that they are not
position-independent. When you create a gradient, you specify bounds
for the gradient. If you then attempt to fill an area outside of those
bounds, you’ll get the solid color defined at one end or the other of
the gradient.</p>

<p>In addition to colors and color gradients, you can also fill and stroke
using images. To do this, set <code>fillStyle</code> or <code>strokeStyle</code> to a
CanvasPattern returned by the <code>createPattern()</code> method of the context
object. The first argument to this method should be an <code>&lt;img&gt;</code> or
<code>&lt;canvas&gt;</code> element that contains the image you want to fill or stroke
with. (Note that the source image or canvas does not need to be inserted
into the document in order to be used in this way.) The second argument
to <code>createPattern()</code> is the string “repeat,” “repeat-x,” “repeat-y,” or
“no-repeat,” which specifies whether (and in which dimensions) the
background images repeat.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Text styles"><div class="sect3" id="idm46198501900008">
<h3>Text styles</h3>

<p>The<a data-type="indexterm" data-primary="text styles" id="idm46198502150968"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="text styles" id="idm46198502150344"></a> <code>font</code> property specifies the font to be used by the text-drawing
methods <code>fillText()</code> and <code>strokeText()</code> (see <a data-type="xref" href="#canvastext">“Text”</a>). The value of
the <code>font</code> property should be a string in the same syntax as the CSS
<code>font</code> attribute.</p>

<p>The <code>textAlign</code> property specifies how the text should be horizontally
aligned with respect to the X coordinate passed to <code>fillText()</code> or
<code>strokeText()</code>. Legal values are “start,” “left,” “center,” “right,”
and “end.” The default is “start,” which, for left-to-right text, has the
same meaning as “left.”</p>

<p>The <code>textBaseline</code> property specifies how the text should be vertically
aligned with respect to the <em>y</em> coordinate. The default value is
“alphabetic,” and it is appropriate for Latin and similar scripts. The
value “ideographic” is intended for use with scripts such as Chinese and
Japanese. The value “hanging” is intended for use with Devanagari and
similar scripts (which are used for many of the languages of India). The
“top,” “middle,” and “bottom” baselines are purely geometric baselines,
based on the “em square” of the font.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Shadows"><div class="sect3" id="idm46198502142056">
<h3>Shadows</h3>

<p>Four<a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="shadows" id="idm46198502140488"></a><a data-type="indexterm" data-primary="shadows" id="idm46198502139208"></a> properties of the context object control the drawing of drop
shadows. If you set these properties appropriately, any line, area,
text, or image you draw will be given a shadow, which will make it
appear as if it is floating above the canvas surface.</p>

<p>The <code>shadowColor</code> property specifies the color of the shadow. The
default is fully transparent black, and shadows will never appear
unless you set this property to a translucent or opaque color. This
property can only be set to a color string: patterns and gradients are
not allowed for shadows. Using a translucent shadow color produces the
most realistic shadow effects because it allows the background to show
through.</p>

<p>The <code>shadowOffsetX</code> and <code>shadowOffsetY</code> properties specify the X and Y
offsets of the shadow. The default for both properties is 0, which
places the shadow directly beneath your drawing, where it is not
visible. If you set both properties to a positive value, shadows will
appear below and to the right of what you draw, as if there were a
light source above and to the left, shining onto the canvas from
outside the computer screen. Larger offsets produce larger shadows and
make drawn objects appear as if they are floating “higher” above the
canvas. These values are not affected by 
<span class="keep-together">coordinate</span> transformations
(<a data-type="xref" href="#canvastransforms">§15.8.5</a>): shadow direction and “height” remain consistent
even when shapes are rotated and scaled.</p>

<p>The <code>shadowBlur</code> property specifies how blurred the edges of the shadow
are. The default value is 0, which produces crisp, unblurred shadows.
Larger values produce more blur, up to an implementation-defined upper
bound.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Translucency and compositing"><div class="sect3" id="idm46198502132152">
<h3>Translucency and compositing</h3>

<p>If<a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="translucency and compositing" id="idm46198502130744"></a><a data-type="indexterm" data-primary="translucency" id="idm46198502129496"></a><a data-type="indexterm" data-primary="compositing" id="idm46198502128824"></a> you want to stroke or fill a path using a translucent color, you can
set <code>strokeStyle</code> or <code>fillStyle</code> using a CSS color syntax like
“rgba(…)” that supports alpha transparency. The “a” in “RGBA” stands
for “alpha” and is a value between 0 (fully transparent) and 1 (fully
opaque). But the Canvas API provides another way to work with
translucent colors. If you do not want to explicitly specify an alpha
channel for each color, or if you want to add translucency to opaque
images or patterns, you can set the <code>globalAlpha</code> property. Every pixel
you draw will have its alpha value multiplied by <code>globalAlpha</code>. The
default is 1, which adds no transparency. If you set <code>globalAlpha</code> to 0,
everything you draw will be fully transparent, and nothing will appear in
the canvas. But if you set this property to 0.5, then pixels that would
otherwise have been opaque will be 50% opaque, and pixels that
would have been 50% opaque will be 25% opaque instead.</p>

<p>When you stroke lines, fill regions, draw text, or copy images, you
generally expect the new pixels to be drawn on top of the pixels that
are already in the canvas. If you are drawing opaque pixels, they simply
replace the pixels that are already there. If you are drawing with
translucent pixels, the new (“source”) pixel is combined with the old
(“destination”) pixel so that the old pixel shows through the new pixel
based on how transparent that pixel is.</p>

<p>This process of combining new (possibly translucent) source pixels with
existing (possibly translucent) destination pixels is called
<em>compositing</em>, and the compositing process described previously is the
default way that the Canvas API combines pixels. But you can set the
<code>globalCompositeOperation</code> property to specify other ways of combining
pixels. The default value is “source-over,” which means that source
pixels are drawn “over” the destination pixels and are combined with
them if the source is translucent. But if you set
<code>globalCompositeOperation</code> to “destination-over”, then the canvas will
combine pixels as if the new source pixels were drawn beneath the
existing destination pixels. If the destination is translucent or
transparent, some or all of the source pixel color is visible in the
resulting color. As another example, the compositing mode “source-atop”
combines the source pixels with the transparency of the
destination pixels so that nothing is drawn on portions of the canvas
that are already fully transparent. There are a number of legal values
for <code>globalCompositeOperation</code>, but most have only specialized uses and
are not covered here.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Saving and restoring graphics state"><div class="sect3" id="saveandrestore">
<h3>Saving and restoring graphics state</h3>

<p>Since<a data-type="indexterm" data-primary="Canvas API" data-secondary="graphics attributes" data-tertiary="saving and restoring graphics state" id="idm46198502119080"></a><a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="saving and restoring graphics state" id="idm46198502117784"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="graphics attributes" id="idm46198502116552"></a> the Canvas API defines graphics attributes on the context object,
you might be tempted to call <code>getContext()</code> multiple times to obtain
multiple context objects. If you could do this, you could define
different attributes on each context: each context would then be like a
different brush and would paint with a different color or draw lines of
different widths. Unfortunately, you cannot use the canvas in this way.
Each <code>&lt;canvas&gt;</code> element has only a single context object, and every
call to <code>getContext()</code> returns the same CanvasRenderingContext2D object.</p>

<p>Although the Canvas API only allows you to define a single set of
graphics attributes at a time, it does allow you to save the current
graphics state so that you can alter it and then easily restore it
later. The <code>save()</code> method pushes the current graphics state onto a
stack of saved states. The <code>restore()</code> method pops the stack and
restores the most recently saved state. All of the properties that
have been described in this section are part of the saved state, as
are the current transformation and clipping region (both of which are
explained later).  Importantly, the currently defined path and the
current point are not part of the graphics state and cannot be saved
and restored.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.8.4 Canvas Drawing Operations"><div class="sect2" id="idm46198502282472">
<h2>15.8.4 Canvas Drawing Operations</h2>

<p>We’ve<a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="drawing operations" id="idm46198502109832"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="drawing operations" id="idm46198502108552"></a> already seen some basic canvas methods—<code>beginPath()</code>, <code>moveTo()</code>,
<code>lineTo()</code>, <code>closePath()</code>, <code>fill()</code>, and <code>stroke()</code>—for defining,
filling, and drawing lines and polygons. But the Canvas API includes
other drawing methods as well.</p>










<section data-type="sect3" data-pdf-bookmark="Rectangles"><div class="sect3" id="canvasrects">
<h3>Rectangles</h3>

<p>CanvasRenderingContext2D defines<a data-type="indexterm" data-primary="drawing operations" data-secondary="rectangles" id="idm46198502102712"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="drawing operations" data-tertiary="rectangles" id="idm46198502101736"></a><a data-type="indexterm" data-primary="rectangles" id="idm46198502100520"></a> four methods for drawing rectangles.
All four of these rectangle methods expect two arguments that specify
one corner of the rectangle followed by the rectangle width and
height. Normally, you specify the upper-left corner and then pass a
positive width and positive height, but you may also specify other
corners and pass negative dimensions.</p>

<p><code>fillRect()</code> fills the specified rectangle with the current
<code>fillStyle</code>. <code>strokeRect()</code> strokes the outline of the specified
rectangle using the current <code>strokeStyle</code> and other line attributes.
<code>clearRect()</code> is like <code>fillRect()</code>, but it ignores the current fill
style and fills the rectangle with transparent black pixels (the
default color of all blank canvases). The important thing about these
three methods is that they do not affect the current path or the
current point within that path.</p>

<p>The final rectangle method is named <code>rect()</code>, and it does affect the
current path: it adds the specified rectangle, in a subpath of its own,
to the path. Like other path-definition methods, it does not fill or
stroke anything itself.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Curves"><div class="sect3" id="canvascurves">
<h3>Curves</h3>

<p>A<a data-type="indexterm" data-primary="drawing operations" data-secondary="curves" id="idm46198502093000"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="drawing operations" data-tertiary="curves" id="idm46198502091992"></a><a data-type="indexterm" data-primary="curves" id="idm46198502090776"></a> path is a sequence of subpaths, and a subpath is a sequence of
connected points. In the paths we defined in <a data-type="xref" href="#canvaspaths">§15.8.1</a>, those
points were connected with straight line segments, but that need not
always be the case. The CanvasRenderingContext2D object defines a
number of methods that add a new point to the subpath and connect the
current point to that new point with a curve:</p>
<dl>
<dt><code>arc()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="arc() method" id="idm46198502086952"></a> method adds a circle, or a portion of a circle (an arc),
to the path. The arc to be drawn is specified with six parameters:
the <em>x</em> and <em>y</em> coordinates of the center of a circle, the radius of the
circle, the start and end angles of the arc, and the direction
(clockwise or counterclockwise) of the arc between those two angles.
If there is a current point in the path, then this method connects
the current point to the beginning of the arc with a straight line
(which is useful when drawing wedges or pie slices), then
connects the beginning of the arc to the end of the arc with a
portion of a circle, leaving the end of the arc as the new current
point. If there is no current point when this method is called, then
it only adds the circular arc to the path.</p>
</dd>
<dt><code>ellipse()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="ellipse() method" id="idm46198502083032"></a> method is much like <code>arc()</code> except that it adds an
ellipse or a portion of an ellipse to the path. Instead of one
radius, it has two: an <em>x</em>-axis radius and a <em>y</em>-axis radius. Also,
because ellipses are not radially symmetrical, this method takes
another argument that specifies the number of radians by which the
ellipse is rotated clockwise about its center.</p>
</dd>
<dt><code>arcTo()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="arcTo() method" id="idm46198502079112"></a> method draws a straight line and a circular arc just
like the <code>arc()</code> method does, but it specifies the arc to be drawn
using different parameters. The arguments to <code>arcTo()</code> specify
points P1 and P2 and a radius. The arc that is added to the path has the specified radius. It begins at the tangent point with the (imaginary) line from the current point to P1 and ends at the tangent point with the (imaginary) line between P1 and P2. This
unusual-seeming method of specifying arcs is actually quite useful
for drawing shapes with rounded corners. If you specify a radius of
0, this method just draws a straight line from the current point to
P1. With a nonzero radius, however, it draws a straight line from
the current point in the direction of P1, then curves that line
around in a circle until it is heading in the direction of P2.</p>
</dd>
</dl>
<dl class="less_space pagebreak-before">
<dt><code>bezierCurveTo()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="bezierCurveTo() method" id="idm46198502074536"></a> method adds a new point P to the subpath and
connects it to the current point with a cubic Bezier curve. The
shape of the curve is specified by two “control points,” C1 and
C2. At the start of the curve (at the current point), the curve
heads in the direction of C1.  At the end of the curve (at point P),
the curve arrives from the direction of C2. In between these points,
the direction of the curve varies smoothly. The point P becomes the
new current point for the <span class="keep-together">subpath.</span></p>
</dd>
<dt><code>quadraticCurveTo()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="quadraticCurveTo() method" id="idm46198502071208"></a> method is like <code>bezierCurveTo()</code>, but it
uses a quadratic Bezier curve instead of a cubic Bezier curve and
has only a single control point.</p>
</dd>
</dl>

<p>You can use these methods to draw paths like those in <a data-type="xref" href="#curves.png">Figure 15-10</a>.</p>

<figure><div id="curves.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1509.png" alt="js7e 1509" width="750" height="200">
<h6><span class="label">Figure 15-10. </span>Curved paths in a canvas</h6>
</div></figure>

<p><a data-type="xref" href="#curves.js">Example 15-6</a> shows the code used to create <a data-type="xref" href="#curves.png">Figure 15-10</a>. The methods
demonstrated in this code are some of the most complicated in the Canvas
API; consult an online reference for complete details on the methods and
their arguments.</p>
<div id="curves.js" data-type="example">
<h5><span class="label">Example 15-6. </span>Adding curves to a path</h5>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// A utility function to convert angles from degrees to radians</code>
<code class="kd">function</code> <code class="nx">rads</code><code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="o">*</code><code class="nx">x</code><code class="o">/</code><code class="mi">180</code><code class="p">;</code> <code class="p">}</code>

<code class="c1">// Get the context object of the document's canvas element</code>
<code class="kd">let</code> <code class="nx">c</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"canvas"</code><code class="p">).</code><code class="nx">getContext</code><code class="p">(</code><code class="s2">"2d"</code><code class="p">);</code>

<code class="c1">// Define some graphics attributes and draw the curves</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillStyle</code> <code class="o">=</code> <code class="s2">"#aaa"</code><code class="p">;</code>     <code class="c1">// Gray fills</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineWidth</code> <code class="o">=</code> <code class="mi">2</code><code class="p">;</code>          <code class="c1">// 2-pixel black (by default) lines</code>

<code class="c1">// Draw a circle.</code>
<code class="c1">// There is no current point, so draw just the circle with no straight</code>
<code class="c1">// line from the current point to the start of the circle.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">beginPath</code><code class="p">();</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arc</code><code class="p">(</code><code class="mi">75</code><code class="p">,</code><code class="mi">100</code><code class="p">,</code><code class="mi">50</code><code class="p">,</code>          <code class="c1">// Center at (75,100), radius 50</code>
      <code class="mi">0</code><code class="p">,</code><code class="nx">rads</code><code class="p">(</code><code class="mi">360</code><code class="p">),</code><code class="kc">false</code><code class="p">);</code> <code class="c1">// Go clockwise from 0 to 360 degrees</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fill</code><code class="p">();</code>                 <code class="c1">// Fill the circle</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">stroke</code><code class="p">();</code>               <code class="c1">// Stroke its outline.</code>

<code class="c1">// Now draw an ellipse in the same way</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">beginPath</code><code class="p">();</code>            <code class="c1">// Start new path not connected to the circle</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">ellipse</code><code class="p">(</code><code class="mi">200</code><code class="p">,</code> <code class="mi">100</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code> <code class="mi">35</code><code class="p">,</code> <code class="nx">rads</code><code class="p">(</code><code class="mi">15</code><code class="p">),</code>  <code class="c1">// Center, radii, and rotation</code>
          <code class="mi">0</code><code class="p">,</code> <code class="nx">rads</code><code class="p">(</code><code class="mi">360</code><code class="p">),</code> <code class="kc">false</code><code class="p">);</code>        <code class="c1">// Start angle, end angle, direction</code>

<code class="c1">// Draw a wedge. Angles are measured clockwise from the positive x axis.</code>
<code class="c1">// Note that arc() adds a line from the current point to the arc start.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">325</code><code class="p">,</code> <code class="mi">100</code><code class="p">);</code>       <code class="c1">// Start at the center of the circle.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arc</code><code class="p">(</code><code class="mi">325</code><code class="p">,</code> <code class="mi">100</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code>       <code class="c1">// Circle center and radius</code>
      <code class="nx">rads</code><code class="p">(</code><code class="o">-</code><code class="mi">60</code><code class="p">),</code> <code class="nx">rads</code><code class="p">(</code><code class="mi">0</code><code class="p">),</code> <code class="c1">// Start at angle -60 and go to angle 0</code>
      <code class="kc">true</code><code class="p">);</code>              <code class="c1">// counterclockwise</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">closePath</code><code class="p">();</code>            <code class="c1">// Add radius back to the center of the circle</code>

<code class="c1">// Similar wedge, offset a bit, and in the opposite direction</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">340</code><code class="p">,</code> <code class="mi">92</code><code class="p">);</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arc</code><code class="p">(</code><code class="mi">340</code><code class="p">,</code> <code class="mi">92</code><code class="p">,</code> <code class="mi">42</code><code class="p">,</code> <code class="nx">rads</code><code class="p">(</code><code class="o">-</code><code class="mi">60</code><code class="p">),</code> <code class="nx">rads</code><code class="p">(</code><code class="mi">0</code><code class="p">),</code> <code class="kc">false</code><code class="p">);</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">closePath</code><code class="p">();</code>

<code class="c1">// Use arcTo() for rounded corners. Here we draw a square with</code>
<code class="c1">// upper left corner at (400,50) and corners of varying radii.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">450</code><code class="p">,</code> <code class="mi">50</code><code class="p">);</code>           <code class="c1">// Begin in the middle of the top edge.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arcTo</code><code class="p">(</code><code class="mi">500</code><code class="p">,</code><code class="mi">50</code><code class="p">,</code><code class="mi">500</code><code class="p">,</code><code class="mi">150</code><code class="p">,</code><code class="mi">30</code><code class="p">);</code>  <code class="c1">// Add part of top edge and upper right corner.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arcTo</code><code class="p">(</code><code class="mi">500</code><code class="p">,</code><code class="mi">150</code><code class="p">,</code><code class="mi">400</code><code class="p">,</code><code class="mi">150</code><code class="p">,</code><code class="mi">20</code><code class="p">);</code> <code class="c1">// Add right edge and lower right corner.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arcTo</code><code class="p">(</code><code class="mi">400</code><code class="p">,</code><code class="mi">150</code><code class="p">,</code><code class="mi">400</code><code class="p">,</code><code class="mi">50</code><code class="p">,</code><code class="mi">10</code><code class="p">);</code>  <code class="c1">// Add bottom edge and lower left corner.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">arcTo</code><code class="p">(</code><code class="mi">400</code><code class="p">,</code><code class="mi">50</code><code class="p">,</code><code class="mi">500</code><code class="p">,</code><code class="mi">50</code><code class="p">,</code><code class="mi">0</code><code class="p">);</code>    <code class="c1">// Add left edge and upper left corner.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">closePath</code><code class="p">();</code>               <code class="c1">// Close path to add the rest of the top edge.</code>

<code class="c1">// Quadratic Bezier curve: one control point</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">525</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code>                      <code class="c1">// Begin here</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">quadraticCurveTo</code><code class="p">(</code><code class="mi">550</code><code class="p">,</code> <code class="mi">75</code><code class="p">,</code> <code class="mi">625</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code>   <code class="c1">// Draw a curve to (625, 125)</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillRect</code><code class="p">(</code><code class="mi">550</code><code class="o">-</code><code class="mi">3</code><code class="p">,</code> <code class="mi">75</code><code class="o">-</code><code class="mi">3</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">6</code><code class="p">);</code>           <code class="c1">// Mark the control point (550,75)</code>

<code class="c1">// Cubic Bezier curve</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">625</code><code class="p">,</code> <code class="mi">100</code><code class="p">);</code>                      <code class="c1">// Start at (625, 100)</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">bezierCurveTo</code><code class="p">(</code><code class="mi">645</code><code class="p">,</code><code class="mi">70</code><code class="p">,</code><code class="mi">705</code><code class="p">,</code><code class="mi">130</code><code class="p">,</code><code class="mi">725</code><code class="p">,</code><code class="mi">100</code><code class="p">);</code> <code class="c1">// Curve to (725, 100)</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillRect</code><code class="p">(</code><code class="mi">645</code><code class="o">-</code><code class="mi">3</code><code class="p">,</code> <code class="mi">70</code><code class="o">-</code><code class="mi">3</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">6</code><code class="p">);</code>           <code class="c1">// Mark control points</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillRect</code><code class="p">(</code><code class="mi">705</code><code class="o">-</code><code class="mi">3</code><code class="p">,</code> <code class="mi">130</code><code class="o">-</code><code class="mi">3</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">6</code><code class="p">);</code>

<code class="c1">// Finally, fill the curves and stroke their outlines.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fill</code><code class="p">();</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">stroke</code><code class="p">();</code></pre></div>
</div></section>













<section data-type="sect3" class="less_space pagebreak-before" data-pdf-bookmark="Text"><div class="sect3" id="canvastext">
<h3>Text</h3>

<p>To<a data-type="indexterm" data-primary="Canvas API" data-secondary="drawing operations" data-tertiary="text" id="idm46198501868424"></a><a data-type="indexterm" data-primary="drawing operations" data-secondary="text" id="idm46198501867144"></a><a data-type="indexterm" data-primary="text" data-secondary="drawing in Canvas" id="idm46198501866200"></a> draw text in a canvas, you normally use the <code>fillText()</code> method,
which draws text using the color (or gradient or pattern) specified by
the <code>fillStyle</code> property. For special effects at large text sizes, you
can use <code>strokeText()</code> to draw the outline of the individual font
glyphs. Both methods take the text to be drawn as their first argument
and take the <em>x</em> and <em>y</em> coordinates of the text as the second and third
arguments. Neither method affects the current path or the current
point.</p>

<p><code>fillText()</code> and <code>strokeText()</code> take an optional fourth argument. If
given, this argument specifies the maximum width of the text to be
displayed. If the text would be wider than the specified value when
drawn using the <code>font</code> property, the canvas will make it fit by scaling
it or by using a narrower or smaller font.</p>

<p>If you need to measure text yourself before drawing it, pass it to the
<code>measureText()</code> method. This method returns a TextMetrics object that
specifies the measurements of the text when drawn with the current
<code>font</code>. At the time of this writing, the only “metric” contained in
the <code>TextMetrics</code> object is the width. Query the on-screen width of a
string like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">width</code> <code class="o">=</code> <code class="nx">c</code><code class="p">.</code><code class="nx">measureText</code><code class="p">(</code><code class="nx">text</code><code class="p">).</code><code class="nx">width</code><code class="p">;</code></pre>

<p>This is useful if you want to center a string of text within a canvas,
for example.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Images"><div class="sect3" id="canvasimages">
<h3>Images</h3>

<p>In<a data-type="indexterm" data-primary="Canvas API" data-secondary="drawing operations" data-tertiary="images" id="idm46198501512888"></a><a data-type="indexterm" data-primary="drawing operations" data-secondary="images" id="idm46198501511608"></a><a data-type="indexterm" data-primary="images" data-secondary="drawing in Canvas" id="idm46198501510664"></a> addition to vector graphics (paths, lines, etc.), the Canvas API
also supports bitmap images. The <code>drawImage()</code> method copies the pixels
of a source image (or of a rectangle within the source image) onto the
canvas, scaling and rotating the pixels of the image as necessary.</p>

<p><code>drawImage()</code> can be invoked with three, five, or nine arguments. In
all cases, the first argument is the source image from which pixels are
to be copied. This image argument is often an <code>&lt;img&gt;</code> element, but it can
also be another <code>&lt;canvas&gt;</code> element or even a <code>&lt;video&gt;</code> element (from
which a single frame will be copied). If you
specify an <code>&lt;img&gt;</code> or <code>&lt;video&gt;</code> element that is still loading its data,
the <code>drawImage()</code> call will do nothing.</p>

<p>In the three-argument version of <code>drawImage()</code>, the second and third
arguments specify the <em>x</em> and <em>y</em> coordinates at which the upper-left
corner of the image is to be drawn. In this version of the method, the
entire source image is copied to the canvas. The <em>x</em> and <em>y</em> coordinates
are interpreted in the current coordinate system, and the image is
scaled and rotated if necessary, depending on the canvas transform currently
in effect.</p>

<p>The five-argument version of <code>drawImage()</code> adds <code>width</code> and <code>height</code>
arguments to the <code>x</code> and <code>y</code> arguments described earlier. These four
arguments define a destination rectangle within the canvas. The upper-left corner of the source image goes at <code>(x,y)</code>, and the lower-right
corner goes at <code>(x+width, y+height)</code>. Again, the entire source image is
copied. With this version of the method, the source image will be scaled
to fit the destination rectangle.</p>

<p>The nine-argument version of <code>drawImage()</code> specifies both a source
rectangle and a destination rectangle and copies only the pixels within
the source rectangle. Arguments two through five specify the source
rectangle. They are measured in CSS pixels. If the source image is
another canvas, the source rectangle uses the default coordinate system
for that canvas and ignores any transformations that have been
specified. Arguments six through nine specify the destination rectangle
into which the image is drawn and are in the current coordinate system
of the canvas, not in the default coordinate system.</p>

<p>In addition to drawing images into a canvas, we can also extract the
content of a canvas as an image using the <code>toDataURL()</code> method. Unlike
all the other methods described here, <code>toDataURL()</code> is a method of the
Canvas element itself, not of the context object. You normally invoke
<code>toDataURL()</code> with no arguments, and it returns the content of the
canvas as a PNG image, encoded as a string using a <code>data:</code> URL. The
returned URL is suitable for use with an <code>&lt;img&gt;</code> element, and you can
make a static snapshot of a canvas with code like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">img</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"img"</code><code class="p">);</code>  <code class="c1">// Create an &lt;img&gt; element</code>
<code class="nx">img</code><code class="p">.</code><code class="nx">src</code> <code class="o">=</code> <code class="nx">canvas</code><code class="p">.</code><code class="nx">toDataURL</code><code class="p">();</code>             <code class="c1">// Set its src attribute</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">body</code><code class="p">.</code><code class="nx">appendChild</code><code class="p">(</code><code class="nx">img</code><code class="p">);</code>           <code class="c1">// Append it to the document</code></pre>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.8.5 Coordinate System Transforms"><div class="sect2" id="canvastransforms">
<h2>15.8.5 Coordinate System Transforms</h2>

<p>As<a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="coordinate system transforms" id="WBcantrans15"></a><a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="coordinate system transforms" id="Gcantrans15"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="coordinate system transforms" id="CAPItrans15"></a><a data-type="indexterm" data-primary="coordinate system transforms" id="coord15"></a><a data-type="indexterm" data-primary="transformations" id="trans15"></a> we’ve noted, the default coordinate system of a canvas places the
origin in the upper-left corner, has <em>x</em> coordinates increasing to the
right, and has <em>y</em> coordinates increasing downward. In this default
system, the coordinates of a point map directly to a CSS pixel (which
then maps directly to one or more device pixels). Certain canvas
operations and attributes (such as extracting raw pixel values and
setting shadow offsets) always use this default coordinate system. In
addition to the default coordinate system, however, every canvas has a
“current transformation matrix” as part of its graphics state. This
matrix defines the current coordinate system of the canvas. In most
canvas operations, when you specify the coordinates of a point, it is
taken to be a point in the current coordinate system, not in the
default coordinate system. The current transformation matrix is used to
convert the coordinates you specified to the equivalent coordinates in
the default coordinate system.</p>

<p>The<a data-type="indexterm" data-primary="setTransform() method" id="idm46198501434744"></a> <code>setTransform()</code> method allows you to set a canvas’s transformation
matrix directly, but coordinate system transformations are usually
easier to specify as a sequence of translations, rotations, and scaling
operations. <a data-type="xref" href="#transforms.png">Figure 15-11</a> illustrates these operations and their
effect on the canvas coordinate system. The program that produced the
figure drew the same set of axes seven times in a row. The only thing
that changed each time was the current transform. Notice that the
transforms affect the text as well as the lines that are drawn.</p>

<figure><div id="transforms.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1510.png" alt="js7e 1510" width="1200" height="1200">
<h6><span class="label">Figure 15-11. </span>Coordinate system transformations</h6>
</div></figure>

<p>The<a data-type="indexterm" data-primary="translate() method" id="idm46198501429512"></a> <code>translate()</code> method simply moves the origin of the coordinate
system left, right, up, or down. The <code>rotate()</code> method rotates the axes
clockwise by the specified angle. (The Canvas API always specifies
angles in radians. To convert degrees to radians, divide by 180 and
multiply by <code>Math.PI</code>.) The <code>scale()</code> method stretches or contracts
distances along the <em>x</em> or <em>y</em> axes.</p>

<p>Passing a negative scale factor to the <code>scale()</code> method flips that axis
across the origin, as if it were reflected in a mirror. This is what
was done in the lower left of <a data-type="xref" href="#transforms.png">Figure 15-11</a>: <code>translate()</code> was
used to move the origin to the bottom-left corner of the canvas,
then <code>scale()</code> was used to flip the <em>y</em> axis around so that <em>y</em> coordinates
increase as we go up the page. A flipped coordinate system like this is
familiar from algebra class and may be useful for plotting data points
on charts. Note, however, that it makes text difficult to read!</p>










<section data-type="sect3" data-pdf-bookmark="Understanding transformations mathematically"><div class="sect3" id="idm46198501421928">
<h3>Understanding transformations mathematically</h3>

<p>I find it easiest to understand transforms geometrically, thinking about
<code>translate()</code>, <code>rotate()</code>, and <code>scale()</code> as transforming the axes of the
coordinate system as illustrated in <a data-type="xref" href="#transforms.png">Figure 15-11</a>. It is also
possible to understand transforms algebraically as equations that map
the coordinates of a point <code>(x,y)</code> in the transformed coordinate system
back to the coordinates <code>(x',y')</code> of the same point in the previous
coordinate system.</p>

<p>The method call <code>c.translate(dx,dy)</code> can be described with these
equations:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">x</code><code class="s1">' = x + dx;  // An X coordinate of 0 in the new system is dx in the old</code>
<code class="s1">y'</code> <code class="o">=</code> <code class="nx">y</code> <code class="o">+</code> <code class="nx">dy</code><code class="p">;</code></pre>

<p>Scaling operations have similarly simple equations. A call
<code>c.scale(sx,sy)</code> can be described like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">x</code><code class="s1">' = sx * x;</code>
<code class="s1">y'</code> <code class="o">=</code> <code class="nx">sy</code> <code class="o">*</code> <code class="nx">y</code><code class="p">;</code></pre>

<p>Rotations are more complicated. The call <code>c.rotate(a)</code> is described by
these trigonometric equations:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">x</code><code class="s1">' = x * cos(a) - y * sin(a);</code>
<code class="s1">y'</code> <code class="o">=</code> <code class="nx">y</code> <code class="o">*</code> <code class="nx">cos</code><code class="p">(</code><code class="nx">a</code><code class="p">)</code> <code class="o">+</code> <code class="nx">x</code> <code class="o">*</code> <code class="nx">sin</code><code class="p">(</code><code class="nx">a</code><code class="p">);</code></pre>

<p>Notice that the order of transformations matters. Suppose we start with
the default coordinate system of a canvas, then translate it, and
then scale it. In order to map the point <code>(x,y)</code> in the current
coordinate system back to the point <code>(x'',y'')</code> in the
default coordinate system, we must first apply the scaling equations to
map the point to an intermediate point <code>(x',y')</code> in the
translated but unscaled coordinate system, then use the translation
equations to map from this intermediate point to <code>(x'',y'')</code>.
The result is this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">x</code><code class="s1">''</code> <code class="o">=</code> <code class="nx">sx</code><code class="o">*</code><code class="nx">x</code> <code class="o">+</code> <code class="nx">dx</code><code class="p">;</code>
<code class="nx">y</code><code class="s1">''</code> <code class="o">=</code> <code class="nx">sy</code><code class="o">*</code><code class="nx">y</code> <code class="o">+</code> <code class="nx">dy</code><code class="p">;</code></pre>

<p>If, on the other hand, we’d called <code>scale()</code> before calling
<code>translate()</code>, the resulting equations would be different:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">x</code><code class="s1">''</code> <code class="o">=</code> <code class="nx">sx</code><code class="o">*</code><code class="p">(</code><code class="nx">x</code> <code class="o">+</code> <code class="nx">dx</code><code class="p">);</code>
<code class="nx">y</code><code class="s1">''</code> <code class="o">=</code> <code class="nx">sy</code><code class="o">*</code><code class="p">(</code><code class="nx">y</code> <code class="o">+</code> <code class="nx">dy</code><code class="p">);</code></pre>

<p>The key thing to remember when thinking algebraically about sequences
of transformations is that you must work backward from the last (most
recent) transformation to the first. When thinking geometrically about
transformed axes, however, you work forward from first transformation
to last.</p>

<p>The transformations supported by the canvas are known as <em>affine
transforms</em>. Affine transforms may modify the distances between points
and the angles between lines, but parallel lines always remain parallel
after an affine transformation—it is not possible, for example, to
specify a fish-eye lens distortion with an affine transform. An
arbitrary affine transform can be described by the six parameters <code>a</code>
through <code>f</code> in these equations:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">x</code><code class="s1">' = ax + cy + e</code>
<code class="s1">y'</code> <code class="o">=</code> <code class="nx">bx</code> <code class="o">+</code> <code class="nx">dy</code> <code class="o">+</code> <code class="nx">f</code></pre>

<p>You can apply an arbitrary transformation to the current coordinate
system by passing those six parameters to the <code>transform()</code> method.
<a data-type="xref" href="#transforms.png">Figure 15-11</a> illustrates two types of transformations—shears and
rotations about a specified point—that you can implement with the
<code>transform()</code> method like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Shear transform:</code>
<code class="c1">//   x' = x + kx*y;</code>
<code class="c1">//   y' = ky*x + y;</code>
<code class="kd">function</code> <code class="nx">shear</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="nx">kx</code><code class="p">,</code> <code class="nx">ky</code><code class="p">)</code> <code class="p">{</code> <code class="nx">c</code><code class="p">.</code><code class="nx">transform</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nx">ky</code><code class="p">,</code> <code class="nx">kx</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code> <code class="p">}</code>

<code class="c1">// Rotate theta radians counterclockwise around the point (x,y)</code>
<code class="c1">// This can also be accomplished with a translate, rotate, translate sequence</code>
<code class="kd">function</code> <code class="nx">rotateAbout</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="nx">theta</code><code class="p">,</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">ct</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">cos</code><code class="p">(</code><code class="nx">theta</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">st</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">sin</code><code class="p">(</code><code class="nx">theta</code><code class="p">);</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">transform</code><code class="p">(</code><code class="nx">ct</code><code class="p">,</code> <code class="o">-</code><code class="nx">st</code><code class="p">,</code> <code class="nx">st</code><code class="p">,</code> <code class="nx">ct</code><code class="p">,</code> <code class="o">-</code><code class="nx">x</code><code class="o">*</code><code class="nx">ct</code><code class="o">-</code><code class="nx">y</code><code class="o">*</code><code class="nx">st</code><code class="o">+</code><code class="nx">x</code><code class="p">,</code> <code class="nx">x</code><code class="o">*</code><code class="nx">st</code><code class="o">-</code><code class="nx">y</code><code class="o">*</code><code class="nx">ct</code><code class="o">+</code><code class="nx">y</code><code class="p">);</code>
<code class="p">}</code></pre>

<p>The <code>setTransform()</code> method takes the same arguments as <code>transform()</code>,
but instead of transforming the current coordinate system, it ignores
the current system, transforms the default coordinate system, and makes
the result the new current coordinate system. <code>setTransform()</code> is
useful to temporarily reset the canvas to its default coordinate system:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">c</code><code class="p">.</code><code class="nx">save</code><code class="p">();</code>                      <code class="c1">// Save current coordinate system</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">setTransform</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">1</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">);</code>   <code class="c1">// Revert to the default coordinate system</code>
<code class="c1">// Perform operations using default CSS pixel coordinates</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">restore</code><code class="p">();</code>                   <code class="c1">// Restore the saved coordinate system</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Transformation example"><div class="sect3" id="idm46198500909976">
<h3>Transformation example</h3>

<p><a data-type="xref" href="#koch.js">Example 15-7</a> demonstrates the power of coordinate system transformations
by using the <code>translate()</code>, <code>rotate()</code>, and <code>scale()</code> methods
recursively to draw a Koch snowflake fractal. The output of this
example appears in <a data-type="xref" href="#koch.png">Figure 15-12</a>, which shows<a data-type="indexterm" data-primary="Koch snowflakes" id="idm46198500881432"></a> Koch snowflakes with 0, 1,
2, 3, and 4 levels of recursion.</p>

<figure><div id="koch.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1511.png" alt="js7e 1511" width="800" height="175">
<h6><span class="label">Figure 15-12. </span>Koch snowflakes</h6>
</div></figure>

<p>The code that produces these figures is elegant, but its use of
recursive coordinate system transformations makes it somewhat difficult
to understand. Even if you don’t follow all the nuances, note that the
code includes only a single invocation of the <code>lineTo()</code> method. Every
single line segment in <a data-type="xref" href="#koch.png">Figure 15-12</a> is drawn like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">c</code><code class="p">.</code><code class="nx">lineTo</code><code class="p">(</code><code class="nx">len</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code></pre>

<p>The value of the variable <code>len</code> does not change during the execution of
the program, so the position, orientation, and length of each of the
line segments is determined by translations, rotations, and scaling
operations.<a data-type="indexterm" data-primary="" data-startref="WBcantrans15" id="idm46198500873992"></a><a data-type="indexterm" data-primary="" data-startref="Gcantrans15" id="idm46198500873144"></a><a data-type="indexterm" data-primary="" data-startref="CAPItrans15" id="idm46198500872200"></a><a data-type="indexterm" data-primary="" data-startref="coord15" id="idm46198500780536"></a><a data-type="indexterm" data-primary="" data-startref="trans15" id="idm46198500779592"></a></p>
<div id="koch.js" data-type="example">
<h5><span class="label">Example 15-7. </span>A Koch snowflake with transformations</h5>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">deg</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">PI</code><code class="o">/</code><code class="mi">180</code><code class="p">;</code>  <code class="c1">// For converting degrees to radians</code>

<code class="c1">// Draw a level-n Koch snowflake fractal on the canvas context c,</code>
<code class="c1">// with lower-left corner at (x,y) and side length len.</code>
<code class="kd">function</code> <code class="nx">snowflake</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="nx">n</code><code class="p">,</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">len</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">save</code><code class="p">();</code>           <code class="c1">// Save current transformation</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">translate</code><code class="p">(</code><code class="nx">x</code><code class="p">,</code><code class="nx">y</code><code class="p">);</code>   <code class="c1">// Translate origin to starting point</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">moveTo</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code><code class="mi">0</code><code class="p">);</code>      <code class="c1">// Begin a new subpath at the new origin</code>
    <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="p">);</code>             <code class="c1">// Draw the first leg of the snowflake</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">rotate</code><code class="p">(</code><code class="o">-</code><code class="mi">120</code><code class="o">*</code><code class="nx">deg</code><code class="p">);</code> <code class="c1">// Now rotate 120 degrees counterclockwise</code>
    <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="p">);</code>             <code class="c1">// Draw the second leg</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">rotate</code><code class="p">(</code><code class="o">-</code><code class="mi">120</code><code class="o">*</code><code class="nx">deg</code><code class="p">);</code> <code class="c1">// Rotate again</code>
    <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="p">);</code>             <code class="c1">// Draw the final leg</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">closePath</code><code class="p">();</code>      <code class="c1">// Close the subpath</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">restore</code><code class="p">();</code>        <code class="c1">// And restore original transformation</code>

    <code class="c1">// Draw a single leg of a level-n Koch snowflake.</code>
    <code class="c1">// This function leaves the current point at the end of the leg it has</code>
    <code class="c1">// drawn and translates the coordinate system so the current point is (0,0).</code>
    <code class="c1">// This means you can easily call rotate() after drawing a leg.</code>
    <code class="kd">function</code> <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">c</code><code class="p">.</code><code class="nx">save</code><code class="p">();</code>               <code class="c1">// Save the current transformation</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>          <code class="c1">// Nonrecursive case:</code>
            <code class="nx">c</code><code class="p">.</code><code class="nx">lineTo</code><code class="p">(</code><code class="nx">len</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>   <code class="c1">//   Just draw a horizontal line</code>
        <code class="p">}</code>                       <code class="c1">//                                       _  _</code>
        <code class="k">else</code> <code class="p">{</code>                  <code class="c1">// Recursive case: draw 4 sub-legs like:  \/</code>
            <code class="nx">c</code><code class="p">.</code><code class="nx">scale</code><code class="p">(</code><code class="mi">1</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code><code class="mi">1</code><code class="o">/</code><code class="mi">3</code><code class="p">);</code>   <code class="c1">// Sub-legs are 1/3 the size of this leg</code>
            <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">);</code>           <code class="c1">// Recurse for the first sub-leg</code>
            <code class="nx">c</code><code class="p">.</code><code class="nx">rotate</code><code class="p">(</code><code class="mi">60</code><code class="o">*</code><code class="nx">deg</code><code class="p">);</code>   <code class="c1">// Turn 60 degrees clockwise</code>
            <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">);</code>           <code class="c1">// Second sub-leg</code>
            <code class="nx">c</code><code class="p">.</code><code class="nx">rotate</code><code class="p">(</code><code class="o">-</code><code class="mi">120</code><code class="o">*</code><code class="nx">deg</code><code class="p">);</code> <code class="c1">// Rotate 120 degrees back</code>
            <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">);</code>           <code class="c1">// Third sub-leg</code>
            <code class="nx">c</code><code class="p">.</code><code class="nx">rotate</code><code class="p">(</code><code class="mi">60</code><code class="o">*</code><code class="nx">deg</code><code class="p">);</code>   <code class="c1">// Rotate back to our original heading</code>
            <code class="nx">leg</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">);</code>           <code class="c1">// Final sub-leg</code>
        <code class="p">}</code>
        <code class="nx">c</code><code class="p">.</code><code class="nx">restore</code><code class="p">();</code>            <code class="c1">// Restore the transformation</code>
        <code class="nx">c</code><code class="p">.</code><code class="nx">translate</code><code class="p">(</code><code class="nx">len</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>    <code class="c1">// But translate to make end of leg (0,0)</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="kd">let</code> <code class="nx">c</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"canvas"</code><code class="p">).</code><code class="nx">getContext</code><code class="p">(</code><code class="s2">"2d"</code><code class="p">);</code>
<code class="nx">snowflake</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">25</code><code class="p">,</code> <code class="mi">125</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code>  <code class="c1">// A level-0 snowflake is a triangle</code>
<code class="nx">snowflake</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">175</code><code class="p">,</code> <code class="mi">125</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code> <code class="c1">// A level-1 snowflake is a 6-sided star</code>
<code class="nx">snowflake</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">325</code><code class="p">,</code> <code class="mi">125</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code> <code class="c1">// etc.</code>
<code class="nx">snowflake</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">475</code><code class="p">,</code> <code class="mi">125</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code>
<code class="nx">snowflake</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">625</code><code class="p">,</code> <code class="mi">125</code><code class="p">,</code> <code class="mi">125</code><code class="p">);</code> <code class="c1">// A level-4 snowflake looks like a snowflake!</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">stroke</code><code class="p">();</code>                     <code class="c1">// Stroke this very complicated path</code></pre></div>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.8.6 Clipping"><div class="sect2" id="canvasclipping">
<h2>15.8.6 Clipping</h2>

<p>After<a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="clipping" id="idm46198500652856"></a><a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="clipping" id="idm46198500651608"></a><a data-type="indexterm" data-primary="clipping" id="idm46198500650392"></a> defining a path, you usually call <code>stroke()</code> or <code>fill()</code> (or
both). You can also call the <code>clip()</code> method to define a clipping
region. Once a clipping region is defined, nothing will be drawn
outside of it. <a data-type="xref" href="#clip.png">Figure 15-13</a> shows a complex drawing produced using
clipping regions. The vertical stripe running down the middle and the
text along the bottom of the figure were stroked with no clipping
region and then filled after the triangular clipping region was defined.</p>

<figure><div id="clip.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1512.png" alt="js7e 1512" width="900" height="693">
<h6><span class="label">Figure 15-13. </span>Unclipped strokes and clipped fills</h6>
</div></figure>

<p><a data-type="xref" href="#clip.png">Figure 15-13</a> was generated using the <code>polygon()</code> method of
<a data-type="xref" href="#polygons.js">Example 15-5</a> and the following code:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Define some drawing attributes</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">font</code> <code class="o">=</code> <code class="s2">"bold 60pt sans-serif"</code><code class="p">;</code>    <code class="c1">// Big font</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineWidth</code> <code class="o">=</code> <code class="mi">2</code><code class="p">;</code>                    <code class="c1">// Narrow lines</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">strokeStyle</code> <code class="o">=</code> <code class="s2">"#000"</code><code class="p">;</code>             <code class="c1">// Black lines</code>

<code class="c1">// Outline a rectangle and some text</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">strokeRect</code><code class="p">(</code><code class="mi">175</code><code class="p">,</code> <code class="mi">25</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code> <code class="mi">325</code><code class="p">);</code>     <code class="c1">// A vertical stripe down the middle</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">strokeText</code><code class="p">(</code><code class="s2">"&lt;canvas&gt;"</code><code class="p">,</code> <code class="mi">15</code><code class="p">,</code> <code class="mi">330</code><code class="p">);</code>  <code class="c1">// Note strokeText() instead of fillText()</code>

<code class="c1">// Define a complex path with an interior that is outside.</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">200</code><code class="p">,</code><code class="mi">225</code><code class="p">,</code><code class="mi">200</code><code class="p">);</code>           <code class="c1">// Large triangle</code>
<code class="nx">polygon</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">200</code><code class="p">,</code><code class="mi">225</code><code class="p">,</code><code class="mi">100</code><code class="p">,</code><code class="mi">0</code><code class="p">,</code><code class="kc">true</code><code class="p">);</code>    <code class="c1">// Smaller reverse triangle inside</code>

<code class="c1">// Make that path the clipping region.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">clip</code><code class="p">();</code>

<code class="c1">// Stroke the path with a 5 pixel line, entirely inside the clipping region.</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">lineWidth</code> <code class="o">=</code> <code class="mi">10</code><code class="p">;</code>       <code class="c1">// Half of this 10 pixel line will be clipped away</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">stroke</code><code class="p">();</code>

<code class="c1">// Fill the parts of the rectangle and text that are inside the clipping region</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillStyle</code> <code class="o">=</code> <code class="s2">"#aaa"</code><code class="p">;</code>             <code class="c1">// Light gray</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillRect</code><code class="p">(</code><code class="mi">175</code><code class="p">,</code> <code class="mi">25</code><code class="p">,</code> <code class="mi">50</code><code class="p">,</code> <code class="mi">325</code><code class="p">);</code>     <code class="c1">// Fill the vertical stripe</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillStyle</code> <code class="o">=</code> <code class="s2">"#888"</code><code class="p">;</code>             <code class="c1">// Darker gray</code>
<code class="nx">c</code><code class="p">.</code><code class="nx">fillText</code><code class="p">(</code><code class="s2">"&lt;canvas&gt;"</code><code class="p">,</code> <code class="mi">15</code><code class="p">,</code> <code class="mi">330</code><code class="p">);</code>  <code class="c1">// Fill the text</code></pre>

<p>It is important to note that when you call <code>clip()</code>, the current path
is itself clipped to the current clipping region, then that clipped
path becomes the new clipping region. This means that the <code>clip()</code>
method can shrink the clipping region but can never enlarge it. There
is no method to reset the clipping region, so before calling <code>clip()</code>,
you should typically call <code>save()</code> so that you can later <code>restore()</code>
the unclipped region.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.8.7 Pixel Manipulation"><div class="sect2" id="canvaspixels">
<h2>15.8.7 Pixel Manipulation</h2>

<p>The<a data-type="indexterm" data-primary="images" data-secondary="pixel manipulation" id="idm46198500333304"></a><a data-type="indexterm" data-primary="pixels" id="idm46198500332296"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="Canvas API" data-tertiary="pixel manipulation" id="idm46198500331624"></a><a data-type="indexterm" data-primary="graphics" data-secondary="Canvas API" data-tertiary="pixel manipulation" id="idm46198500330440"></a><a data-type="indexterm" data-primary="Canvas API" data-secondary="pixel manipulation" id="idm46198500329224"></a> <code>getImageData()</code> method returns an ImageData object that represents
the raw pixels (as R, G, B, and A components) from
a rectangular region of your canvas. You can create empty
<code>ImageData</code> objects with <code>createImageData()</code>. The pixels in an
ImageData object are writable, so you can set them any way you want,
then copy those pixels back onto the canvas with <code>putImageData()</code>.</p>

<p>These pixel manipulation methods provide very low-level access to the
canvas. The rectangle you pass to <code>getImageData()</code> is in the default
coordinate system: its dimensions are measured in CSS pixels, and it is
not affected by the current transformation. When you call
<code>putImageData()</code>, the position you specify is also measured in the
default coordinate system. Furthermore, <code>putImageData()</code> ignores all
graphics attributes. It does not perform any compositing, it does not
multiply pixels by <code>globalAlpha</code>, and it does not draw shadows.</p>

<p>Pixel manipulation methods are useful for implementing image
processing. <a data-type="xref" href="#smear.js">Example 15-8</a> shows how to create a simple motion blur or
“smear” effect like that shown in <a data-type="xref" href="#smear.png">Figure 15-14</a>.</p>

<figure><div id="smear.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1513.png" alt="js7e 1513" width="750" height="200">
<h6><span class="label">Figure 15-14. </span>A motion blur effect created by image processing</h6>
</div></figure>

<p>The following code demonstrates <code>getImageData()</code> and <code>putImageData()</code>
and shows how to iterate through and modify the pixel values in an
ImageData object.<a data-type="indexterm" data-primary="" data-startref="canvasapi15" id="idm46198500318280"></a><a data-type="indexterm" data-primary="" data-startref="WBcanvas15" id="idm46198500317304"></a><a data-type="indexterm" data-primary="" data-startref="Gcanvas15" id="idm46198500316360"></a></p>
<div id="smear.js" data-type="example">
<h5><span class="label">Example 15-8. </span>Motion blur with ImageData</h5>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Smear the pixels of the rectangle to the right, producing a</code>
<code class="c1">// sort of motion blur as if objects are moving from right to left.</code>
<code class="c1">// n must be 2 or larger. Larger values produce bigger smears.</code>
<code class="c1">// The rectangle is specified in the default coordinate system.</code>
<code class="kd">function</code> <code class="nx">smear</code><code class="p">(</code><code class="nx">c</code><code class="p">,</code> <code class="nx">n</code><code class="p">,</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">w</code><code class="p">,</code> <code class="nx">h</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// Get the ImageData object that represents the rectangle of pixels to smear</code>
    <code class="kd">let</code> <code class="nx">pixels</code> <code class="o">=</code> <code class="nx">c</code><code class="p">.</code><code class="nx">getImageData</code><code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">w</code><code class="p">,</code> <code class="nx">h</code><code class="p">);</code>

    <code class="c1">// This smear is done in-place and requires only the source ImageData.</code>
    <code class="c1">// Some image processing algorithms require an additional ImageData to</code>
    <code class="c1">// store transformed pixel values. If we needed an output buffer, we could</code>
    <code class="c1">// create a new ImageData with the same dimensions like this:</code>
    <code class="c1">//   let output_pixels = c.createImageData(pixels);</code>

    <code class="c1">// Get the dimensions of the grid of pixels in the ImageData object</code>
    <code class="kd">let</code> <code class="nx">width</code> <code class="o">=</code> <code class="nx">pixels</code><code class="p">.</code><code class="nx">width</code><code class="p">,</code> <code class="nx">height</code> <code class="o">=</code> <code class="nx">pixels</code><code class="p">.</code><code class="nx">height</code><code class="p">;</code>

    <code class="c1">// This is the byte array that holds the raw pixel data, left-to-right and</code>
    <code class="c1">// top-to-bottom. Each pixel occupies 4 consecutive bytes in R,G,B,A order.</code>
    <code class="kd">let</code> <code class="nx">data</code> <code class="o">=</code> <code class="nx">pixels</code><code class="p">.</code><code class="nx">data</code><code class="p">;</code>

    <code class="c1">// Each pixel after the first in each row is smeared by replacing it with</code>
    <code class="c1">// 1/nth of its own value plus m/nths of the previous pixel's value</code>
    <code class="kd">let</code> <code class="nx">m</code> <code class="o">=</code> <code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">;</code>

    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">row</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">row</code> <code class="o">&lt;</code> <code class="nx">height</code><code class="p">;</code> <code class="nx">row</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>  <code class="c1">// For each row</code>
        <code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="nx">row</code><code class="o">*</code><code class="nx">width</code><code class="o">*</code><code class="mi">4</code> <code class="o">+</code> <code class="mi">4</code><code class="p">;</code>  <code class="c1">// The offset of the second pixel of the row</code>
        <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">col</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code> <code class="nx">col</code> <code class="o">&lt;</code> <code class="nx">width</code><code class="p">;</code> <code class="nx">col</code><code class="o">++</code><code class="p">,</code> <code class="nx">i</code> <code class="o">+=</code> <code class="mi">4</code><code class="p">)</code> <code class="p">{</code> <code class="c1">// For each column</code>
            <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">=</code>   <code class="p">(</code><code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">+</code> <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">-</code><code class="mi">4</code><code class="p">]</code><code class="o">*</code><code class="nx">m</code><code class="p">)</code><code class="o">/</code><code class="nx">n</code><code class="p">;</code>     <code class="c1">// Red pixel component</code>
            <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">1</code><code class="p">]</code> <code class="o">=</code> <code class="p">(</code><code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">1</code><code class="p">]</code> <code class="o">+</code> <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">-</code><code class="mi">3</code><code class="p">]</code><code class="o">*</code><code class="nx">m</code><code class="p">)</code><code class="o">/</code><code class="nx">n</code><code class="p">;</code>   <code class="c1">// Green</code>
            <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">2</code><code class="p">]</code> <code class="o">=</code> <code class="p">(</code><code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">2</code><code class="p">]</code> <code class="o">+</code> <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">-</code><code class="mi">2</code><code class="p">]</code><code class="o">*</code><code class="nx">m</code><code class="p">)</code><code class="o">/</code><code class="nx">n</code><code class="p">;</code>   <code class="c1">// Blue</code>
            <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">3</code><code class="p">]</code> <code class="o">=</code> <code class="p">(</code><code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">+</code><code class="mi">3</code><code class="p">]</code> <code class="o">+</code> <code class="nx">data</code><code class="p">[</code><code class="nx">i</code><code class="o">-</code><code class="mi">1</code><code class="p">]</code><code class="o">*</code><code class="nx">m</code><code class="p">)</code><code class="o">/</code><code class="nx">n</code><code class="p">;</code>   <code class="c1">// Alpha component</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// Now copy the smeared image data back to the same position on the canvas</code>
    <code class="nx">c</code><code class="p">.</code><code class="nx">putImageData</code><code class="p">(</code><code class="nx">pixels</code><code class="p">,</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">);</code>
<code class="p">}</code></pre></div>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.9 Audio APIs"><div class="sect1" id="audioapis">
<h1>15.9 Audio APIs</h1>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="audio APIs" id="WBaudio15"></a><a data-type="indexterm" data-primary="audio APIs" data-secondary="overview of" id="idm46198500303128"></a> HTML <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> tags allow you to easily include sound
and videos in your web pages. These are complex elements with
significant APIs and nontrivial user interfaces. You can control
media playback with the <code>play()</code> and <code>pause()</code> methods. You can set the
<code>volume</code> and <code>playbackRate</code> properties to control the audio volume and
speed of playback. And you can skip to a particular time within the
media by setting the <code>currentTime</code> property.</p>

<p>We will not cover <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> tags in any further detail
here, however. The following subsections demonstrate two ways to add
scripted sound effects to your web pages.</p>








<section data-type="sect2" data-pdf-bookmark="15.9.1 The Audio() Constructor"><div class="sect2" id="idm46198499870744">
<h2>15.9.1 The Audio() Constructor</h2>

<p>You<a data-type="indexterm" data-primary="audio APIs" data-secondary="Audio() constructor" id="idm46198499869192"></a><a data-type="indexterm" data-primary="constructors" data-secondary="Audio() constructor" id="idm46198499868184"></a> don’t have to include an <code>&lt;audio&gt;</code> tag in your HTML document in
order to include sound effects in your web pages. You can dynamically
create <code>&lt;audio&gt;</code> elements with the normal DOM <code>document.createElement()</code>
method, or, as a shortcut, you can simply use the <code>Audio()</code>
constructor. You do not have to add the created element to your document
in order to play it. You can simply call its <code>play()</code> method:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Load the sound effect in advance so it is ready for use</code>
<code class="kd">let</code> <code class="nx">soundeffect</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Audio</code><code class="p">(</code><code class="s2">"soundeffect.mp3"</code><code class="p">);</code>

<code class="c1">// Play the sound effect whenever the user clicks the mouse button</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"click"</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="nx">soundeffect</code><code class="p">.</code><code class="nx">cloneNode</code><code class="p">().</code><code class="nx">play</code><code class="p">();</code> <code class="c1">// Load and play the sound</code>
<code class="p">});</code></pre>

<p>Note the use of <code>cloneNode()</code> here. If the user clicks the
mouse rapidly, we want to be able to have multiple overlapping copies of
the sound effect playing at the same time. To do that, we need multiple
Audio elements. Because the Audio elements are not added to the document,
they will be garbage collected when they are done playing.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.9.2 The WebAudio API"><div class="sect2" id="idm46198499839624">
<h2>15.9.2 The WebAudio API</h2>

<p>In<a data-type="indexterm" data-primary="audio APIs" data-secondary="WebAudio API" id="idm46198499838392"></a><a data-type="indexterm" data-primary="WebAudio API" id="idm46198499837384"></a> addition to playback of recorded sounds with Audio elements, web
browsers also allow the generation and playback of synthesized sounds
with the WebAudio API. Using the WebAudio API is like hooking up an
old-style electronic synthesizer with patch cords. With WebAudio, you
create a set of AudioNode objects, which represents sources,
transformations, or destinations of waveforms, and then connect these
nodes together into a network to produce sounds. The API is not
particularly complex, but a full explanation requires an understanding
of electronic music and signal processing concepts that are beyond the
scope of this book.</p>

<p>The following code below uses the WebAudio API to synthesize a short chord that
fades out over about a second. This example demonstrates the basics of
the WebAudio API. If this is interesting to you, you can find much more
about this API online:<a data-type="indexterm" data-primary="" data-startref="WBaudio15" id="idm46198499835304"></a></p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Begin by creating an audioContext object. Safari still requires</code>
<code class="c1">// us to use webkitAudioContext instead of AudioContext.</code>
<code class="kd">let</code> <code class="nx">audioContext</code> <code class="o">=</code> <code class="k">new</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">AudioContext</code><code class="o">||</code><code class="k">this</code><code class="p">.</code><code class="nx">webkitAudioContext</code><code class="p">)();</code>

<code class="c1">// Define the base sound as a combination of three pure sine waves</code>
<code class="kd">let</code> <code class="nx">notes</code> <code class="o">=</code> <code class="p">[</code> <code class="mf">293.7</code><code class="p">,</code> <code class="mf">370.0</code><code class="p">,</code> <code class="mf">440.0</code> <code class="p">];</code> <code class="c1">// D major chord: D, F# and A</code>

<code class="c1">// Create oscillator nodes for each of the notes we want to play</code>
<code class="kd">let</code> <code class="nx">oscillators</code> <code class="o">=</code> <code class="nx">notes</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="nx">note</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">o</code> <code class="o">=</code> <code class="nx">audioContext</code><code class="p">.</code><code class="nx">createOscillator</code><code class="p">();</code>
    <code class="nx">o</code><code class="p">.</code><code class="nx">frequency</code><code class="p">.</code><code class="nx">value</code> <code class="o">=</code> <code class="nx">note</code><code class="p">;</code>
    <code class="k">return</code> <code class="nx">o</code><code class="p">;</code>
<code class="p">});</code>

<code class="c1">// Shape the sound by controlling its volume over time.</code>
<code class="c1">// Starting at time 0 quickly ramp up to full volume.</code>
<code class="c1">// Then starting at time 0.1 slowly ramp down to 0.</code>
<code class="kd">let</code> <code class="nx">volumeControl</code> <code class="o">=</code> <code class="nx">audioContext</code><code class="p">.</code><code class="nx">createGain</code><code class="p">();</code>
<code class="nx">volumeControl</code><code class="p">.</code><code class="nx">gain</code><code class="p">.</code><code class="nx">setTargetAtTime</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="mf">0.0</code><code class="p">,</code> <code class="mf">0.02</code><code class="p">);</code>
<code class="nx">volumeControl</code><code class="p">.</code><code class="nx">gain</code><code class="p">.</code><code class="nx">setTargetAtTime</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="mf">0.1</code><code class="p">,</code> <code class="mf">0.2</code><code class="p">);</code>

<code class="c1">// We're going to send the sound to the default destination:</code>
<code class="c1">// the user's speakers</code>
<code class="kd">let</code> <code class="nx">speakers</code> <code class="o">=</code> <code class="nx">audioContext</code><code class="p">.</code><code class="nx">destination</code><code class="p">;</code>

<code class="c1">// Connect each of the source notes to the volume control</code>
<code class="nx">oscillators</code><code class="p">.</code><code class="nx">forEach</code><code class="p">(</code><code class="nx">o</code> <code class="o">=&gt;</code> <code class="nx">o</code><code class="p">.</code><code class="nx">connect</code><code class="p">(</code><code class="nx">volumeControl</code><code class="p">));</code>

<code class="c1">// And connect the output of the volume control to the speakers.</code>
<code class="nx">volumeControl</code><code class="p">.</code><code class="nx">connect</code><code class="p">(</code><code class="nx">speakers</code><code class="p">);</code>

<code class="c1">// Now start playing the sounds and let them run for 1.25 seconds.</code>
<code class="kd">let</code> <code class="nx">startTime</code> <code class="o">=</code> <code class="nx">audioContext</code><code class="p">.</code><code class="nx">currentTime</code><code class="p">;</code>
<code class="kd">let</code> <code class="nx">stopTime</code> <code class="o">=</code> <code class="nx">startTime</code> <code class="o">+</code> <code class="mf">1.25</code><code class="p">;</code>
<code class="nx">oscillators</code><code class="p">.</code><code class="nx">forEach</code><code class="p">(</code><code class="nx">o</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="nx">o</code><code class="p">.</code><code class="nx">start</code><code class="p">(</code><code class="nx">startTime</code><code class="p">);</code>
    <code class="nx">o</code><code class="p">.</code><code class="nx">stop</code><code class="p">(</code><code class="nx">stopTime</code><code class="p">);</code>
<code class="p">});</code>

<code class="c1">// If we want to create a sequence of sounds we can use event handlers</code>
<code class="nx">oscillators</code><code class="p">[</code><code class="mi">0</code><code class="p">].</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"ended"</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="c1">// This event handler is invoked when the note stops playing</code>
<code class="p">});</code></pre>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.10 Location, Navigation, and History"><div class="sect1" id="navigationandhistory">
<h1>15.10 Location, Navigation, and History</h1>

<p>The<a data-type="indexterm" data-primary="location property" id="idm46198499829816"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="location, navigation, and history" data-tertiary="overview of" id="idm46198499496216"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="location, navigation, and history" id="WBlocation15"></a> <code>location</code> property of both the Window and Document objects refers
to the Location object, which represents the current URL of the document
displayed in the window, and which also provides an API for loading new
documents into the <span class="keep-together">window.</span></p>

<p>The Location object is very much like a URL object (<a data-type="xref" href="ch11.html#urlapi">§11.9</a>), and you
can use properties like <code>protocol</code>, <code>hostname</code>, <code>port</code>, and <code>path</code> to
access the various parts of the URL of the current document. The <code>href</code>
property returns the entire URL as a string, as does the <code>toString()</code>
method.</p>

<p>The <code>hash</code> and <code>search</code> properties of the Location object are
interesting ones. The <code>hash</code> property returns the “fragment
identifier” portion of the URL, if there is one: a hash mark (#)
followed by an element ID. The <code>search</code> property is similar. It returns
the portion of the URL that starts with a question mark: often some
sort of query string. In general, this portion of a URL is used to
parameterize the URL and provides a way to embed arguments in it. While
these arguments are usually intended for scripts run on a server, there
is no reason why they cannot also be used in JavaScript-enabled pages.</p>

<p>URL objects have a <code>searchParams</code> property that is a parsed
representation of the <code>search</code> property. The Location object does not
have a <code>searchParams</code> property, but if you want to parse
<code>window.location.search</code>, you can simply create a URL object from the
Location object and then use the URL’s <code>searchParams</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">url</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="nb">window</code><code class="p">.</code><code class="nx">location</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">query</code> <code class="o">=</code> <code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"q"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">numResults</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"n"</code><code class="p">)</code> <code class="o">||</code> <code class="s2">"10"</code><code class="p">);</code></pre>

<p>In addition to the Location object that you can refer to as
<code>window.location</code> or <code>document.location</code>, and the <code>URL()</code> constructor
that we used earlier, browsers also define a <code>document.URL</code>
property. Surprisingly, the value of this property is not a URL object,
but just a string. The string holds the URL of the current document.</p>








<section data-type="sect2" data-pdf-bookmark="15.10.1 Loading New Documents"><div class="sect2" id="idm46198499359240">
<h2>15.10.1 Loading New Documents</h2>

<p>If<a data-type="indexterm" data-primary="documents, loading new" id="idm46198499357512"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="location, navigation, and history" data-tertiary="loading new documents" id="idm46198499356776"></a> you assign a string to <code>window.location</code> or to <code>document.location</code>,
that string is interpreted as a URL and the browser loads it, replacing
the current document with a new one:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">window</code><code class="p">.</code><code class="nx">location</code> <code class="o">=</code> <code class="s2">"http://www.oreilly.com"</code><code class="p">;</code> <code class="c1">// Go buy some books!</code></pre>

<p>You can also assign relative URLs to <code>location</code>. They are resolved
relative to the current URL:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">location</code> <code class="o">=</code> <code class="s2">"page2.html"</code><code class="p">;</code>           <code class="c1">// Load the next page</code></pre>

<p>A bare fragment identifier is a special kind of relative URL that does
not cause the browser to load a new document but simply to scroll so
that the document element with <code>id</code> or <code>name</code> that matches the fragment
is visible at the top of the browser window. As a special case, the
fragment identifier <code>#top</code> makes the browser jump to the start of the
document (assuming no element has an <code>id="top"</code> attribute):</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">location</code> <code class="o">=</code> <code class="s2">"#top"</code><code class="p">;</code>                          <code class="c1">// Jump to the top of the document</code></pre>

<p>The individual properties of the Location object are writable,
and setting them changes the location URL and also causes the browser
to load a new document (or, in the case of the <code>hash</code> property, to
navigate within the current document):</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">location</code><code class="p">.</code><code class="nx">path</code> <code class="o">=</code> <code class="s2">"pages/3.html"</code><code class="p">;</code> <code class="c1">// Load a new page</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">location</code><code class="p">.</code><code class="nx">hash</code> <code class="o">=</code> <code class="s2">"TOC"</code><code class="p">;</code>          <code class="c1">// Scroll to the table of contents</code>
<code class="nx">location</code><code class="p">.</code><code class="nx">search</code> <code class="o">=</code> <code class="s2">"?page="</code> <code class="o">+</code> <code class="p">(</code><code class="nx">page</code><code class="o">+</code><code class="mi">1</code><code class="p">);</code>   <code class="c1">// Reload with new query string</code></pre>

<p>You can also load a new page by passing a new string to the <code>assign()</code>
method of the Location object. This is the same as assigning the string
to the <code>location</code> property, however, so it’s not particularly
interesting.</p>

<p>The <code>replace()</code> method of the Location object, on the other hand, is
quite useful. When you pass a string to <code>replace()</code>, it is interpreted as
a URL and causes the browser to load a new page, just as <code>assign()</code>
does. The difference is that <code>replace()</code> replaces the current document
in the browser’s history. If a script in document A sets the <code>location</code>
property or calls <code>assign()</code> to load document B and then the user
clicks the Back button, the browser will go back to document A. If you
use <code>replace()</code> instead, then document A is erased from the browser’s
history, and when the user clicks the Back button, the browser returns to
whatever document was displayed before document A.</p>

<p>When a script unconditionally loads a new document, the <code>replace()</code>
method is a better choice than <code>assign()</code>. Otherwise, the Back
button would take the browser back to the original document, and the
same script would again load the new document. Suppose you have a
JavaScript-enhanced version of your page and a static version that does
not use JavaScript. If you determine that the user’s browser does not
support the web platform APIs that you want to use, you could use
<code>location.replace()</code> to load the static version:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// If the browser does not support the JavaScript APIs we need,</code>
<code class="c1">// redirect to a static page that does not use JavaScript.</code>
<code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">isBrowserSupported</code><code class="p">())</code> <code class="nx">location</code><code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="s2">"staticpage.html"</code><code class="p">);</code></pre>

<p>Notice that the URL passed to <code>replace()</code> is a relative one. Relative
URLs are interpreted relative to the page in which they appear, just as
they would be if they were used in a hyperlink.</p>

<p>In addition to the <code>assign()</code> and <code>replace()</code> methods, the Location
object also defines <code>reload()</code>, which simply makes the browser reload the
document.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.10.2 Browsing History"><div class="sect2" id="history">
<h2>15.10.2 Browsing History</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="location, navigation, and history" data-tertiary="browsing history" id="idm46198499248200"></a><a data-type="indexterm" data-primary="browsing history" data-secondary="overview of" id="idm46198499246984"></a> <code>history</code> property of the Window object refers to the History
object for the window. The History object models the browsing history
of a window as a list of documents and document states. The <code>length</code>
property of the History object specifies the number of elements in the
browsing history list, but for security reasons, scripts are not allowed
to access the stored URLs. (If they could, any scripts could snoop
through your browsing history.)</p>

<p>The History object has <code>back()</code> and <code>forward()</code> methods that behave
like the browser’s Back and Forward buttons do: they make the browser
go backward or forward one step in its browsing history. A third
method, <code>go()</code>, takes an integer argument and can skip any number of
pages forward (for positive arguments) or backward (for negative
arguments) in the history list:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">history</code><code class="p">.</code><code class="nx">go</code><code class="p">(</code><code class="o">-</code><code class="mi">2</code><code class="p">);</code>   <code class="c1">// Go back 2, like clicking the Back button twice</code>
<code class="nx">history</code><code class="p">.</code><code class="nx">go</code><code class="p">(</code><code class="mi">0</code><code class="p">);</code>    <code class="c1">// Another way to reload the current page</code></pre>

<p>If a window contains child windows (such as <code>&lt;iframe&gt;</code> elements),
the browsing histories of the child windows are
chronologically interleaved with the history of the main window. This
means that calling <code>history.back()</code> (for example) on the main window
may cause one of the child windows to navigate back to a previously
displayed document but leaves the main window in its current state.</p>

<p>The History object described here dates back to the early days of the
web when documents were passive and all computation was performed on the
server. Today, web applications often generate or load content
dynamically and display new application states without actually loading
new documents. Applications like these must perform their own history
management if they want the user to be able to use the Back and Forward
buttons (or the equivalent gestures) to navigate from one application
state to another in an intuitive way. There are two ways to accomplish
this, described in the next two sections.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.10.3 History Management with hashchange Events"><div class="sect2" id="idm46198499207288">
<h2>15.10.3 History Management with hashchange Events</h2>

<p>One<a data-type="indexterm" data-primary="browsing history" data-secondary="managing with hashchange events" id="idm46198499205880"></a><a data-type="indexterm" data-primary="hashchange events" id="idm46198499204904"></a> history management technique involves <code>location.hash</code> and the
“hashchange” event. Here are the key facts you need to know to understand this technique:</p>

<ul>
<li>
<p>The <code>location.hash</code> property sets the fragment identifier of the URL
and is traditionally used to specify the ID of a document section to
scroll to. But <code>location.hash</code> does not have to be an element ID: you
can set it to any string. As long as no element happens to have that
string as its ID, the browser won’t scroll when you set the <code>hash</code>
property like this.</p>
</li>
<li>
<p>Setting the <code>location.hash</code> property updates the URL displayed in the
location bar and, very importantly, adds an entry to the browser’s
history.</p>
</li>
<li>
<p>Whenever the fragment identifier of the document changes, the browser
fires a “hashchange” event on the Window object.  If you set
<code>location.hash</code> explictly, a “hashchange” event is fired. And, as
we’ve mentioned, this change to the Location object creates a new entry
in the browser’s browsing history. So if the user now clicks the Back
button, the browser will return to its previous URL before you set
<code>location.hash</code>. But this means that the fragment identifier has changed
again, so another “hashchange” event is fired in this case. This
means that as long as you can create a unique fragment identifier for
each possible state of your application, “hashchange” events will notify
you if the user moves backward and forward though their browsing
history.</p>
</li>
</ul>

<p>To use this history management mechanism, you’ll need to be able to
encode the state information necessary to render a “page” of your
application into a relatively short string of text that is suitable for
use as a fragment identifier. And you’ll need to write a function to convert page state into a string and another function to parse the string and re-create the page state it represents.</p>

<p>Once you have written those functions, the rest is easy. Define a
<code>window.onhashchange</code> function (or register a “hashchange” listener with
<code>addEventListener()</code>) that reads <code>location.hash</code>, converts that
string into a representation of your application state, and then takes
whatever actions are necessary to display that new application state.</p>

<p>When the user interacts with your application (such as by clicking a
link) in a way that would cause the application to enter a new state,
don’t render the new state directly. Instead, encode the desired new
state as a string and set <code>location.hash</code> to that string. This will
trigger a “hashchange” event, and your handler for that event will
display the new state. Using this roundabout technique ensures that the
new state is inserted into the browsing history so that the Back and
Forward buttons continue to work.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.10.4 History Management with pushState()"><div class="sect2" id="pushstate">
<h2>15.10.4 History Management with pushState()</h2>

<p>The<a data-type="indexterm" data-primary="popstate event" id="popstate15"></a><a data-type="indexterm" data-primary="browsing history" data-secondary="managing with pushState()" id="idm46198499162024"></a><a data-type="indexterm" data-primary="history.pushState() method" id="idm46198499161112"></a> second technique for managing history is somewhat more complex but
is less of a hack than the “hashchange” event. This more robust history-management technique is based on the <code>history.pushState()</code> method and the
“popstate” event. When a web app enters a new state, it calls
<code>history.pushState()</code> to add an object representing the state to the
browser’s history. If the user then clicks the Back button, the browser
fires a “popstate” event with a copy of that saved state object, and the
app uses that object to re-create its previous state. In addition to the
saved state object, applications can also save a URL with each state,
which is important if you want users to be able to bookmark and share
links to the internal states of the app.</p>

<p>The first argument to <code>pushState()</code> is an object that contains all the
state information necessary to restore the current state of the
document. This object is saved using HTML’s <em>structured clone</em>
algorithm, which is more versatile than <code>JSON.stringify()</code> and can
support Map, Set, and Date objects as well as typed arrays and
<span class="keep-together">ArrayBuffers.</span></p>

<p>The second argument was intended to be a title string for the state, but
most browsers do not support it, and you should just pass an empty
string. The third argument is an optional URL that will be displayed in
the location bar immediately and also if the user returns to this state
via Back and Forward buttons. Relative URLs are resolved against the
current location of the document. Associating a URL with each state
allows the user to bookmark internal states of your
application. Remember, though, that if the user saves a bookmark and
then visits it a day later, you won’t get a “popstate” event about that
visit: you’ll have to restore your application state by parsing the URL.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="structuredclone">
<h5>The Structured Clone Algorithm</h5>
<p>The<a data-type="indexterm" data-primary="browsing history" data-secondary="structured clone algorithm" id="idm46198499136840"></a><a data-type="indexterm" data-primary="structured clone algorithm" id="idm46198499135800"></a><a data-type="indexterm" data-primary="serialization" id="idm46198499135128"></a> <code>history.pushState()</code> method does not use <code>JSON.stringify()</code>
(<a data-type="xref" href="ch11.html#jsonapi">§11.6</a>) to serialize state data. Instead, it (and other browser
APIs we’ll learn about later) uses a more robust serialization
technique known as the structured clone algorithm, defined by the
HTML standard.</p>

<p>The structured clone algorithm can serialize anything that
<code>JSON.stringify()</code> can, but in addition, it enables serialization of
most other JavaScript types, including Map, Set, Date, RegExp, and
typed arrays, and it can handle data structures that include circular
references. The structured clone algorithm <em>cannot</em> serialize
functions or classes, however. When cloning objects it does not copy
the prototype object, getters and setters, or non-enumerable
properties. While the structured clone algorithm can clone most
built-in JavaScript types, it cannot copy types defined by the host
environment, such as document Element objects.</p>

<p>This means that the state object you pass to <code>history.pushState()</code>
need not be limited to the objects, arrays, and primitive values that
<code>JSON.stringify()</code> supports. Note, however, that if you pass an
instance of a class that you have defined, that instance will be
serialized as an ordinary JavaScript object and will lose its
prototype.</p>
</div></aside>

<p>In<a data-type="indexterm" data-primary="history.replaceState() method" id="idm46198499128600"></a> addition to the <code>pushState()</code> method, the History object also
defines <code>replaceState()</code>, which takes the same arguments but replaces
the current history state instead of adding a new state to the browsing
history. When an application that uses <code>pushState()</code> is first loaded, it
is often a good idea to call <code>replaceState()</code> to define a state object
for this initial state of the application.</p>

<p>When the user navigates to saved history states using the Back or
Forward buttons, the browser fires a “popstate” event on the Window
object. The event object associated with the event has a property named
<code>state</code>, which contains a copy (another structured clone) of the state
object you passed to <code>pushState()</code>.</p>

<p><a data-type="xref" href="#guessinggame.html">Example 15-9</a> is a simple web application—the number-guessing
game pictured in <a data-type="xref" href="#guessinggame.png">Figure 15-15</a>—that uses <code>pushState()</code> to save
its history, allowing the user to “go back” to review or redo their
guesses.<a data-type="indexterm" data-primary="" data-startref="WBlocation15" id="idm46198499121976"></a></p>

<figure><div id="guessinggame.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1514.png" alt="js7e 1514" width="1298" height="396">
<h6><span class="label">Figure 15-15. </span>A number-guessing game</h6>
</div></figure>
<div id="guessinggame.html" data-type="example">
<h5><span class="label">Example 15-9. </span>History management with pushState()</h5>

<pre data-type="programlisting" data-code-language="html"><code class="nt">&lt;html&gt;&lt;head&gt;&lt;title&gt;</code>I'm thinking of a number...<code class="nt">&lt;/title&gt;</code>
<code class="nt">&lt;style&gt;</code>
<code class="nt">body</code> <code class="p">{</code> <code class="k">height</code><code class="o">:</code> <code class="m">250px</code><code class="p">;</code> <code class="k">display</code><code class="o">:</code> <code class="nb">flex</code><code class="p">;</code> <code class="k">flex-direction</code><code class="o">:</code> <code class="n">column</code><code class="p">;</code>
       <code class="k">align-items</code><code class="o">:</code> <code class="nb">center</code><code class="p">;</code> <code class="k">justify-content</code><code class="o">:</code> <code class="n">space</code><code class="o">-</code><code class="n">evenly</code><code class="p">;</code> <code class="p">}</code>
<code class="nf">#heading</code> <code class="p">{</code> <code class="k">font</code><code class="o">:</code> <code class="nb">bold</code> <code class="m">36px</code> <code class="nb">sans-serif</code><code class="p">;</code> <code class="k">margin</code><code class="o">:</code> <code class="m">0</code><code class="p">;</code> <code class="p">}</code>
<code class="nf">#container</code> <code class="p">{</code> <code class="k">border</code><code class="o">:</code> <code class="nb">solid</code> <code class="nb">black</code> <code class="m">1px</code><code class="p">;</code> <code class="k">height</code><code class="o">:</code> <code class="m">1em</code><code class="p">;</code> <code class="k">width</code><code class="o">:</code> <code class="m">80%</code><code class="p">;</code> <code class="p">}</code>
<code class="nf">#range</code> <code class="p">{</code> <code class="k">background-color</code><code class="o">:</code> <code class="nb">green</code><code class="p">;</code> <code class="k">margin-left</code><code class="o">:</code> <code class="m">0%</code><code class="p">;</code> <code class="k">height</code><code class="o">:</code> <code class="m">1em</code><code class="p">;</code> <code class="k">width</code><code class="o">:</code> <code class="m">100%</code><code class="p">;</code> <code class="p">}</code>
<code class="nf">#input</code> <code class="p">{</code> <code class="k">display</code><code class="o">:</code> <code class="nb">block</code><code class="p">;</code> <code class="k">font-size</code><code class="o">:</code> <code class="m">24px</code><code class="p">;</code> <code class="k">width</code><code class="o">:</code> <code class="m">60%</code><code class="p">;</code> <code class="k">padding</code><code class="o">:</code> <code class="m">5px</code><code class="p">;</code> <code class="p">}</code>
<code class="nf">#playagain</code> <code class="p">{</code> <code class="k">font-size</code><code class="o">:</code> <code class="m">24px</code><code class="p">;</code> <code class="k">padding</code><code class="o">:</code> <code class="m">10px</code><code class="p">;</code> <code class="k">border-radius</code><code class="o">:</code> <code class="m">5px</code><code class="p">;</code> <code class="p">}</code>
<code class="nt">&lt;/style&gt;</code>
<code class="nt">&lt;/head&gt;</code>
<code class="nt">&lt;body&gt;</code>
<code class="nt">&lt;h1</code> <code class="na">id=</code><code class="s">"heading"</code><code class="nt">&gt;</code>I'm thinking of a number...<code class="nt">&lt;/h1&gt;</code>
<code class="c">&lt;!-- A visual representation of the numbers that have not been ruled out --&gt;</code>
<code class="nt">&lt;div</code> <code class="na">id=</code><code class="s">"container"</code><code class="nt">&gt;&lt;div</code> <code class="na">id=</code><code class="s">"range"</code><code class="nt">&gt;&lt;/div&gt;&lt;/div&gt;</code>
<code class="c">&lt;!-- Where the user enters their guess --&gt;</code>
<code class="nt">&lt;input</code> <code class="na">id=</code><code class="s">"input"</code> <code class="na">type=</code><code class="s">"text"</code><code class="nt">&gt;</code>
<code class="c">&lt;!-- A button that reloads with no search string. Hidden until game ends. --&gt;</code>
<code class="nt">&lt;button</code> <code class="na">id=</code><code class="s">"playagain"</code> <code class="na">hidden</code> <code class="na">onclick=</code><code class="s">"location.search='';"</code><code class="nt">&gt;</code>Play Again<code class="nt">&lt;/button&gt;</code>
<code class="nt">&lt;script&gt;</code>
<code class="cm">/**</code>
<code class="cm"> * An instance of this GameState class represents the internal state of</code>
<code class="cm"> * our number guessing game. The class defines static factory methods for</code>
<code class="cm"> * initializing the game state from different sources, a method for</code>
<code class="cm"> * updating the state based on a new guess, and a method for modifying the</code>
<code class="cm"> * document based on the current state.</code>
<code class="cm"> */</code>
<code class="kr">class</code> <code class="nx">GameState</code> <code class="p">{</code>
    <code class="c1">// This is a factory function to create a new game</code>
    <code class="kr">static</code> <code class="nx">newGame</code><code class="p">()</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">GameState</code><code class="p">();</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">secret</code> <code class="o">=</code> <code class="nx">s</code><code class="p">.</code><code class="nx">randomInt</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="mi">100</code><code class="p">);</code>  <code class="c1">// An integer: 0 &lt; n &lt; 100</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">low</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>                       <code class="c1">// Guesses must be greater than this</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">high</code> <code class="o">=</code> <code class="mi">100</code><code class="p">;</code>                    <code class="c1">// Guesses must be less than this</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">numGuesses</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>                <code class="c1">// How many guesses have been made</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">guess</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>                  <code class="c1">// What the last guess was</code>
        <code class="k">return</code> <code class="nx">s</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// When we save the state of the game with history.pushState(), it is just</code>
    <code class="c1">// a plain JavaScript object that gets saved, not an instance of GameState.</code>
    <code class="c1">// So this factory function re-creates a GameState object based on the</code>
    <code class="c1">// plain object that we get from a popstate event.</code>
    <code class="kr">static</code> <code class="nx">fromStateObject</code><code class="p">(</code><code class="nx">stateObject</code><code class="p">)</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">GameState</code><code class="p">();</code>
        <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">key</code> <code class="nx">of</code> <code class="nb">Object</code><code class="p">.</code><code class="nx">keys</code><code class="p">(</code><code class="nx">stateObject</code><code class="p">))</code> <code class="p">{</code>
            <code class="nx">s</code><code class="p">[</code><code class="nx">key</code><code class="p">]</code> <code class="o">=</code> <code class="nx">stateObject</code><code class="p">[</code><code class="nx">key</code><code class="p">];</code>
        <code class="p">}</code>
        <code class="k">return</code> <code class="nx">s</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// In order to enable bookmarking, we need to be able to encode the</code>
    <code class="c1">// state of any game as a URL. This is easy to do with URLSearchParams.</code>
    <code class="nx">toURL</code><code class="p">()</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">url</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="nb">window</code><code class="p">.</code><code class="nx">location</code><code class="p">);</code>
        <code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"l"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">low</code><code class="p">);</code>
        <code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"h"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">high</code><code class="p">);</code>
        <code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"n"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">numGuesses</code><code class="p">);</code>
        <code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"g"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">guess</code><code class="p">);</code>
        <code class="c1">// Note that we can't encode the secret number in the url or it</code>
        <code class="c1">// will give away the secret. If the user bookmarks the page with</code>
        <code class="c1">// these parameters and then returns to it, we will simply pick a</code>
        <code class="c1">// new random number between low and high.</code>
        <code class="k">return</code> <code class="nx">url</code><code class="p">.</code><code class="nx">href</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// This is a factory function that creates a new GameState object and</code>
    <code class="c1">// initializes it from the specified URL. If the URL does not contain the</code>
    <code class="c1">// expected parameters or if they are malformed it just returns null.</code>
    <code class="kr">static</code> <code class="nx">fromURL</code><code class="p">(</code><code class="nx">url</code><code class="p">)</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">GameState</code><code class="p">();</code>
        <code class="kd">let</code> <code class="nx">params</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="nx">url</code><code class="p">).</code><code class="nx">searchParams</code><code class="p">;</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">low</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">params</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"l"</code><code class="p">));</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">high</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">params</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"h"</code><code class="p">));</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">numGuesses</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">params</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"n"</code><code class="p">));</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">guess</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">params</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"g"</code><code class="p">));</code>

        <code class="c1">// If the URL is missing any of the parameters we need or if</code>
        <code class="c1">// they did not parse as integers, then return null;</code>
        <code class="k">if</code> <code class="p">(</code><code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">low</code><code class="p">)</code> <code class="o">||</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">high</code><code class="p">)</code> <code class="o">||</code>
            <code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">numGuesses</code><code class="p">)</code> <code class="o">||</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">guess</code><code class="p">))</code> <code class="p">{</code>
            <code class="k">return</code> <code class="kc">null</code><code class="p">;</code>
        <code class="p">}</code>

        <code class="c1">// Pick a new secret number in the right range each time we</code>
        <code class="c1">// restore a game from a URL.</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">secret</code> <code class="o">=</code> <code class="nx">s</code><code class="p">.</code><code class="nx">randomInt</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">low</code><code class="p">,</code> <code class="nx">s</code><code class="p">.</code><code class="nx">high</code><code class="p">);</code>
        <code class="k">return</code> <code class="nx">s</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// Return an integer n, min &lt; n &lt; max</code>
    <code class="nx">randomInt</code><code class="p">(</code><code class="nx">min</code><code class="p">,</code> <code class="nx">max</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">min</code> <code class="o">+</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">random</code><code class="p">()</code> <code class="o">*</code> <code class="p">(</code><code class="nx">max</code> <code class="o">-</code> <code class="nx">min</code> <code class="o">-</code> <code class="mi">1</code><code class="p">));</code>
    <code class="p">}</code>

    <code class="c1">// Modify the document to display the current state of the game.</code>
    <code class="nx">render</code><code class="p">()</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">heading</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#heading"</code><code class="p">);</code> <code class="c1">// The &lt;h1&gt; at the top</code>
        <code class="kd">let</code> <code class="nx">range</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#range"</code><code class="p">);</code>     <code class="c1">// Display guess range</code>
        <code class="kd">let</code> <code class="nx">input</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#input"</code><code class="p">);</code>     <code class="c1">// Guess input field</code>
        <code class="kd">let</code> <code class="nx">playagain</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#playagain"</code><code class="p">);</code>

        <code class="c1">// Update the document heading and title</code>
        <code class="nx">heading</code><code class="p">.</code><code class="nx">textContent</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">title</code> <code class="o">=</code>
            <code class="err">`</code><code class="nx">I</code><code class="s1">'m thinking of a number between ${this.low} and ${this.high}.`;</code>

<code class="s1">        // Update the visual range of numbers</code>
<code class="s1">        range.style.marginLeft = `${this.low}%`;</code>
<code class="s1">        range.style.width = `${(this.high-this.low)}%`;</code>

<code class="s1">        // Make sure the input field is empty and focused.</code>
<code class="s1">        input.value = "";</code>
<code class="s1">        input.focus();</code>

<code class="s1">        // Display feedback based on the user'</code><code class="nx">s</code> <code class="nx">last</code> <code class="nx">guess</code><code class="p">.</code> <code class="nx">The</code> <code class="nx">input</code>
        <code class="c1">// placeholder will show because we made the input field empty.</code>
        <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">guess</code> <code class="o">===</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
            <code class="nx">input</code><code class="p">.</code><code class="nx">placeholder</code> <code class="o">=</code> <code class="s2">"Type your guess and hit Enter"</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">guess</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">secret</code><code class="p">)</code> <code class="p">{</code>
            <code class="nx">input</code><code class="p">.</code><code class="nx">placeholder</code> <code class="o">=</code> <code class="err">`</code><code class="nx">$</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">guess</code><code class="p">}</code> <code class="nx">is</code> <code class="nx">too</code> <code class="nx">low</code><code class="p">.</code> <code class="nx">Guess</code> <code class="nx">again</code><code class="err">`</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">guess</code> <code class="o">&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">secret</code><code class="p">)</code> <code class="p">{</code>
            <code class="nx">input</code><code class="p">.</code><code class="nx">placeholder</code> <code class="o">=</code> <code class="err">`</code><code class="nx">$</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">guess</code><code class="p">}</code> <code class="nx">is</code> <code class="nx">too</code> <code class="nx">high</code><code class="p">.</code> <code class="nx">Guess</code> <code class="nx">again</code><code class="err">`</code><code class="p">;</code>
        <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
            <code class="nx">input</code><code class="p">.</code><code class="nx">placeholder</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">title</code> <code class="o">=</code> <code class="err">`</code><code class="nx">$</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">guess</code><code class="p">}</code> <code class="nx">is</code> <code class="nx">correct</code><code class="o">!</code><code class="err">`</code><code class="p">;</code>
            <code class="nx">heading</code><code class="p">.</code><code class="nx">textContent</code> <code class="o">=</code> <code class="err">`</code><code class="nx">You</code> <code class="nx">win</code> <code class="k">in</code> <code class="nx">$</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">numGuesses</code><code class="p">}</code> <code class="nx">guesses</code><code class="o">!</code><code class="err">`</code><code class="p">;</code>
            <code class="nx">playagain</code><code class="p">.</code><code class="nx">hidden</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// Update the state of the game based on what the user guessed.</code>
    <code class="c1">// Returns true if the state was updated, and false otherwise.</code>
    <code class="nx">updateForGuess</code><code class="p">(</code><code class="nx">guess</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// If it is a number and is in the right range</code>
        <code class="k">if</code> <code class="p">((</code><code class="nx">guess</code> <code class="o">&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">low</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="p">(</code><code class="nx">guess</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">high</code><code class="p">))</code> <code class="p">{</code>
            <code class="c1">// Update state object based on this guess</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">guess</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">secret</code><code class="p">)</code> <code class="k">this</code><code class="p">.</code><code class="nx">low</code> <code class="o">=</code> <code class="nx">guess</code><code class="p">;</code>
            <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">guess</code> <code class="o">&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">secret</code><code class="p">)</code> <code class="k">this</code><code class="p">.</code><code class="nx">high</code> <code class="o">=</code> <code class="nx">guess</code><code class="p">;</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">guess</code> <code class="o">=</code> <code class="nx">guess</code><code class="p">;</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">numGuesses</code><code class="o">++</code><code class="p">;</code>
            <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
        <code class="p">}</code>
        <code class="k">else</code> <code class="p">{</code> <code class="c1">// An invalid guess: notify user but don't update state</code>
            <code class="nx">alert</code><code class="p">(</code><code class="err">`</code><code class="nx">Please</code> <code class="nx">enter</code> <code class="nx">a</code> <code class="nx">number</code> <code class="nx">greater</code> <code class="nx">than</code> <code class="nx">$</code><code class="p">{</code>
                   <code class="k">this</code><code class="p">.</code><code class="nx">low</code><code class="p">}</code> <code class="nx">and</code> <code class="nx">less</code> <code class="nx">than</code> <code class="nx">$</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">high</code><code class="p">}</code><code class="err">`</code><code class="p">);</code>
            <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="c1">// With the GameState class defined, making the game work is just a matter</code>
<code class="c1">// of initializing, updating, saving and rendering the state object at</code>
<code class="c1">// the appropriate times.</code>

<code class="c1">// When we are first loaded, we try get the state of the game from the URL</code>
<code class="c1">// and if that fails we instead begin a new game. So if the user bookmarks a</code>
<code class="c1">// game that game can be restored from the URL. But if we load a page with</code>
<code class="c1">// no query parameters we'll just get a new game.</code>
<code class="kd">let</code> <code class="nx">gamestate</code> <code class="o">=</code> <code class="nx">GameState</code><code class="p">.</code><code class="nx">fromURL</code><code class="p">(</code><code class="nb">window</code><code class="p">.</code><code class="nx">location</code><code class="p">)</code> <code class="o">||</code> <code class="nx">GameState</code><code class="p">.</code><code class="nx">newGame</code><code class="p">();</code>

<code class="c1">// Save this initial state of the game into the browser history, but use</code>
<code class="c1">// replaceState instead of pushState() for this initial page</code>
<code class="nx">history</code><code class="p">.</code><code class="nx">replaceState</code><code class="p">(</code><code class="nx">gamestate</code><code class="p">,</code> <code class="s2">""</code><code class="p">,</code> <code class="nx">gamestate</code><code class="p">.</code><code class="nx">toURL</code><code class="p">());</code>

<code class="c1">// Display this initial state</code>
<code class="nx">gamestate</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>

<code class="c1">// When the user guesses, update the state of the game based on their guess</code>
<code class="c1">// then save the new state to browser history and render the new state</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">querySelector</code><code class="p">(</code><code class="s2">"#input"</code><code class="p">).</code><code class="nx">onchange</code> <code class="o">=</code> <code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">gamestate</code><code class="p">.</code><code class="nx">updateForGuess</code><code class="p">(</code><code class="nb">parseInt</code><code class="p">(</code><code class="nx">event</code><code class="p">.</code><code class="nx">target</code><code class="p">.</code><code class="nx">value</code><code class="p">)))</code> <code class="p">{</code>
        <code class="nx">history</code><code class="p">.</code><code class="nx">pushState</code><code class="p">(</code><code class="nx">gamestate</code><code class="p">,</code> <code class="s2">""</code><code class="p">,</code> <code class="nx">gamestate</code><code class="p">.</code><code class="nx">toURL</code><code class="p">());</code>
    <code class="p">}</code>
    <code class="nx">gamestate</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>
<code class="p">};</code>

<code class="c1">// If the user goes back or forward in history, we'll get a popstate event</code>
<code class="c1">// on the window object with a copy of the state object we saved with</code>
<code class="c1">// pushState. When that happens, render the new state.</code>
<code class="nb">window</code><code class="p">.</code><code class="nx">onpopstate</code> <code class="o">=</code> <code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="nx">gamestate</code> <code class="o">=</code> <code class="nx">GameState</code><code class="p">.</code><code class="nx">fromStateObject</code><code class="p">(</code><code class="nx">event</code><code class="p">.</code><code class="nx">state</code><code class="p">);</code> <code class="c1">// Restore the state</code>
    <code class="nx">gamestate</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>                                 <code class="c1">// and display it</code>
<code class="p">};</code>
<code class="nt">&lt;/script&gt;</code>
<code class="nt">&lt;/body&gt;&lt;/html&gt;</code></pre></div>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.11 Networking"><div class="sect1" id="networking">
<h1>15.11 Networking</h1>

<p>Every<a data-type="indexterm" data-primary="" data-startref="popstate15" id="idm46198499087464"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="networking" id="WBnet15"></a><a data-type="indexterm" data-primary="networking" id="net15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="networking" data-tertiary="overview of" id="idm46198499084280"></a><a data-type="indexterm" data-primary="networking" data-secondary="overview of" id="idm46198499083048"></a> time you load a web page, the browser makes network
requests—using the HTTP and HTTPS protocols—for an HTML file as well
as the images, fonts, scripts, and stylesheets that the file depends
on. But in addition to being able to make network requests in response
to user actions, web browsers also expose JavaScript APIs for
networking as well.</p>

<p>This section covers three network APIs:</p>

<ul>
<li>
<p>The <code>fetch()</code> method defines a Promise-based API for making HTTP and HTTPS
requests. The <code>fetch()</code> API makes basic GET requests simple but has
a comprehensive feature set that also supports just about any
possible HTTP use case.</p>
</li>
<li>
<p>The Server-Sent Events (or SSE) API is a convenient, event-based
interface to HTTP “long polling” techniques where the web server
holds the network connection open so that it can send data to the
client whenever it wants.</p>
</li>
<li>
<p>WebSockets is a networking protocol that is not HTTP but is
designed to interoperate with HTTP. It defines an asynchronous
message-passing API where clients and servers can send and receive
messages from each other in a way that is similar to TCP
network sockets.</p>
</li>
</ul>








<section data-type="sect2" data-pdf-bookmark="15.11.1 fetch()"><div class="sect2" id="fetch">
<h2>15.11.1 fetch()</h2>

<p>For<a data-type="indexterm" data-primary="web browser host environment" data-secondary="networking" data-tertiary="fetch() method" id="idm46198499074168"></a><a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="steps of" id="idm46198499072936"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="steps of" id="idm46198499071720"></a> basic HTTP requests, using <code>fetch()</code> is a three-step process:</p>
<ol>
<li>
<p>Call <code>fetch()</code>, passing the URL whose content you want to retrieve.</p>
</li>
<li>
<p>Get the response object that is asynchronously returned by step 1
when the HTTP response begins to arrive and call a method of this
response object to ask for the body of the response.</p>
</li>
<li>
<p>Get the body object that is asynchronously returned by step 2 and
process it however you want.</p>
</li>

</ol>

<p>The <code>fetch()</code> API is completely Promise-based, and there are two
asynchronous steps here, so you typically expect two <code>then()</code> calls
or two <code>await</code> expressions when using <code>fetch()</code>. (And if you’ve
forgotten what those are, you may want to reread <a data-type="xref" href="ch13.html#async">Chapter 13</a>
before continuing with this section.)</p>

<p>Here’s<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="examples of" id="idm46198498454056"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="examples of" id="idm46198498452776"></a> what a <code>fetch()</code> request looks like if you are using <code>then()</code>
and expect the server’s response to your request to be JSON-formatted:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="s2">"/api/users/current"</code><code class="p">)</code>            <code class="c1">// Make an HTTP (or HTTPS) GET request</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="nx">response</code><code class="p">.</code><code class="nx">json</code><code class="p">())</code> <code class="c1">// Parse its body as a JSON object</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">currentUser</code> <code class="o">=&gt;</code> <code class="p">{</code>             <code class="c1">// Then process that parsed object</code>
        <code class="nx">displayUserInfo</code><code class="p">(</code><code class="nx">currentUser</code><code class="p">);</code>
    <code class="p">});</code></pre>

<p>Here’s a similar request made using the <code>async</code> and <code>await</code> keywords
to an API that returns a plain string rather than a JSON object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">async</code> <code class="kd">function</code> <code class="nx">isServiceReady</code><code class="p">()</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">response</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">fetch</code><code class="p">(</code><code class="s2">"/api/service/status"</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">body</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">response</code><code class="p">.</code><code class="nx">text</code><code class="p">();</code>
    <code class="k">return</code> <code class="nx">body</code> <code class="o">===</code> <code class="s2">"ready"</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>If you understand these two code examples, then you know 80% of what
you need to know to use the <code>fetch()</code> API. The subsections that follow
will demonstrate how to make requests and receive responses that are
somewhat more complicated than those shown here.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198498364152">
<h5>Goodbye XMLHttpRequest</h5>
<p>The <code>fetch()</code> API<a data-type="indexterm" data-primary="XMLHttpRequest API (XHR)" id="idm46198498362536"></a><a data-type="indexterm" data-primary="networking" data-secondary="XMLHttpRequest API (XHR)" id="idm46198498361832"></a> replaces the baroque and misleadingly named
XMLHttpRequest API (which has nothing to do with XML). You may still
see XHR (as it is often abbreviated) in existing code, but there is no
reason today to use it in new code, and it is not documented in this
chapter. There is one example of XMLHttpRequest in this book, however,
and you can refer to <a data-type="xref" href="ch13.html#async-network">§13.1.3</a> if you’d like to see an example
of old-style JavaScript networking.</p>
</div></aside>










<section data-type="sect3" data-pdf-bookmark="HTTP status codes, response headers, and network errors"><div class="sect3" id="idm46198498359368">
<h3>HTTP status codes, response headers, and network errors</h3>

<p>The<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="HTTP status codes, response headers, and network errors" id="idm46198498357864"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="HTTP status codes, response headers, and network errors" id="idm46198498356488"></a> three-step <code>fetch()</code> process shown in <a data-type="xref" href="#fetch">§15.11.1</a> elides all error-handling
code. Here’s a more realistic version:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="s2">"/api/users/current"</code><code class="p">)</code>   <code class="c1">// Make an HTTP (or HTTPS) GET request.</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="p">{</code>       <code class="c1">// When we get a response, first check it</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">response</code><code class="p">.</code><code class="nx">ok</code> <code class="o">&amp;&amp;</code>    <code class="c1">// for a success code and the expected type.</code>
            <code class="nx">response</code><code class="p">.</code><code class="nx">headers</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"Content-Type"</code><code class="p">)</code> <code class="o">===</code> <code class="s2">"application/json"</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">return</code> <code class="nx">response</code><code class="p">.</code><code class="nx">json</code><code class="p">();</code> <code class="c1">// Return a Promise for the body.</code>
        <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
            <code class="k">throw</code> <code class="k">new</code> <code class="nb">Error</code><code class="p">(</code>        <code class="c1">// Or throw an error.</code>
                <code class="sb">`Unexpected response status </code><code class="si">${</code><code class="nx">response</code><code class="p">.</code><code class="nx">status</code><code class="si">}</code><code class="sb"> or content type`</code>
            <code class="p">);</code>
        <code class="p">}</code>
    <code class="p">})</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">currentUser</code> <code class="o">=&gt;</code> <code class="p">{</code>    <code class="c1">// When the response.json() Promise resolves</code>
        <code class="nx">displayUserInfo</code><code class="p">(</code><code class="nx">currentUser</code><code class="p">);</code> <code class="c1">// do something with the parsed body.</code>
    <code class="p">})</code>
    <code class="p">.</code><code class="k">catch</code><code class="p">(</code><code class="nx">error</code> <code class="o">=&gt;</code> <code class="p">{</code>         <code class="c1">// Or if anything went wrong, just log the error.</code>
        <code class="c1">// If the user's browser is offline, fetch() itself will reject.</code>
        <code class="c1">// If the server returns a bad response then we throw an error above.</code>
        <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Error while fetching current user:"</code><code class="p">,</code> <code class="nx">error</code><code class="p">);</code>
    <code class="p">});</code></pre>

<p>The Promise returned by <code>fetch()</code> resolves to a Response object. The
<code>status</code> property of this object is the HTTP status code, such as 200
for successful requests or 404 for “Not Found” responses. (<code>statusText</code>
gives the standard English text that goes along with the numeric status
code.) Conveniently, the <code>ok</code> property of a Response is <code>true</code> if
<code>status</code> is 200 or any code between 200 and 299 and is <code>false</code> for any
other code.</p>

<p><code>fetch()</code> resolves its Promise when the server’s response starts to
arrive, as soon as the HTTP status and response headers are available,
but typically before the full response body has arrived. Even though the
body is not available yet, you can examine the headers in this second
step of the fetch process. The <code>headers</code> property of a Response object
is a Headers object. Use its <code>has()</code> method to test for the presence of
a header, or use its <code>get()</code> method to get the value of a header. HTTP
header names are case-insensitive, so you can pass lowercase or
mixed-case header names to these functions.</p>

<p>The Headers object is also iterable if you ever need to do that:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">).</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="p">[</code><code class="nx">name</code><code class="p">,</code><code class="nx">value</code><code class="p">]</code> <code class="k">of</code> <code class="nx">response</code><code class="p">.</code><code class="nx">headers</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="sb">`</code><code class="si">${</code><code class="nx">name</code><code class="si">}</code><code class="sb">: </code><code class="si">${</code><code class="nx">value</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">});</code></pre>

<p>If a web server responds to your <code>fetch()</code> request, then the Promise
that was returned will be fulfilled with a Response object, even if the
server’s response was a 404 Not Found error or a 500 Internal Server
Error. <code>fetch()</code> only rejects the Promise it returns if it cannot
contact the web server at all. This can happen if the user’s computer is
offline, the server is unresponsive, or the URL specifies a
hostname that does not exist. Because these things can happen on any
network request, it is always a good idea to include a <code>.catch()</code> clause
any time you make a <code>fetch()</code> call.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Setting request parameters"><div class="sect3" id="idm46198498092344">
<h3>Setting request parameters</h3>

<p>Sometimes<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="setting request parameters" id="idm46198498090936"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="setting request parameters" id="idm46198498089688"></a> you want to pass extra parameters along with the URL when you
make a request. This can be done by adding name/value pairs at the end
of a URL after a <code>?</code>. The URL and URLSearchParams classes (which were
covered in <a data-type="xref" href="ch11.html#urlapi">§11.9</a>) make it easy to construct URLs in this form, and
the <code>fetch()</code> function accepts URL objects as its first argument, so you
can include request parameters in a <code>fetch()</code> request like this:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">async</code> <code class="kd">function</code> <code class="nx">search</code><code class="p">(</code><code class="nx">term</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">url</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="s2">"/api/search"</code><code class="p">);</code>
    <code class="nx">url</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"q"</code><code class="p">,</code> <code class="nx">term</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">response</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">);</code>
    <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">response</code><code class="p">.</code><code class="nx">ok</code><code class="p">)</code> <code class="k">throw</code> <code class="k">new</code> <code class="nb">Error</code><code class="p">(</code><code class="nx">response</code><code class="p">.</code><code class="nx">statusText</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">resultsArray</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">response</code><code class="p">.</code><code class="nx">json</code><code class="p">();</code>
    <code class="k">return</code> <code class="nx">resultsArray</code><code class="p">;</code>
<code class="p">}</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Setting request headers"><div class="sect3" id="idm46198498199336">
<h3>Setting request headers</h3>

<p>Sometimes<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="setting request headers" id="idm46198498050104"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="setting request headers" id="idm46198498048824"></a> you need to set headers in your <code>fetch()</code> requests. If you’re
making web API requests that require credentials, for example, then you
may need to include an Authorization header that contains those
credentials. In order to do this, you can use the two-argument version
of <code>fetch()</code>. As before, the first argument is a string or URL object
that specifies the URL to fetch. The second argument is an object that
can provide additional options, including request headers:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">authHeaders</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Headers</code><code class="p">();</code>
<code class="c1">// Don't use Basic auth unless it is over an HTTPS connection.</code>
<code class="nx">authHeaders</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"Authorization"</code><code class="p">,</code>
                <code class="sb">`Basic </code><code class="si">${</code><code class="nx">btoa</code><code class="p">(</code><code class="sb">`</code><code class="si">${</code><code class="nx">username</code><code class="si">}</code><code class="sb">:</code><code class="si">${</code><code class="nx">password</code><code class="si">}</code><code class="sb">`</code><code class="p">)</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
<code class="nx">fetch</code><code class="p">(</code><code class="s2">"/api/users/"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">headers</code><code class="o">:</code> <code class="nx">authHeaders</code> <code class="p">})</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="nx">response</code><code class="p">.</code><code class="nx">json</code><code class="p">())</code>             <code class="c1">// Error handling omitted...</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">usersList</code> <code class="o">=&gt;</code> <code class="nx">displayAllUsers</code><code class="p">(</code><code class="nx">usersList</code><code class="p">));</code></pre>

<p>There are a number of other options that can be specified in the second
argument to <code>fetch()</code>, and we’ll see it again later. An alternative to
passing two arguments to <code>fetch()</code> is to instead pass the same two
arguments to the <code>Request()</code> constructor and then pass the resulting
Request object to <code>fetch()</code>:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">request</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Request</code><code class="p">(</code><code class="nx">url</code><code class="p">,</code> <code class="p">{</code> <code class="nx">headers</code> <code class="p">});</code>
<code class="nx">fetch</code><code class="p">(</code><code class="nx">request</code><code class="p">).</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="p">...);</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Parsing response bodies"><div class="sect3" id="idm46198497935432">
<h3>Parsing response bodies</h3>

<p>In<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="parsing response bodies" id="idm46198497939272"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="parsing response bodies" id="idm46198497937992"></a> the three-step <code>fetch()</code> process that we’ve demonstrated, the
second step ends by calling the <code>json()</code> or <code>text()</code> methods of the
Response object and returning the Promise object that those methods
return. Then, the third step begins when that Promise resolves with the
body of the response parsed as a JSON object or simply as a string of
text.</p>

<p>These are probably the two most common scenarios, but they are not the
only ways to obtain the body of a web server’s response. In addition to
<code>json()</code> and <code>text()</code>, the Response object also has these methods:</p>
<dl>
<dt><code>arrayBuffer()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="arrayBuffer() method" id="idm46198497930328"></a> method returns a Promise that resolves to an
ArrayBuffer. This is useful when the response contains binary data. You
can use the ArrayBuffer to create a typed array (<a data-type="xref" href="ch11.html#typedarrays">§11.2</a>) or a
DataView object (<a data-type="xref" href="ch11.html#typedarrays-dataview">§11.2.5</a>) from which you can read the
binary data.</p>
</dd>
<dt><code>blob()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="blob() method" id="idm46198497926216"></a> method returns a Promise that resolves to a Blob
object. Blobs are not covered in any detail in this book, but the name
stands for “Binary Large Object,” and they are useful when you expect
large amounts of binary data. If you ask for the body of the response as
a Blob, the browser implementation may stream the response data to a
temporary file and then return a Blob object that represents that
temporary file. Blob objects, therefore, do not allow random access to
the response body the way that an ArrayBuffer does. Once you have a
Blob, you can create a URL that refers to it with
<code>URL.createObjectURL()</code>, or you can use the event-based FileReader API
to asynchronously obtain the content of the Blob as a string or an
ArrayBuffer. At the time of this writing, some browsers also define
Promise-based <code>text()</code> and <code>arrayBuffer()</code> methods that give a more
direct route for obtaining the content of a Blob.</p>
</dd>
<dt><code>formData()</code></dt>
<dd>
<p>This<a data-type="indexterm" data-primary="fromData() method" id="idm46198497921848"></a> method returns a Promise that resolves to a FormData
object. You should use this method if you expect the body of the
Response to be encoded in “multipart/form-data” format. This format is
common in POST requests made to a server, but uncommon in server
responses, so this method is not frequently used.</p>
</dd>
</dl>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Streaming response bodies"><div class="sect3" id="idm46198497920280">
<h3>Streaming response bodies</h3>

<p>In<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="streaming response bodies" id="idm46198497918776"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="streaming response bodies" id="idm46198497917528"></a> addition to the five response methods that asynchronously return some
form of the complete response body to you, there is also an option to
stream the response body, which is useful if there is some kind of
processing you can do on the chunks of the response body as they arrive
over the network. But streaming the response is also useful if you want
to display a progress bar so that the user can see the progress of the
download.</p>

<p>The <code>body</code> property of a Response object is a ReadableStream object. If
you have already called a response method like <code>text()</code> or <code>json()</code> that
reads, parses, and returns the body, then <code>bodyUsed</code> will be <code>true</code> to
indicate that the <code>body</code> stream has already been read. If <code>bodyUsed</code> is
<code>false</code>, however, then the stream has not yet been read. In this case,
you can call <code>getReader()</code> on <code>response.body</code> to obtain a stream reader
object, then use the <code>read()</code> method of this reader object to
asynchronously read chunks of text from the stream. The <code>read()</code> method
returns a Promise that resolves to an object with <code>done</code> and <code>value</code>
properties. <code>done</code> will be <code>true</code> if the entire body has been read or if
the stream was closed. And <code>value</code> will either be the next chunk, as<a data-type="indexterm" data-primary="Uint8Array" id="idm46198497842168"></a> a
Uint8Array, or <code>undefined</code> if there are no more chunks.</p>

<p>This streaming API is relatively straightforward if you use <code>async</code> and
<code>await</code> but is surprisingly complex if you attempt to use it with raw
Promises. <a data-type="xref" href="#streamBody.js">Example 15-10</a> demonstrates the API by defining a
<code>streamBody()</code> function. Suppose you wanted to download a large JSON
file and report download progress to the user. You can’t do that with
the <code>json()</code> method of the Response object, but you could do it with
the <code>streamBody()</code> function, like this (assuming that an
<code>updateProgress()</code> function is defined to set the <code>value</code> attribute
on an HTML <code>&lt;progress&gt;</code> element):</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="s1">'big.json'</code><code class="p">)</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="nx">streamBody</code><code class="p">(</code><code class="nx">response</code><code class="p">,</code> <code class="nx">updateProgress</code><code class="p">))</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">bodyText</code> <code class="o">=&gt;</code> <code class="nx">JSON</code><code class="p">.</code><code class="nx">parse</code><code class="p">(</code><code class="nx">bodyText</code><code class="p">))</code>
    <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">handleBigJSONObject</code><code class="p">);</code></pre>

<p>The <code>streamBody()</code> function can be implemented as shown in <a data-type="xref" href="#streamBody.js">Example 15-10</a>.</p>
<div id="streamBody.js" data-type="example">
<h5><span class="label">Example 15-10. </span>Streaming the response body from a fetch() request</h5>

<pre data-type="programlisting" data-code-language="js"><code class="cm">/**</code>
<code class="cm"> * An asynchronous function for streaming the body of a Response object</code>
<code class="cm"> * obtained from a fetch() request. Pass the Response object as the first</code>
<code class="cm"> * argument followed by two optional callbacks.</code>
<code class="cm"> *</code>
<code class="cm"> * If you specify a function as the second argument, that reportProgress</code>
<code class="cm"> * callback will be called once for each chunk that is received. The first</code>
<code class="cm"> * argument passed is the total number of bytes received so far. The second</code>
<code class="cm"> * argument is a number between 0 and 1 specifying how complete the download</code>
<code class="cm"> * is. If the Response object has no "Content-Length" header, however, then</code>
<code class="cm"> * this second argument will always be NaN.</code>
<code class="cm"> *</code>
<code class="cm"> * If you want to process the data in chunks as they arrive, specify a</code>
<code class="cm"> * function as the third argument. The chunks will be passed, as Uint8Array</code>
<code class="cm"> * objects, to this processChunk callback.</code>
<code class="cm"> *</code>
<code class="cm"> * streamBody() returns a Promise that resolves to a string. If a processChunk</code>
<code class="cm"> * callback was supplied then this string is the concatenation of the values</code>
<code class="cm"> * returned by that callback. Otherwise the string is the concatenation of</code>
<code class="cm"> * the chunk values converted to UTF-8 strings.</code>
<code class="cm"> */</code>
<code class="nx">async</code> <code class="kd">function</code> <code class="nx">streamBody</code><code class="p">(</code><code class="nx">response</code><code class="p">,</code> <code class="nx">reportProgress</code><code class="p">,</code> <code class="nx">processChunk</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// How many bytes are we expecting, or NaN if no header</code>
    <code class="kd">let</code> <code class="nx">expectedBytes</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">response</code><code class="p">.</code><code class="nx">headers</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"Content-Length"</code><code class="p">));</code>
    <code class="kd">let</code> <code class="nx">bytesRead</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>                       <code class="c1">// How many bytes received so far</code>
    <code class="kd">let</code> <code class="nx">reader</code> <code class="o">=</code> <code class="nx">response</code><code class="p">.</code><code class="nx">body</code><code class="p">.</code><code class="nx">getReader</code><code class="p">();</code>  <code class="c1">// Read bytes with this function</code>
    <code class="kd">let</code> <code class="nx">decoder</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">TextDecoder</code><code class="p">(</code><code class="s2">"utf-8"</code><code class="p">);</code>  <code class="c1">// For converting bytes to text</code>
    <code class="kd">let</code> <code class="nx">body</code> <code class="o">=</code> <code class="s2">""</code><code class="p">;</code>                           <code class="c1">// Text read so far</code>

    <code class="k">while</code><code class="p">(</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>                                 <code class="c1">// Loop until we exit below</code>
        <code class="kd">let</code> <code class="p">{</code><code class="nx">done</code><code class="p">,</code> <code class="nx">value</code><code class="p">}</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">reader</code><code class="p">.</code><code class="nx">read</code><code class="p">();</code>  <code class="c1">// Read a chunk</code>

        <code class="k">if</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>                              <code class="c1">// If we got a byte array:</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">processChunk</code><code class="p">)</code> <code class="p">{</code>                   <code class="c1">// Process the bytes if</code>
                <code class="kd">let</code> <code class="nx">processed</code> <code class="o">=</code> <code class="nx">processChunk</code><code class="p">(</code><code class="nx">value</code><code class="p">);</code>  <code class="c1">// a callback was passed.</code>
                <code class="k">if</code> <code class="p">(</code><code class="nx">processed</code><code class="p">)</code> <code class="p">{</code>
                    <code class="nx">body</code> <code class="o">+=</code> <code class="nx">processed</code><code class="p">;</code>
                <code class="p">}</code>
            <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>                              <code class="c1">// Otherwise, convert bytes</code>
                <code class="nx">body</code> <code class="o">+=</code> <code class="nx">decoder</code><code class="p">.</code><code class="nx">decode</code><code class="p">(</code><code class="nx">value</code><code class="p">,</code> <code class="p">{</code><code class="nx">stream</code><code class="o">:</code> <code class="kc">true</code><code class="p">});</code> <code class="c1">// to text.</code>
            <code class="p">}</code>

            <code class="k">if</code> <code class="p">(</code><code class="nx">reportProgress</code><code class="p">)</code> <code class="p">{</code>                 <code class="c1">// If a progress callback was</code>
                <code class="nx">bytesRead</code> <code class="o">+=</code> <code class="nx">value</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>        <code class="c1">// passed, then call it</code>
                <code class="nx">reportProgress</code><code class="p">(</code><code class="nx">bytesRead</code><code class="p">,</code> <code class="nx">bytesRead</code> <code class="o">/</code> <code class="nx">expectedBytes</code><code class="p">);</code>
            <code class="p">}</code>
        <code class="p">}</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">done</code><code class="p">)</code> <code class="p">{</code>                               <code class="c1">// If this is the last chunk,</code>
            <code class="k">break</code><code class="p">;</code>                                <code class="c1">// exit the loop</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="k">return</code> <code class="nx">body</code><code class="p">;</code>   <code class="c1">// Return the body text we accumulated</code>
<code class="p">}</code></pre></div>

<p>This streaming API is new at the time of this writing and is expected to
evolve. In particular, there are plans to make ReadableStream objects
asynchronously iterable so that they can be used with <code>for/await</code> loops
(<a data-type="xref" href="ch13.html#async-for-await">§13.4.1</a>).</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Specifying the request method and request body"><div class="sect3" id="idm46198497175096">
<h3>Specifying the request method and request body</h3>

<p>In<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="specifying request method and request body" id="idm46198496942008"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="specifying request method and request body" id="idm46198496940632"></a> each of the <code>fetch()</code> examples shown so far, we have made an HTTP (or
HTTPS) GET request. If you want to use a different request method (such
as POST, PUT, or DELETE), simply use the two-argument version of
<code>fetch()</code>, passing an Options object with a <code>method</code> parameter:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">,</code> <code class="p">{</code> <code class="nx">method</code><code class="o">:</code> <code class="s2">"POST"</code> <code class="p">}).</code><code class="nx">then</code><code class="p">(</code><code class="nx">r</code> <code class="o">=&gt;</code> <code class="nx">r</code><code class="p">.</code><code class="nx">json</code><code class="p">()).</code><code class="nx">then</code><code class="p">(</code><code class="nx">handleResponse</code><code class="p">);</code></pre>

<p>POST and PUT requests typically have a request body containing data to
be sent to the server. As long as the <code>method</code> property is not set to
<code>"GET"</code> or <code>"HEAD"</code> (which do not support request bodies), you can
specify a request body by setting the <code>body</code> property of the Options
object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">,</code> <code class="p">{</code>
    <code class="nx">method</code><code class="o">:</code> <code class="s2">"POST"</code><code class="p">,</code>
    <code class="nx">body</code><code class="o">:</code> <code class="s2">"hello world"</code>
<code class="p">})</code></pre>

<p>When you specify a request body, the browser automatically adds an
appropriate “Content-Length” header to the request. When the body is a
string, as in the preceding example, the browser defaults the “Content-Type” header to
“text/plain;charset=UTF-8.” You may need to override this default if you
specify a string body of some more specific type such as “text/html” or
“application/json”:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">,</code> <code class="p">{</code>
    <code class="nx">method</code><code class="o">:</code> <code class="s2">"POST"</code><code class="p">,</code>
    <code class="nx">headers</code><code class="o">:</code> <code class="k">new</code> <code class="nx">Headers</code><code class="p">({</code><code class="s2">"Content-Type"</code><code class="o">:</code> <code class="s2">"application/json"</code><code class="p">}),</code>
    <code class="nx">body</code><code class="o">:</code> <code class="nx">JSON</code><code class="p">.</code><code class="nx">stringify</code><code class="p">(</code><code class="nx">requestBody</code><code class="p">)</code>
<code class="p">})</code></pre>

<p>The <code>body</code> property of the <code>fetch()</code> options object does not have to be
a string. If you have binary data in a typed array or a DataView object
or an ArrayBuffer, you can set the <code>body</code> property to that value and
specify an appropriate “Content-Type” header. If you have binary data in
Blob form, you can simply set <code>body</code> to the Blob. Blobs have a <code>type</code>
property that specifies their content type, and the value of this
property is used as the default value of the “Content-Type” header.</p>

<p>With POST requests, is it somewhat common to pass a set of name/value
parameters in the request body (instead of encoding them into the query
portion of the URL). There are two ways to do this:</p>

<ul>
<li>
<p>You can specify your parameter names and values with URLSearchParams
(which we saw earlier in this section, and which is documented in
<a data-type="xref" href="ch11.html#urlapi">§11.9</a>) and then pass the URLSearchParams object as the value of
the <code>body</code> property. If you do this, the body will be set to a string
that looks like the query portion of a URL, and the “Content-Type”
header will be automatically set to
“application/x-www-form-urlencoded;charset=UTF-8.”</p>
</li>
<li>
<p>If instead you specify your parameter names and values with a
FormData object, the body will use a more verbose multipart encoding
and “Content-Type” will be set to “multipart/form-data; boundary=…”
with a unique boundary string that matches the body. Using a FormData
object is particularly useful when the values you want to upload are
long, or are File or Blob objects that may each have its own
“Content-Type.” FormData objects can be created and initialized with
values by passing a <code>&lt;form&gt;</code> element to the <code>FormData()</code>
constructor. But you can also create “multipart/form-data” request
bodies by invoking the <code>FormData()</code> constructor with no arguments and
initializing the name/value pairs it represents with the <code>set()</code> and
<code>append()</code> methods.</p>
</li>
</ul>
</div></section>













<section data-type="sect3" class="less_space pagebreak-before" data-pdf-bookmark="File upload with fetch()"><div class="sect3" id="idm46198497174472">
<h3>File upload with fetch()</h3>

<p>Uploading<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="file upload" id="idm46198496824088"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="file upload" id="idm46198496822808"></a> files from a user’s computer to a web server is a common task
and can be accomplished using a FormData object as the request body. A
common way to obtain a File object is to display an <code>&lt;input type="file"&gt;</code>
element on your web page and listen for “change” events on that
element. When a “change” event occurs, the <code>files</code> array of the input
element should contain at least one File object. File objects are also
available through the HTML drag-and-drop API. That API is not covered in
this book, but you can get files from the <code>dataTransfer.files</code> array of
the event object passed to an event listener for “drop” events.</p>

<p>Remember also that File objects are a kind of Blob, and sometimes it can
be useful to upload Blobs. Suppose you’ve written a web application that
allows the user to create drawings in a <code>&lt;canvas&gt;</code> element. You can
upload the user’s drawings as PNG files with code like the following:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// The canvas.toBlob() function is callback-based.</code>
<code class="c1">// This is a Promise-based wrapper for it.</code>
<code class="nx">async</code> <code class="kd">function</code> <code class="nx">getCanvasBlob</code><code class="p">(</code><code class="nx">canvas</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">return</code> <code class="k">new</code> <code class="nb">Promise</code><code class="p">((</code><code class="nx">resolve</code><code class="p">,</code> <code class="nx">reject</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="nx">canvas</code><code class="p">.</code><code class="nx">toBlob</code><code class="p">(</code><code class="nx">resolve</code><code class="p">);</code>
    <code class="p">});</code>
<code class="p">}</code>

<code class="c1">// Here is how we upload a PNG file from a canvas</code>
<code class="nx">async</code> <code class="kd">function</code> <code class="nx">uploadCanvasImage</code><code class="p">(</code><code class="nx">canvas</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">pngblob</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">getCanvasBlob</code><code class="p">(</code><code class="nx">canvas</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">formdata</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">FormData</code><code class="p">();</code>
    <code class="nx">formdata</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"canvasimage"</code><code class="p">,</code> <code class="nx">pngblob</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">response</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">fetch</code><code class="p">(</code><code class="s2">"/upload"</code><code class="p">,</code> <code class="p">{</code> <code class="nx">method</code><code class="o">:</code> <code class="s2">"POST"</code><code class="p">,</code> <code class="nx">body</code><code class="o">:</code> <code class="nx">formdata</code> <code class="p">});</code>
    <code class="kd">let</code> <code class="nx">body</code> <code class="o">=</code> <code class="nx">await</code> <code class="nx">response</code><code class="p">.</code><code class="nx">json</code><code class="p">();</code>
<code class="p">}</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Cross-origin requests"><div class="sect3" id="idm46198496817032">
<h3>Cross-origin requests</h3>

<p>Most<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="cross-origin requests" id="idm46198496815896"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="cross-origin requests" id="idm46198496665848"></a><a data-type="indexterm" data-primary="security" data-secondary="Cross-Origin Resource Sharing (CORS)" id="idm46198496664904"></a><a data-type="indexterm" data-primary="Cross-Origin Resource Sharing (CORS)" id="idm46198496663992"></a> often, <code>fetch()</code> is used by web applications to request data from
their own web server. Requests like these are known as same-origin
requests because the URL passed to <code>fetch()</code> has the same origin
(protocol plus hostname plus port) as the document that contains the
script that is making the request.</p>

<p>For security reasons, web browsers generally disallow (though there are
exceptions for images and scripts) cross-origin network
requests. However, Cross-Origin Resource Sharing, or CORS, enables safe
cross-origin requests. When <code>fetch()</code> is used with a cross-origin URL,
the browser adds an “Origin” header to the request (and does not allow
it to be overridden via the <code>headers</code> property) to notify the web server
that the request is coming from a document with a different origin. If
the server responds to the request with an appropriate
“Access-Control-Allow-Origin” header, then the request
proceeds. Otherwise, if the server does not explicitly allow the
request, then the Promise returned by <code>fetch()</code> is rejected.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Aborting a request"><div class="sect3" id="idm46198496659416">
<h3>Aborting a request</h3>

<p>Sometimes<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="aborting requests" id="idm46198496657816"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="aborting requests" id="idm46198496656536"></a> you may want to abort a <code>fetch()</code> request that you have
already issued, perhaps because the user clicked a Cancel button or the request is taking too long. The fetch API allows requests to
be aborted using the AbortController and AbortSignal classes. (These
classes define a generic abort mechanism suitable for use by other APIs
as well.)</p>

<p>If you want to have the option of aborting a <code>fetch()</code> request, then
create an AbortController object before starting the request. The
<code>signal</code> property of the controller object is an AbortSignal
object. Pass this signal object as the value of the <code>signal</code> property of
the options object that you pass to <code>fetch()</code>. Having done that, you can
call the <code>abort()</code> method of the controller object to abort the
request, which will cause any Promise objects related to the fetch
request to reject with an exception.</p>

<p>Here is an example of using the AbortController mechanism to enforce a
timeout for fetch requests:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// This function is like fetch(), but it adds support for a timeout</code>
<code class="c1">// property in the options object and aborts the fetch if it is not complete</code>
<code class="c1">// within the number of milliseconds specified by that property.</code>
<code class="kd">function</code> <code class="nx">fetchWithTimeout</code><code class="p">(</code><code class="nx">url</code><code class="p">,</code> <code class="nx">options</code><code class="o">=</code><code class="p">{})</code> <code class="p">{</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">options</code><code class="p">.</code><code class="nx">timeout</code><code class="p">)</code> <code class="p">{</code>  <code class="c1">// If the timeout property exists and is nonzero</code>
        <code class="kd">let</code> <code class="nx">controller</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">AbortController</code><code class="p">();</code>  <code class="c1">// Create a controller</code>
        <code class="nx">options</code><code class="p">.</code><code class="nx">signal</code> <code class="o">=</code> <code class="nx">controller</code><code class="p">.</code><code class="nx">signal</code><code class="p">;</code>      <code class="c1">// Set the signal property</code>
        <code class="c1">// Start a timer that will send the abort signal after the specified</code>
        <code class="c1">// number of milliseconds have passed. Note that we never cancel</code>
        <code class="c1">// this timer. Calling abort() after the fetch is complete has</code>
        <code class="c1">// no effect.</code>
        <code class="nx">setTimeout</code><code class="p">(()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">controller</code><code class="p">.</code><code class="nx">abort</code><code class="p">();</code> <code class="p">},</code> <code class="nx">options</code><code class="p">.</code><code class="nx">timeout</code><code class="p">);</code>
    <code class="p">}</code>
    <code class="c1">// Now just perform a normal fetch</code>
    <code class="k">return</code> <code class="nx">fetch</code><code class="p">(</code><code class="nx">url</code><code class="p">,</code> <code class="nx">options</code><code class="p">);</code>
<code class="p">}</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Miscellaneous request options"><div class="sect3" id="idm46198496649128">
<h3>Miscellaneous request options</h3>

<p>We’ve<a data-type="indexterm" data-primary="networking" data-secondary="fetch() method" data-tertiary="miscellaneous request options" id="idm46198496647992"></a><a data-type="indexterm" data-primary="fetch() method" data-secondary="miscellaneous request options" id="idm46198496539752"></a> seen that an Options object can be passed as the second argument
to <code>fetch()</code> (or as the second argument to the <code>Request()</code> constructor)
to specify the request method, request headers, and request body. It
supports a number of other options as well, including these:</p>
<dl>
<dt><code>cache</code></dt>
<dd>
<p>Use this property to override the browser’s default caching
behavior. HTTP caching is a complex topic that is beyond the scope of
this book, but if you know something about how it works, you can use the
following legal values of <code>cache</code>:</p>
</dd>
<dt><code>"default"</code></dt>
<dd>
<p>This value specifies the default caching behavior. Fresh
  responses in the cache are served directly from the cache, and stale
  responses are revalidated before being served.</p>
<dl>
<dt><code>"no-store"</code></dt>
<dd>
<p>This value makes the browser ignore its cache. The cache
is not checked for matches when the request is made and is not updated
when the response arrives.</p>
</dd>
<dt><code>"reload"</code></dt>
<dd>
<p>This value tells the browser to always make a normal
network request, ignoring the cache. When the response arrives,
however, it is stored in the cache.</p>
</dd>
<dt><code>"no-cache"</code></dt>
<dd>
<p>This (misleadingly named) value tells the browser to not
serve fresh values from the cache. Fresh or stale cached values are
revalidated before being returned.</p>
</dd>
<dt><code>"force-cache"</code></dt>
<dd>
<p>This value tells the browser to serve responses from
the cache even if they are stale.</p>
</dd>
</dl>
</dd>
<dt><code>redirect</code></dt>
<dd>
<p>This property controls how the browser handles redirect
responses from the server. The three legal values are:</p>
<dl>
<dt><code>"follow"</code></dt>
<dd>
<p>This is the default value, and it makes the browser follow
redirects automatically. If you use this default, the Response objects you
get with <code>fetch()</code> should never have a <code>status</code> in the 300 to 399
range.</p>
</dd>
<dt><code>"error"</code></dt>
<dd>
<p>This value makes <code>fetch()</code> reject its returned Promise if
the server returns a redirect response.</p>
</dd>
<dt><code>"manual"</code></dt>
<dd>
<p>This value means that you want to manually handle redirect
responses, and the Promise returned by <code>fetch()</code> may resolve to a
Response object with a <code>status</code> in the 300 to 399 range. In this
case, you will have to use the “Location” header of the Response to
manually follow the redirection.</p>
</dd>
</dl>
</dd>
<dt><code>referrer</code></dt>
<dd>
<p>You can set this property to a string that contains a
relative URL to specify the value of the HTTP “Referer” header
(which is historically misspelled with three Rs instead of four). If you
set this property to the empty string, then the “Referer” header will
be omitted from the request.</p>
</dd>
</dl>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.11.2 Server-Sent Events"><div class="sect2" id="sse">
<h2>15.11.2 Server-Sent Events</h2>

<p>A<a data-type="indexterm" data-primary="web browser host environment" data-secondary="networking" data-tertiary="server-sent events" id="idm46198496514040"></a><a data-type="indexterm" data-primary="event-driven programming model" id="idm46198496512744"></a><a data-type="indexterm" data-primary="networking" data-secondary="server-sent events" id="idm46198496512056"></a><a data-type="indexterm" data-primary="server-sent events" id="serv15"></a><a data-type="indexterm" data-primary="event-driven programming model" data-secondary="server-sent events" id="idm46198496510168"></a> fundamental feature of the HTTP protocol upon which the web is built
is that clients initiate requests and servers respond to those
requests. Some web apps find it useful, however, to have their server
send them notifications when events occur. This does not come naturally
to HTTP, but the technique that has been devised is for the client to
make a request to the server, and then neither the client nor the server
close the connection. When the server has something to tell the client
about, it writes data to the connection but keeps it open. The effect is
as if the client makes a network request and the server responds in a
slow and bursty way with significant pauses between bursts of
activity. Network connections like this don’t usually stay open forever,
but if the client detects that the connection has closed, it can simply
make another request to reopen the connection.</p>

<p>This technique for allowing servers to send messages to clients is
surprisingly effective (though it can be expensive on the server side
because the server must maintain an active connection to all of its
clients). Because it is a useful programming pattern, client-side
JavaScript supports it with the EventSource API. To create this kind of
long-lived request connection to a web server, simply pass a URL to the
<code>EventSource()</code> constructor. When the server writes (properly formatted)
data to the connection, the EventSource object translates those into
events that you can listen for:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">ticker</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">EventSource</code><code class="p">(</code><code class="s2">"stockprices.php"</code><code class="p">);</code>
<code class="nx">ticker</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"bid"</code><code class="p">,</code> <code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="nx">displayNewBid</code><code class="p">(</code><code class="nx">event</code><code class="p">.</code><code class="nx">data</code><code class="p">);</code>
<code class="p">}</code></pre>

<p>The<a data-type="indexterm" data-primary="message events" id="idm46198496488104"></a> event object associated with a message event has a <code>data</code> property
that holds whatever string the server sent as the payload for this
event. The event object also has a <code>type</code> property, like all event
objects do, that specifies the name of the event. The server determines
the type of the events that are generated. If the server omits an event
name in the data it writes, then the event type defaults to “message.”</p>

<p>The Server-Sent Event protocol is straightforward. The client initiates
a connection to the server (when it creates the <code>EventSource</code> object),
and the server keeps this connection open. When an event occurs, the
server writes lines of text to the connection. An event going over the
wire might look like this, if the comments were omitted:</p>

<pre data-type="programlisting">event: bid  // sets the type of the event object
data: GOOG  // sets the data property
data: 999   // appends a newline and more data
            // a blank line marks the end of the event</pre>

<p>There are some additional details to the protocol that allow events to
be given IDs and allow a reconnecting client to tell the server what the
ID of the last event it received was, so that a server can resend any
events it missed. Those details are invisible on the client side,
however, and are not discussed here.</p>

<p>One obvious application for Server-Sent Events is for multiuser
collaborations like online chat. A chat client might use <code>fetch()</code> to
post messages to the chat room and subscribe to the stream of chatter
with an EventSource object. <a data-type="xref" href="#chatClient.html">Example 15-11</a> demonstrates how easy it
is to write a chat client like this with EventSource.</p>
<div id="chatClient.html" data-type="example">
<h5><span class="label">Example 15-11. </span>A simple chat client using EventSource</h5>

<pre data-type="programlisting">&lt;html&gt;
&lt;head&gt;&lt;title&gt;SSE Chat&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;!-- The chat UI is just a single text input field --&gt;
&lt;!-- New chat messages will be inserted before this input field --&gt;
&lt;input id="input" style="width:100%; padding:10px; border:solid black 2px"/&gt;
&lt;script&gt;
// Take care of some UI details
let nick = prompt("Enter your nickname");     // Get user's nickname
let input = document.getElementById("input"); // Find the input field
input.focus();                                // Set keyboard focus

// Register for notification of new messages using EventSource
let chat = new EventSource("/chat");
chat.addEventListener("chat", event =&gt; {  // When a chat message arrives
    let div = document.createElement("div");  // Create a &lt;div&gt;
    div.append(event.data);                   // Add text from the message
    input.before(div);                        // And add div before input
    input.scrollIntoView();                   // Ensure input elt is visible
});

// Post the user's messages to the server using fetch
input.addEventListener("change", ()=&gt;{  // When the user strikes return
    fetch("/chat", {                    // Start an HTTP request to this url.
        method: "POST",                 // Make it a POST request with body
        body: nick + ": " + input.value // set to the user's nick and input.
    })
    .catch(e =&gt; console.error);         // Ignore response, but log any errors.
    input.value = "";                   // Clear the input
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>

<p>The server-side code for this chat program is not much more complicated
than the client-side code. <a data-type="xref" href="#chatServer.js">Example 15-12</a> is a simple Node HTTP
server. When a client requests the root URL “/”, it sends the chat
client code shown in <a data-type="xref" href="#chatClient.html">Example 15-11</a>. When a client makes a GET
request for the URL “/chat”, it saves the response object and keeps that
connection open. And when a client makes a POST request to “/chat”, it
uses the body of the request as a chat message and writes it, using the
“text/event-stream” format to each of the saved response objects. The
server code listens on port 8080, so after running it with Node, point
your browser to <code>http://localhost:8080</code> to connect and begin chatting
with yourself.<a data-type="indexterm" data-primary="" data-startref="serv15" id="idm46198496423192"></a></p>
<div id="chatServer.js" data-type="example">
<h5><span class="label">Example 15-12. </span>A Server-Sent Events chat server</h5>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// This is server-side JavaScript, intended to be run with NodeJS.</code>
<code class="c1">// It implements a very simple, completely anonymous chat room.</code>
<code class="c1">// POST new messages to /chat, or GET a text/event-stream of messages</code>
<code class="c1">// from the same URL. Making a GET request to / returns a simple HTML file</code>
<code class="c1">// that contains the client-side chat UI.</code>
<code class="kr">const</code> <code class="nx">http</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"http"</code><code class="p">);</code>
<code class="kr">const</code> <code class="nx">fs</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"fs"</code><code class="p">);</code>
<code class="kr">const</code> <code class="nx">url</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"url"</code><code class="p">);</code>

<code class="c1">// The HTML file for the chat client. Used below.</code>
<code class="kr">const</code> <code class="nx">clientHTML</code> <code class="o">=</code> <code class="nx">fs</code><code class="p">.</code><code class="nx">readFileSync</code><code class="p">(</code><code class="s2">"chatClient.html"</code><code class="p">);</code>

<code class="c1">// An array of ServerResponse objects that we're going to send events to</code>
<code class="kd">let</code> <code class="nx">clients</code> <code class="o">=</code> <code class="p">[];</code>

<code class="c1">// Create a new server, and listen on port 8080.</code>
<code class="c1">// Connect to http://localhost:8080/ to use it.</code>
<code class="kd">let</code> <code class="nx">server</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">http</code><code class="p">.</code><code class="nx">Server</code><code class="p">();</code>
<code class="nx">server</code><code class="p">.</code><code class="nx">listen</code><code class="p">(</code><code class="mi">8080</code><code class="p">);</code>

<code class="c1">// When the server gets a new request, run this function</code>
<code class="nx">server</code><code class="p">.</code><code class="nx">on</code><code class="p">(</code><code class="s2">"request"</code><code class="p">,</code> <code class="p">(</code><code class="nx">request</code><code class="p">,</code> <code class="nx">response</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
    <code class="c1">// Parse the requested URL</code>
    <code class="kd">let</code> <code class="nx">pathname</code> <code class="o">=</code> <code class="nx">url</code><code class="p">.</code><code class="nx">parse</code><code class="p">(</code><code class="nx">request</code><code class="p">.</code><code class="nx">url</code><code class="p">).</code><code class="nx">pathname</code><code class="p">;</code>

    <code class="c1">// If the request was for "/", send the client-side chat UI.</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">pathname</code> <code class="o">===</code> <code class="s2">"/"</code><code class="p">)</code> <code class="p">{</code>  <code class="c1">// A request for the chat UI</code>
        <code class="nx">response</code><code class="p">.</code><code class="nx">writeHead</code><code class="p">(</code><code class="mi">200</code><code class="p">,</code> <code class="p">{</code><code class="s2">"Content-Type"</code><code class="o">:</code> <code class="s2">"text/html"</code><code class="p">}).</code><code class="nx">end</code><code class="p">(</code><code class="nx">clientHTML</code><code class="p">);</code>
    <code class="p">}</code>
    <code class="c1">// Otherwise send a 404 error for any path other than "/chat" or for</code>
    <code class="c1">// any method other than "GET" and "POST"</code>
    <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">pathname</code> <code class="o">!==</code> <code class="s2">"/chat"</code> <code class="o">||</code>
             <code class="p">(</code><code class="nx">request</code><code class="p">.</code><code class="nx">method</code> <code class="o">!==</code> <code class="s2">"GET"</code> <code class="o">&amp;&amp;</code> <code class="nx">request</code><code class="p">.</code><code class="nx">method</code> <code class="o">!==</code> <code class="s2">"POST"</code><code class="p">))</code> <code class="p">{</code>
        <code class="nx">response</code><code class="p">.</code><code class="nx">writeHead</code><code class="p">(</code><code class="mi">404</code><code class="p">).</code><code class="nx">end</code><code class="p">();</code>
    <code class="p">}</code>
    <code class="c1">// If the /chat request was a GET, then a client is connecting.</code>
    <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">request</code><code class="p">.</code><code class="nx">method</code> <code class="o">===</code> <code class="s2">"GET"</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">acceptNewClient</code><code class="p">(</code><code class="nx">request</code><code class="p">,</code> <code class="nx">response</code><code class="p">);</code>
    <code class="p">}</code>
    <code class="c1">// Otherwise the /chat request is a POST of a new message</code>
    <code class="k">else</code> <code class="p">{</code>
        <code class="nx">broadcastNewMessage</code><code class="p">(</code><code class="nx">request</code><code class="p">,</code> <code class="nx">response</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">});</code>

<code class="c1">// This handles GET requests for the /chat endpoint which are generated when</code>
<code class="c1">// the client creates a new EventSource object (or when the EventSource</code>
<code class="c1">// reconnects automatically).</code>
<code class="kd">function</code> <code class="nx">acceptNewClient</code><code class="p">(</code><code class="nx">request</code><code class="p">,</code> <code class="nx">response</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// Remember the response object so we can send future messages to it</code>
    <code class="nx">clients</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="nx">response</code><code class="p">);</code>

    <code class="c1">// If the client closes the connection, remove the corresponding</code>
    <code class="c1">// response object from the array of active clients</code>
    <code class="nx">request</code><code class="p">.</code><code class="nx">connection</code><code class="p">.</code><code class="nx">on</code><code class="p">(</code><code class="s2">"end"</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="nx">clients</code><code class="p">.</code><code class="nx">splice</code><code class="p">(</code><code class="nx">clients</code><code class="p">.</code><code class="nx">indexOf</code><code class="p">(</code><code class="nx">response</code><code class="p">),</code> <code class="mi">1</code><code class="p">);</code>
        <code class="nx">response</code><code class="p">.</code><code class="nx">end</code><code class="p">();</code>
    <code class="p">});</code>

    <code class="c1">// Set headers and send an initial chat event to just this one client</code>
    <code class="nx">response</code><code class="p">.</code><code class="nx">writeHead</code><code class="p">(</code><code class="mi">200</code><code class="p">,</code> <code class="p">{</code>
        <code class="s2">"Content-Type"</code><code class="o">:</code> <code class="s2">"text/event-stream"</code><code class="p">,</code>
        <code class="s2">"Connection"</code><code class="o">:</code> <code class="s2">"keep-alive"</code><code class="p">,</code>
        <code class="s2">"Cache-Control"</code><code class="o">:</code> <code class="s2">"no-cache"</code>
    <code class="p">});</code>
    <code class="nx">response</code><code class="p">.</code><code class="nx">write</code><code class="p">(</code><code class="s2">"event: chat\ndata: Connected\n\n"</code><code class="p">);</code>

    <code class="c1">// Note that we intentionally do not call response.end() here.</code>
    <code class="c1">// Keeping the connection open is what makes Server-Sent Events work.</code>
<code class="p">}</code>

<code class="c1">// This function is called in response to POST requests to the /chat endpoint</code>
<code class="c1">// which clients send when users type a new message.</code>
<code class="nx">async</code> <code class="kd">function</code> <code class="nx">broadcastNewMessage</code><code class="p">(</code><code class="nx">request</code><code class="p">,</code> <code class="nx">response</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// First, read the body of the request to get the user's message</code>
    <code class="nx">request</code><code class="p">.</code><code class="nx">setEncoding</code><code class="p">(</code><code class="s2">"utf8"</code><code class="p">);</code>
    <code class="kd">let</code> <code class="nx">body</code> <code class="o">=</code> <code class="s2">""</code><code class="p">;</code>
    <code class="k">for</code> <code class="nx">await</code> <code class="p">(</code><code class="kd">let</code> <code class="nx">chunk</code> <code class="k">of</code> <code class="nx">request</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">body</code> <code class="o">+=</code> <code class="nx">chunk</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// Once we've read the body send an empty response and close the connection</code>
    <code class="nx">response</code><code class="p">.</code><code class="nx">writeHead</code><code class="p">(</code><code class="mi">200</code><code class="p">).</code><code class="nx">end</code><code class="p">();</code>

    <code class="c1">// Format the message in text/event-stream format, prefixing each</code>
    <code class="c1">// line with "data: "</code>
    <code class="kd">let</code> <code class="nx">message</code> <code class="o">=</code> <code class="s2">"data: "</code> <code class="o">+</code> <code class="nx">body</code><code class="p">.</code><code class="nx">replace</code><code class="p">(</code><code class="s2">"\n"</code><code class="p">,</code> <code class="s2">"\ndata: "</code><code class="p">);</code>

    <code class="c1">// Give the message data a prefix that defines it as a "chat" event</code>
    <code class="c1">// and give it a double newline suffix that marks the end of the event.</code>
    <code class="kd">let</code> <code class="nx">event</code> <code class="o">=</code> <code class="sb">`event: chat</code><code class="err">\</code><code class="sb">n</code><code class="si">${</code><code class="nx">message</code><code class="si">}</code><code class="err">\</code><code class="sb">n</code><code class="err">\</code><code class="sb">n`</code><code class="p">;</code>

    <code class="c1">// Now send this event to all listening clients</code>
    <code class="nx">clients</code><code class="p">.</code><code class="nx">forEach</code><code class="p">(</code><code class="nx">client</code> <code class="o">=&gt;</code> <code class="nx">client</code><code class="p">.</code><code class="nx">write</code><code class="p">(</code><code class="nx">event</code><code class="p">));</code>
<code class="p">}</code></pre></div>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.11.3 WebSockets"><div class="sect2" id="websockets">
<h2>15.11.3 WebSockets</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="networking" data-tertiary="WebSocket API" id="idm46198496282728"></a><a data-type="indexterm" data-primary="networking" data-secondary="WebSocket API" id="idm46198496281432"></a><a data-type="indexterm" data-primary="WebSocket API" data-secondary="overview of" id="idm46198496280488"></a> WebSocket API is a simple interface to a complex and powerful network
protocol. WebSockets allow JavaScript code in the browser to easily
exchange text and binary messages with a server. As with Server-Sent
Events, the client must establish the connection, but once the
connection is established, the server can asynchronously send messages
to the client. Unlike SSE, binary messages are supported, and messages
can be sent in both directions, not just from server to client.</p>

<p>The network protocol that enables WebSockets is a kind of extension to
HTTP. Although the WebSocket API is reminiscent of low-level network
sockets, connection endpoints are not identified by IP address and
port. Instead, when you want to connect to a service using the WebSocket
protocol, you specify the service with a URL, just as you would for a
web service. WebSocket URLs begin with <code>wss://</code> instead of <code>https://</code>,
however. (Browsers typically restrict WebSockets to only work in pages
loaded over secure <code>https://</code> connections).</p>

<p>To establish a WebSocket connection, the browser first establishes an
HTTP connection and sends the server an <code>Upgrade: websocket</code> header
requesting that the connection be switched from the HTTP protocol to the
WebSocket protocol. What this means is that in order to use WebSockets
in your client-side JavaScript, you will need to be working with a web
server that also speaks the WebSocket protocol, and you will need to
have server-side code written to send and receive data using that
protocol. If your server is set up that way, then this section will
explain everything you need to know to handle the client-side end of the
connection. If your server does not support the WebSocket protocol,
consider using Server-Sent Events (<a data-type="xref" href="#sse">§15.11.2</a>) instead.</p>










<section data-type="sect3" data-pdf-bookmark="Creating, connecting, and disconnecting WebSockets"><div class="sect3" id="idm46198496068712">
<h3>Creating, connecting, and disconnecting WebSockets</h3>

<p>If<a data-type="indexterm" data-primary="WebSocket API" data-secondary="creating, connecting and disconnecting WebSockets" id="idm46198496067464"></a> you want to communicate with a WebSocket-enabled server, create a
WebSocket object, specifying the <code>wss://</code> URL that identifies the server
and service you want to use:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">socket</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">WebSocket</code><code class="p">(</code><code class="s2">"wss://example.com/stockticker"</code><code class="p">);</code></pre>

<p>When you create a WebSocket, the connection process begins
automatically. But a newly created WebSocket will not be connected when
it is first returned.</p>

<p>The <code>readyState</code> property of the socket
specifies what state the connection is in. This property can have the
following values:</p>
<dl>
<dt><code>WebSocket.CONNECTING</code></dt>
<dd>
<p>This WebSocket is connecting.</p>
</dd>
<dt><code>WebSocket.OPEN</code></dt>
<dd>
<p>This WebSocket is connected and ready for communication.</p>
</dd>
<dt><code>WebSocket.CLOSING</code></dt>
<dd>
<p>This WebSocket connection is being closed.</p>
</dd>
<dt><code>WebSocket.CLOSED</code></dt>
<dd>
<p>This WebSocket has been closed; no further
communication is possible. This state can also occur when the initial
connection attempt fails.</p>
</dd>
</dl>

<p>When a WebSocket transitions from the CONNECTING to the OPEN state, it
fires an “open” event, and you can listen for this event by setting the
<code>onopen</code> property of the WebSocket or by calling <code>addEventListener()</code> on
that object.</p>

<p>If a protocol or other error occurs for a WebSocket connection, the
WebSocket object fires an “error” event. You can set <code>onerror</code> to define
a handler, or, alternatively, use <code>addEventListener()</code>.</p>

<p>When you are done with a WebSocket, you can close the connection by
calling the <code>close()</code> method of the WebSocket object. When a WebSocket
changes to the CLOSED state, it fires a “close” event, and you can set
the <code>onclose</code> property to listen for this event.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Sending messages over a WebSocket"><div class="sect3" id="idm46198496044168">
<h3>Sending messages over a WebSocket</h3>

<p>To<a data-type="indexterm" data-primary="messaging" data-secondary="WebSocket API" data-tertiary="sending messages" id="idm46198496042872"></a><a data-type="indexterm" data-primary="WebSocket API" data-secondary="sending messages" id="idm46198496041592"></a> send a message to the server on the other end of a WebSocket
connection, simply invoke the <code>send()</code> method of the WebSocket
object. <code>send()</code> expects a single message argument, which can be a
string, Blob, ArrayBuffer, typed array, or DataView object.</p>

<p>The <code>send()</code> method buffers the specified message to be transmitted and
returns before the message is actually sent. The <code>bufferedAmount</code>
property of the WebSocket object specifies the number of bytes that are
buffered but not yet sent. (Surprisingly, WebSockets do not fire any
event when this value reaches 0.)</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Receiving messages from a WebSocket"><div class="sect3" id="idm46198496037624">
<h3>Receiving messages from a WebSocket</h3>

<p>To<a data-type="indexterm" data-primary="messaging" data-secondary="WebSocket API" data-tertiary="receiving messages" id="idm46198496036328"></a><a data-type="indexterm" data-primary="WebSocket API" data-secondary="receiving messages" id="idm46198496014984"></a> receive messages from a server over a WebSocket, register an event
handler for “message” events, either by setting the<a data-type="indexterm" data-primary="onmessage event" id="idm46198496013768"></a> <code>onmessage</code> property
of the WebSocket object, or by calling <code>addEventListener()</code>. The object
associated with a “message” event is a MessageEvent instance with a
<code>data</code> property that contains the server’s message. If the server sent
UTF-8 encoded text, then <code>event.data</code> will be a string containing that
text.</p>

<p>If the server sends a message that consists of binary data instead of
text, then the <code>data</code> property will (by default) be a Blob object
representing that data. If you prefer to receive binary messages as
ArrayBuffers instead of Blobs, set the <code>binaryType</code> property of the
WebSocket object to the string “arraybuffer.”</p>

<p>There are a number of Web APIs that use MessageEvent objects for
exchanging messages. Some of these APIs use the structured clone
algorithm (see <a data-type="xref" href="#structuredclone">“The Structured Clone Algorithm”</a>) to allow complex data structures as the
message payload. WebSockets is not one of those APIs: messages exchanged
over a WebSocket are either a single string of Unicode characters or a
single string of bytes (represented as a Blob or an ArrayBuffer).</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Protocol negotiation"><div class="sect3" id="idm46198496007960">
<h3>Protocol negotiation</h3>

<p>The<a data-type="indexterm" data-primary="WebSocket API" data-secondary="protocol negotiation" id="idm46198496006664"></a> WebSocket protocol enables the exchange of text and binary messages,
but says nothing at all about the structure or meaning of those
messages. Applications that use WebSockets must build their own
communication protocol on top of this simple message-exchange
mechanism. The use of <code>wss://</code> URLs helps with this: each URL will
typically have its own rules for how messages are to be exchanged. If
you write code to connect to <code>wss://example.com/stockticker</code>, then you
probably know that you will be receiving messages about stock prices.</p>

<p>Protocols tend to evolve, however. If a hypothetical stock quotation
protocol is updated, you can define a new URL and connect to the updated
service as <code>wss://example.com/stockticker/v2</code>. URL-based versioning is
not always sufficient, however. With complex protocols that have evolved
over time, you may end up with deployed servers that support multiple
versions of the protocol and deployed clients that support a different
set of protocol versions.</p>

<p>Anticipating this situation, the WebSocket protocol and API include an application-level protocol negotiation feature. When you call the
<code>WebSocket()</code> constructor, the <code>wss://</code> URL is the first argument, but
you can also pass an array of strings as the second argument. If you do
this, you are specifying a list of application protocols that you know
how to handle and asking the server to pick one. During the connection
process, the server will choose one of the protocols (or will fail with
an error if it does not support any of the client’s options). Once the
connection has been established, the <code>protocol</code> property of the
WebSocket object specifies which protocol version the server chose.<a data-type="indexterm" data-primary="" data-startref="net15" id="idm46198496000584"></a><a data-type="indexterm" data-primary="" data-startref="WBnet15" id="idm46198495999608"></a></p>
</div></section>



</div></section>





</div></section>













<section data-type="sect1" class="less_space pagebreak-before" data-pdf-bookmark="15.12 Storage"><div class="sect1" id="storage">
<h1>15.12 Storage</h1>

<p>Web<a data-type="indexterm" data-primary="web browser host environment" data-secondary="storage" id="WBstorage15"></a><a data-type="indexterm" data-primary="storage" id="storage15"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="storage" data-tertiary="overview of" id="idm46198495994120"></a><a data-type="indexterm" data-primary="storage" data-secondary="overview of" id="idm46198495992888"></a> applications can use browser APIs to store data locally on the
user’s computer. This client-side storage serves to give the web
browser a memory. Web apps can store user preferences, for example, or
even store their complete state, so that they can resume exactly where
you left off at the end of your last visit. Client-side storage is
segregated by origin, so pages from one site can’t read the data stored
by pages from another site. But two pages from the same site can share
storage and use it as a communication mechanism. Data input in a
form on one page can be displayed in a table on another page, for
example. Web applications can choose the lifetime of the data they
store: data can be stored temporarily so that it is retained only until
the window closes or the browser exits, or it can be saved on the user’s
computer and stored permanently so that it is available months or years
later.</p>

<p>There<a data-type="indexterm" data-primary="client-side storage" id="idm46198495990504"></a> are a number of forms of client-side storage:</p>
<dl>
<dt>Web Storage</dt>
<dd>
<p>The Web Storage API consists of the <code>localStorage</code> and
<code>sessionStorage</code> objects, which are essentially persistent objects
that map string keys to string values. Web Storage is very easy to
use and is suitable for storing large (but not huge) amounts of
data.</p>
</dd>
<dt>Cookies</dt>
<dd>
<p>Cookies are an old client-side storage mechanism that was
designed for use by server-side scripts. An awkward JavaScript API
makes cookies scriptable on the client side, but they’re hard to
use and suitable only for storing small amounts of textual
data. Also, any data stored as cookies is always transmitted to the
server with every HTTP request, even if the data is only of interest
to the client.</p>
</dd>
<dt>IndexedDB</dt>
<dd>
<p>IndexedDB is an asynchronous API to an object database that
supports indexing.</p>
</dd>
</dl>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198495983480">
<h5>Storage, Security, and Privacy</h5>
<p>Web<a data-type="indexterm" data-primary="security" data-secondary="client-side storage" id="idm46198495982136"></a><a data-type="indexterm" data-primary="passwords" id="idm46198495981128"></a><a data-type="indexterm" data-primary="financial account numbers" id="idm46198495980456"></a><a data-type="indexterm" data-primary="sensitive information" id="idm46198495979720"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="storage" data-tertiary="security and privacy" id="idm46198495979048"></a><a data-type="indexterm" data-primary="storage" data-secondary="security and privacy" id="idm46198495977816"></a> browsers often offer to remember web passwords for you, and they
store them safely in encrypted form on the device. But none of the forms
of client-side data storage described in this chapter involve
encryption: you should assume that anything your web applications save
resides on the user’s device in unencrypted form. Stored data is
therefore accessible to curious users who share access to the device
and to malicious software (such as spyware) that exists on the
device. For this reason, no form of client-side storage should ever be
used for passwords, financial account numbers, or other similarly
sensitive information.</p>
</div></aside>








<section data-type="sect2" data-pdf-bookmark="15.12.1 localStorage and sessionStorage"><div class="sect2" id="storageapi">
<h2>15.12.1 localStorage and sessionStorage</h2>

<p>The <code>localStorage</code> and <code>sessionStorage</code> properties<a data-type="indexterm" data-primary="web browser host environment" data-secondary="storage" data-tertiary="localStorage and sessionStorage" id="idm46198495973016"></a><a data-type="indexterm" data-primary="storage" data-secondary="localStorage and sessionStorage" id="idm46198495971656"></a><a data-type="indexterm" data-primary="localStorage property" id="idm46198495970696"></a><a data-type="indexterm" data-primary="sessionStorage property" id="idm46198495970024"></a> of the Window object
refer to Storage objects. A Storage object behaves much like a regular
JavaScript object, except that:</p>

<ul>
<li>
<p>The property values of Storage objects must be strings.</p>
</li>
<li>
<p>The properties stored in a Storage object persist. If you set a
property of the localStorage object and then the user reloads the
page, the value you saved in that property is still available to your
program.</p>
</li>
</ul>

<p>You can use the localStorage object like this, for example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">name</code> <code class="o">=</code> <code class="nx">localStorage</code><code class="p">.</code><code class="nx">username</code><code class="p">;</code>         <code class="c1">// Query a stored value.</code>
<code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">name</code> <code class="o">=</code> <code class="nx">prompt</code><code class="p">(</code><code class="s2">"What is your name?"</code><code class="p">);</code>  <code class="c1">// Ask the user a question.</code>
    <code class="nx">localStorage</code><code class="p">.</code><code class="nx">username</code> <code class="o">=</code> <code class="nx">name</code><code class="p">;</code>         <code class="c1">// Store the user's response.</code>
<code class="p">}</code></pre>

<p>You can use the <code>delete</code> operator to remove properties from
<code>localStorage</code> and <code>sessionStorage</code>, and you can use a <code>for/in</code> loop or
<code>Object.keys()</code> to enumerate the properties of a Storage object. If you
want to remove all properties of a storage object, call the <code>clear()</code>
method:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">localStorage</code><code class="p">.</code><code class="nx">clear</code><code class="p">();</code></pre>

<p>Storage objects also define <code>getItem()</code>, <code>setItem()</code>, and <code>deleteItem()</code>
methods, which you can use instead of direct property access and the
<code>delete</code> operator if you want to.</p>

<p>Keep in mind that the properties of Storage objects can only store
strings. If you want to store and retrieve other kinds of
data, you’ll have to encode and decode it yourself.</p>

<p>For example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// If you store a number, it is automatically converted to a string.</code>
<code class="c1">// Don't forget to parse it when retrieving it from storage.</code>
<code class="nx">localStorage</code><code class="p">.</code><code class="nx">x</code> <code class="o">=</code> <code class="mi">10</code><code class="p">;</code>
<code class="kd">let</code> <code class="nx">x</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">localStorage</code><code class="p">.</code><code class="nx">x</code><code class="p">);</code>

<code class="c1">// Convert a Date to a string when setting, and parse it when getting</code>
<code class="nx">localStorage</code><code class="p">.</code><code class="nx">lastRead</code> <code class="o">=</code> <code class="p">(</code><code class="k">new</code> <code class="nb">Date</code><code class="p">()).</code><code class="nx">toUTCString</code><code class="p">();</code>
<code class="kd">let</code> <code class="nx">lastRead</code> <code class="o">=</code> <code class="k">new</code> <code class="nb">Date</code><code class="p">(</code><code class="nb">Date</code><code class="p">.</code><code class="nx">parse</code><code class="p">(</code><code class="nx">localStorage</code><code class="p">.</code><code class="nx">lastRead</code><code class="p">));</code>

<code class="c1">// JSON makes a convenient encoding for any primitive or data structure</code>
<code class="nx">localStorage</code><code class="p">.</code><code class="nx">data</code> <code class="o">=</code> <code class="nx">JSON</code><code class="p">.</code><code class="nx">stringify</code><code class="p">(</code><code class="nx">data</code><code class="p">);</code>  <code class="c1">// Encode and store</code>
<code class="kd">let</code> <code class="nx">data</code> <code class="o">=</code> <code class="nx">JSON</code><code class="p">.</code><code class="nx">parse</code><code class="p">(</code><code class="nx">localStorage</code><code class="p">.</code><code class="nx">data</code><code class="p">);</code>  <code class="c1">// Retrieve and decode.</code></pre>










<section data-type="sect3" data-pdf-bookmark="Storage lifetime and scope"><div class="sect3" id="storagelifetimescope">
<h3>Storage lifetime and scope</h3>

<p>The difference between <code>localStorage</code> and <code>sessionStorage</code> involves the
lifetime and scope of the storage. Data stored through <code>localStorage</code>
is permanent: it does not expire and remains stored on the user’s
device until a web app deletes it or the user asks the browser
(through some browser-specific UI) to delete it.</p>

<p><code>localStorage</code> is scoped to the document origin. As explained in
<a data-type="xref" href="#sameoriginpolicy">“The same-origin policy”</a>, the origin of a document is defined by its
protocol, hostname, and port. All documents with the same origin share
the same <code>localStorage</code> data (regardless of the origin of the scripts
that actually access <code>localStorage</code>). They can read each other’s
data, and they can overwrite each other’s data. But documents with
different origins can never read or overwrite each other’s data (even if
they’re both running a script from the same third-party server).</p>

<p>Note that <code>localStorage</code> is also scoped by browser implementation. If
you visit a site using Firefox and then visit again using
Chrome (for example), any data stored during the first visit will not be
accessible during the second visit.</p>

<p>Data stored through <code>sessionStorage</code> has a different lifetime than data
stored through <code>localStorage</code>: it has the same lifetime as the
top-level window or browser tab in which the script that stored it is
running. When the window or tab is permanently closed, any data stored
through <code>sessionStorage</code> is deleted. (Note, however, that modern
browsers have the ability to reopen recently closed tabs and restore
the last browsing session, so the lifetime of these tabs and their
associated <code>sessionStorage</code> may be longer than it seems.)</p>

<p>Like <code>localStorage</code>, <code>sessionStorage</code> is scoped to the document origin
so that documents with different origins will never share
<code>sessionStorage</code>. But <code>sessionStorage</code> is also scoped on a per-window
basis. If a user has two browser tabs displaying documents from the
same origin, those two tabs have separate <code>sessionStorage</code> data: the
scripts running in one tab cannot read or overwrite the data written by
scripts in the other tab, even if both tabs are visiting exactly the
same page and are running exactly the same scripts.</p>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Storage events"><div class="sect3" id="storageevents">
<h3>Storage events</h3>

<p>Whenever the data stored in <code>localStorage</code> changes, the browser triggers
a “storage” event on any other Window objects to which that data is
visible (but not on the window that made the change). If a browser has
two tabs open to pages with the same origin, and one of those pages
stores a value in <code>localStorage</code>, the other tab will receive a “storage” event.</p>

<p>Register a handler for “storage” events either by setting <code>window.onstorage</code> or
by calling <code>window.addEventListener()</code> with event type “storage”.</p>

<p>The event object associated with a “storage” event has some important
properties:</p>
<dl>
<dt><code>key</code></dt>
<dd>
<p>The name or key of the item that was set or removed. If the
<code>clear()</code> method was called, this property will be <code>null</code>.</p>
</dd>
<dt><code>newValue</code></dt>
<dd>
<p>Holds the new value of the item, if there is one. If
<code>removeItem()</code> was called, this property will not be present.</p>
</dd>
<dt><code>oldValue</code></dt>
<dd>
<p>Holds the old value of an existing item that changed or was
deleted. If a new property (with no old value) is added, then this
property will not be present in the event object.</p>
</dd>
<dt><code>storageArea</code></dt>
<dd>
<p>The Storage object that changed. This is usually the
<code>localStorage</code> object.</p>
</dd>
<dt><code>url</code></dt>
<dd>
<p>The URL (as a string) of the document whose script made this
storage change.</p>
</dd>
</dl>

<p>Note that <code>localStorage</code> and the “storage” event can serve as a
broadcast mechanism by which a browser sends a message to all windows
that are currently visiting the same website. If a user requests that a
website stop performing animations, for example, the site might store
that preference in <code>localStorage</code> so that it can honor it in future
visits. And by storing the preference, it generates an event that
allows other windows displaying the same site to honor the request as
well.</p>

<p>As another example, imagine a web-based image-editing application
that allows the user to display tool palettes in separate windows. When
the user selects a tool, the application uses <code>localStorage</code> to save
the current state and to generate a notification to other windows that
a new tool has been selected.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.12.2 Cookies"><div class="sect2" id="cookies">
<h2>15.12.2 Cookies</h2>

<p>A <em>cookie</em> is<a data-type="indexterm" data-primary="web browser host environment" data-secondary="storage" data-tertiary="cookies" id="idm46198495814248"></a><a data-type="indexterm" data-primary="storage" data-secondary="cookies" id="idm46198495813000"></a><a data-type="indexterm" data-primary="cookies" data-secondary="definition of term" id="idm46198495812056"></a> a small amount of named data stored by the web browser and
associated with a particular web page or website. Cookies were designed
for server-side programming, and at the lowest level, they are
implemented as an extension to the HTTP protocol.  Cookie data is
automatically transmitted between the web browser and web server, so
server-side scripts can read and write cookie values that are stored on
the client. This section demonstrates how client-side scripts can also
manipulate cookies using the <code>cookie</code> property of the Document object.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198495809960">
<h5>Why “Cookie”?</h5>
<p>The<a data-type="indexterm" data-primary="cookies" data-secondary="origin of name" id="idm46198495808632"></a> name “cookie” does not have a lot of significance, but it is not
used without precedent. In the annals of computing history, the term
“cookie” or “magic cookie” has been used to refer to a small chunk
of data, particularly a chunk of privileged or secret data, akin to a
password, that proves identity or permits access. In JavaScript,
cookies are used to save state and can establish a kind of identity for
a web browser. Cookies in JavaScript do not use any kind of
cryptography, however, and are not secure in any way (although
transmitting them across an <code>https:</code> connection helps).</p>
</div></aside>

<p>The<a data-type="indexterm" data-primary="cookies" data-secondary="API for manipulating" id="idm46198495805944"></a> API for manipulating cookies is an old and cryptic one.
There are no methods involved: cookies are queried, set, and deleted by
reading and writing the <code>cookie</code> property of the Document object using
specially formatted strings. The lifetime and scope of each cookie can
be individually specified with cookie attributes. These attributes are
also specified with specially formatted strings set on the same
<code>cookie</code> property.</p>

<p>The subsections that follow explain how to query and set cookie values
and attributes.</p>










<section data-type="sect3" data-pdf-bookmark="Reading cookies"><div class="sect3" id="idm46198495803000">
<h3>Reading cookies</h3>

<p>When<a data-type="indexterm" data-primary="cookies" data-secondary="reading" id="idm46198495801432"></a> you read the <code>document.cookie</code> property, it returns a string that
contains all the cookies that apply to the current document. The string
is a list of name/value pairs separated from each other by a semicolon
and a space. The cookie value is just the value itself and does not
include any of the attributes that may be associated with that
cookie. (We’ll talk about attributes next.) In order to make use of the
<code>document.cookie</code> property, you must typically call the <code>split()</code> method
to break it into individual name/value pairs.</p>

<p>Once you have extracted the value of a cookie from the <code>cookie</code>
property, you must interpret that value based on whatever format or
encoding was used by the cookie’s creator. You might, for example, pass
the cookie value to <code>decodeURIComponent()</code> and then to <code>JSON.parse()</code>.</p>

<p>The code that follows defines a <code>getCookie()</code> function that parses the
<code>document.cookie</code> property and returns an object whose properties
specify the names and values of the document’s cookies:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Return the document's cookies as a Map object.</code>
<code class="c1">// Assume that cookie values are encoded with encodeURIComponent().</code>
<code class="kd">function</code> <code class="nx">getCookies</code><code class="p">()</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">cookies</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Map</code><code class="p">();</code>    <code class="c1">// The object we will return</code>
    <code class="kd">let</code> <code class="nx">all</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">cookie</code><code class="p">;</code>  <code class="c1">// Get all cookies in one big string</code>
    <code class="kd">let</code> <code class="nx">list</code> <code class="o">=</code> <code class="nx">all</code><code class="p">.</code><code class="nx">split</code><code class="p">(</code><code class="s2">"; "</code><code class="p">);</code> <code class="c1">// Split into individual name/value pairs</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">cookie</code> <code class="k">of</code> <code class="nx">list</code><code class="p">)</code> <code class="p">{</code>   <code class="c1">// For each cookie in that list</code>
        <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">cookie</code><code class="p">.</code><code class="nx">includes</code><code class="p">(</code><code class="s2">"="</code><code class="p">))</code> <code class="k">continue</code><code class="p">;</code> <code class="c1">// Skip if there is no = sign</code>
        <code class="kd">let</code> <code class="nx">p</code> <code class="o">=</code> <code class="nx">cookie</code><code class="p">.</code><code class="nx">indexOf</code><code class="p">(</code><code class="s2">"="</code><code class="p">);</code>         <code class="c1">// Find the first = sign</code>
        <code class="kd">let</code> <code class="nx">name</code> <code class="o">=</code> <code class="nx">cookie</code><code class="p">.</code><code class="nx">substring</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="nx">p</code><code class="p">);</code>   <code class="c1">// Get cookie name</code>
        <code class="kd">let</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">cookie</code><code class="p">.</code><code class="nx">substring</code><code class="p">(</code><code class="nx">p</code><code class="o">+</code><code class="mi">1</code><code class="p">);</code>   <code class="c1">// Get cookie value</code>
        <code class="nx">value</code> <code class="o">=</code> <code class="nb">decodeURIComponent</code><code class="p">(</code><code class="nx">value</code><code class="p">);</code>   <code class="c1">// Decode the value</code>
        <code class="nx">cookies</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">value</code><code class="p">);</code>            <code class="c1">// Remember cookie name and value</code>
    <code class="p">}</code>
    <code class="k">return</code> <code class="nx">cookies</code><code class="p">;</code>
<code class="p">}</code></pre>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Cookie attributes: lifetime and scope"><div class="sect3" id="idm46198495792472">
<h3>Cookie attributes: lifetime and scope</h3>

<p>In<a data-type="indexterm" data-primary="cookies" data-secondary="lifetime and scope attributes" id="idm46198495791096"></a> addition to a name and a value, each cookie has optional attributes
that control its lifetime and scope. Before we can describe how to set
cookies with JavaScript, we need to explain cookie attributes.</p>

<p>Cookies are transient by default; the values they store last for the
duration of the web browser session but are lost when the user exits the
browser. If you want a cookie to last beyond a single browsing session,
you must tell the browser how long (in seconds) you would like it to
retain the cookie by specifying a <code>max-age</code> attribute. If you specify a
lifetime, the browser will store cookies in a file and delete them only
once they expire.</p>

<p>Cookie visibility is scoped by document origin as <code>localStorage</code> and
<code>sessionStorage</code> are, but also by document path. This scope is
configurable through cookie attributes <code>path</code> and <code>domain</code>. By default,
a cookie is associated with, and accessible to, the web page that
created it and any other web pages in the same directory or any
subdirectories of that directory. If the web page
<em>example.com/catalog/index.html</em> creates a cookie, for example,
that cookie is also visible to <em>example.com/catalog/order.html</em>
and <em>example.com/catalog/widgets/index.html</em>, but it is not
visible to <em>example.com/about.html</em>.</p>

<p>This default visibility behavior is often exactly what you want.
Sometimes, though, you’ll want to use cookie values throughout a
website, regardless of which page creates the cookie. For instance, if
the user enters their mailing address in a form on one page, you may
want to save that address to use as the default the next time they
return to the page and also as the default in an entirely unrelated
form on another page where they are asked to enter a billing address. To
allow this usage, you specify a <code>path</code> for the cookie. Then, any web
page from the same web server whose URL begins with the path prefix you
specified can share the cookie. For example, if a cookie set by
<em>example.com/catalog/widgets/index.html</em> has its path set to “/catalog”, that cookie is also visible to <em>example.com/catalog/order.html</em>. Or, if
the path is set to “/”, the cookie is visible to any page in the
<em>example.com</em> domain, giving the cookie a scope like that of
<code>localStorage</code>.</p>

<p>By default, cookies are scoped by document origin. Large websites may
want cookies to be shared across subdomains, however. For example, the
server at 
<span class="keep-together"><em>order.example.com</em></span> may need to read cookie values set from
<em>catalog.example.com</em>. This is where the <code>domain</code> attribute comes in.
If a cookie created by a page on <em>catalog.example.com</em> sets its <code>path</code>
attribute to “/” and its <code>domain</code> attribute to “.example.com,” that
cookie is available to all web pages on <em>catalog.example.com</em>,
<em>orders.example.com</em>, and any other server in the <em>example.com</em> domain.
Note that you cannot set the domain of a cookie to a domain other than a
parent domain of your server.</p>

<p>The final cookie attribute is a boolean attribute named <code>secure</code> that
specifies how cookie values are transmitted over the network. By
default, cookies are insecure, which means that they are transmitted
over a normal, insecure HTTP connection. If a cookie is marked secure,
however, it is transmitted only when the browser and server are
connected via HTTPS or another secure protocol.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198495453368">
<h5>Cookie Limitations</h5>
<p>Cookies<a data-type="indexterm" data-primary="cookies" data-secondary="limitations of" id="idm46198495452040"></a> are intended for storage of small amounts of data by server-side
scripts, and that data is transferred to the server each time a relevant
URL is requested. The standard that defines cookies encourages browser
manufacturers to allow unlimited numbers of cookies of unrestricted size
but does not require browsers to retain more than 300 cookies total, 20
cookies per web server, or 4 KB of data per cookie (both name and value
count toward this 4 KB limit). In practice, browsers allow many more
than 300 cookies total, but the 4 KB size limit may still be enforced by
some.</p>
</div></aside>
</div></section>













<section data-type="sect3" data-pdf-bookmark="Storing cookies"><div class="sect3" id="idm46198495450056">
<h3>Storing cookies</h3>

<p>To<a data-type="indexterm" data-primary="cookies" data-secondary="storing" id="idm46198495448520"></a> associate a transient cookie value with the current document, simply
set the <code>cookie</code> property to a <code>name=value</code> string. For example:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nb">document</code><code class="p">.</code><code class="nx">cookie</code> <code class="o">=</code> <code class="sb">`version=</code><code class="si">${</code><code class="nb">encodeURIComponent</code><code class="p">(</code><code class="nb">document</code><code class="p">.</code><code class="nx">lastModified</code><code class="p">)</code><code class="si">}</code><code class="sb">`</code><code class="p">;</code></pre>

<p>The next time you read the <code>cookie</code> property, the name/value pair you
stored is included in the list of cookies for the document. Cookie
values cannot include semicolons, commas, or whitespace. For this
reason, you may want to use the core JavaScript global function
<code>encodeURIComponent()</code> to encode the value before storing it in the
cookie. If you do this, you’ll have to use the corresponding
<code>decodeURIComponent()</code> function when you read the cookie value.</p>

<p>A cookie written with a simple name/value pair lasts for the current
web-browsing session but is lost when the user exits the browser. To
create a cookie that can last across browser sessions, specify its
lifetime (in seconds) with a <code>max-age</code> attribute. You can do this by
setting the <code>cookie</code> property to a string of the form: <code>name=value;
max-age=seconds</code>. The following function sets a cookie with an optional
<code>max-age</code> attribute:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Store the name/value pair as a cookie, encoding the value with</code>
<code class="c1">// encodeURIComponent() in order to escape semicolons, commas, and spaces.</code>
<code class="c1">// If daysToLive is a number, set the max-age attribute so that the cookie</code>
<code class="c1">// expires after the specified number of days. Pass 0 to delete a cookie.</code>
<code class="kd">function</code> <code class="nx">setCookie</code><code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">value</code><code class="p">,</code> <code class="nx">daysToLive</code><code class="o">=</code><code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">cookie</code> <code class="o">=</code> <code class="sb">`</code><code class="si">${</code><code class="nx">name</code><code class="si">}</code><code class="sb">=</code><code class="si">${</code><code class="nb">encodeURIComponent</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code><code class="si">}</code><code class="sb">`</code><code class="p">;</code>
    <code class="k">if</code> <code class="p">(</code><code class="nx">daysToLive</code> <code class="o">!==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">cookie</code> <code class="o">+=</code> <code class="sb">`; max-age=</code><code class="si">${</code><code class="nx">daysToLive</code><code class="o">*</code><code class="mi">60</code><code class="o">*</code><code class="mi">60</code><code class="o">*</code><code class="mi">24</code><code class="si">}</code><code class="sb">`</code><code class="p">;</code>
    <code class="p">}</code>
    <code class="nb">document</code><code class="p">.</code><code class="nx">cookie</code> <code class="o">=</code> <code class="nx">cookie</code><code class="p">;</code>
<code class="p">}</code></pre>

<p>Similarly, you can set the <code>path</code> and <code>domain</code> attributes of a cookie
by appending strings of the form <code>;path=value</code> or <code>;domain=value</code> to
the string that you set on the <code>document.cookie</code> property. To set the
<code>secure</code> property, simply append <code>;secure</code>.</p>

<p>To change the value of a cookie, set its value again using the same
name, path, and domain along with the new value. You can change the
lifetime of a cookie when you change its value by specifying a new
<code>max-age</code> attribute.</p>

<p>To delete a cookie, set it again using the same name, path, and domain,
specifying an arbitrary (or empty) value, and a <code>max-age</code> attribute of
0.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.12.3 IndexedDB"><div class="sect2" id="indexeddb">
<h2>15.12.3 IndexedDB</h2>

<p>Web<a data-type="indexterm" data-primary="web browser host environment" data-secondary="storage" data-tertiary="IndexedDB" id="idm46198495265864"></a><a data-type="indexterm" data-primary="storage" data-secondary="IndexedDB" id="idm46198495264616"></a><a data-type="indexterm" data-primary="IndexedDB" id="index15"></a> application architecture has traditionally featured HTML, CSS, and
JavaScript on the client and a database on the server. You may find it
surprising, therefore, to learn that the web platform includes a simple
object database with a JavaScript API for persistently storing
JavaScript objects on the user’s computer and retrieving them as
needed.</p>

<p>IndexedDB is an object database, not a relational database, and it is
much simpler than databases that support SQL queries. It is more
powerful, efficient, and robust than the key/value storage provided by
the <code>localStorage</code>, however. Like the <code>localStorage</code>, IndexedDB
databases are scoped to the origin of the containing document: two web
pages with the same origin can access each other’s data, but web pages
from different origins cannot.</p>

<p>Each origin can have any number of IndexedDB databases. Each one has a
name that must be unique within the origin. In the IndexedDB API, a
database is simply a collection of named <em>object stores</em>. As the name
implies, an object store stores objects. Objects are serialized into
the object store using the structured clone algorithm (see
<a data-type="xref" href="#structuredclone">“The Structured Clone Algorithm”</a>), which means that the objects you store can have
properties whose values are Maps, Sets, or typed arrays. Each object
must have a <em>key</em> by which it can be sorted and retrieved from the
store. Keys must be unique—two objects in the same store may not have
the same key—and they must have a natural ordering so that they can be
sorted. JavaScript strings, numbers, and Date objects are valid
keys. An IndexedDB database can automatically generate a unique key
for each object you insert into the database. Often, though, the
objects you insert into an object store will already have a property
that is suitable for use as a key. In this case, you specify a “key
path” for that property when you create the object
store. Conceptually, a key path is a value that tells the database how
to extract an object’s key from the object.</p>

<p>In addition to retrieving objects from an object store by their primary
key value, you may want to be able to search based on the value of
other properties in the object. In order to be able to do this, you can
define any number of <em>indexes</em> on the object store. (The ability to
index an object store explains the name “IndexedDB.”) Each index
defines a secondary key for the stored objects. These indexes are not
generally unique, and multiple objects may match a single key value.</p>

<p>IndexedDB provides atomicity guarantees: queries and updates to the
database are grouped within a <em>transaction</em> so that they all succeed
together or all fail together and never leave the database in an
undefined, partially updated state. Transactions in IndexedDB are
simpler than in many database APIs; we’ll mention them again later.</p>

<p>Conceptually, the IndexedDB API is quite simple. To query or update a
database, you first open the database you want (specifying it by name).
Next, you create a transaction object and use that object to look up
the desired object store within the database, also by name. Finally,
you look up an object by calling the <code>get()</code> method of the object store
or store a new object by calling <code>put()</code> (or by calling <code>add()</code>, if
you want to avoid overwriting existing objects).</p>

<p>If you want to look up the objects for a range of keys, you create an
IDBRange object that specifies the upper and lower bounds of the range
and pass it to the <code>getAll()</code> or <code>openCursor()</code> methods of the object
store.</p>

<p>If you want to make a query using a secondary key, you look up the
named index of the object store, then call the <code>get()</code>, <code>getAll()</code>,
or <code>openCursor()</code> methods of the index object, passing either a single
key or an IDBRange object.</p>

<p>This conceptual simplicity of the IndexedDB API is complicated,
however, by the fact that the API is asynchronous (so that web apps
can use it without blocking the browser’s main UI thread). IndexedDB
was defined before Promises were widely supported, so the API is
event-based rather than Promise-based, which means that it does not
work with <code>async</code> and <code>await</code>.</p>

<p>Creating transactions and looking up object stores and indexes are
synchronous operations. But opening a database, updating an object
store, and querying a store or index are all asynchronous
operations. These asynchronous methods all immediately return a
request object. The browser triggers a success or error event on the
request object when the request succeeds or fails, and you can define
handlers with the <code>onsuccess</code> and <code>onerror</code> properties. Inside an
<code>onsuccess</code> handler, the result of the operation is available as the
<code>result</code> property of the request object. Another useful event is the
“complete” event dispatched on transaction objects when a transaction
has completed successfully.</p>

<p>One convenient feature of this asynchronous API is that it simplifies
transaction management. The IndexedDB API forces you to create a
transaction object in order to get the object store on which you can
perform queries and updates. In a synchronous API, you would expect to
explicitly mark the end of the transaction by calling a <code>commit()</code>
method. But with IndexedDB, transactions are automatically committed
(if you do not explicitly abort them) when all the <code>onsuccess</code> event
handlers have run and there are no more pending asynchronous requests
that refer to that transaction.</p>

<p>There is one more event that is important to the IndexedDB API. When
you open a database for the first time, or when you increment the
version number of an existing database, IndexedDB fires an
“upgradeneeded” event on the request object returned by the
<code>indexedDB.open()</code> call. The job of the event handler for
“upgradeneeded” events is to define or update the schema for the new
database (or the new version of the existing database). For IndexedDB
databases, this means creating object stores and defining indexes on
those object stores. And in fact, the only time the IndexedDB API
allows you to create an object store or an index is in response to an
“upgradeneeded” event.</p>

<p>With this high-level overview of IndexedDB in mind, you should now be
able to understand <a data-type="xref" href="#zipcodeDatabase.js">Example 15-13</a>. That example uses IndexedDB to
create and query a database that maps US postal codes (zip codes) to US
cities. It demonstrates many, but <span class="keep-together">not all,</span> of the basic features of
IndexedDB. <a data-type="xref" href="#zipcodeDatabase.js">Example 15-13</a> is long, but<a data-type="indexterm" data-primary="" data-startref="storage15" id="idm46198495238344"></a><a data-type="indexterm" data-primary="" data-startref="WBstorage15" id="idm46198495237368"></a> well <span class="keep-together">commented.</span></p>
<div id="zipcodeDatabase.js" data-type="example">
<h5><span class="label">Example 15-13. </span>A IndexedDB database of US postal codes</h5>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// This utility function asynchronously obtains the database object (creating</code>
<code class="c1">// and initializing the DB if necessary) and passes it to the callback.</code>
<code class="kd">function</code> <code class="nx">withDB</code><code class="p">(</code><code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">request</code> <code class="o">=</code> <code class="nx">indexedDB</code><code class="p">.</code><code class="nx">open</code><code class="p">(</code><code class="s2">"zipcodes"</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code> <code class="c1">// Request v1 of the database</code>
    <code class="nx">request</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="nx">console</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code>   <code class="c1">// Log any errors</code>
    <code class="nx">request</code><code class="p">.</code><code class="nx">onsuccess</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>   <code class="c1">// Or call this when done</code>
        <code class="kd">let</code> <code class="nx">db</code> <code class="o">=</code> <code class="nx">request</code><code class="p">.</code><code class="nx">result</code><code class="p">;</code>  <code class="c1">// The result of the request is the database</code>
        <code class="nx">callback</code><code class="p">(</code><code class="nx">db</code><code class="p">);</code>             <code class="c1">// Invoke the callback with the database</code>
    <code class="p">};</code>

    <code class="c1">// If version 1 of the database does not yet exist, then this event</code>
    <code class="c1">// handler will be triggered. This is used to create and initialize</code>
    <code class="c1">// object stores and indexes when the DB is first created or to modify</code>
    <code class="c1">// them when we switch from one version of the DB schema to another.</code>
    <code class="nx">request</code><code class="p">.</code><code class="nx">onupgradeneeded</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">initdb</code><code class="p">(</code><code class="nx">request</code><code class="p">.</code><code class="nx">result</code><code class="p">,</code> <code class="nx">callback</code><code class="p">);</code> <code class="p">};</code>
<code class="p">}</code>

<code class="c1">// withDB() calls this function if the database has not been initialized yet.</code>
<code class="c1">// We set up the database and populate it with data, then pass the database to</code>
<code class="c1">// the callback function.</code>
<code class="c1">//</code>
<code class="c1">// Our zip code database includes one object store that holds objects like this:</code>
<code class="c1">//</code>
<code class="c1">//   {</code>
<code class="c1">//     zipcode: "02134",</code>
<code class="c1">//     city: "Allston",</code>
<code class="c1">//     state: "MA",</code>
<code class="c1">//   }</code>
<code class="c1">//</code>
<code class="c1">// We use the "zipcode" property as the database key and create an index for</code>
<code class="c1">// the city name.</code>
<code class="kd">function</code> <code class="nx">initdb</code><code class="p">(</code><code class="nx">db</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// Create the object store, specifying a name for the store and</code>
    <code class="c1">// an options object that includes the "key path" specifying the</code>
    <code class="c1">// property name of the key field for this store.</code>
    <code class="kd">let</code> <code class="nx">store</code> <code class="o">=</code> <code class="nx">db</code><code class="p">.</code><code class="nx">createObjectStore</code><code class="p">(</code><code class="s2">"zipcodes"</code><code class="p">,</code> <code class="c1">// store name</code>
                                     <code class="p">{</code> <code class="nx">keyPath</code><code class="o">:</code> <code class="s2">"zipcode"</code> <code class="p">});</code>

    <code class="c1">// Now index the object store by city name as well as by zip code.</code>
    <code class="c1">// With this method the key path string is passed directly as a</code>
    <code class="c1">// required argument rather than as part of an options object.</code>
    <code class="nx">store</code><code class="p">.</code><code class="nx">createIndex</code><code class="p">(</code><code class="s2">"cities"</code><code class="p">,</code> <code class="s2">"city"</code><code class="p">);</code>

    <code class="c1">// Now get the data we are going to initialize the database with.</code>
    <code class="c1">// The zipcodes.json data file was generated from CC-licensed data from</code>
    <code class="c1">// www.geonames.org: https://download.geonames.org/export/zip/US.zip</code>
    <code class="nx">fetch</code><code class="p">(</code><code class="s2">"zipcodes.json"</code><code class="p">)</code>                  <code class="c1">// Make an HTTP GET request</code>
        <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">response</code> <code class="o">=&gt;</code> <code class="nx">response</code><code class="p">.</code><code class="nx">json</code><code class="p">())</code>  <code class="c1">// Parse the body as JSON</code>
        <code class="p">.</code><code class="nx">then</code><code class="p">(</code><code class="nx">zipcodes</code> <code class="o">=&gt;</code> <code class="p">{</code>                 <code class="c1">// Get 40K zip code records</code>
            <code class="c1">// In order to insert zip code data into the database we need a</code>
            <code class="c1">// transaction object. To create our transaction object, we need</code>
            <code class="c1">// to specify which object stores we'll be using (we only have</code>
            <code class="c1">// one) and we need to tell it that we'll be doing writes to the</code>
            <code class="c1">// database, not just reads:</code>
            <code class="kd">let</code> <code class="nx">transaction</code> <code class="o">=</code> <code class="nx">db</code><code class="p">.</code><code class="nx">transaction</code><code class="p">([</code><code class="s2">"zipcodes"</code><code class="p">],</code> <code class="s2">"readwrite"</code><code class="p">);</code>
            <code class="nx">transaction</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="nx">console</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code>

            <code class="c1">// Get our object store from the transaction</code>
            <code class="kd">let</code> <code class="nx">store</code> <code class="o">=</code> <code class="nx">transaction</code><code class="p">.</code><code class="nx">objectStore</code><code class="p">(</code><code class="s2">"zipcodes"</code><code class="p">);</code>

            <code class="c1">// The best part about the IndexedDB API is that object stores</code>
            <code class="c1">// are *really* simple. Here's how we add (or update) our records:</code>
            <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">record</code> <code class="k">of</code> <code class="nx">zipcodes</code><code class="p">)</code> <code class="p">{</code> <code class="nx">store</code><code class="p">.</code><code class="nx">put</code><code class="p">(</code><code class="nx">record</code><code class="p">);</code> <code class="p">}</code>

            <code class="c1">// When the transaction completes successfully, the database</code>
            <code class="c1">// is initialized and ready for use, so we can call the</code>
            <code class="c1">// callback function that was originally passed to withDB()</code>
            <code class="nx">transaction</code><code class="p">.</code><code class="nx">oncomplete</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">callback</code><code class="p">(</code><code class="nx">db</code><code class="p">);</code> <code class="p">};</code>
        <code class="p">});</code>
<code class="p">}</code>

<code class="c1">// Given a zip code, use the IndexedDB API to asynchronously look up the city</code>
<code class="c1">// with that zip code, and pass it to the specified callback, or pass null if</code>
<code class="c1">// no city is found.</code>
<code class="kd">function</code> <code class="nx">lookupCity</code><code class="p">(</code><code class="nx">zip</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">withDB</code><code class="p">(</code><code class="nx">db</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="c1">// Create a read-only transaction object for this query. The</code>
        <code class="c1">// argument is an array of object stores we will need to use.</code>
        <code class="kd">let</code> <code class="nx">transaction</code> <code class="o">=</code> <code class="nx">db</code><code class="p">.</code><code class="nx">transaction</code><code class="p">([</code><code class="s2">"zipcodes"</code><code class="p">]);</code>

        <code class="c1">// Get the object store from the transaction</code>
        <code class="kd">let</code> <code class="nx">zipcodes</code> <code class="o">=</code> <code class="nx">transaction</code><code class="p">.</code><code class="nx">objectStore</code><code class="p">(</code><code class="s2">"zipcodes"</code><code class="p">);</code>

        <code class="c1">// Now request the object that matches the specified zipcode key.</code>
        <code class="c1">// The lines above were synchronous, but this one is async.</code>
        <code class="kd">let</code> <code class="nx">request</code> <code class="o">=</code> <code class="nx">zipcodes</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="nx">zip</code><code class="p">);</code>
        <code class="nx">request</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="nx">console</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code>  <code class="c1">// Log errors</code>
        <code class="nx">request</code><code class="p">.</code><code class="nx">onsuccess</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code>       <code class="c1">// Or call this function on success</code>
            <code class="kd">let</code> <code class="nx">record</code> <code class="o">=</code> <code class="nx">request</code><code class="p">.</code><code class="nx">result</code><code class="p">;</code>  <code class="c1">// This is the query result</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">record</code><code class="p">)</code> <code class="p">{</code> <code class="c1">// If we found a match, pass it to the callback</code>
                <code class="nx">callback</code><code class="p">(</code><code class="sb">`</code><code class="si">${</code><code class="nx">record</code><code class="p">.</code><code class="nx">city</code><code class="si">}</code><code class="sb">, </code><code class="si">${</code><code class="nx">record</code><code class="p">.</code><code class="nx">state</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
            <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>     <code class="c1">// Otherwise, tell the callback that we failed</code>
                <code class="nx">callback</code><code class="p">(</code><code class="kc">null</code><code class="p">);</code>
            <code class="p">}</code>
        <code class="p">};</code>
    <code class="p">});</code>
<code class="p">}</code>

<code class="c1">// Given the name of a city, use the IndexedDB API to asynchronously</code>
<code class="c1">// look up all zip code records for all cities (in any state) that have</code>
<code class="c1">// that (case-sensitive) name.</code>
<code class="kd">function</code> <code class="nx">lookupZipcodes</code><code class="p">(</code><code class="nx">city</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">withDB</code><code class="p">(</code><code class="nx">db</code> <code class="o">=&gt;</code> <code class="p">{</code>
        <code class="c1">// As above, we create a transaction and get the object store</code>
        <code class="kd">let</code> <code class="nx">transaction</code> <code class="o">=</code> <code class="nx">db</code><code class="p">.</code><code class="nx">transaction</code><code class="p">([</code><code class="s2">"zipcodes"</code><code class="p">]);</code>
        <code class="kd">let</code> <code class="nx">store</code> <code class="o">=</code> <code class="nx">transaction</code><code class="p">.</code><code class="nx">objectStore</code><code class="p">(</code><code class="s2">"zipcodes"</code><code class="p">);</code>

        <code class="c1">// This time we also get the city index of the object store</code>
        <code class="kd">let</code> <code class="nx">index</code> <code class="o">=</code> <code class="nx">store</code><code class="p">.</code><code class="nx">index</code><code class="p">(</code><code class="s2">"cities"</code><code class="p">);</code>

        <code class="c1">// Ask for all matching records in the index with the specified</code>
        <code class="c1">// city name, and when we get them we pass them to the callback.</code>
        <code class="c1">// If we expected more results, we might use openCursor() instead.</code>
        <code class="kd">let</code> <code class="nx">request</code> <code class="o">=</code> <code class="nx">index</code><code class="p">.</code><code class="nx">getAll</code><code class="p">(</code><code class="nx">city</code><code class="p">);</code>
        <code class="nx">request</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="nx">console</code><code class="p">.</code><code class="nx">error</code><code class="p">;</code>
        <code class="nx">request</code><code class="p">.</code><code class="nx">onsuccess</code> <code class="o">=</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="p">{</code> <code class="nx">callback</code><code class="p">(</code><code class="nx">request</code><code class="p">.</code><code class="nx">result</code><code class="p">);</code> <code class="p">};</code>
    <code class="p">});</code>
<code class="p">}</code></pre></div>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.13 Worker Threads and Messaging"><div class="sect1" id="webworkers">
<h1>15.13 Worker Threads and Messaging</h1>

<p>One<a data-type="indexterm" data-primary="web browser host environment" data-secondary="worker threads and messaging" id="WBworker15"></a><a data-type="indexterm" data-primary="" data-startref="index15" id="idm46198495230888"></a><a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" id="Mworker15"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="overview of" id="idm46198494930312"></a><a data-type="indexterm" data-primary="threading" id="idm46198494929368"></a><a data-type="indexterm" data-primary="threading" data-see="also Worker API" id="idm46198494928696"></a><a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="overview of" id="idm46198494927752"></a> of the fundamental features of JavaScript is that it is
single-threaded: a browser will never run two event handlers at the same
time, and it will never trigger a timer while an event handler is
running, for example. Concurrent updates to application state or to the
document are simply not possible, and client-side programmers do not
need to think about, or even understand, concurrent programming. A
corollary is that client-side JavaScript functions must not run too
long; otherwise, they will tie up the event loop and the web browser will
become unresponsive to user input. This is the reason that <code>fetch()</code> is
an asynchronous function, for example.</p>

<p>Web browsers very carefully relax the single-thread requirement with the
Worker class: instances of this class represent threads that run
concurrently with the main thread and the event loop. Workers live in a
self-contained execution environment with a completely independent
global object and no access to the Window or Document objects. Workers
can communicate with the main thread only through asynchronous message
passing. This means that concurrent modifications of the DOM remain
impossible, but it also means that you can write long-running functions
that do not stall the event loop and hang the browser. Creating a new
worker is not a heavyweight operation like opening a new browser window,
but workers are not flyweight “fibers” either, and it does not make
sense to create new workers to perform trivial operations. Complex web
applications may find it useful to create tens of workers, but it is
unlikely that an application with hundreds or thousands of workers would
be practical.</p>

<p>Workers are useful when your application needs to perform computationally
intensive tasks, such as image processing. Using a worker moves tasks
like this off the main thread so that the browser does not become
unresponsive. And workers also offer the possibility of dividing the
work among multiple threads. But workers are also useful when you have
to perform frequent moderately intensive computations. Suppose, for
example, that you’re implementing a simple in-browser code editor, and
want to include syntax highlighting. To get the highlighting right, you
need to parse the code on every keystroke. But if you do that on the
main thread, it is likely that the parsing code will prevent the
event handlers that respond to the user’s key strokes from running
promptly and the user’s typing experience will be sluggish.</p>

<p>As with any threading API, there are two parts to the Worker API.  The
first is the Worker object: this is what a worker looks like from the
outside, to the thread that creates it. The second is the
WorkerGlobalScope: this is the global object for a new worker, and it is
what a worker thread looks like, on the inside, to itself.</p>

<p>The following sections cover Worker and WorkerGlobalScope and also explain
the message-passing API that allows workers to communicate with the main
thread and each other. The same communication API is used to exchange
messages between a document and <code>&lt;iframe&gt;</code> elements contained in the
document, and this is covered in the following sections as well.</p>








<section data-type="sect2" data-pdf-bookmark="15.13.1 Worker Objects"><div class="sect2" id="idm46198494921016">
<h2>15.13.1 Worker Objects</h2>

<p>To<a data-type="indexterm" data-primary="onmessage event" id="onmessage15"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="Worker objects" id="idm46198494918280"></a><a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="Worker objects" id="idm46198494917336"></a> create a new worker, call the <code>Worker()</code> constructor, passing a
URL that specifies the JavaScript code that the worker is to run:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">dataCruncher</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Worker</code><code class="p">(</code><code class="s2">"utils/cruncher.js"</code><code class="p">);</code></pre>

<p>If you specify a relative URL, it is resolved relative to the URL of
the document that contains the script that called the <code>Worker()</code>
constructor. If you specify an absolute URL, it must have the same
origin (same protocol, host, and port) as that containing document.</p>

<p>Once you have a Worker object, you can send data to it with
<code>postMessage()</code>. The value you pass to <code>postMessage()</code> will be copied
using the structured clone algorithm (see <a data-type="xref" href="#structuredclone">“The Structured Clone Algorithm”</a>), and the
resulting copy will be delivered to the worker via a<a data-type="indexterm" data-primary="message events" id="mevent15a"></a> message event:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">dataCruncher</code><code class="p">.</code><code class="nx">postMessage</code><code class="p">(</code><code class="s2">"/api/data/to/crunch"</code><code class="p">);</code></pre>

<p>Here we’re just passing a single string message, but you can also use
objects, arrays, typed arrays, Maps, Sets, and so on. You can receive
messages from a worker by listening for “message” events on the Worker
object:</p>

<pre data-type="programlisting" data-code-language="js"><code class="nx">dataCruncher</code><code class="p">.</code><code class="nx">onmessage</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="p">{</code>
    <code class="kd">let</code> <code class="nx">stats</code> <code class="o">=</code> <code class="nx">e</code><code class="p">.</code><code class="nx">data</code><code class="p">;</code>  <code class="c1">// The message is the data property of the event</code>
    <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="sb">`Average: </code><code class="si">${</code><code class="nx">stats</code><code class="p">.</code><code class="nx">mean</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
<code class="p">}</code></pre>

<p>Like all event targets, Worker objects define the standard
<code>addEventListener()</code> and <code>removeEventListener()</code> methods, and you can
use these in place of the <code>onmessage</code>.</p>

<p>In addition to <code>postMessage()</code>, Worker objects have just one other
method, <code>terminate()</code>, which forces a worker thread to stop running.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.13.2 The Global Object in Workers"><div class="sect2" id="idm46198494920392">
<h2>15.13.2 The Global Object in Workers</h2>

<p>When<a data-type="indexterm" data-primary="Worker API" data-secondary="WorkerGlobalScope object" id="idm46198494829416"></a><a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="WorkerGlobalScope object" id="idm46198494828440"></a> you create a new worker with the <code>Worker()</code> constructor, you
specify the URL of a file of JavaScript code. That code is executed in
a new, pristine JavaScript execution environment, isolated
from the script that created the worker. The global object for that new
execution environment is a WorkerGlobalScope object. A
WorkerGlobalScope is something more than the core JavaScript global
object, but less than a full-blown client-side Window object.</p>

<p>The WorkerGlobalScope object has a <code>postMessage()</code> method and an
<code>onmessage</code> event handler property that are just like those of the
Worker object but work in the opposite direction: calling
<code>postMessage()</code> inside a worker generates a message event outside the
worker, and messages sent from outside the worker are turned into events
and delivered to the <code>onmessage</code> handler. Because the WorkerGlobalScope
is the global object for a worker, <code>postMessage()</code> and <code>onmessage</code> look
like a global function and global variable to worker code.<a data-type="indexterm" data-primary="" data-startref="onmessage15" id="idm46198494822872"></a><a data-type="indexterm" data-primary="" data-startref="mevent15a" id="idm46198494821896"></a></p>

<p>If you pass an object as the second argument to the <code>Worker()</code>
constructor, and if that object has a <code>name</code> property, then the value of
that property becomes the value of the <code>name</code> property in the worker’s
global object. A worker might include this name in any messages it
prints with <code>console.warn()</code> or <code>console.error()</code>.</p>

<p>The <code>close()</code> function allows a worker to terminate itself, and it is
similar in effect to the <code>terminate()</code> method of a Worker object.</p>

<p>Since WorkerGlobalScope is the global object for workers, it has all of
the properties of the core JavaScript global object, such as the JSON
object, the <code>isNaN()</code> function, and the <code>Date()</code> constructor. In
addition, however, WorkerGlobalScope also has the following properties
of the client-side Window object:</p>

<ul>
<li>
<p><code>self</code> is a reference to the global object itself. WorkerGlobalScope
is not a Window object and does not define a <code>window</code> property.</p>
</li>
<li>
<p>The timer methods <code>setTimeout()</code>, <code>clearTimeout()</code>, <code>setInterval()</code>,
and <code>clearInterval()</code>.</p>
</li>
<li>
<p>A <code>location</code> property that describes the URL that was passed to the
<code>Worker()</code> constructor. This property refers to a Location object, just
as the <code>location</code> property of a Window does. The Location object has
properties <code>href</code>, <code>protocol</code>, <code>host</code>, <code>hostname</code>, <code>port</code>, <code>pathname</code>,
<code>search</code>, and <code>hash</code>. In a worker, these properties are read-only,
however.</p>
</li>
<li>
<p>A <code>navigator</code> property that refers to an object with properties like
those of the Navigator object of a window. A worker’s Navigator object
has the properties <code>appName</code>, <code>appVersion</code>, <code>platform</code>, <code>userAgent</code>, and
<code>onLine</code>.</p>
</li>
<li>
<p>The usual event target methods <code>addEventListener()</code> and
<code>removeEventListener()</code>.</p>
</li>
</ul>

<p>Finally, the WorkerGlobalScope object includes important client-side
JavaScript APIs including the Console object, the <code>fetch()</code> function,
and the IndexedDB API. WorkerGlobalScope also includes the <code>Worker()</code>
constructor, which means that worker threads can create their own
workers.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.13.3 Importing Code into a Worker"><div class="sect2" id="idm46198494762936">
<h2>15.13.3 Importing Code into a Worker</h2>

<p>Workers<a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="importing code" id="idm46198494761400"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="importing code" id="idm46198494760152"></a> were defined in web browsers before JavaScript had a module
system, so workers have a unique system for including additional
code. WorkerGlobalScope defines <code>importScripts()</code> as a global function
that all workers have access to:</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Before we start working, load the classes and utilities we'll need</code>
<code class="nx">importScripts</code><code class="p">(</code><code class="s2">"utils/Histogram.js"</code><code class="p">,</code> <code class="s2">"utils/BitSet.js"</code><code class="p">);</code></pre>

<p><code>importScripts()</code> takes one or more URL arguments, each of which should
refer to a file of JavaScript code. Relative URLs are resolved relative
to the URL that was passed to the <code>Worker()</code> constructor (not relative
to the containing document). <code>importScripts()</code> synchronously loads and
executes these files one after the other, in the order in which they
were specified. If loading a script causes a network error, or if
executing throws an error of any sort, none of the subsequent scripts
are loaded or executed. A script loaded with <code>importScripts()</code> can
itself call <code>importScripts()</code> to load the files it depends on. Note,
however, that <code>importScripts()</code> does not try to keep track of what
scripts have already loaded and does nothing to prevent dependency
cycles.</p>

<p><code>importScripts()</code> is a synchronous function: it does not return until
all of the scripts have loaded and executed. You can start using the
scripts you loaded as soon as <code>importScripts()</code> returns: there is no
need for a callback, event handler, <code>then()</code> method or <code>await</code>. Once you
have internalized the asynchronous nature of client-side JavaScript, it
feels strange to go back to simple, synchronous programming
again. But that is the beauty of threads: you can use a blocking
function call in a worker without blocking the event loop in the main
thread, and without blocking the computations being concurrently
performed in other workers.</p>
<aside data-type="sidebar" epub:type="sidebar"><div class="sidebar" id="idm46198494746744">
<h5>Modules in Workers</h5>
<p>In<a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="modules" id="idm46198494740632"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="modules" id="idm46198494739384"></a><a data-type="indexterm" data-primary="modules" data-secondary="using in workers" id="idm46198494738440"></a> order to use modules in workers, you must pass a second argument to
the <code>Worker()</code> constructor. This second argument must be an object with
a <code>type</code> property set to the string “module.” Passing a <code>type:"module"</code>
option to the <code>Worker()</code> constructor is much like using the
<code>type="module"</code> attribute on an HTML <code>&lt;script&gt;</code> tag: it means that the
code should be interpreted as a module and that <code>import</code> declarations
are allowed.</p>

<p>When a worker loads a module instead of a traditional script, the
WorkerGlobalScope does not define the <code>importScripts()</code> function.</p>

<p>Note that as of early 2020, Chrome is the only browser that supports
true modules and <code>import</code> declarations in workers.</p>
</div></aside>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.13.4 Worker Execution Model"><div class="sect2" id="idm46198494732424">
<h2>15.13.4 Worker Execution Model</h2>

<p>Worker<a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="execution model" id="idm46198494731096"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="execution model" id="idm46198494729800"></a><a data-type="indexterm" data-primary="message events" id="message15b"></a> threads run their code (and all imported scripts or modules)
synchronously from top to bottom, and then enter an asynchronous phase
in which they respond to events and timers. If a worker registers a
“message” event handler, it will never exit as long as there is a
possibility that message events will still arrive. But if a worker
doesn’t listen for messages, it will run until there are no further
pending tasks (such as <code>fetch()</code> promises and timers) and all
task-related callbacks have been called. Once all registered callbacks
have been called, there is no way a worker can begin a new task, so it
is safe for the thread to exit, which it will do automatically. A worker
can also explicitly shut itself down by calling the global <code>close()</code>
function. Note that there are no properties or methods on the Worker
object that specify whether a worker thread is still running or not, so
workers should not close themselves without somehow coordinating this
with their parent thread.</p>










<section data-type="sect3" data-pdf-bookmark="Errors in Workers"><div class="sect3" id="idm46198494725832">
<h3>Errors in Workers</h3>

<p>If<a data-type="indexterm" data-primary="Worker API" data-secondary="errors" id="idm46198494724280"></a> an exception occurs in a worker and is not caught by any <code>catch</code>
clause, then an “error” event is triggered on the global object of the
worker. If this event is handled and the handler calls the
<code>preventDefault()</code> method of the event object, the error propagation
ends. Otherwise, the “error” event is fired on the Worker object. If
<code>preventDefault()</code> is called there, then propagation ends. Otherwise, an
error message is printed in the developer console and the onerror
handler (<a data-type="xref" href="#onerror">§15.1.7</a>) of the Window object is invoked.</p>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// Handle uncaught worker errors with a handler inside the worker.</code>
<code class="nx">self</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="sb">`Error in worker at </code><code class="si">${</code><code class="nx">e</code><code class="p">.</code><code class="nx">filename</code><code class="si">}</code><code class="sb">:</code><code class="si">${</code><code class="nx">e</code><code class="p">.</code><code class="nx">lineno</code><code class="si">}</code><code class="sb">: </code><code class="si">${</code><code class="nx">e</code><code class="p">.</code><code class="nx">message</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
    <code class="nx">e</code><code class="p">.</code><code class="nx">preventDefault</code><code class="p">();</code>
<code class="p">};</code>

<code class="c1">// Or, handle uncaught worker errors with a handler outside the worker.</code>
<code class="nx">worker</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="p">{</code>
    <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="sb">`Error in worker at </code><code class="si">${</code><code class="nx">e</code><code class="p">.</code><code class="nx">filename</code><code class="si">}</code><code class="sb">:</code><code class="si">${</code><code class="nx">e</code><code class="p">.</code><code class="nx">lineno</code><code class="si">}</code><code class="sb">: </code><code class="si">${</code><code class="nx">e</code><code class="p">.</code><code class="nx">message</code><code class="si">}</code><code class="sb">`</code><code class="p">);</code>
    <code class="nx">e</code><code class="p">.</code><code class="nx">preventDefault</code><code class="p">();</code>
<code class="p">};</code></pre>

<p>Like windows, workers can register a handler to be invoked when a
Promise is rejected and there is no <code>.catch()</code> function to handle
it. Within a worker you can detect this by defining a
<code>self.onunhandledrejection</code> function or by using <code>addEventListener()</code>
to register a global handler for “unhandledrejection” events. The
event object passed to this handler will have a <code>promise</code> property
whose value is the Promise object that rejected and a <code>reason</code>
property whose value is what would have been passed to a <code>.catch()</code>
function.</p>
</div></section>



</div></section>













<section data-type="sect2" data-pdf-bookmark="15.13.5 postMessage(), MessagePorts, and MessageChannels"><div class="sect2" id="messagechannel">
<h2>15.13.5 postMessage(), MessagePorts, and MessageChannels</h2>

<p>The<a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="postMessage(), MessagePorts and MessageChannels" id="idm46198494652424"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="postMessage(), MessagePorts and MessageChannels" id="idm46198494651208"></a><a data-type="indexterm" data-primary="postMessage() method" id="idm46198494650296"></a> <code>postMessage()</code> method of the Worker object and the global
<code>postMesage()</code> function defined inside a worker both work by invoking
the <code>postMessage()</code> methods of a pair of<a data-type="indexterm" data-primary="MessagePort objects" id="idm46198494648168"></a> MessagePort objects that are
automatically created along with the worker. Client-side JavaScript
can’t directly access these automatically created MessagePort objects,
but it can create new pairs of connected ports with the
<code>MessageChannel()</code> constructor:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">channel</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">MessageChannel</code><code class="p">;</code>                <code class="c1">// Create a new channel.</code>
<code class="kd">let</code> <code class="nx">myPort</code> <code class="o">=</code> <code class="nx">channel</code><code class="p">.</code><code class="nx">port1</code><code class="p">;</code>                      <code class="c1">// It has two ports</code>
<code class="kd">let</code> <code class="nx">yourPort</code> <code class="o">=</code> <code class="nx">channel</code><code class="p">.</code><code class="nx">port2</code><code class="p">;</code>                    <code class="c1">// connected to each other.</code>

<code class="nx">myPort</code><code class="p">.</code><code class="nx">postMessage</code><code class="p">(</code><code class="s2">"Can you hear me?"</code><code class="p">);</code>          <code class="c1">// A message posted to one will</code>
<code class="nx">yourPort</code><code class="p">.</code><code class="nx">onmessage</code> <code class="o">=</code> <code class="p">(</code><code class="nx">e</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">e</code><code class="p">.</code><code class="nx">data</code><code class="p">);</code> <code class="c1">// be received on the other.</code></pre>

<p>A<a data-type="indexterm" data-primary="MessageChannels" id="idm46198494645304"></a> MessageChannel is an object with <code>port1</code> and <code>port2</code> properties that
refer to a pair of connected MessagePort objects. A MessagePort is an
object with a <code>postMessage()</code> method and<a data-type="indexterm" data-primary="onmessage event" id="idm46198494597896"></a> an <code>onmessage</code> event handler
property. When <code>postMessage()</code> is called on
one port of a connected pair, a “message” event is fired on the other
port in the pair. You can receive these “message” events by setting the
<code>onmessage</code> property or by using <code>addEventListener()</code> to register a
listener for “message” events.<a data-type="indexterm" data-primary="" data-startref="message15b" id="idm46198494595096"></a></p>

<p>Messages sent to a port are queued until the <code>onmessage</code> property is
defined or until the <code>start()</code> method is called on the port. This
prevents messages sent by one end of the channel from being missed by
the other end. If you use <code>addEventListener()</code> with a MessagePort, don’t
forget to call <code>start()</code> or you may never see a message delivered.</p>

<p>All the <code>postMessage()</code> calls we’ve seen so far have taken a single
message argument. But the method also accepts an optional second
argument. This second argument is an array of items that are to be
transferred to the other end of the channel instead of having a copy
sent across the channel. Values that can be transferred instead of
copied are MessagePorts and ArrayBuffers. (Some browsers also
implement other transferable types, such as ImageBitmap and
OffscreenCanvas. These are not universally supported, however, and are
not covered in this book.) If the first argument to <code>postMessage()</code>
includes a MessagePort (nested anywhere within the message object),
then that MessagePort must also appear in the second argument. If you
do this, then the MessagePort will become available to the other end of
the channel and will immediately become nonfunctional on your
end. Suppose you have created a worker and want to have two channels
for communicating with it: one channel for ordinary data exchange and
one channel for high-priority messages. In the main thread, you might
create a MessageChannel, then call <code>postMessage()</code> on the worker to
pass one of the MessagePorts to it:</p>

<pre data-type="programlisting" data-code-language="js"><code class="kd">let</code> <code class="nx">worker</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Worker</code><code class="p">(</code><code class="s2">"worker.js"</code><code class="p">);</code>
<code class="kd">let</code> <code class="nx">urgentChannel</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">MessageChannel</code><code class="p">();</code>
<code class="kd">let</code> <code class="nx">urgentPort</code> <code class="o">=</code> <code class="nx">urgentChannel</code><code class="p">.</code><code class="nx">port1</code><code class="p">;</code>
<code class="nx">worker</code><code class="p">.</code><code class="nx">postMessage</code><code class="p">({</code> <code class="nx">command</code><code class="o">:</code> <code class="s2">"setUrgentPort"</code><code class="p">,</code> <code class="nx">value</code><code class="o">:</code> <code class="nx">urgentChannel</code><code class="p">.</code><code class="nx">port2</code> <code class="p">},</code>
                   <code class="p">[</code> <code class="nx">urgentChannel</code><code class="p">.</code><code class="nx">port2</code> <code class="p">]);</code>
<code class="c1">// Now we can receive urgent messages from the worker like this</code>
<code class="nx">urgentPort</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"message"</code><code class="p">,</code> <code class="nx">handleUrgentMessage</code><code class="p">);</code>
<code class="nx">urgentPort</code><code class="p">.</code><code class="nx">start</code><code class="p">();</code>  <code class="c1">// Start receiving messages</code>
<code class="c1">// And send urgent messages like this</code>
<code class="nx">urgentPort</code><code class="p">.</code><code class="nx">postMessage</code><code class="p">(</code><code class="s2">"test"</code><code class="p">);</code></pre>

<p>MessageChannels are also useful if you create two workers and want to
allow them to communicate directly with each other rather than requiring
code on the main thread to relay messages between them.</p>

<p>The other use of the second argument to <code>postMessage()</code> is to transfer
ArrayBuffers between workers without having to copy them. This is an
important performance enhancement for large ArrayBuffers like those
used to hold image data. When an ArrayBuffer is transferred over a
MessagePort, the ArrayBuffer becomes unusable in the original thread
so that there is no possibility of concurrent access to its contents.
If the first argument to <code>postMessage()</code> includes an ArrayBuffer, or
any value (such as a typed array) that has an ArrayBuffer, then that
buffer may appear as an array element in the second <code>postMessage()</code>
argument. If it does appear, then it will be transferred without
copying. If not, then the ArrayBuffer will be copied rather than
transferred. <a data-type="xref" href="#mandelbrotWorker.js">Example 15-14</a> will demonstrate
the use of this transfer technique with ArrayBuffers.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.13.6 Cross-Origin Messaging with postMessage()"><div class="sect2" id="crossoriginmessaging">
<h2>15.13.6 Cross-Origin Messaging with postMessage()</h2>

<p>There<a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="cross-origin messaging" id="idm46198494135240"></a><a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="cross-origin messaging" id="idm46198494133992"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="cross-origin messaging" id="idm46198494132760"></a> is another use case for the <code>postMessage()</code> method in client-side
JavaScript. It involves windows instead of workers, but there are enough
similarities between the two cases that we will describe the
<code>postMessage()</code> method of the Window object here.</p>

<p>When a document contains an <code>&lt;iframe&gt;</code> element, that element acts as an
embedded but independent window. The Element object that represents the
<code>&lt;iframe&gt;</code> has a <code>contentWindow</code> property that is the Window object for
the embedded document. And for scripts running within that nested
iframe, the <code>window.parent</code> property refers to the containing Window
object. When two windows display documents with the same origin, then
scripts in each of those windows have access to the contents of the
other window. But when the documents have different origins, the browser’s same-origin policy prevents JavaScript in one window from accessing
the content of another <span class="keep-together">window.</span></p>

<p>For<a data-type="indexterm" data-primary="message events" id="idm46198494126904"></a> workers, <code>postMessage()</code> provides a safe way for two independent
threads to communicate without sharing memory. For windows,
<code>postMessage()</code> provides a controlled way for two independent origins to
safely exchange messages. Even if the same-origin policy prevents your
script from seeing the content of another window, you can still call
<code>postMessage()</code> on that window, and doing so will cause a “message”
event to be triggered on that window, where it can be seen by the event
handlers in that window’s scripts.</p>

<p>The <code>postMessage()</code> method of a Window is a little different than the
<code>postMessage()</code> method of a Worker, however. The first argument is still an
arbitrary message that will be copied by the structured clone
algorithm. But the optional second argument listing objects to be
transferred instead of copied becomes an optional third argument. The
<code>postMessage()</code> method of a window takes a string as its required second
argument. This second argument should be an origin (a protocol, hostname,
and optional port) that specifies who you expect to be receiving the
message. If you pass the string “https://good.example.com” as the second
argument, but the window you are posting the message to actually
contains content from “https://malware.example.com,” then the message
you posted will not be delivered. If you are willing to send your
message to content from any origin, then you can pass the wildcard “*”
as the second argument.</p>

<p>JavaScript<a data-type="indexterm" data-primary="onmessage event" id="idm46198494121256"></a> code running inside a window or <code>&lt;iframe&gt;</code> can receive
messages posted to that window or frame by defining the <code>onmessage</code>
property of that window or by calling <code>addEventListener()</code> for “message”
events. As with workers, when you receive a “message” event for a window,
the <code>data</code> property of the event object is the message that was sent. In
addition, however, “message” events delivered to windows also define
<code>source</code> and <code>origin</code> properties. The <code>source</code> property specifies the
Window object that sent the event, and you can use
<code>event.source.postMessage()</code> to send a reply. The <code>origin</code> property
specifies the origin of the content in the source window. This is not
something the sender of the message can forge, and when you receive a
“message” event, you will typically want to verify that it is from an
origin you expect.<a data-type="indexterm" data-primary="" data-startref="WBworker15" id="idm46198494115688"></a><a data-type="indexterm" data-primary="" data-startref="Mworker15" id="idm46198494114712"></a></p>
</div></section>





</div></section>













<section data-type="sect1" data-pdf-bookmark="15.14 Example: The Mandelbrot Set"><div class="sect1" id="mandelbrot">
<h1>15.14 Example: The Mandelbrot Set</h1>

<p>This<a data-type="indexterm" data-primary="web browser host environment" data-secondary="Mandelbrot set example" id="WBmandel15"></a><a data-type="indexterm" data-primary="Mandelbrot set" id="mandel15"></a><a data-type="indexterm" data-primary="messaging" data-secondary="worker threads and messaging" data-tertiary="Mandelbrot set example" id="Mworkmandel15"></a><a data-type="indexterm" data-primary="Worker API" data-secondary="Mandelbrot set example" id="Wmandel15"></a> chapter on client-side JavaScript culminates with a long example
that demonstrates using workers and messaging to parallelize
computationally intensive tasks. But it is written to be an engaging,
real-world web application and also demonstrates a number of the other
APIs demonstrated in this chapter, including history management; use of
the ImageData class with a <code>&lt;canvas&gt;</code>; and the use of keyboard, pointer,
and resize events. It also demonstrates important core JavaScript
features, including generators and a sophisticated use of Promises.</p>

<p>The example is a program for displaying and exploring the Mandelbrot set,
a complex fractal that includes beautiful images like the one shown
in <a data-type="xref" href="#mandelbrot.png">Figure 15-16</a>.</p>

<figure><div id="mandelbrot.png" class="figure">
<img src="/library/view/javascript-the-definitive/9781491952016/assets/js7e_1515.png" alt="js7e 1515" width="1440" height="540">
<h6><span class="label">Figure 15-16. </span>A portion of the Mandelbrot set</h6>
</div></figure>

<p>The Mandelbrot set is defined as the set of points on the complex plane,
which, when put through a repeated process of complex multiplication and
addition, produce a value whose magnitude remains bounded. The contours
of the set are surprisingly complex, and computing which points are
members of the set and which are not is computationally intensive: to
produce a 500×500 image of the Mandelbrot set, you must individually
compute the membership of each of the 250,000 pixels in your image. And
to verify that the value associated with each pixel remains bounded, you
may have to repeat the process of complex multiplication 1,000 times or
more. (More iterations give more sharply defined boundaries for the
set; fewer iterations produce fuzzier boundaries.) With up to 250
million steps of complex arithmetic required to produce a high-quality
image of the Mandelbrot set, you can understand why using workers is a
valuable technique. <a data-type="xref" href="#mandelbrotWorker.js">Example 15-14</a> shows the worker code we
will use. This file is relatively compact: it is just the raw
computational muscle for the larger program. Two things are worth noting
about it, however:</p>

<ul>
<li>
<p>The worker creates an ImageData object to represent the rectangular
grid of pixels for which it is computing Mandelbrot set
membership. But instead of storing actual pixel values in the
ImageData, it uses a custom-typed array to treat each pixel as
a 32-bit integer. It stores the number of iterations required for each
pixel in this array. If the magnitude of the complex number computed
for each pixel becomes greater than four, then it is mathematically
guaranteed to grow without bounds from then on, and we say it has
“escaped.” So the value this worker returns for each pixel is the
number of iterations before the value escaped. We tell the worker the
maximum number of iterations it should try for each value, and pixels
that reach this maximum number are considered to be in the set.</p>
</li>
<li>
<p>The worker transfers the ArrayBuffer associated with the ImageData back
to the main thread so the memory associated with it does not need to
be copied.</p>
</li>
</ul>
<div id="mandelbrotWorker.js" data-type="example">
<h5><span class="label">Example 15-14. </span>Worker code for computing regions of the Mandelbrot set</h5>

<pre data-type="programlisting" data-code-language="js"><code class="c1">// This is a simple worker that receives a message from its parent thread,</code>
<code class="c1">// performs the computation described by that message and then posts the</code>
<code class="c1">// result of that computation back to the parent thread.</code>
<code class="nx">onmessage</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">message</code><code class="p">)</code> <code class="p">{</code>
    <code class="c1">// First, we unpack the message we received:</code>
    <code class="c1">//  - tile is an object with width and height properties. It specifies the</code>
    <code class="c1">//    size of the rectangle of pixels for which we will be computing</code>
    <code class="c1">//    Mandelbrot set membership.</code>
    <code class="c1">//  - (x0, y0) is the point in the complex plane that corresponds to the</code>
    <code class="c1">//    upper-left pixel in the tile.</code>
    <code class="c1">//  - perPixel is the pixel size in both the real and imaginary dimensions.</code>
    <code class="c1">//  - maxIterations specifies the maximum number of iterations we will</code>
    <code class="c1">//    perform before deciding that a pixel is in the set.</code>
    <code class="kr">const</code> <code class="p">{</code><code class="nx">tile</code><code class="p">,</code> <code class="nx">x0</code><code class="p">,</code> <code class="nx">y0</code><code class="p">,</code> <code class="nx">perPixel</code><code class="p">,</code> <code class="nx">maxIterations</code><code class="p">}</code> <code class="o">=</code> <code class="nx">message</code><code class="p">.</code><code class="nx">data</code><code class="p">;</code>
    <code class="kr">const</code> <code class="p">{</code><code class="nx">width</code><code class="p">,</code> <code class="nx">height</code><code class="p">}</code> <code class="o">=</code> <code class="nx">tile</code><code class="p">;</code>

    <code class="c1">// Next, we create an ImageData object to represent the rectangular array</code>
    <code class="c1">// of pixels, get its internal ArrayBuffer, and create a typed array view</code>
    <code class="c1">// of that buffer so we can treat each pixel as a single integer instead of</code>
    <code class="c1">// four individual bytes. We'll store the number of iterations for each</code>
    <code class="c1">// pixel in this iterations array. (The iterations will be transformed into</code>
    <code class="c1">// actual pixel colors in the parent thread.)</code>
    <code class="kr">const</code> <code class="nx">imageData</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">ImageData</code><code class="p">(</code><code class="nx">width</code><code class="p">,</code> <code class="nx">height</code><code class="p">);</code>
    <code class="kr">const</code> <code class="nx">iterations</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Uint32Array</code><code class="p">(</code><code class="nx">imageData</code><code class="p">.</code><code class="nx">data</code><code class="p">.</code><code class="nx">buffer</code><code class="p">);</code>

    <code class="c1">// Now we begin the computation. There are three nested for loops here.</code>
    <code class="c1">// The outer two loop over the rows and columns of pixels, and the inner</code>
    <code class="c1">// loop iterates each pixel to see if it "escapes" or not. The various</code>
    <code class="c1">// loop variables are the following:</code>
    <code class="c1">// - row and column are integers representing the pixel coordinate.</code>
    <code class="c1">// - x and y represent the complex point for each pixel: x + yi.</code>
    <code class="c1">// - index is the index in the iterations array for the current pixel.</code>
    <code class="c1">// - n tracks the number of iterations for each pixel.</code>
    <code class="c1">// - max and min track the largest and smallest number of iterations</code>
    <code class="c1">//   we've seen so far for any pixel in the rectangle.</code>
    <code class="kd">let</code> <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">,</code> <code class="nx">max</code> <code class="o">=</code> <code class="mi">0</code><code class="p">,</code> <code class="nx">min</code><code class="o">=</code><code class="nx">maxIterations</code><code class="p">;</code>
    <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">row</code> <code class="o">=</code> <code class="mi">0</code><code class="p">,</code> <code class="nx">y</code> <code class="o">=</code> <code class="nx">y0</code><code class="p">;</code> <code class="nx">row</code> <code class="o">&lt;</code> <code class="nx">height</code><code class="p">;</code> <code class="nx">row</code><code class="o">++</code><code class="p">,</code> <code class="nx">y</code> <code class="o">+=</code> <code class="nx">perPixel</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">column</code> <code class="o">=</code> <code class="mi">0</code><code class="p">,</code> <code class="nx">x</code> <code class="o">=</code> <code class="nx">x0</code><code class="p">;</code> <code class="nx">column</code> <code class="o">&lt;</code> <code class="nx">width</code><code class="p">;</code> <code class="nx">column</code><code class="o">++</code><code class="p">,</code> <code class="nx">x</code> <code class="o">+=</code> <code class="nx">perPixel</code><code class="p">)</code> <code class="p">{</code>
            <code class="c1">// For each pixel we start with the complex number c = x+yi.</code>
            <code class="c1">// Then we repeatedly compute the complex number z(n+1) based on</code>
            <code class="c1">// this recursive formula:</code>
            <code class="c1">//    z(0) = c</code>
            <code class="c1">//    z(n+1) = z(n)^2 + c</code>
            <code class="c1">// If |z(n)| (the magnitude of z(n)) is &gt; 2, then the</code>
            <code class="c1">// pixel is not part of the set and we stop after n iterations.</code>
            <code class="kd">let</code> <code class="nx">n</code><code class="p">;</code>             <code class="c1">// The number of iterations so far</code>
            <code class="kd">let</code> <code class="nx">r</code> <code class="o">=</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">i</code> <code class="o">=</code> <code class="nx">y</code><code class="p">;</code>  <code class="c1">// Start with z(0) set to c</code>
            <code class="k">for</code><code class="p">(</code><code class="nx">n</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">n</code> <code class="o">&lt;</code> <code class="nx">maxIterations</code><code class="p">;</code> <code class="nx">n</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
                <code class="kd">let</code> <code class="nx">rr</code> <code class="o">=</code> <code class="nx">r</code><code class="o">*</code><code class="nx">r</code><code class="p">,</code> <code class="nx">ii</code> <code class="o">=</code> <code class="nx">i</code><code class="o">*</code><code class="nx">i</code><code class="p">;</code> <code class="c1">// Square the two parts of z(n).</code>
                <code class="k">if</code> <code class="p">(</code><code class="nx">rr</code> <code class="o">+</code> <code class="nx">ii</code> <code class="o">&gt;</code> <code class="mi">4</code><code class="p">)</code> <code class="p">{</code>      <code class="c1">// If |z(n)|^2 is &gt; 4 then</code>
                    <code class="k">break</code><code class="p">;</code>              <code class="c1">// we've escaped and can stop iterating.</code>
                <code class="p">}</code>
                <code class="nx">i</code> <code class="o">=</code> <code class="mi">2</code><code class="o">*</code><code class="nx">r</code><code class="o">*</code><code class="nx">i</code> <code class="o">+</code> <code class="nx">y</code><code class="p">;</code>          <code class="c1">// Compute imaginary part of z(n+1).</code>
                <code class="nx">r</code> <code class="o">=</code> <code class="nx">rr</code> <code class="o">-</code> <code class="nx">ii</code> <code class="o">+</code> <code class="nx">x</code><code class="p">;</code>        <code class="c1">// And the real part of z(n+1).</code>
            <code class="p">}</code>
            <code class="nx">iterations</code><code class="p">[</code><code class="nx">index</code><code class="o">++</code><code class="p">]</code> <code class="o">=</code> <code class="nx">n</code><code class="p">;</code>    <code class="c1">// Remember # iterations for each pixel.</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&gt;</code> <code class="nx">max</code><code class="p">)</code> <code class="nx">max</code> <code class="o">=</code> <code class="nx">n</code><code class="p">;</code>       <code class="c1">// Track the maximum number we've seen.</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&lt;</code> <code class="nx">min</code><code class="p">)</code> <code class="nx">min</code> <code class="o">=</code> <code class="nx">n</code><code class="p">;</code>       <code class="c1">// And the minimum as well.</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// When the computation is complete, send the results back to the parent</code>
    <code class="c1">// thread. The imageData object will be copied, but the giant ArrayBuffer</code>
    <code class="c1">// it contains will be transferred for a nice performance boost.</code>
    <code class="nx">postMessage</code><code class="p">({</code><code class="nx">tile</code><code class="p">,</code> <code class="nx">imageData</code><code class="p">,</code> <code class="nx">min</code><code class="p">,</code> <code class="nx">max</code><code class="p">},</code> <code class="p">[</code><code class="nx">imageData</code><code class="p">.</code><code class="nx">data</code><code class="p">.</code><code class="nx">buffer</code><code class="p">]);</code>
<code class="p">};</code></pre></div>

<p>The Mandelbrot set viewer application that uses that worker code is
shown in <a data-type="xref" href="#mandelbrot.js">Example 15-15</a>. Now that you have nearly reached the end of
this chapter, this long example is something of a capstone experience that
brings together a number of important core and client-side JavaScript
features and APIs. The code is thoroughly commented, and I encourage you to
read it carefully.</p>
<div id="mandelbrot.js" data-type="example">
<h5><span class="label">Example 15-15. </span>A web application for displaying and exploring the Mandelbrot set</h5>

<pre data-type="programlisting" data-code-language="js"><code class="cm">/*</code>
<code class="cm"> * This class represents a subrectangle of a canvas or image. We use Tiles to</code>
<code class="cm"> * divide a canvas into regions that can be processed independently by Workers.</code>
<code class="cm"> */</code>
<code class="kr">class</code> <code class="nx">Tile</code> <code class="p">{</code>
    <code class="nx">constructor</code><code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">width</code><code class="p">,</code> <code class="nx">height</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">x</code> <code class="o">=</code> <code class="nx">x</code><code class="p">;</code>                     <code class="c1">// The properties of a Tile object</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">y</code> <code class="o">=</code> <code class="nx">y</code><code class="p">;</code>                     <code class="c1">// represent the position and size</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">width</code> <code class="o">=</code> <code class="nx">width</code><code class="p">;</code>             <code class="c1">// of the tile within a larger</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">height</code> <code class="o">=</code> <code class="nx">height</code><code class="p">;</code>           <code class="c1">// rectangle.</code>
    <code class="p">}</code>

    <code class="c1">// This static method is a generator that divides a rectangle of the</code>
    <code class="c1">// specified width and height into the specified number of rows and</code>
    <code class="c1">// columns and yields numRows*numCols Tile objects to cover the rectangle.</code>
    <code class="kr">static</code> <code class="o">*</code><code class="nx">tiles</code><code class="p">(</code><code class="nx">width</code><code class="p">,</code> <code class="nx">height</code><code class="p">,</code> <code class="nx">numRows</code><code class="p">,</code> <code class="nx">numCols</code><code class="p">)</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">columnWidth</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code><code class="nx">width</code> <code class="o">/</code> <code class="nx">numCols</code><code class="p">);</code>
        <code class="kd">let</code> <code class="nx">rowHeight</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code><code class="nx">height</code> <code class="o">/</code> <code class="nx">numRows</code><code class="p">);</code>

        <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">row</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">row</code> <code class="o">&lt;</code> <code class="nx">numRows</code><code class="p">;</code> <code class="nx">row</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
            <code class="kd">let</code> <code class="nx">tileHeight</code> <code class="o">=</code> <code class="p">(</code><code class="nx">row</code> <code class="o">&lt;</code> <code class="nx">numRows</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
                <code class="o">?</code> <code class="nx">rowHeight</code>                          <code class="c1">// height of most rows</code>
                <code class="o">:</code> <code class="nx">height</code> <code class="o">-</code> <code class="nx">rowHeight</code> <code class="o">*</code> <code class="p">(</code><code class="nx">numRows</code><code class="o">-</code><code class="mi">1</code><code class="p">);</code>  <code class="c1">// height of last row</code>
            <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">col</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">col</code> <code class="o">&lt;</code> <code class="nx">numCols</code><code class="p">;</code> <code class="nx">col</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
                <code class="kd">let</code> <code class="nx">tileWidth</code> <code class="o">=</code> <code class="p">(</code><code class="nx">col</code> <code class="o">&lt;</code> <code class="nx">numCols</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
                    <code class="o">?</code> <code class="nx">columnWidth</code>                    <code class="c1">// width of most columns</code>
                    <code class="o">:</code> <code class="nx">width</code> <code class="o">-</code> <code class="nx">columnWidth</code> <code class="o">*</code> <code class="p">(</code><code class="nx">numCols</code><code class="o">-</code><code class="mi">1</code><code class="p">);</code> <code class="c1">// and last column</code>

                <code class="k">yield</code> <code class="k">new</code> <code class="nx">Tile</code><code class="p">(</code><code class="nx">col</code> <code class="o">*</code> <code class="nx">columnWidth</code><code class="p">,</code> <code class="nx">row</code> <code class="o">*</code> <code class="nx">rowHeight</code><code class="p">,</code>
                               <code class="nx">tileWidth</code><code class="p">,</code> <code class="nx">tileHeight</code><code class="p">);</code>
            <code class="p">}</code>
        <code class="p">}</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="cm">/*</code>
<code class="cm"> * This class represents a pool of workers, all running the same code. The</code>
<code class="cm"> * worker code you specify must respond to each message it receives by</code>
<code class="cm"> * performing some kind of computation and then posting a single message with</code>
<code class="cm"> * the result of that computation.</code>
<code class="cm"> *</code>
<code class="cm"> * Given a WorkerPool and message that represents work to be performed, simply</code>
<code class="cm"> * call addWork(), with the message as an argument. If there is a Worker</code>
<code class="cm"> * object that is currently idle, the message will be posted to that worker</code>
<code class="cm"> * immediately. If there are no idle Worker objects, the message will be</code>
<code class="cm"> * queued and will be posted to a Worker when one becomes available.</code>
<code class="cm"> *</code>
<code class="cm"> * addWork() returns a Promise, which will resolve with the message recieved</code>
<code class="cm"> * from the work, or will reject if the worker throws an unhandled error.</code>
<code class="cm"> */</code>
<code class="kr">class</code> <code class="nx">WorkerPool</code> <code class="p">{</code>
    <code class="nx">constructor</code><code class="p">(</code><code class="nx">numWorkers</code><code class="p">,</code> <code class="nx">workerSource</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">idleWorkers</code> <code class="o">=</code> <code class="p">[];</code>       <code class="c1">// Workers that are not currently working</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">workQueue</code> <code class="o">=</code> <code class="p">[];</code>         <code class="c1">// Work not currently being processed</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">workerMap</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Map</code><code class="p">();</code>  <code class="c1">// Map workers to resolve and reject funcs</code>

        <code class="c1">// Create the specified number of workers, add message and error</code>
        <code class="c1">// handlers and save them in the idleWorkers array.</code>
        <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">numWorkers</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
            <code class="kd">let</code> <code class="nx">worker</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Worker</code><code class="p">(</code><code class="nx">workerSource</code><code class="p">);</code>
            <code class="nx">worker</code><code class="p">.</code><code class="nx">onmessage</code> <code class="o">=</code> <code class="nx">message</code> <code class="o">=&gt;</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">_workerDone</code><code class="p">(</code><code class="nx">worker</code><code class="p">,</code> <code class="kc">null</code><code class="p">,</code> <code class="nx">message</code><code class="p">.</code><code class="nx">data</code><code class="p">);</code>
            <code class="p">};</code>
            <code class="nx">worker</code><code class="p">.</code><code class="nx">onerror</code> <code class="o">=</code> <code class="nx">error</code> <code class="o">=&gt;</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">_workerDone</code><code class="p">(</code><code class="nx">worker</code><code class="p">,</code> <code class="nx">error</code><code class="p">,</code> <code class="kc">null</code><code class="p">);</code>
            <code class="p">};</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">idleWorkers</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">=</code> <code class="nx">worker</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// This internal method is called when a worker finishes working, either</code>
    <code class="c1">// by sending a message or by throwing an error.</code>
    <code class="nx">_workerDone</code><code class="p">(</code><code class="nx">worker</code><code class="p">,</code> <code class="nx">error</code><code class="p">,</code> <code class="nx">response</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Look up the resolve() and reject() functions for this worker</code>
        <code class="c1">// and then remove the worker's entry from the map.</code>
        <code class="kd">let</code> <code class="p">[</code><code class="nx">resolver</code><code class="p">,</code> <code class="nx">rejector</code><code class="p">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">workerMap</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="nx">worker</code><code class="p">);</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">workerMap</code><code class="p">.</code><code class="k">delete</code><code class="p">(</code><code class="nx">worker</code><code class="p">);</code>

        <code class="c1">// If there is no queued work, put this worker back in</code>
        <code class="c1">// the list of idle workers. Otherwise, take work from the queue</code>
        <code class="c1">// and send it to this worker.</code>
        <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">workQueue</code><code class="p">.</code><code class="nx">length</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">idleWorkers</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="nx">worker</code><code class="p">);</code>
        <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
            <code class="kd">let</code> <code class="p">[</code><code class="nx">work</code><code class="p">,</code> <code class="nx">resolver</code><code class="p">,</code> <code class="nx">rejector</code><code class="p">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">workQueue</code><code class="p">.</code><code class="nx">shift</code><code class="p">();</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">workerMap</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="nx">worker</code><code class="p">,</code> <code class="p">[</code><code class="nx">resolver</code><code class="p">,</code> <code class="nx">rejector</code><code class="p">]);</code>
            <code class="nx">worker</code><code class="p">.</code><code class="nx">postMessage</code><code class="p">(</code><code class="nx">work</code><code class="p">);</code>
        <code class="p">}</code>

        <code class="c1">// Finally, resolve or reject the promise associated with the worker.</code>
        <code class="nx">error</code> <code class="o">===</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">resolver</code><code class="p">(</code><code class="nx">response</code><code class="p">)</code> <code class="o">:</code> <code class="nx">rejector</code><code class="p">(</code><code class="nx">error</code><code class="p">);</code>
    <code class="p">}</code>

    <code class="c1">// This method adds work to the worker pool and returns a Promise that</code>
    <code class="c1">// will resolve with a worker's response when the work is done. The work</code>
    <code class="c1">// is a value to be passed to a worker with postMessage(). If there is an</code>
    <code class="c1">// idle worker, the work message will be sent immediately. Otherwise it</code>
    <code class="c1">// will be queued until a worker is available.</code>
    <code class="nx">addWork</code><code class="p">(</code><code class="nx">work</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">return</code> <code class="k">new</code> <code class="nb">Promise</code><code class="p">((</code><code class="nx">resolve</code><code class="p">,</code> <code class="nx">reject</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">idleWorkers</code><code class="p">.</code><code class="nx">length</code> <code class="o">&gt;</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
                <code class="kd">let</code> <code class="nx">worker</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">idleWorkers</code><code class="p">.</code><code class="nx">pop</code><code class="p">();</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">workerMap</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="nx">worker</code><code class="p">,</code> <code class="p">[</code><code class="nx">resolve</code><code class="p">,</code> <code class="nx">reject</code><code class="p">]);</code>
                <code class="nx">worker</code><code class="p">.</code><code class="nx">postMessage</code><code class="p">(</code><code class="nx">work</code><code class="p">);</code>
            <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">workQueue</code><code class="p">.</code><code class="nx">push</code><code class="p">([</code><code class="nx">work</code><code class="p">,</code> <code class="nx">resolve</code><code class="p">,</code> <code class="nx">reject</code><code class="p">]);</code>
            <code class="p">}</code>
        <code class="p">});</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="cm">/*</code>
<code class="cm"> * This class holds the state information necessary to render a Mandelbrot set.</code>
<code class="cm"> * The cx and cy properties give the point in the complex plane that is the</code>
<code class="cm"> * center of the image. The perPixel property specifies how much the real and</code>
<code class="cm"> * imaginary parts of that complex number changes for each pixel of the image.</code>
<code class="cm"> * The maxIterations property specifies how hard we work to compute the set.</code>
<code class="cm"> * Larger numbers require more computation but produce crisper images.</code>
<code class="cm"> * Note that the size of the canvas is not part of the state. Given cx, cy, and</code>
<code class="cm"> * perPixel we simply render whatever portion of the Mandelbrot set fits in</code>
<code class="cm"> * the canvas at its current size.</code>
<code class="cm"> *</code>
<code class="cm"> * Objects of this type are used with history.pushState() and are used to read</code>
<code class="cm"> * the desired state from a bookmarked or shared URL.</code>
<code class="cm"> */</code>
<code class="kr">class</code> <code class="nx">PageState</code> <code class="p">{</code>
    <code class="c1">// This factory method returns an initial state to display the entire set.</code>
    <code class="kr">static</code> <code class="nx">initialState</code><code class="p">()</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">PageState</code><code class="p">();</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">cx</code> <code class="o">=</code> <code class="o">-</code><code class="mf">0.5</code><code class="p">;</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">cy</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code> <code class="o">=</code> <code class="mi">3</code><code class="o">/</code><code class="nb">window</code><code class="p">.</code><code class="nx">innerHeight</code><code class="p">;</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code> <code class="o">=</code> <code class="mi">500</code><code class="p">;</code>
        <code class="k">return</code> <code class="nx">s</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// This factory method obtains state from a URL, or returns null if</code>
    <code class="c1">// a valid state could not be read from the URL.</code>
    <code class="kr">static</code> <code class="nx">fromURL</code><code class="p">(</code><code class="nx">url</code><code class="p">)</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">s</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">PageState</code><code class="p">();</code>
        <code class="kd">let</code> <code class="nx">u</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="nx">url</code><code class="p">);</code> <code class="c1">// Initialize state from the url's search params.</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">cx</code> <code class="o">=</code> <code class="nb">parseFloat</code><code class="p">(</code><code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"cx"</code><code class="p">));</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">cy</code> <code class="o">=</code> <code class="nb">parseFloat</code><code class="p">(</code><code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"cy"</code><code class="p">));</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code> <code class="o">=</code> <code class="nb">parseFloat</code><code class="p">(</code><code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"pp"</code><code class="p">));</code>
        <code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">get</code><code class="p">(</code><code class="s2">"it"</code><code class="p">));</code>
        <code class="c1">// If we got valid values, return the PageState object, otherwise null.</code>
        <code class="k">return</code> <code class="p">(</code><code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">cx</code><code class="p">)</code> <code class="o">||</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">cy</code><code class="p">)</code> <code class="o">||</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">)</code>
                <code class="o">||</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code><code class="p">))</code>
            <code class="o">?</code> <code class="kc">null</code>
            <code class="o">:</code> <code class="nx">s</code><code class="p">;</code>
    <code class="p">}</code>

    <code class="c1">// This instance method encodes the current state into the search</code>
    <code class="c1">// parameters of the browser's current location.</code>
    <code class="nx">toURL</code><code class="p">()</code> <code class="p">{</code>
        <code class="kd">let</code> <code class="nx">u</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">URL</code><code class="p">(</code><code class="nb">window</code><code class="p">.</code><code class="nx">location</code><code class="p">);</code>
        <code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"cx"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">cx</code><code class="p">);</code>
        <code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"cy"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">cy</code><code class="p">);</code>
        <code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"pp"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">);</code>
        <code class="nx">u</code><code class="p">.</code><code class="nx">searchParams</code><code class="p">.</code><code class="nx">set</code><code class="p">(</code><code class="s2">"it"</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">maxIterations</code><code class="p">);</code>
        <code class="k">return</code> <code class="nx">u</code><code class="p">.</code><code class="nx">href</code><code class="p">;</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="c1">// These constants control the parallelism of the Mandelbrot set computation.</code>
<code class="c1">// You may need to adjust them to get optimum performance on your computer.</code>
<code class="kr">const</code> <code class="nx">ROWS</code> <code class="o">=</code> <code class="mi">3</code><code class="p">,</code> <code class="nx">COLS</code> <code class="o">=</code> <code class="mi">4</code><code class="p">,</code> <code class="nx">NUMWORKERS</code> <code class="o">=</code> <code class="nx">navigator</code><code class="p">.</code><code class="nx">hardwareConcurrency</code> <code class="o">||</code> <code class="mi">2</code><code class="p">;</code>

<code class="c1">// This is the main class of our Mandelbrot set program. Simply invoke the</code>
<code class="c1">// constructor function with the &lt;canvas&gt; element to render into. The program</code>
<code class="c1">// assumes that this &lt;canvas&gt; element is styled so that it is always as big</code>
<code class="c1">// as the browser window.</code>
<code class="kr">class</code> <code class="nx">MandelbrotCanvas</code> <code class="p">{</code>
    <code class="nx">constructor</code><code class="p">(</code><code class="nx">canvas</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// Store the canvas, get its context object, and initialize a WorkerPool</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code> <code class="o">=</code> <code class="nx">canvas</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">context</code> <code class="o">=</code> <code class="nx">canvas</code><code class="p">.</code><code class="nx">getContext</code><code class="p">(</code><code class="s2">"2d"</code><code class="p">);</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">workerPool</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">WorkerPool</code><code class="p">(</code><code class="nx">NUMWORKERS</code><code class="p">,</code> <code class="s2">"mandelbrotWorker.js"</code><code class="p">);</code>

        <code class="c1">// Define some properties that we'll use later</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">tiles</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>          <code class="c1">// Subregions of the canvas</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">pendingRender</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>  <code class="c1">// We're not currently rendering</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">wantsRerender</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code> <code class="c1">// No render is currently requested</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">resizeTimer</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>    <code class="c1">// Prevents us from resizing too frequently</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>     <code class="c1">// For converting raw data to pixel values.</code>

        <code class="c1">// Set up our event handlers</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"pointerdown"</code><code class="p">,</code> <code class="nx">e</code> <code class="o">=&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">handlePointer</code><code class="p">(</code><code class="nx">e</code><code class="p">));</code>
        <code class="nb">window</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"keydown"</code><code class="p">,</code> <code class="nx">e</code> <code class="o">=&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">handleKey</code><code class="p">(</code><code class="nx">e</code><code class="p">));</code>
        <code class="nb">window</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"resize"</code><code class="p">,</code> <code class="nx">e</code> <code class="o">=&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">handleResize</code><code class="p">(</code><code class="nx">e</code><code class="p">));</code>
        <code class="nb">window</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"popstate"</code><code class="p">,</code> <code class="nx">e</code> <code class="o">=&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">e</code><code class="p">.</code><code class="nx">state</code><code class="p">,</code> <code class="kc">false</code><code class="p">));</code>

        <code class="c1">// Initialize our state from the URL or start with the initial state.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">state</code> <code class="o">=</code>
            <code class="nx">PageState</code><code class="p">.</code><code class="nx">fromURL</code><code class="p">(</code><code class="nb">window</code><code class="p">.</code><code class="nx">location</code><code class="p">)</code> <code class="o">||</code> <code class="nx">PageState</code><code class="p">.</code><code class="nx">initialState</code><code class="p">();</code>

        <code class="c1">// Save this state with the history mechanism.</code>
        <code class="nx">history</code><code class="p">.</code><code class="nx">replaceState</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">,</code> <code class="s2">""</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">.</code><code class="nx">toURL</code><code class="p">());</code>

        <code class="c1">// Set the canvas size and get an array of tiles that cover it.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">setSize</code><code class="p">();</code>

        <code class="c1">// And render the Mandelbrot set into the canvas.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>
    <code class="p">}</code>

    <code class="c1">// Set the canvas size and initialize an array of Tile objects. This</code>
    <code class="c1">// method is called from the constructor and also by the handleResize()</code>
    <code class="c1">// method when the browser window is resized.</code>
    <code class="nx">setSize</code><code class="p">()</code> <code class="p">{</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">width</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">width</code> <code class="o">=</code> <code class="nb">window</code><code class="p">.</code><code class="nx">innerWidth</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">height</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">height</code> <code class="o">=</code> <code class="nb">window</code><code class="p">.</code><code class="nx">innerHeight</code><code class="p">;</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">tiles</code> <code class="o">=</code> <code class="p">[...</code><code class="nx">Tile</code><code class="p">.</code><code class="nx">tiles</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">width</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">height</code><code class="p">,</code> <code class="nx">ROWS</code><code class="p">,</code> <code class="nx">COLS</code><code class="p">)];</code>
    <code class="p">}</code>

    <code class="c1">// This function makes a change to the PageState, then re-renders the</code>
    <code class="c1">// Mandelbrot set using that new state, and also saves the new state with</code>
    <code class="c1">// history.pushState(). If the first argument is a function that function</code>
    <code class="c1">// will be called with the state object as its argument and should make</code>
    <code class="c1">// changes to the state. If the first argument is an object, then we simply</code>
    <code class="c1">// copy the properties of that object into the state object. If the optional</code>
    <code class="c1">// second argument is false, then the new state will not be saved. (We</code>
    <code class="c1">// do this when calling setState in response to a popstate event.)</code>
    <code class="nx">setState</code><code class="p">(</code><code class="nx">f</code><code class="p">,</code> <code class="nx">save</code><code class="o">=</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// If the argument is a function, call it to update the state.</code>
        <code class="c1">// Otherwise, copy its properties into the current state.</code>
        <code class="k">if</code> <code class="p">(</code><code class="k">typeof</code> <code class="nx">f</code> <code class="o">===</code> <code class="s2">"function"</code><code class="p">)</code> <code class="p">{</code>
            <code class="nx">f</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">);</code>
        <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
            <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">property</code> <code class="k">in</code> <code class="nx">f</code><code class="p">)</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">[</code><code class="nx">property</code><code class="p">]</code> <code class="o">=</code> <code class="nx">f</code><code class="p">[</code><code class="nx">property</code><code class="p">];</code>
            <code class="p">}</code>
        <code class="p">}</code>

        <code class="c1">// In either case, start rendering the new state ASAP.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>

        <code class="c1">// Normally we save the new state. Except when we're called with</code>
        <code class="c1">// a second argument of false which we do when we get a popstate event.</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">save</code><code class="p">)</code> <code class="p">{</code>
            <code class="nx">history</code><code class="p">.</code><code class="nx">pushState</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">,</code> <code class="s2">""</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">.</code><code class="nx">toURL</code><code class="p">());</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// This method asynchronously draws the portion of the Mandelbrot set</code>
    <code class="c1">// specified by the PageState object into the canvas. It is called by</code>
    <code class="c1">// the constructor, by setState() when the state changes, and by the</code>
    <code class="c1">// resize event handler when the size of the canvas changes.</code>
    <code class="nx">render</code><code class="p">()</code> <code class="p">{</code>
        <code class="c1">// Sometimes the user may use the keyboard or mouse to request renders</code>
        <code class="c1">// more quickly than we can perform them. We don't want to submit all</code>
        <code class="c1">// the renders to the worker pool. Instead if we're rendering, we'll</code>
        <code class="c1">// just make a note that a new render is needed, and when the current</code>
        <code class="c1">// render completes, we'll render the current state, possibly skipping</code>
        <code class="c1">// multiple intermediate states.</code>
        <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">pendingRender</code><code class="p">)</code> <code class="p">{</code>        <code class="c1">// If we're already rendering,</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">wantsRerender</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>   <code class="c1">// make a note to rerender later</code>
            <code class="k">return</code><code class="p">;</code>                      <code class="c1">// and don't do anything more now.</code>
        <code class="p">}</code>

        <code class="c1">// Get our state variables and compute the complex number for the</code>
        <code class="c1">// upper left corner of the canvas.</code>
        <code class="kd">let</code> <code class="p">{</code><code class="nx">cx</code><code class="p">,</code> <code class="nx">cy</code><code class="p">,</code> <code class="nx">perPixel</code><code class="p">,</code> <code class="nx">maxIterations</code><code class="p">}</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">;</code>
        <code class="kd">let</code> <code class="nx">x0</code> <code class="o">=</code> <code class="nx">cx</code> <code class="o">-</code> <code class="nx">perPixel</code> <code class="o">*</code> <code class="k">this</code><code class="p">.</code><code class="nx">width</code><code class="o">/</code><code class="mi">2</code><code class="p">;</code>
        <code class="kd">let</code> <code class="nx">y0</code> <code class="o">=</code> <code class="nx">cy</code> <code class="o">-</code> <code class="nx">perPixel</code> <code class="o">*</code> <code class="k">this</code><code class="p">.</code><code class="nx">height</code><code class="o">/</code><code class="mi">2</code><code class="p">;</code>

        <code class="c1">// For each of our ROWS*COLS tiles, call addWork() with a message</code>
        <code class="c1">// for the code in mandelbrotWorker.js. Collect the resulting Promise</code>
        <code class="c1">// objects into an array.</code>
        <code class="kd">let</code> <code class="nx">promises</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">tiles</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="nx">tile</code> <code class="o">=&gt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">workerPool</code><code class="p">.</code><code class="nx">addWork</code><code class="p">({</code>
            <code class="nx">tile</code><code class="o">:</code> <code class="nx">tile</code><code class="p">,</code>
            <code class="nx">x0</code><code class="o">:</code> <code class="nx">x0</code> <code class="o">+</code> <code class="nx">tile</code><code class="p">.</code><code class="nx">x</code> <code class="o">*</code> <code class="nx">perPixel</code><code class="p">,</code>
            <code class="nx">y0</code><code class="o">:</code> <code class="nx">y0</code> <code class="o">+</code> <code class="nx">tile</code><code class="p">.</code><code class="nx">y</code> <code class="o">*</code> <code class="nx">perPixel</code><code class="p">,</code>
            <code class="nx">perPixel</code><code class="o">:</code> <code class="nx">perPixel</code><code class="p">,</code>
            <code class="nx">maxIterations</code><code class="o">:</code> <code class="nx">maxIterations</code>
        <code class="p">}));</code>

        <code class="c1">// Use Promise.all() to get an array of responses from the array of</code>
        <code class="c1">// promises. Each response is the computation for one of our tiles.</code>
        <code class="c1">// Recall from mandelbrotWorker.js that each response includes the</code>
        <code class="c1">// Tile object, an ImageData object that includes iteration counts</code>
        <code class="c1">// instead of pixel values, and the minimum and maximum iterations</code>
        <code class="c1">// for that tile.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">pendingRender</code> <code class="o">=</code> <code class="nb">Promise</code><code class="p">.</code><code class="nx">all</code><code class="p">(</code><code class="nx">promises</code><code class="p">).</code><code class="nx">then</code><code class="p">(</code><code class="nx">responses</code> <code class="o">=&gt;</code> <code class="p">{</code>

            <code class="c1">// First, find the overall max and min iterations over all tiles.</code>
            <code class="c1">// We need these numbers so we can assign colors to the pixels.</code>
            <code class="kd">let</code> <code class="nx">min</code> <code class="o">=</code> <code class="nx">maxIterations</code><code class="p">,</code> <code class="nx">max</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
            <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">r</code> <code class="k">of</code> <code class="nx">responses</code><code class="p">)</code> <code class="p">{</code>
                <code class="k">if</code> <code class="p">(</code><code class="nx">r</code><code class="p">.</code><code class="nx">min</code> <code class="o">&lt;</code> <code class="nx">min</code><code class="p">)</code> <code class="nx">min</code> <code class="o">=</code> <code class="nx">r</code><code class="p">.</code><code class="nx">min</code><code class="p">;</code>
                <code class="k">if</code> <code class="p">(</code><code class="nx">r</code><code class="p">.</code><code class="nx">max</code> <code class="o">&gt;</code> <code class="nx">max</code><code class="p">)</code> <code class="nx">max</code> <code class="o">=</code> <code class="nx">r</code><code class="p">.</code><code class="nx">max</code><code class="p">;</code>
            <code class="p">}</code>

            <code class="c1">// Now we need a way to convert the raw iteration counts from the</code>
            <code class="c1">// workers into pixel colors that will be displayed in the canvas.</code>
            <code class="c1">// We know that all the pixels have between min and max iterations</code>
            <code class="c1">// so we precompute the colors for each iteration count and store</code>
            <code class="c1">// them in the colorTable array.</code>

            <code class="c1">// If we haven't allocated a color table yet, or if it is no longer</code>
            <code class="c1">// the right size, then allocate a new one.</code>
            <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code> <code class="o">||</code> <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code><code class="p">.</code><code class="nx">length</code> <code class="o">!==</code> <code class="nx">maxIterations</code><code class="o">+</code><code class="mi">1</code><code class="p">){</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Uint32Array</code><code class="p">(</code><code class="nx">maxIterations</code><code class="o">+</code><code class="mi">1</code><code class="p">);</code>
            <code class="p">}</code>

            <code class="c1">// Given the max and the min, compute appropriate values in the</code>
            <code class="c1">// color table. Pixels in the set will be colored fully opaque</code>
            <code class="c1">// black. Pixels outside the set will be translucent black with higher</code>
            <code class="c1">// iteration counts resulting in higher opacity. Pixels with</code>
            <code class="c1">// minimum iteration counts will be transparent and the white</code>
            <code class="c1">// background will show through, resulting in a grayscale image.</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">min</code> <code class="o">===</code> <code class="nx">max</code><code class="p">)</code> <code class="p">{</code>                <code class="c1">// If all the pixels are the same,</code>
                <code class="k">if</code> <code class="p">(</code><code class="nx">min</code> <code class="o">===</code> <code class="nx">maxIterations</code><code class="p">)</code> <code class="p">{</code>  <code class="c1">// Then make them all black</code>
                    <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code><code class="p">[</code><code class="nx">min</code><code class="p">]</code> <code class="o">=</code> <code class="mh">0xFF000000</code><code class="p">;</code>
                <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>                      <code class="c1">// Or all transparent.</code>
                    <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code><code class="p">[</code><code class="nx">min</code><code class="p">]</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
                <code class="p">}</code>
            <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
                <code class="c1">// In the normal case where min and max are different, use a</code>
                <code class="c1">// logarithic scale to assign each possible iteration count an</code>
                <code class="c1">// opacity between 0 and 255, and then use the shift left</code>
                <code class="c1">// operator to turn that into a pixel value.</code>
                <code class="kd">let</code> <code class="nx">maxlog</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="mi">1</code><code class="o">+</code><code class="nx">max</code><code class="o">-</code><code class="nx">min</code><code class="p">);</code>
                <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="nx">min</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;=</code> <code class="nx">max</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
                    <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">=</code>
                        <code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="mi">1</code><code class="o">+</code><code class="nx">i</code><code class="o">-</code><code class="nx">min</code><code class="p">)</code><code class="o">/</code><code class="nx">maxlog</code> <code class="o">*</code> <code class="mi">255</code><code class="p">)</code> <code class="o">&lt;&lt;</code> <code class="mi">24</code><code class="p">);</code>
                <code class="p">}</code>
            <code class="p">}</code>

            <code class="c1">// Now translate the iteration numbers in each response's</code>
            <code class="c1">// ImageData to colors from the colorTable.</code>
            <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">r</code> <code class="k">of</code> <code class="nx">responses</code><code class="p">)</code> <code class="p">{</code>
                <code class="kd">let</code> <code class="nx">iterations</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Uint32Array</code><code class="p">(</code><code class="nx">r</code><code class="p">.</code><code class="nx">imageData</code><code class="p">.</code><code class="nx">data</code><code class="p">.</code><code class="nx">buffer</code><code class="p">);</code>
                <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">iterations</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
                    <code class="nx">iterations</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">colorTable</code><code class="p">[</code><code class="nx">iterations</code><code class="p">[</code><code class="nx">i</code><code class="p">]];</code>
                <code class="p">}</code>
            <code class="p">}</code>

            <code class="c1">// Finally, render all the imageData objects into their</code>
            <code class="c1">// corresponding tiles of the canvas using putImageData().</code>
            <code class="c1">// (First, though, remove any CSS transforms on the canvas that may</code>
            <code class="c1">// have been set by the pointerdown event handler.)</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">transform</code> <code class="o">=</code> <code class="s2">""</code><code class="p">;</code>
            <code class="k">for</code><code class="p">(</code><code class="kd">let</code> <code class="nx">r</code> <code class="k">of</code> <code class="nx">responses</code><code class="p">)</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">context</code><code class="p">.</code><code class="nx">putImageData</code><code class="p">(</code><code class="nx">r</code><code class="p">.</code><code class="nx">imageData</code><code class="p">,</code> <code class="nx">r</code><code class="p">.</code><code class="nx">tile</code><code class="p">.</code><code class="nx">x</code><code class="p">,</code> <code class="nx">r</code><code class="p">.</code><code class="nx">tile</code><code class="p">.</code><code class="nx">y</code><code class="p">);</code>
            <code class="p">}</code>
        <code class="p">})</code>
        <code class="p">.</code><code class="k">catch</code><code class="p">((</code><code class="nx">reason</code><code class="p">)</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="c1">// If anything went wrong in any of our Promises, we'll log</code>
            <code class="c1">// an error here. This shouldn't happen, but this will help with</code>
            <code class="c1">// debugging if it does.</code>
            <code class="nx">console</code><code class="p">.</code><code class="nx">error</code><code class="p">(</code><code class="s2">"Promise rejected in render():"</code><code class="p">,</code> <code class="nx">reason</code><code class="p">);</code>
        <code class="p">})</code>
        <code class="p">.</code><code class="k">finally</code><code class="p">(()</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="c1">// When we are done rendering, clear the pendingRender flags</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">pendingRender</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>
            <code class="c1">// And if render requests came in while we were busy, rerender now.</code>
            <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">wantsRerender</code><code class="p">)</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">wantsRerender</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>
            <code class="p">}</code>
        <code class="p">});</code>
     <code class="p">}</code>

    <code class="c1">// If the user resizes the window, this function will be called repeatedly.</code>
    <code class="c1">// Resizing a canvas and rerendering the Mandlebrot set is an expensive</code>
    <code class="c1">// operation that we can't do multiple times a second, so we use a timer</code>
    <code class="c1">// to defer handling the resize until 200ms have elapsed since the last</code>
    <code class="c1">// resize event was received.</code>
    <code class="nx">handleResize</code><code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// If we were already deferring a resize, clear it.</code>
        <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">resizeTimer</code><code class="p">)</code> <code class="nx">clearTimeout</code><code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">resizeTimer</code><code class="p">);</code>
        <code class="c1">// And defer this resize instead.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">resizeTimer</code> <code class="o">=</code> <code class="nx">setTimeout</code><code class="p">(()</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">resizeTimer</code> <code class="o">=</code> <code class="kc">null</code><code class="p">;</code>  <code class="c1">// Note that resize has been handled</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setSize</code><code class="p">();</code>           <code class="c1">// Resize canvas and tiles</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">render</code><code class="p">();</code>            <code class="c1">// Rerender at the new size</code>
        <code class="p">},</code> <code class="mi">200</code><code class="p">);</code>
    <code class="p">}</code>

    <code class="c1">// If the user presses a key, this event handler will be called.</code>
    <code class="c1">// We call setState() in response to various keys, and setState() renders</code>
    <code class="c1">// the new state, updates the URL, and saves the state in browser history.</code>
    <code class="nx">handleKey</code><code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">switch</code><code class="p">(</code><code class="nx">event</code><code class="p">.</code><code class="nx">key</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">case</code> <code class="s2">"Escape"</code><code class="o">:</code>     <code class="c1">// Type Escape to go back to the initial state</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">PageState</code><code class="p">.</code><code class="nx">initialState</code><code class="p">());</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"+"</code><code class="o">:</code>          <code class="c1">// Type + to increase the number of iterations</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="p">{</code>
                <code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">round</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code><code class="o">*</code><code class="mf">1.5</code><code class="p">);</code>
            <code class="p">});</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"-"</code><code class="o">:</code>          <code class="c1">// Type - to decrease the number of iterations</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="p">{</code>
                <code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">round</code><code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code><code class="o">/</code><code class="mf">1.5</code><code class="p">);</code>
                <code class="k">if</code> <code class="p">(</code><code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code> <code class="o">&lt;</code> <code class="mi">1</code><code class="p">)</code> <code class="nx">s</code><code class="p">.</code><code class="nx">maxIterations</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>
            <code class="p">});</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"o"</code><code class="o">:</code>          <code class="c1">// Type o to zoom out</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code> <code class="o">*=</code> <code class="mi">2</code><code class="p">);</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"ArrowUp"</code><code class="o">:</code>    <code class="c1">// Up arrow to scroll up</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="nx">s</code><code class="p">.</code><code class="nx">cy</code> <code class="o">-=</code> <code class="k">this</code><code class="p">.</code><code class="nx">height</code><code class="o">/</code><code class="mi">10</code> <code class="o">*</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">);</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"ArrowDown"</code><code class="o">:</code>  <code class="c1">// Down arrow to scroll down</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="nx">s</code><code class="p">.</code><code class="nx">cy</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">height</code><code class="o">/</code><code class="mi">10</code> <code class="o">*</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">);</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"ArrowLeft"</code><code class="o">:</code>  <code class="c1">// Left arrow to scroll left</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="nx">s</code><code class="p">.</code><code class="nx">cx</code> <code class="o">-=</code> <code class="k">this</code><code class="p">.</code><code class="nx">width</code><code class="o">/</code><code class="mi">10</code> <code class="o">*</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">);</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="k">case</code> <code class="s2">"ArrowRight"</code><code class="o">:</code> <code class="c1">// Right arrow to scroll right</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="nx">s</code><code class="p">.</code><code class="nx">cx</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">width</code><code class="o">/</code><code class="mi">10</code> <code class="o">*</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">);</code>
            <code class="k">break</code><code class="p">;</code>
        <code class="p">}</code>
    <code class="p">}</code>

    <code class="c1">// This method is called when we get a pointerdown event on the canvas.</code>
    <code class="c1">// The pointerdown event might be the start of a zoom gesture (a click or</code>
    <code class="c1">// tap) or a pan gesture (a drag). This handler registers handlers for</code>
    <code class="c1">// the pointermove and pointerup events in order to respond to the rest</code>
    <code class="c1">// of the gesture. (These two extra handlers are removed when the gesture</code>
    <code class="c1">// ends with a pointerup.)</code>
    <code class="nx">handlePointer</code><code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// The pixel coordinates and time of the initial pointer down.</code>
        <code class="c1">// Because the canvas is as big as the window, these event coordinates</code>
        <code class="c1">// are also canvas coordinates.</code>
        <code class="kr">const</code> <code class="nx">x0</code> <code class="o">=</code> <code class="nx">event</code><code class="p">.</code><code class="nx">clientX</code><code class="p">,</code> <code class="nx">y0</code> <code class="o">=</code> <code class="nx">event</code><code class="p">.</code><code class="nx">clientY</code><code class="p">,</code> <code class="nx">t0</code> <code class="o">=</code> <code class="nb">Date</code><code class="p">.</code><code class="nx">now</code><code class="p">();</code>

        <code class="c1">// This is the handler for move events.</code>
        <code class="kr">const</code> <code class="nx">pointerMoveHandler</code> <code class="o">=</code> <code class="nx">event</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="c1">// How much have we moved, and how much time has passed?</code>
            <code class="kd">let</code> <code class="nx">dx</code><code class="o">=</code><code class="nx">event</code><code class="p">.</code><code class="nx">clientX</code><code class="o">-</code><code class="nx">x0</code><code class="p">,</code> <code class="nx">dy</code><code class="o">=</code><code class="nx">event</code><code class="p">.</code><code class="nx">clientY</code><code class="o">-</code><code class="nx">y0</code><code class="p">,</code> <code class="nx">dt</code><code class="o">=</code><code class="nb">Date</code><code class="p">.</code><code class="nx">now</code><code class="p">()</code><code class="o">-</code><code class="nx">t0</code><code class="p">;</code>

            <code class="c1">// If the pointer has moved enough or enough time has passed that</code>
            <code class="c1">// this is not a regular click, then use CSS to pan the display.</code>
            <code class="c1">// (We will rerender it for real when we get the pointerup event.)</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">dx</code> <code class="o">&gt;</code> <code class="mi">10</code> <code class="o">||</code> <code class="nx">dy</code> <code class="o">&gt;</code> <code class="mi">10</code> <code class="o">||</code> <code class="nx">dt</code> <code class="o">&gt;</code> <code class="mi">500</code><code class="p">)</code> <code class="p">{</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">transform</code> <code class="o">=</code> <code class="sb">`translate(</code><code class="si">${</code><code class="nx">dx</code><code class="si">}</code><code class="sb">px, </code><code class="si">${</code><code class="nx">dy</code><code class="si">}</code><code class="sb">px)`</code><code class="p">;</code>
            <code class="p">}</code>
        <code class="p">};</code>

        <code class="c1">// This is the handler for pointerup events</code>
        <code class="kr">const</code> <code class="nx">pointerUpHandler</code> <code class="o">=</code> <code class="nx">event</code> <code class="o">=&gt;</code> <code class="p">{</code>
            <code class="c1">// When the pointer goes up, the gesture is over, so remove</code>
            <code class="c1">// the move and up handlers until the next gesture.</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">removeEventListener</code><code class="p">(</code><code class="s2">"pointermove"</code><code class="p">,</code> <code class="nx">pointerMoveHandler</code><code class="p">);</code>
            <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">removeEventListener</code><code class="p">(</code><code class="s2">"pointerup"</code><code class="p">,</code> <code class="nx">pointerUpHandler</code><code class="p">);</code>

            <code class="c1">// How much did the pointer move, and how much time passed?</code>
            <code class="kr">const</code> <code class="nx">dx</code> <code class="o">=</code> <code class="nx">event</code><code class="p">.</code><code class="nx">clientX</code><code class="o">-</code><code class="nx">x0</code><code class="p">,</code> <code class="nx">dy</code><code class="o">=</code><code class="nx">event</code><code class="p">.</code><code class="nx">clientY</code><code class="o">-</code><code class="nx">y0</code><code class="p">,</code> <code class="nx">dt</code><code class="o">=</code><code class="nb">Date</code><code class="p">.</code><code class="nx">now</code><code class="p">()</code><code class="o">-</code><code class="nx">t0</code><code class="p">;</code>
            <code class="c1">// Unpack the state object into individual constants.</code>
            <code class="kr">const</code> <code class="p">{</code><code class="nx">cx</code><code class="p">,</code> <code class="nx">cy</code><code class="p">,</code> <code class="nx">perPixel</code><code class="p">}</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">;</code>

            <code class="c1">// If the pointer moved far enough or if enough time passed, then</code>
            <code class="c1">// this was a pan gesture, and we need to change state to change</code>
            <code class="c1">// the center point. Otherwise, the user clicked or tapped on a</code>
            <code class="c1">// point and we need to center and zoom in on that point.</code>
            <code class="k">if</code> <code class="p">(</code><code class="nx">dx</code> <code class="o">&gt;</code> <code class="mi">10</code> <code class="o">||</code> <code class="nx">dy</code> <code class="o">&gt;</code> <code class="mi">10</code> <code class="o">||</code> <code class="nx">dt</code> <code class="o">&gt;</code> <code class="mi">500</code><code class="p">)</code> <code class="p">{</code>
                <code class="c1">// The user panned the image by (dx, dy) pixels.</code>
                <code class="c1">// Convert those values to offsets in the complex plane.</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">({</code><code class="nx">cx</code><code class="o">:</code> <code class="nx">cx</code> <code class="o">-</code> <code class="nx">dx</code><code class="o">*</code><code class="nx">perPixel</code><code class="p">,</code> <code class="nx">cy</code><code class="o">:</code> <code class="nx">cy</code> <code class="o">-</code> <code class="nx">dy</code><code class="o">*</code><code class="nx">perPixel</code><code class="p">});</code>
            <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
                <code class="c1">// The user clicked. Compute how many pixels the center moves.</code>
                <code class="kd">let</code> <code class="nx">cdx</code> <code class="o">=</code> <code class="nx">x0</code> <code class="o">-</code> <code class="k">this</code><code class="p">.</code><code class="nx">width</code><code class="o">/</code><code class="mi">2</code><code class="p">;</code>
                <code class="kd">let</code> <code class="nx">cdy</code> <code class="o">=</code> <code class="nx">y0</code> <code class="o">-</code> <code class="k">this</code><code class="p">.</code><code class="nx">height</code><code class="o">/</code><code class="mi">2</code><code class="p">;</code>

                <code class="c1">// Use CSS to quickly and temporarily zoom in</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">transform</code> <code class="o">=</code>
                    <code class="sb">`translate(</code><code class="si">${</code><code class="o">-</code><code class="nx">cdx</code><code class="o">*</code><code class="mi">2</code><code class="si">}</code><code class="sb">px, </code><code class="si">${</code><code class="o">-</code><code class="nx">cdy</code><code class="o">*</code><code class="mi">2</code><code class="si">}</code><code class="sb">px) scale(2)`</code><code class="p">;</code>

                <code class="c1">// Set the complex coordinates of the new center point and</code>
                <code class="c1">// zoom in by a factor of 2.</code>
                <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">(</code><code class="nx">s</code> <code class="o">=&gt;</code> <code class="p">{</code>
                    <code class="nx">s</code><code class="p">.</code><code class="nx">cx</code> <code class="o">+=</code> <code class="nx">cdx</code> <code class="o">*</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">;</code>
                    <code class="nx">s</code><code class="p">.</code><code class="nx">cy</code> <code class="o">+=</code> <code class="nx">cdy</code> <code class="o">*</code> <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code><code class="p">;</code>
                    <code class="nx">s</code><code class="p">.</code><code class="nx">perPixel</code> <code class="o">/=</code> <code class="mi">2</code><code class="p">;</code>
                <code class="p">});</code>
            <code class="p">}</code>
        <code class="p">};</code>

        <code class="c1">// When the user begins a gesture we register handlers for the</code>
        <code class="c1">// pointermove and pointerup events that follow.</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"pointermove"</code><code class="p">,</code> <code class="nx">pointerMoveHandler</code><code class="p">);</code>
        <code class="k">this</code><code class="p">.</code><code class="nx">canvas</code><code class="p">.</code><code class="nx">addEventListener</code><code class="p">(</code><code class="s2">"pointerup"</code><code class="p">,</code> <code class="nx">pointerUpHandler</code><code class="p">);</code>
    <code class="p">}</code>
<code class="p">}</code>

<code class="c1">// Finally, here's how we set up the canvas. Note that this JavaScript file</code>
<code class="c1">// is self-sufficient. The HTML file only needs to include this one &lt;script&gt;.</code>
<code class="kd">let</code> <code class="nx">canvas</code> <code class="o">=</code> <code class="nb">document</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s2">"canvas"</code><code class="p">);</code> <code class="c1">// Create a canvas element</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">body</code><code class="p">.</code><code class="nx">append</code><code class="p">(</code><code class="nx">canvas</code><code class="p">);</code>                  <code class="c1">// Insert it into the body</code>
<code class="nb">document</code><code class="p">.</code><code class="nx">body</code><code class="p">.</code><code class="nx">style</code> <code class="o">=</code> <code class="s2">"margin:0"</code><code class="p">;</code>              <code class="c1">// No margin for the &lt;body&gt;</code>
<code class="nx">canvas</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">width</code> <code class="o">=</code> <code class="s2">"100%"</code><code class="p">;</code>                   <code class="c1">// Make canvas as wide as body</code>
<code class="nx">canvas</code><code class="p">.</code><code class="nx">style</code><code class="p">.</code><code class="nx">height</code> <code class="o">=</code> <code class="s2">"100%"</code><code class="p">;</code>                  <code class="c1">// and as high as the body.</code>
<code class="k">new</code> <code class="nx">MandelbrotCanvas</code><code class="p">(</code><code class="nx">canvas</code><code class="p">);</code>                  <code class="c1">// And start rendering into it!</code></pre></div>
</div></section>













<section data-type="sect1" data-pdf-bookmark="15.15 Summary and Suggestions for Further Reading"><div class="sect1" id="furtherreading">
<h1>15.15 Summary and Suggestions for Further Reading</h1>

<p>This<a data-type="indexterm" data-primary="" data-startref="Wmandel15" id="idm46198493366200"></a><a data-type="indexterm" data-primary="" data-startref="Mworkmandel15" id="idm46198493365224"></a><a data-type="indexterm" data-primary="" data-startref="mandel15" id="idm46198493364280"></a><a data-type="indexterm" data-primary="" data-startref="WBmandel15" id="idm46198493363336"></a> long chapter has covered the fundamentals of client-side JavaScript
<span class="keep-together">programming:</span></p>

<ul>
<li>
<p>How scripts and JavaScript modules are included in web pages and how
and when they are executed.</p>
</li>
<li>
<p>Client-side JavaScript’s asynchronous, event-driven programming model.</p>
</li>
<li>
<p>The Document Object Model (DOM) that allows JavaScript code to inspect
and modify the HTML content of the document it is embedded
within. This DOM API is the heart of all client-side JavaScript
programming.</p>
</li>
<li>
<p>How JavaScript code can manipulate the CSS styles that are applied to
content within the document.</p>
</li>
<li>
<p>How JavaScript code can obtain the coordinates of document elements
in the browser window and within the document itself.</p>
</li>
<li>
<p>How to create reusable UI “Web Components” with JavaScript, HTML, and CSS
using the Custom Elements and Shadow DOM APIs.</p>
</li>
<li>
<p>How to display and dynamically generate graphics with SVG and the
HTML <code>&lt;canvas&gt;</code> element.</p>
</li>
<li>
<p>How to add scripted sound effects (both recorded and synthesized) to
your web pages.</p>
</li>
<li>
<p>How JavaScript can make the browser load new pages, go backward and
forward in the user’s browsing history, and even add new entries to
the browsing history.</p>
</li>
<li>
<p>How JavaScript programs can exchange data with web servers using the
HTTP and WebSocket protocols.</p>
</li>
<li>
<p>How JavaScript programs can store data in the user’s browser.</p>
</li>
<li>
<p>How JavaScript programs can use worker threads to achieve a safe form
of <span class="keep-together">concurrency.</span></p>
</li>
</ul>

<p>This has been the longest chapter of the book, by far. But it cannot
come close to covering all the APIs available to web browsers. The web
platform is sprawling and ever-evolving, and my goal for this chapter
was to introduce the most important core APIs. With the knowledge you
have from this book, you are well equipped to learn and use new APIs as
you need them. But you can’t learn about a new API if you don’t know
that it exists, so the short sections that follow end the chapter with a quick
list of web platform features that you might want to investigate in the
future.</p>








<section data-type="sect2" data-pdf-bookmark="15.15.1 HTML and CSS"><div class="sect2" id="idm46198493347656">
<h2>15.15.1 HTML and CSS</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="HTML and CSS" id="idm46198493346328"></a> web is built upon three key technologies: HTML, CSS, and JavaScript,
and knowledge of JavaScript can take you only so far as a web developer
unless you also develop your expertise with HTML and CSS. It is
important to know how to use JavaScript to manipulate HTML elements and
CSS styles, but that knowledge is is much more useful if you also know
which HTML elements and which CSS styles to use.</p>

<p>So before you start exploring more JavaScript APIs, I would encourage
you to invest some time in mastering the other tools in a web
developer’s toolkit. HTML form and input elements, for example, have
sophisticated behavior that is important to understand, and the flexbox and grid layout modes in CSS are incredibly powerful.</p>

<p>Two topics worth paying particular attention to in this area are
accessibility (including ARIA attributes) and internationalization
(including support for right-to-left writing directions).</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.2 Performance"><div class="sect2" id="idm46198493342904">
<h2>15.15.2 Performance</h2>

<p>Once<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="Performance APIs" id="idm46198493341352"></a><a data-type="indexterm" data-primary="Performance APIs" id="idm46198493340088"></a> you have written a web application and released it to the world,
the never-ending quest to make it fast begins. It is hard to optimize
things that you can’t measure, however, so it is worth familiarizing
yourself with the Performance APIs. The <code>performance</code> property of the
window object is the main entry point to this API. It includes a
high-resolution time source <code>performance.now()</code>, and methods
<code>performance.mark()</code> and <code>performance.measure()</code> for marking critical
points in your code and measuring the elapsed time between them. Calling
these methods creates PerformanceEntry objects that you can access with
<code>performance.getEntries()</code>. Browsers add their own PerformanceEntry
objects any time the browser loads a new page or fetches a file over the
network, and these automatically created PerformanceEntry objects
include granular timing details of your application’s network
performance. The related PerformanceObserver class allows you to specify
a function to be invoked when new PerformanceEntry objects are created.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.3 Security"><div class="sect2" id="idm46198493336088">
<h2>15.15.3 Security</h2>

<p>This<a data-type="indexterm" data-primary="security" data-secondary="web platform features to investigate" id="idm46198493334792"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="security" id="idm46198493333768"></a><a data-type="indexterm" data-primary="Content-Security-Policy HTTP header" id="idm46198493332520"></a> chapter introduced the general idea of how to defend against
cross-site scripting (XSS) security vulnerabilities in your
websites, but we did not go into much detail. The topic of web
security is an important one, and you may want to spend some time
learning more about it. In addition to XSS, it is worth learning about
the <code>Content-Security-Policy</code> HTTP header and understanding how CSP
allows you to ask the web browser to restrict the capabilities it
grants to JavaScript code. Understanding CORS (Cross-Origin Resource
Sharing) is also important.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.4 WebAssembly"><div class="sect2" id="idm46198493330504">
<h2>15.15.4 WebAssembly</h2>

<p>WebAssembly<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="WebAssembly" id="idm46198493329176"></a><a data-type="indexterm" data-primary="WebAssembly" id="idm46198493327864"></a> (or “wasm”) is a low-level virtual machine bytecode format
that is designed to integrate well with JavaScript interpreters in web
browsers. There are compilers that allow you to compile C, C++, and
Rust programs to WebAssembly bytecode and to run those programs in
web browsers at close to native speed, without breaking the browser
sandbox or security model. WebAssembly can export functions that can
be called by JavaScript programs.  A typical use case for WebAssembly
would be to compile the standard C-language zlib compression library
so that JavaScript code has access to high-speed compression and
decompression algorithms. Learn more at <em><a href="https://webassembly.org"><em class="hyperlink">https://webassembly.org</em></a></em>.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.5 More Document and Window Features"><div class="sect2" id="idm46198490633464">
<h2>15.15.5 More Document and Window Features</h2>

<p>The<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="Window and Document object features" id="idm46198490632200"></a> Window and Document objects have a number of features that were not
covered in this chapter:</p>

<ul>
<li>
<p>The Window object defines <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code>
methods that display simple modal dialogues to the user. These methods
block the main thread. The <code>confirm()</code> method synchronously returns a
boolean value, and <code>prompt()</code> synchronously returns a string of user
input. These are not suitable for production use but can be useful
for simple projects and prototypes.</p>
</li>
<li>
<p>The <code>navigator</code> and <code>screen</code> properties of the Window object were
mentioned in passing at the start of this chapter, but the Navigator
and Screen objects that they reference have some features that were
not described here that you may find <span class="keep-together">useful.</span></p>
</li>
<li>
<p>The <code>requestFullscreen()</code> method of any Element object requests that
that element (a <code>&lt;video&gt;</code> or <code>&lt;canvas&gt;</code> element, for example) be
displayed in fullscreen mode. The <code>exitFullscreen()</code> method of the
Document returns to normal display mode.</p>
</li>
<li>
<p>The <code>requestAnimationFrame()</code> method of the Window object takes a
function as its argument and will execute that function when the
browser is preparing to render the next frame. When you are making
visual changes (especially repeated or animated ones), wrapping your
code within a call to <code>requestAnimationFrame()</code> can help to ensure
that the changes are rendered smoothly and in a way that is optimized
by the browser.</p>
</li>
<li>
<p>If the user selects text within your document, you can obtain details
of that selection with the Window method <code>getSelection()</code> and get the
selected text with <code>getSelection().toString()</code>. In some browsers,
<code>navigator.clipboard</code> is an object with an async API for reading and
setting the content of the system 
<span class="keep-together">clipboard</span> to enable copy-and-paste
interactions with applications outside of the browser.</p>
</li>
<li>
<p>A little-known feature of web browsers is that HTML elements with a
<code>contenteditable="true"</code> attribute allow their content to be
edited. The <code>document.execCommand()</code> method enables rich-text editing
features for editable content.</p>
</li>
<li>
<p>A MutationObserver allows JavaScript to monitor changes to, or
beneath, a specified element in the document. Create a
MutationObserver with the <code>MutationObserver()</code> constructor, passing
the callback function that should be called when changes are
made. Then call the <code>observe()</code> method of the MutationObserver to
specify which parts of which element are to be monitored.</p>
</li>
<li>
<p>An IntersectionObserver allows JavaScript to determine which document
elements are on the screen and which are close to being on the
screen. It is particularly useful for applications that want to
dynamically load content on demand as the user scrolls.</p>
</li>
</ul>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.6 Events"><div class="sect2" id="idm46198490610888">
<h2>15.15.6 Events</h2>

<p>The<a data-type="indexterm" data-primary="event-driven programming model" data-secondary="web platform features to investigate" id="idm46198490609560"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="events" id="idm46198490608568"></a> sheer number and diversity of events supported by the web platform
can be daunting. This chapter has discussed a variety of event types,
but here are some more that you may find useful:</p>

<ul>
<li>
<p>Browsers fire “online” and “offline” events at the Window object when
the browser gains or loses an internet connection.</p>
</li>
<li>
<p>Browsers fire a “visiblitychange” event at the Document object when
a document becomes visible or invisible (usually because a user has
switched tabs). JavaScript can check <code>document.visibilityState</code> to
determine whether its document is currently “visible” or “hidden.”</p>
</li>
<li>
<p>Browsers support a complicated API to support drag-and-drop UIs and to
support data exchange with applications outside the browser. This API
involves a number of events, including “dragstart,” “dragover,”
“dragend,” and “drop.” This API is tricky to use correctly but useful
when you need it.  It is an important API to know about if you want to
enable users to drag files from their desktop into your web
application.</p>
</li>
<li>
<p>The Pointer Lock API enables JavaScript to hide the mouse pointer and
get raw mouse events as relative movement amounts rather than absolute
positions on the screen. This is typically useful for games. Call
<code>requestPointerLock()</code> on the element you want all mouse events
directed to. After you do this, “mousemove” events delivered to that
element will have <code>movementX</code> and <code>movementY</code> properties.</p>
</li>
<li>
<p>The Gamepad API adds support for game controllers. Use
<code>navigator.getGamepads()</code> to get connected Gamepad objects, and listen
for “gamepadconnected” events on the Window object to be notified when
a new controller is plugged in. The Gamepad object defines an API for
querying the current state of the buttons on the controller.</p>
</li>
</ul>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.7 Progressive Web Apps and Service Workers"><div class="sect2" id="idm46198490598200">
<h2>15.15.7 Progressive Web Apps and Service Workers</h2>

<p>The<a data-type="indexterm" data-primary="Progressive Web Apps (PWAs)" id="idm46198490596840"></a><a data-type="indexterm" data-primary="ServiceWorkers" id="idm46198490596136"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="Progressive Web Apps and ServiceWorkers" id="idm46198490595464"></a> term <em>Progressive Web Apps</em>, or PWAs, is a buzzword that describes web
applications that are built using a few key technologies. Careful
documentation of these key technologies would require a book of its own,
and I have not covered them in this chapter, but you should be aware of
all of these APIs. It is worth noting that powerful modern APIs like
these are typically designed to work only on secure HTTPS
connections. Websites that are still using <code>http://</code> URLs will not be
able to take advantage of these:</p>

<ul>
<li>
<p>A ServiceWorker<a data-type="indexterm" data-primary="threading" id="idm46198490591480"></a> is a kind of worker thread with the ability to
intercept, inspect, and respond to network requests from the web
application that it “services.” When a web application registers a
service worker, that worker’s code becomes persistent in the browser’s
local storage, and when the user visits the associated website again,
the service worker is reactivated. Service workers can cache network
responses (including files of JavaScript code), which means that web
applications that use service workers
can effectively install themselves onto the user’s computer for rapid
startup and offline use. The <em>Service Worker Cookbook</em> at
<a href="https://serviceworke.rs"><em class="hyperlink">https://serviceworke.rs</em></a> is a valuable resource for learning about
service workers and their related technologies.</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="Cache API" id="idm46198490587384"></a> Cache API is designed for use by service workers (but is also
available to regular JavaScript code outside of workers). It works
with the Request and Response objects defined by the <code>fetch()</code> API and
implements a cache of Request/Response pairs. The Cache API enables a
service worker to cache the scripts and other assets of the web app it
serves and can also help to enable offline use of the web app (which
is particularly important for mobile devices).</p>
</li>
<li>
<p>A<a data-type="indexterm" data-primary="Web Manifest" id="idm46198490584792"></a>  Web Manifest is a JSON-formatted file that describes a web
application including a name, a URL, and links to icons in various
sizes. If your web app uses a service worker and includes a <code>&lt;link
rel="manifest"&gt;</code> tag that references a <code>.webmanifest</code> file, then
browsers (particularly browsers on mobile devices) may give you the
option to add an icon for the web app to your desktop or home screen.</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="Notifications API" id="idm46198490581864"></a> Notifications API allows web apps to display notifications using
the native OS notification system on both mobile and desktop
devices. Notifications can include an image and text, and your code
can receive an event if the user clicks on the notification. Using
this API is complicated by the fact that you must first request the
user’s permission to display notifications.</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="Push API" id="idm46198490579784"></a> Push API allows web applications that have a service worker (and
that have the user’s permission) to subscribe to notifications from a
server, and to display those notifications even when the application
itself is not running. Push notifications are common on mobile
devices, and the Push API brings web apps closer to feature parity
with native apps on mobile.</p>
</li>
</ul>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.8 Mobile Device APIs"><div class="sect2" id="idm46198490578152">
<h2>15.15.8 Mobile Device APIs</h2>

<p>There<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="mobile device APIs" id="idm46198490576888"></a><a data-type="indexterm" data-primary="mobile device APIs" id="idm46198490575624"></a> are a number of web APIs that are primarily useful for web apps
running on mobile devices. (Unfortunately, a number of these APIs only
work on Android devices and not iOS devices.)</p>

<ul>
<li>
<p>The<a data-type="indexterm" data-primary="Geolocation API" id="idm46198490573416"></a> Geolocation API allows JavaScript (with the user’s permission) to
determine the user’s physical location. It is well supported on
desktop and mobile devices, including iOS devices. Use
<code>navigator.geolocation.getCurrentPosition()</code> to request the user’s current
position and use <code>navigator.geolocation.watchPosition()</code> to register a
callback to be called when the user’s position changes.</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="navigator.vibrate() method" id="idm46198490570584"></a> <code>navigator.vibrate()</code> method causes a mobile device (but not iOS)
to vibrate. Often this is only allowed in response to a user gesture,
but calling this method will allow your app to provide silent feedback
that a gesture has been 
<span class="keep-together">recognized.</span></p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="ScreenOrientation API" id="idm46198490567640"></a> ScreenOrientation API enables a web application to query the
current orientation of a mobile device screen and also to lock
themselves to landscape or portrait orientation.</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="devicemotion event" id="idm46198490565752"></a><a data-type="indexterm" data-primary="deviceorientation event" id="idm46198490565016"></a><a data-type="indexterm" data-primary="accelerometers" id="idm46198490564344"></a><a data-type="indexterm" data-primary="magnetometers" id="idm46198490563672"></a> “devicemotion” and “deviceorientation” events on the window
object report accelerometer and magnetometer data for the device,
enabling you to determine how the device is accelerating and how the
user is orienting it in space. (These events do work on iOS.)</p>
</li>
<li>
<p>The<a data-type="indexterm" data-primary="Sensor API" id="idm46198490561752"></a> Sensor API is not yet widely supported beyond Chrome on Android
devices, but it enables JavaScript access to the full suite of mobile
device sensors, including accelerometer, gyroscope, magnetometer, and
ambient light sensor. These sensors enable JavaScript to determine
which direction a user is facing or to detect when the user shakes
their phone, for example.</p>
</li>
</ul>
</div></section>













<section data-type="sect2" class="less_space pagebreak-before" data-pdf-bookmark="15.15.9 Binary APIs"><div class="sect2" id="idm46198490560120">
<h2>15.15.9 Binary APIs</h2>

<p>Typed<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="binary APIs" id="idm46198490558392"></a><a data-type="indexterm" data-primary="binary data, processing" id="idm46198490557080"></a> arrays, ArrayBuffers, and the DataView class (all covered in
<a data-type="xref" href="ch11.html#typedarrays">§11.2</a>) enable JavaScript to work with binary data. As
described earlier in this chapter, the <code>fetch()</code> API enables JavaScript
programs to load binary data over the network. Another source of binary
data is files from the user’s local filesystem. For security reasons,
JavaScript can’t just read local files. But if the user selects a file
for upload (using an <code>&lt;input type="file&gt;</code> form element) or uses
drag-and-drop to drop a file into your web application, then JavaScript
can access that file as a File object.</p>

<p>File is a subclass of Blob, and as such, it is an opaque representation
of a chunk of data. You can use a FileReader class to asynchronously get
the content of a file as an ArrayBuffer or string. (In some browsers, you
can skip the FileReader and instead use the Promise-based <code>text()</code> and
<code>arrayBuffer()</code> methods defined by the Blob class, or the <code>stream()</code>
method for streaming access to the file contents.)</p>

<p>When working with binary data, especially streaming binary data, you may
need to decode bytes into text or encode text as bytes. The TextEncoder
and TextDecoder classes help with this task.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.10 Media APIs"><div class="sect2" id="idm46198490551208">
<h2>15.15.10 Media APIs</h2>

<p>The <code>navigator.mediaDevices.getUserMedia()</code> function<a data-type="indexterm" data-primary="navigator.mediaDevices.getUserMedia() function" id="idm46198490549080"></a><a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="media APIs" id="idm46198490548248"></a><a data-type="indexterm" data-primary="media APIs" id="idm46198490547048"></a> allows JavaScript
to request access to the user’s microphone and/or video camera. A
successful request results in a MediaStream object. Video streams<a data-type="indexterm" data-primary="video streams" id="idm46198490546072"></a> can be
displayed in a <code>&lt;video&gt;</code> tag (by setting the <code>srcObject</code> property to the
stream). Still frames of the video can be captured into an offscreen
<code>&lt;canvas&gt;</code> with the<a data-type="indexterm" data-primary="Canvas API" data-secondary="drawImage() function" id="idm46198490543992"></a><a data-type="indexterm" data-primary="drawImage() function" id="idm46198490542984"></a> canvas <code>drawImage()</code> function resulting in a
relatively low-resolution photograph.  Audio and video streams returned
by <code>getUserMedia()</code> can be recorded and encoded to a Blob with a
MediaRecorder object.</p>

<p>The<a data-type="indexterm" data-primary="WebRTC API" id="idm46198490541032"></a> more complex WebRTC API enables the transmission and reception of
MediaStreams over the network, enabling peer-to-peer video conferencing,
for example.</p>
</div></section>













<section data-type="sect2" data-pdf-bookmark="15.15.11 Cryptography and Related APIs"><div class="sect2" id="idm46198490539768">
<h2>15.15.11 Cryptography and Related APIs</h2>

<p>The <code>crypto</code> property<a data-type="indexterm" data-primary="web browser host environment" data-secondary="web platform features to investigate" data-tertiary="cryptography and security APIs" id="idm46198490537800"></a><a data-type="indexterm" data-primary="cryptography" id="idm46198490536520"></a><a data-type="indexterm" data-primary="security" data-secondary="cryptography APIs" id="idm46198490535848"></a><a data-type="indexterm" data-primary="getRandomValues() method" id="idm46198490534904"></a><a data-type="indexterm" data-primary="pseudorandom numbers" id="idm46198490534216"></a> of the Window object exposes a <code>getRandomValues()</code>
method for cryptographically secure pseudorandom numbers. Other methods for
encryption, decryption, key generation, digital signatures, and so on are
available through <code>crypto.subtle</code>. The name of this property is a
warning to everyone who uses these methods that properly using
cryptographic algorithms is difficult and that you should not use those
methods unless you really know what you are doing. Also, the methods
of <code>crypto.subtle</code> are only available to JavaScript code running
within documents that were loaded over a secure HTTPS connection.</p>

<p>The<a data-type="indexterm" data-primary="Credential Management API" id="idm46198490531336"></a><a data-type="indexterm" data-primary="Web Authentication API" id="idm46198490530584"></a> Credential Management API and the Web Authentication API allow
JavaScript to generate, store, and retrieve public key (and other types
of) credentials and enables account creation and login without
passwords. The JavaScript API consists primarily of the functions
<code>navigator.credentials.create()</code> and <code>navigator.credentials.get()</code>, but
substantial infrastructure is required on the server side to make these
methods work. These APIs are not universally supported yet, but have the
potential to revolutionize the way we log in to websites.</p>

<p>The<a data-type="indexterm" data-primary="Payment Request API" id="idm46198490528040"></a> Payment Request API adds browser support for making credit card
payments on the web. It allows users to store their payment details
securely in the browser so that they don’t have to type their credit
card number each time they make a purchase. Web applications that want
to request a payment create a PaymentRequest object and call its
<code>show()</code> method to display the request to the user.</p>
</div></section>





</div></section>







<div data-type="footnotes"><p data-type="footnote" id="idm46198510985832"><sup><a href="ch15.html#idm46198510985832-marker">1</a></sup> Previous editions of this book had an extensive reference section covering the JavaScript standard library and web APIs. It was removed in the seventh edition because MDN has made it obsolete: today, it is quicker to look something up on MDN than it is to flip through a book, and my former colleagues at MDN do a better job at keeping their online documentation up to date than this book ever could.</p><p data-type="footnote" id="idm46198510122904"><sup><a href="ch15.html#idm46198510122904-marker">2</a></sup> Some sources, including the HTML specification, make a technical distinction between handlers and listeners, based on the way in which they are registered. In this book, we treat the two terms as synonyms.</p><p data-type="footnote" id="idm46198510064168"><sup><a href="ch15.html#idm46198510064168-marker">3</a></sup> If you have used the React framework to create client-side user interfaces, this may surprise you. React makes a number of minor changes to the client-side event model, and one of them is that in React, event handler property names are written in camelCase: <code>onClick</code>, <code>onMouseOver</code>, and so on. When working with the web platform natively, however, the event handler properties are written entirely in lowercase.</p><p data-type="footnote" id="idm46198505802920"><sup><a href="ch15.html#idm46198505802920-marker">4</a></sup> The custom element specification allows subclassing of <code>&lt;button&gt;</code> and other specific element classes, but this is not supported in Safari and a different syntax is required to use a custom element that extends anything other than HTMLElement.</p></div></div></section></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="/library/view/javascript-the-definitive/9781491952016/ch14.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Metaprogramming</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="/library/view/javascript-the-definitive/9781491952016/ch16.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">Server-Side JavaScript with Node</div>
        </a>
    
  
  </div>


        
    </section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    



        
      </div>
      
        


<footer class="pagefoot t-pagefoot">
  <a href="#" class="icon-up" onclick="window.Appcues.track('JumpTop_HeronBook')"><div class="visuallyhidden">Back to top</div></a>
  <ul class='js-footer-nav'>
  
    
    <li><a href="/u/preferences/">Settings</a></li>
    
    <li><a href="/public/support/">Support</a></li>
    
    <li><a href="/accounts/logout/">Sign Out</a></li>
    
  
  
  </ul>
  <span class="copyright">&#169; 2020 <a href="/" target="_blank">O'Reilly Media, Inc</a>.</span>
  
    
    <a href="https://www.oreilly.com/terms/">Terms of Service</a> 
     / 
    
    <a href="/privacy">Privacy Policy</a> 
    
    
  
</footer>
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":282,"applicationID":"172641827,79672898,93931619","agent":"","beacon":"bam.nr-data.net","queueTime":2,"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU="}</script>

      
    
    <script src="/jsi18n/web/" charset="utf-8"></script>
    <script src="/library/jsi18n/appcache/" charset="utf-8"></script>
  </body>
</html>
